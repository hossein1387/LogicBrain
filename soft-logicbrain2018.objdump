
soft-logicbrain2018.elf:     file format elf32-littlenios2
soft-logicbrain2018.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x4000019c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x40000000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x4000019c paddr 0x4000019c align 2**12
         filesz 0x00014fa0 memsz 0x00014fa0 flags r-x
    LOAD off    0x0001713c vaddr 0x4001513c paddr 0x40016cc8 align 2**12
         filesz 0x00001b8c memsz 0x00001b8c flags rw-
    LOAD off    0x00019854 vaddr 0x40018854 paddr 0x40018854 align 2**12
         filesz 0x00000000 memsz 0x0004ba78 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  40000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014920  4000019c  4000019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000680  40014abc  40014abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b8c  4001513c  40016cc8  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0004ba78  40018854  40018854  00019854  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_FPGA 00000000  000001bc  000001bc  00018cc8  2**0
                  CONTENTS
  7 .mem_if_ddr3_emif_FPGA 00000000  400642cc  400642cc  00018cc8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018cc8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013f8  00000000  00000000  00018cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000334b0  00000000  00000000  0001a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000e0c7  00000000  00000000  0004d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010225  00000000  00000000  0005b65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000036e8  00000000  00000000  0006b884  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000704c  00000000  00000000  0006ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001bc12  00000000  00000000  00075fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00091bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001d28  00000000  00000000  00091c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000993ec  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000993ef  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000993fb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000993fc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000993fd  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00099401  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00099405  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000e  00000000  00000000  00099409  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000e  00000000  00000000  00099417  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000e  00000000  00000000  00099425  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00099433  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001c  00000000  00000000  0009943d  2**0
                  CONTENTS, READONLY
 30 .jdi          0000965d  00000000  00000000  00099459  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0036a267  00000000  00000000  000a2ab6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
4000019c l    d  .text	00000000 .text
40014abc l    d  .rodata	00000000 .rodata
4001513c l    d  .rwdata	00000000 .rwdata
40018854 l    d  .bss	00000000 .bss
000001bc l    d  .onchip_memory2_FPGA	00000000 .onchip_memory2_FPGA
400642cc l    d  .mem_if_ddr3_emif_FPGA	00000000 .mem_if_ddr3_emif_FPGA
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../soft-logicbrain2018_bsp//obj/HAL/src/crt0.o
400001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Image.cpp
00000000 l    df *ABS*	00000000 NN.cpp
00000000 l    df *ABS*	00000000 NNLayer.cpp
40016bfc l     O .rwdata	00000004 _ZZ6MYrandvE4seed
00000000 l    df *ABS*	00000000 VGA.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
400022bc l     F .text	00000058 _ZL12read_sleb128PKhPl
40002314 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
4000239c l     F .text	000000a0 _ZL21size_of_encoded_valueh
4000243c l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
4000264c l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
400026a0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
40002748 l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
400027d0 l     F .text	000001d0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
400029a0 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
40018858 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 del_opv.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
40003c34 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
40018864 l     O .bss	00000004 _ZL14emergency_used
400639a4 l     O .bss	00000800 _ZL16emergency_buffer
40018860 l     O .bss	00000004 _ZL15dependents_used
400638a4 l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
40018868 l     O .bss	00000004 _ZN12_GLOBAL__N_113__new_handlerE
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 s_log2.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
40016c2c l     O .rwdata	00000008 ln2_hi
40016c34 l     O .rwdata	00000008 ln2_lo
40016c3c l     O .rwdata	00000008 two54
40016c44 l     O .rwdata	00000008 Lg1
40016c4c l     O .rwdata	00000008 Lg2
40016c54 l     O .rwdata	00000008 Lg3
40016c5c l     O .rwdata	00000008 Lg4
40016c64 l     O .rwdata	00000008 Lg5
40016c6c l     O .rwdata	00000008 Lg6
40016c74 l     O .rwdata	00000008 Lg7
40016c7c l     O .rwdata	00000008 zero
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
40005080 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
4000794c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
4001886c l     O .bss	00000004 fc_static
40007a64 l     F .text	000000c0 _Unwind_RaiseException_Phase2
40007b24 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
4001513c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
40014f86 l     O .rodata	00000010 zeroes.4181
40014f96 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
4000b168 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
4000cce8 l     F .text	00000008 __fp_lock
4000ccf0 l     F .text	00000008 __fp_unlock
4000cd04 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
40015988 l     O .rwdata	00000020 lc_ctype_charset
40015968 l     O .rwdata	00000020 lc_message_charset
400159a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
40014fc4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
4000f894 l     F .text	000000fc __sprint_r.part.0
400150f8 l     O .rodata	00000010 blanks.4125
400150e8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
400122b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
400123d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
40012434 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
40012554 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
40012648 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
400127c8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
400128ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
40012a88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40016cb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
40012e80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40012fc8 l     F .text	00000038 alt_dev_reg
40015b88 l     O .rwdata	00001060 jtag_uart_FPGA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
400132b8 l     F .text	00000204 altera_avalon_jtag_uart_irq
400134bc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
40013adc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
40013d5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
40014208 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
40014340 l     F .text	00000050 alt_get_errno
40014390 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
40003e94 g     F .text	00000044 __cxa_free_exception
40008894 g     F .text	00000018 putchar
40003d98 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
4000eed8 g     F .text	00000074 _mprec_log10
400035d4 g     F .text	00000018 _ZSt10unexpectedv
4000efc4 g     F .text	0000008c __any_on
40011354 g     F .text	00000054 _isatty_r
40014fd0 g     O .rodata	00000028 __mprec_tinytens
400129d0 g     F .text	00000078 alt_main
400088ac g     F .text	000000b8 _puts_r
400641cc g     O .bss	00000100 alt_irq
40003fd4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
40003b44 g     F .text	00000094 _Znaj
400113a8 g     F .text	0000005c _lseek_r
400040c4 g     F .text	000001f4 log
40007be0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
40016cc8 g       *ABS*	00000000 __flash_rwdata_start
4000162c g     F .text	00000038 _Z6MYrandv
40006314 g     F .text	00000084 .hidden __eqdf2
40003d08 g     F .text	00000084 __cxa_rethrow
40016bf4  w    O .rwdata	00000008 _ZTI7NNLayer
40007b6c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
40003610 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
40007bd0 g     F .text	00000010 .hidden _Unwind_GetIP
400642cc g       *ABS*	00000000 __alt_heap_start
40008cec g     F .text	00000058 _kill_r
40003974 g     F .text	00000010 _ZNSt9bad_allocD2Ev
40008850 g     F .text	0000003c printf
40011460 g     F .text	0000009c _wcrtomb_r
40008ab0 g     F .text	00000084 _signal_r
4000f830 g     F .text	0000005c __sseek
4000d038 g     F .text	00000010 __sinit
40010d28 g     F .text	00000154 __swbuf_r
40003f6c g     F .text	00000040 __cxa_free_dependent_exception
40003634 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
4000dab0 g     F .text	0000007c _setlocale_r
40014c40  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
4000cea4 g     F .text	00000064 __sfmoreglue
40012a68 g     F .text	00000020 __malloc_unlock
40003fd4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
40003b24 g     F .text	00000020 _ZSt18uncaught_exceptionv
40004028 g     F .text	00000020 __cxa_deleted_virtual
40014b04  w    O .rodata	00000010 _ZTV2NN
4000df68 g     F .text	0000015c memmove
40001b04 g     F .text	00000048 _ZN7NNLayerD1Ev
40003fac g     F .text	00000004 _ZNSt9exceptionD2Ev
4000d020 g     F .text	00000018 _cleanup
4000e0c4 g     F .text	000000a8 _Balloc
400001e8 g     F .text	00000038 _ZN5ImageC2Ev
40000220 g     F .text	00000048 _ZN5ImageC2Eii
40006398 g     F .text	000000e0 .hidden __gtdf2
40014dbc  w    O .rodata	00000014 _ZTVSt13bad_exception
40007ee8 g     F .text	00000010 __errno
00000000 g     F .entry	0000001c __reset
40002284  w    F .text	00000038 _ZN3VGA15send_to_displayEv
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_FPGA
40000834 g     F .text	00000304 _ZN5Image8apply_NNEP2NNii
40007c1c g     F .text	00000008 .hidden _Unwind_GetRegionStart
400014a0 g     F .text	00000058 _ZN7NNLayerC2Ev
40000000 g       *ABS*	00000000 __flash_exceptions_start
400112fc g     F .text	00000058 _fstat_r
4001887c g     O .bss	00000004 errno
40001ec4 g     F .text	00000068 _ZN3VGA3clrEv
4000f7ac g     F .text	00000008 __seofread
40007df8 g     F .text	00000074 .hidden _Unwind_Backtrace
40018854 g     O .bss	00000004 pVGA
40018890 g     O .bss	00000004 alt_argv
4001ebe8 g       *ABS*	00000000 _gp
40012534 g     F .text	00000020 getpid
40001548 g     F .text	000000e4 _ZN7NNLayer4initEii
40002fd4 g     F .text	00000234 __cxa_call_unexpected
400039b8 g     F .text	00000008 __cxa_get_exception_ptr
40000d88 g     F .text	00000218 _ZN2NNC1Ei
40015a08 g     O .rwdata	00000180 alt_fd_list
4000888c g     F .text	00000008 _putchar_r
40007d0c g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
40007b9c g     F .text	00000018 .hidden _Unwind_GetCFA
400035ec g     F .text	00000014 _ZSt13set_terminatePFvvE
400145d4 g     F .text	00000090 alt_find_dev
4000de30 g     F .text	00000138 memcpy
40001238 g     F .text	00000130 _ZN2NN17getMaxOutputValueEv
40003ed8 g     F .text	00000094 __cxa_allocate_dependent_exception
4000ccf8 g     F .text	0000000c _cleanup_r
40003298 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
400075d4 g     F .text	000000d0 .hidden __floatsidf
400142c8 g     F .text	00000078 alt_io_redirect
40006478 g     F .text	000000e0 .hidden __ltdf2
40014abc g       *ABS*	00000000 __DTOR_END__
400032b0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
40008964 g     F .text	00000014 puts
40000720 g     F .text	0000004c _ZN5Image12source_pixelEii
40000cbc g     F .text	00000050 _ZN5ImageD1Ev
40004ec0 g     F .text	00000104 __fpclassifyd
4000ee34 g     F .text	000000a4 __ratio
40000b38 g     F .text	000000d8 _ZN5Image13printToScreenEiiP3VGA
40010d04 g     F .text	00000024 __vfiprintf_internal
4000196c g     F .text	00000198 _ZN7NNLayer12make_ternaryEv
40000fe8 g     F .text	00000038 _ZN2NND0Ev
400136b8 g     F .text	0000020c altera_avalon_jtag_uart_read
40007f30 g     F .text	00000014 malloc
40008824 g     F .text	0000002c _printf_r
4000519c g     F .text	00000008 .hidden __udivsi3
400125a4 g     F .text	000000a4 isatty
40008b34 g     F .text	000000bc _raise_r
40015020 g     O .rodata	000000c8 __mprec_tens
4000db2c g     F .text	0000000c __locale_charset
4001482c g     F .text	0000008c alt_icache_flush
40018878 g     O .bss	00000004 __malloc_top_pad
40008d44 g     F .text	00000004 _getpid_r
40016c98 g     O .rwdata	00000004 __mb_cur_max
4000db5c g     F .text	0000000c _localeconv_r
4000e4c4 g     F .text	0000003c __i2b
4000d49c g     F .text	000004a4 __sfvwrite_r
40003360 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
40008bf0 g     F .text	000000a8 __sigtramp_r
400089f4 g     F .text	00000054 _sbrk_r
40014cf0  w    O .rodata	00000020 _ZTVSt9type_info
40011404 g     F .text	0000005c _read_r
40003fb4 g     F .text	0000000c _ZNKSt9exception4whatEv
40016cb0 g     O .rwdata	00000004 alt_max_fd
4001100c g     F .text	00000100 _fclose_r
40014cc0  w    O .rodata	0000000c _ZTISt9bad_alloc
4000ccb8 g     F .text	00000030 fflush
40018874 g     O .bss	00000004 __malloc_max_sbrked_mem
400076a4 g     F .text	00000110 .hidden __extendsfdf2
400051ac g     F .text	0000089c .hidden __adddf3
40014c74  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
4000ebdc g     F .text	0000011c __b2d
40011c80 g     F .text	00000590 .hidden __umoddi3
400128fc g     F .text	000000d4 lseek
40016c84 g     O .rwdata	00000004 __fdlib_version
400032f4 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
400034e8 g     F .text	00000004 _ZdlPv
40016c88 g     O .rwdata	00000004 _global_impure_ptr
40000268 g     F .text	000000a0 _ZN5Image4initEii
4000f1b8 g     F .text	000005a0 _realloc_r
400642cc g       *ABS*	00000000 __bss_end
40003ff8 g     F .text	00000010 _ZSt15get_new_handlerv
40014118 g     F .text	000000f0 alt_iic_isr_register
400188a4 g     O .bss	0004b000 display
40012d7c g     F .text	00000104 alt_tick
40007b54 g     F .text	00000018 .hidden _Unwind_SjLj_Register
400116c0 g     F .text	000005c0 .hidden __udivdi3
40011120 g     F .text	00000184 _fputwc_r
40014ff8 g     O .rodata	00000028 __mprec_bigtens
4000e2a8 g     F .text	00000104 __s2b
40007ed0 g     F .text	00000018 abort
40016be8  w    O .rwdata	00000008 _ZTI2NN
40012210 g     F .text	000000a4 .hidden __floatunsidf
4000e984 g     F .text	00000060 __mcmp
40003a74 g     F .text	000000b0 __cxa_end_catch
4000d058 g     F .text	00000018 __fp_lock_all
400140cc g     F .text	0000004c alt_ic_irq_enabled
40003fb0 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
40012ce4 g     F .text	00000098 alt_alarm_stop
400188a0 g     O .bss	00000004 alt_irq_active
400035ac g     F .text	00000018 _ZSt9terminatev
000000ec g     F .exceptions	000000d0 alt_irq_handler
400159e0 g     O .rwdata	00000028 alt_dev_null
40000fa0 g     F .text	00000048 _ZN2NND2Ev
40003fdc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
40000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr3_emif_FPGA
4000176c g     F .text	000001a8 _ZN7NNLayer11random_initEii
40014be4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
40013d18 g     F .text	00000044 alt_dcache_flush_all
4000e3ac g     F .text	00000068 __hi0bits
40016c0c  w    O .rwdata	00000008 _ZTISt9exception
4000754c g     F .text	00000088 .hidden __fixdfsi
40016cc8 g       *ABS*	00000000 __ram_rwdata_end
40003d8c g     F .text	00000004 _ZNSt9type_infoD1Ev
40016ca8 g     O .rwdata	00000008 alt_dev_list
40003fdc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
40012ed0 g     F .text	000000f8 write
4000f050 g     F .text	000000a0 _putc_r
40003da8 g     F .text	00000004 _ZNSt9type_infoD0Ev
4001513c g       *ABS*	00000000 __ram_rodata_end
40012484 g     F .text	000000b0 fstat
400014f8 g     F .text	00000050 _ZN7NNLayerC1Eii
40012698 g     F .text	00000130 kill
40006478 g     F .text	000000e0 .hidden __ledf2
40000d0c  w    F .text	0000007c _ZN3VGA15Set_Pixel_ColorEjjj
4000e6fc g     F .text	00000140 __pow5mult
4000f9a8 g     F .text	0000135c ___vfiprintf_internal_r
40018888 g     O .bss	00000004 __nlocale_changed
400051a4 g     F .text	00000008 .hidden __umodsi3
40003da0 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
40003600 g     F .text	00000010 _ZSt13get_terminatev
400642cc g       *ABS*	00000000 end
40007de0 g     F .text	00000018 .hidden _Unwind_DeleteException
40000c10 g     F .text	000000ac _ZN5Image5printEv
400131f4 g     F .text	000000c4 altera_avalon_jtag_uart_init
40003418 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
40014abc g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
40013b50 g     F .text	00000088 alt_avalon_timer_sc_init
40007e6c g     F .text	00000064 .hidden __clzsi2
40003220 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
400138c4 g     F .text	00000218 altera_avalon_jtag_uart_write
4000d048 g     F .text	00000004 __sfp_lock_acquire
40014d44  w    O .rodata	00000012 _ZTSSt13bad_exception
400013e0 g     F .text	000000c0 _ZN2NN12printOutputsEv
4000dd48 g     F .text	000000e8 memchr
40008e84 g     F .text	00001ffc ___vfprintf_internal_r
4000d1ac g     F .text	000002f0 _free_r
4000db38 g     F .text	00000010 __locale_mb_cur_max
4000afd4 g     F .text	00000194 __call_exitprocs
40018884 g     O .bss	00000004 __mlocale_changed
40016c90 g     O .rwdata	00000004 __malloc_sbrk_base
4000019c g     F .text	0000004c _start
40018898 g     O .bss	00000004 _alt_tick_rate
40014ce0  w    O .rodata	0000000d _ZTSSt9type_info
40003968 g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
40008990 g     F .text	00000064 rand
40004008 g     F .text	00000020 __cxa_pure_virtual
4000e83c g     F .text	00000148 __lshift
40014ccc  w    O .rodata	00000014 _ZTVSt9bad_alloc
4001889c g     O .bss	00000004 _alt_nticks
40008cac g     F .text	0000001c signal
40012ad8 g     F .text	000000fc read
40013034 g     F .text	0000005c alt_sys_init
40000cbc g     F .text	00000050 _ZN5ImageD2Ev
40014948 g     F .text	00000114 __register_exitproc
40014cb0  w    O .rodata	0000000d _ZTSSt9bad_alloc
40003678 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
4000e500 g     F .text	000001fc __multiply
40013564 g     F .text	00000068 altera_avalon_jtag_uart_close
4001513c g       *ABS*	00000000 __ram_rwdata_start
40007c3c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
40014abc g       *ABS*	00000000 __ram_rodata_start
400641a4 g     O .bss	00000028 __malloc_current_mallinfo
40007d50 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
4000ecf8 g     F .text	0000013c __d2b
40014de4  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
40003d8c g     F .text	00000004 _ZNSt9type_infoD2Ev
40003fe0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
40003874 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
40013090 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
40014778 g     F .text	000000b4 alt_get_fd
40002244  w    F .text	00000040 _ZN3VGAC2Eii
40016c1c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
40010ef4 g     F .text	00000054 _close_r
40001b4c g     F .text	00000038 _ZN7NNLayerD0Ev
40016bf0  w    O .rwdata	00000004 _ZTS2NN
400148cc g     F .text	0000007c memcmp
40013150 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
400642cc g       *ABS*	00000000 __alt_stack_base
400131a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
40003984 g     F .text	00000034 _ZNSt9bad_allocD0Ev
40003634 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
4000aea4 g     F .text	00000130 __swsetup_r
40007d94 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
40005a48 g     F .text	000008cc .hidden __divdf3
4000cf08 g     F .text	00000118 __sfp
4000ef4c g     F .text	00000078 __copybits
40003d90 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
40015560 g     O .rwdata	00000408 __malloc_av_
4000d054 g     F .text	00000004 __sinit_lock_release
40006558 g     F .text	00000724 .hidden __muldf3
4000f758 g     F .text	00000054 __sread
40014da8  w    O .rodata	00000014 _ZTVSt9exception
40003fd8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
40014664 g     F .text	00000114 alt_find_file
40013dac g     F .text	000000a4 alt_dev_llist_insert
40012a48 g     F .text	00000020 __malloc_lock
40012c34 g     F .text	000000b0 sbrk
40014c14  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
40003c78 g     F .text	00000090 __cxa_throw
4000ca90 g     F .text	00000228 _fflush_r
40007c00 g     F .text	00000010 .hidden _Unwind_SetIP
40010f48 g     F .text	000000c4 _calloc_r
40001bc0 g     F .text	00000124 _ZN7NNLayer9propagateEPs
40018854 g       *ABS*	00000000 __bss_start
40008700 g     F .text	00000124 memset
40001f2c g     F .text	00000318 main
40018894 g     O .bss	00000004 alt_envp
40018870 g     O .bss	00000004 __malloc_max_total_mem
400130f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
40010e7c g     F .text	0000001c __swbuf
40008978 g     F .text	00000018 srand
40003208 g     F .text	0000000c __cxa_get_globals_fast
40000480 g     F .text	0000004c _ZN5Image17Get_Fractal_ColorEi
40000fa0 g     F .text	00000048 _ZN2NND1Ev
4000f88c g     F .text	00000008 __sclose
40003c30 g     F .text	00000004 _ZdaPv
40004fc4 g     F .text	00000068 matherr
80000000 g       *ABS*	00000000 __alt_heap_limit
40014b58  w    O .rodata	00000010 _ZTV7NNLayer
4001110c g     F .text	00000014 fclose
400077b4 g     F .text	00000198 .hidden __truncdfsf2
4000b368 g     F .text	00001728 _dtoa_r
40007f58 g     F .text	000007a8 _malloc_r
400115d4 g     F .text	00000030 __ascii_wctomb
40003fc0 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
40016cb4 g     O .rwdata	00000004 alt_errno
40008cc8 g     F .text	00000010 _init_signal
40014c08  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
4000d940 g     F .text	000000b8 _fwalk
40003fb0 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
400004cc g     F .text	00000254 _ZN5Image12make_fractalEv
4000f0f0 g     F .text	000000c8 putc
400050ec g     F .text	00000054 .hidden __divsi3
4000d088 g     F .text	00000124 _malloc_trim_r
40014abc g       *ABS*	00000000 __CTOR_END__
40008d48 g     F .text	000000a4 strcmp
40014abc g       *ABS*	00000000 __flash_rodata_start
40014dd0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
40014abc g       *ABS*	00000000 __DTOR_LIST__
40001b04 g     F .text	00000048 _ZN7NNLayerD2Ev
40006314 g     F .text	00000084 .hidden __nedf2
40013000 g     F .text	00000034 alt_irq_init
40012bd4 g     F .text	00000060 alt_release_fd
40001664 g     F .text	00000068 _ZN7NNLayer15rand_FloatRangeEff
40003644 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
40002244  w    F .text	00000040 _ZN3VGAC1Eii
40014e3c g     O .rodata	00000100 .hidden __clz_tab
40018880 g     O .bss	00000004 _PathLocale
400148b8 g     F .text	00000014 atexit
40001088 g     F .text	00000078 _ZN2NN9propagateEPs
40010e98 g     F .text	0000005c _write_r
4000039c g     F .text	000000e4 _ZN5Image17Get_Fractal_LevelEff
4000db68 g     F .text	0000001c setlocale
40007c34 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
40003bd8 g     F .text	00000058 __cxa_call_terminate
40016c8c g     O .rwdata	00000004 _impure_ptr
40016c14  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
4001888c g     O .bss	00000004 alt_argc
40013eac g     F .text	0000005c _do_dtors
4000db54 g     F .text	00000008 __locale_cjk_lang
400042b8 g     F .text	00000c08 __ieee754_log
40001ce4 g     F .text	00000090 _ZN7NNLayer16print_activationEv
40000308 g     F .text	00000094 _ZN5Image9randomizeEv
400001e8 g     F .text	00000038 _ZN5ImageC1Ev
40003624 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
4000eb7c g     F .text	00000060 __ulp
40007c24 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
4000d070 g     F .text	00000018 __fp_unlock_all
40016ca0 g     O .rwdata	00000008 alt_fs_list
40014d84  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
400016cc g     F .text	000000a0 _ZN7NNLayer16makeTernaryExtraEf
40007c10 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
40001020 g     F .text	00000068 _ZN2NN12make_ternaryEv
400039c0 g     F .text	000000b4 __cxa_begin_catch
400032b0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
4000502c g     F .text	00000054 nan
400035c4 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00000020 g       *ABS*	00000000 __ram_exceptions_start
4000db84 g     F .text	0000000c localeconv
40003fd0 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
40014b68  w    O .rodata	00000009 _ZTS7NNLayer
40016c00 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
40013f38 g     F .text	00000050 alt_ic_isr_register
40003df0 g     F .text	000000a4 __cxa_allocate_exception
4000076c g     F .text	000000c8 _ZN5Image7make_bwEv
40014c68  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
40003fe4 g     F .text	00000014 _ZSt15set_new_handlerPFvvE
40016cc8 g       *ABS*	00000000 _edata
400014a0 g     F .text	00000058 _ZN7NNLayerC1Ev
400642cc g       *ABS*	00000000 _end
40016c24 g     O .rwdata	00000001 _ZSt7nothrow
40002ad4 g     F .text	00000500 __gxx_personality_sj0
000001bc g       *ABS*	00000000 __ram_exceptions_end
400135cc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
40003fac g     F .text	00000004 _ZNSt9exceptionD1Ev
40014028 g     F .text	000000a4 alt_ic_irq_disable
4000f7b4 g     F .text	0000007c __swrite
400038f8 g     F .text	00000070 _Znwj
40016c94 g     O .rwdata	00000004 __malloc_trim_threshold
400145b4 g     F .text	00000020 altera_nios2_qsys_irq_init
4000db48 g     F .text	0000000c __locale_msgcharset
40007ef8 g     F .text	00000038 exit
40007bb4 g     F .text	0000001c .hidden _Unwind_SetGR
4000d9f8 g     F .text	000000b8 _fwalk_reent
400037d8 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
40004048 g     F .text	0000007c log2
4000e9e4 g     F .text	00000198 __mdiff
400034ec g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
40005140 g     F .text	0000005c .hidden __modsi3
40003974 g     F .text	00000010 _ZNSt9bad_allocD1Ev
80000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
4000d04c g     F .text	00000004 __sfp_lock_release
40014d58  w    O .rodata	0000000c _ZTISt13bad_exception
40001d74 g     F .text	00000150 _ZN7NNLayer5printEv
40012400 g     F .text	00000034 _exit
40013bd8 g     F .text	00000140 alt_alarm_start
40001914 g     F .text	00000058 _Z13vector_weighti
40011660 g     F .text	00000060 .hidden __muldi3
40007b80 g     F .text	0000001c .hidden _Unwind_GetGR
40003214 g     F .text	0000000c __cxa_get_globals
4000db90 g     F .text	000001b8 __smakebuf_r
40016c28 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
40001368 g     F .text	00000078 _ZN2NN5printEv
40008dec g     F .text	00000098 strlen
40008a48 g     F .text	00000068 _init_signal_r
40016c04  w    O .rwdata	00000008 _ZTISt9type_info
4001445c g     F .text	00000158 open
40006398 g     F .text	000000e0 .hidden __gedf2
40014d34  w    O .rodata	0000000d _ZTSSt9exception
40016c9c g     O .rwdata	00000004 __wctomb
40003fcc g     F .text	00000004 _ZNSt9exceptionD0Ev
40000d88 g     F .text	00000218 _ZN2NNC2Ei
4000f990 g     F .text	00000018 __sprint_r
40013f08 g     F .text	00000030 alt_icache_flush_all
40007c2c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
40016cc4 g     O .rwdata	00000004 alt_priority_mask
40013f88 g     F .text	000000a0 alt_ic_irq_enable
4000ae80 g     F .text	00000024 __vfprintf_internal
40000220 g     F .text	00000048 _ZN5ImageC1Eii
40011604 g     F .text	0000005c _wctomb_r
400014f8 g     F .text	00000050 _ZN7NNLayerC2Eii
40006c7c g     F .text	000008d0 .hidden __subdf3
4000e414 g     F .text	000000b0 __lo0bits
40016cbc g     O .rwdata	00000008 alt_alarm_list
40013e50 g     F .text	0000005c _do_ctors
40008cd8 g     F .text	00000014 __sigtramp
400114fc g     F .text	000000d8 wcrtomb
40012304 g     F .text	000000d0 close
40014d64  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
4001282c g     F .text	00000080 alt_load
40003dac g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
40001100 g     F .text	00000138 _ZN2NN17getMaxOutputIndexEv
40001b84 g     F .text	0000003c _ZN7NNLayer3fctEs
400112a4 g     F .text	00000058 fputwc
40008c98 g     F .text	00000014 raise
40007f44 g     F .text	00000014 free
4000d050 g     F .text	00000004 __sinit_lock_acquire
4000e194 g     F .text	00000114 __multadd
400032c0 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
4000e16c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0x80000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00500034 	movhi	at,16384
    ori r1, r1, %lo(_start)
  14:	08406714 	ori	at,at,412
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	009001b4 	movhi	r2,16390
 130:	10907304 	addi	r2,r2,16844
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	009001b4 	movhi	r2,16390
 148:	10907304 	addi	r2,r2,16844
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0x8000011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0x80000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

4000019c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
4000019c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
400001a0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
400001a4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
400001a8:	00bffd16 	blt	zero,r2,400001a0 <__alt_data_end+0xc00001a0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
400001ac:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
400001b0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
400001b4:	06900074 	movhi	gp,16385
    ori gp, gp, %lo(_gp)
400001b8:	d6bafa14 	ori	gp,gp,60392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
400001bc:	00900074 	movhi	r2,16385
    ori r2, r2, %lo(__bss_start)
400001c0:	10a21514 	ori	r2,r2,34900

    movhi r3, %hi(__bss_end)
400001c4:	00d001b4 	movhi	r3,16390
    ori r3, r3, %lo(__bss_end)
400001c8:	18d0b314 	ori	r3,r3,17100

    beq r2, r3, 1f
400001cc:	10c00326 	beq	r2,r3,400001dc <_start+0x40>

0:
    stw zero, (r2)
400001d0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
400001d4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
400001d8:	10fffd36 	bltu	r2,r3,400001d0 <__alt_data_end+0xc00001d0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
400001dc:	001282c0 	call	4001282c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
400001e0:	00129d00 	call	400129d0 <alt_main>

400001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
400001e4:	003fff06 	br	400001e4 <__alt_data_end+0xc00001e4>

400001e8 <_ZN5ImageC1Ev>:
#include "stdio.h"
#include "io.h"
#include "system.h"


Image::Image() {
400001e8:	defffe04 	addi	sp,sp,-8
400001ec:	df000115 	stw	fp,4(sp)
400001f0:	df000104 	addi	fp,sp,4
400001f4:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	source_array = 0;
400001f8:	e0bfff17 	ldw	r2,-4(fp)
400001fc:	10000215 	stw	zero,8(r2)
	length = 0;
40000200:	e0bfff17 	ldw	r2,-4(fp)
40000204:	10000115 	stw	zero,4(r2)
	height = 0;
40000208:	e0bfff17 	ldw	r2,-4(fp)
4000020c:	10000015 	stw	zero,0(r2)
}
40000210:	e037883a 	mov	sp,fp
40000214:	df000017 	ldw	fp,0(sp)
40000218:	dec00104 	addi	sp,sp,4
4000021c:	f800283a 	ret

40000220 <_ZN5ImageC1Eii>:

Image::Image(int new_length, int new_height) {
40000220:	defffb04 	addi	sp,sp,-20
40000224:	dfc00415 	stw	ra,16(sp)
40000228:	df000315 	stw	fp,12(sp)
4000022c:	df000304 	addi	fp,sp,12
40000230:	e13ffd15 	stw	r4,-12(fp)
40000234:	e17ffe15 	stw	r5,-8(fp)
40000238:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	source_array = 0;
4000023c:	e0bffd17 	ldw	r2,-12(fp)
40000240:	10000215 	stw	zero,8(r2)
	init(new_length, new_height);
40000244:	e13ffd17 	ldw	r4,-12(fp)
40000248:	e17ffe17 	ldw	r5,-8(fp)
4000024c:	e1bfff17 	ldw	r6,-4(fp)
40000250:	00002680 	call	40000268 <_ZN5Image4initEii>
}
40000254:	e037883a 	mov	sp,fp
40000258:	dfc00117 	ldw	ra,4(sp)
4000025c:	df000017 	ldw	fp,0(sp)
40000260:	dec00204 	addi	sp,sp,8
40000264:	f800283a 	ret

40000268 <_ZN5Image4initEii>:

void Image::init(int new_length, int new_height) {
40000268:	defffb04 	addi	sp,sp,-20
4000026c:	dfc00415 	stw	ra,16(sp)
40000270:	df000315 	stw	fp,12(sp)
40000274:	df000304 	addi	fp,sp,12
40000278:	e13ffd15 	stw	r4,-12(fp)
4000027c:	e17ffe15 	stw	r5,-8(fp)
40000280:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	length = new_length;
40000284:	e0bffd17 	ldw	r2,-12(fp)
40000288:	e0fffe17 	ldw	r3,-8(fp)
4000028c:	10c00115 	stw	r3,4(r2)
	height = new_height;
40000290:	e0bffd17 	ldw	r2,-12(fp)
40000294:	e0ffff17 	ldw	r3,-4(fp)
40000298:	10c00015 	stw	r3,0(r2)
	if (source_array != 0) delete[] source_array;
4000029c:	e0bffd17 	ldw	r2,-12(fp)
400002a0:	10800217 	ldw	r2,8(r2)
400002a4:	10000726 	beq	r2,zero,400002c4 <_ZN5Image4initEii+0x5c>
400002a8:	e0bffd17 	ldw	r2,-12(fp)
400002ac:	10800217 	ldw	r2,8(r2)
400002b0:	10000426 	beq	r2,zero,400002c4 <_ZN5Image4initEii+0x5c>
400002b4:	e0bffd17 	ldw	r2,-12(fp)
400002b8:	10800217 	ldw	r2,8(r2)
400002bc:	1009883a 	mov	r4,r2
400002c0:	0003c300 	call	40003c30 <_ZdaPv>
	source_array = new unsigned char [height*length];
400002c4:	e0bffd17 	ldw	r2,-12(fp)
400002c8:	10c00017 	ldw	r3,0(r2)
400002cc:	e0bffd17 	ldw	r2,-12(fp)
400002d0:	10800117 	ldw	r2,4(r2)
400002d4:	1885383a 	mul	r2,r3,r2
400002d8:	1009883a 	mov	r4,r2
400002dc:	0003b440 	call	40003b44 <_Znaj>
400002e0:	1007883a 	mov	r3,r2
400002e4:	e0bffd17 	ldw	r2,-12(fp)
400002e8:	10c00215 	stw	r3,8(r2)
	randomize();
400002ec:	e13ffd17 	ldw	r4,-12(fp)
400002f0:	00003080 	call	40000308 <_ZN5Image9randomizeEv>
}
400002f4:	e037883a 	mov	sp,fp
400002f8:	dfc00117 	ldw	ra,4(sp)
400002fc:	df000017 	ldw	fp,0(sp)
40000300:	dec00204 	addi	sp,sp,8
40000304:	f800283a 	ret

40000308 <_ZN5Image9randomizeEv>:

void Image::randomize() {
40000308:	defffa04 	addi	sp,sp,-24
4000030c:	dfc00515 	stw	ra,20(sp)
40000310:	df000415 	stw	fp,16(sp)
40000314:	dc000315 	stw	r16,12(sp)
40000318:	df000404 	addi	fp,sp,16
4000031c:	e13ffe15 	stw	r4,-8(fp)
	for (int y=0; y<height; y++) {
40000320:	e03ffc15 	stw	zero,-16(fp)
40000324:	00001306 	br	40000374 <_ZN5Image9randomizeEv+0x6c>
		for (int x=0; x<length; x++) {
40000328:	e03ffd15 	stw	zero,-12(fp)
4000032c:	00000a06 	br	40000358 <_ZN5Image9randomizeEv+0x50>
			*source_pixel(x,y) = rand() &0xFF;
40000330:	e13ffe17 	ldw	r4,-8(fp)
40000334:	e17ffd17 	ldw	r5,-12(fp)
40000338:	e1bffc17 	ldw	r6,-16(fp)
4000033c:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
40000340:	1021883a 	mov	r16,r2
40000344:	00089900 	call	40008990 <rand>
40000348:	80800005 	stb	r2,0(r16)
	randomize();
}

void Image::randomize() {
	for (int y=0; y<height; y++) {
		for (int x=0; x<length; x++) {
4000034c:	e0bffd17 	ldw	r2,-12(fp)
40000350:	10800044 	addi	r2,r2,1
40000354:	e0bffd15 	stw	r2,-12(fp)
40000358:	e0bffe17 	ldw	r2,-8(fp)
4000035c:	10800117 	ldw	r2,4(r2)
40000360:	e0fffd17 	ldw	r3,-12(fp)
40000364:	18bff216 	blt	r3,r2,40000330 <__alt_data_end+0xc0000330>
	source_array = new unsigned char [height*length];
	randomize();
}

void Image::randomize() {
	for (int y=0; y<height; y++) {
40000368:	e0bffc17 	ldw	r2,-16(fp)
4000036c:	10800044 	addi	r2,r2,1
40000370:	e0bffc15 	stw	r2,-16(fp)
40000374:	e0bffe17 	ldw	r2,-8(fp)
40000378:	10800017 	ldw	r2,0(r2)
4000037c:	e0fffc17 	ldw	r3,-16(fp)
40000380:	18bfe916 	blt	r3,r2,40000328 <__alt_data_end+0xc0000328>
		for (int x=0; x<length; x++) {
			*source_pixel(x,y) = rand() &0xFF;
		}
	}
}
40000384:	e6ffff04 	addi	sp,fp,-4
40000388:	dfc00217 	ldw	ra,8(sp)
4000038c:	df000117 	ldw	fp,4(sp)
40000390:	dc000017 	ldw	r16,0(sp)
40000394:	dec00304 	addi	sp,sp,12
40000398:	f800283a 	ret

4000039c <_ZN5Image17Get_Fractal_LevelEff>:

int Image::Get_Fractal_Level(float newRe, float newIm) {
4000039c:	defff504 	addi	sp,sp,-44
400003a0:	df000a15 	stw	fp,40(sp)
400003a4:	df000a04 	addi	fp,sp,40
400003a8:	e13ffd15 	stw	r4,-12(fp)
400003ac:	e17ffe15 	stw	r5,-8(fp)
400003b0:	e1bfff15 	stw	r6,-4(fp)
	float cRe = -0.78;
400003b4:	00afd234 	movhi	r2,48968
400003b8:	10ab8504 	addi	r2,r2,-20972
400003bc:	e0bff715 	stw	r2,-36(fp)
	float cIm = 0.158;
400003c0:	008f88b4 	movhi	r2,15906
400003c4:	10b2b044 	addi	r2,r2,-13631
400003c8:	e0bff815 	stw	r2,-32(fp)
    int i;

    for(i = 0; i < 63; i++) {
400003cc:	e03ff615 	stw	zero,-40(fp)
400003d0:	00002306 	br	40000460 <_ZN5Image17Get_Fractal_LevelEff+0xc4>
        float oldRe = newRe;
400003d4:	e0bffe17 	ldw	r2,-8(fp)
400003d8:	e0bff915 	stw	r2,-28(fp)
        float oldIm = newIm;
400003dc:	e0bfff17 	ldw	r2,-4(fp)
400003e0:	e0bffa15 	stw	r2,-24(fp)
        float sqRe = newRe*newRe;
400003e4:	e0fffe17 	ldw	r3,-8(fp)
400003e8:	e0bffe17 	ldw	r2,-8(fp)
400003ec:	1885ff32 	custom	252,r2,r3,r2
400003f0:	e0bffb15 	stw	r2,-20(fp)
        float sqIm = newIm*newIm;
400003f4:	e0ffff17 	ldw	r3,-4(fp)
400003f8:	e0bfff17 	ldw	r2,-4(fp)
400003fc:	1885ff32 	custom	252,r2,r3,r2
40000400:	e0bffc15 	stw	r2,-16(fp)
        if((sqRe + sqIm) > 4) break;
40000404:	e0fffb17 	ldw	r3,-20(fp)
40000408:	e0bffc17 	ldw	r2,-16(fp)
4000040c:	1887ff72 	custom	253,r3,r3,r2
40000410:	00902034 	movhi	r2,16512
40000414:	1885f972 	custom	229,r2,r3,r2
40000418:	10000126 	beq	r2,zero,40000420 <_ZN5Image17Get_Fractal_LevelEff+0x84>
4000041c:	00001306 	br	4000046c <_ZN5Image17Get_Fractal_LevelEff+0xd0>
        newRe = sqRe - sqIm + cRe;
40000420:	e0fffb17 	ldw	r3,-20(fp)
40000424:	e0bffc17 	ldw	r2,-16(fp)
40000428:	1887ffb2 	custom	254,r3,r3,r2
4000042c:	e0bff717 	ldw	r2,-36(fp)
40000430:	1885ff72 	custom	253,r2,r3,r2
40000434:	e0bffe15 	stw	r2,-8(fp)
        newIm = 2 * oldRe * oldIm + cIm;
40000438:	e0bff917 	ldw	r2,-28(fp)
4000043c:	1087ff72 	custom	253,r3,r2,r2
40000440:	e0bffa17 	ldw	r2,-24(fp)
40000444:	1887ff32 	custom	252,r3,r3,r2
40000448:	e0bff817 	ldw	r2,-32(fp)
4000044c:	1885ff72 	custom	253,r2,r3,r2
40000450:	e0bfff15 	stw	r2,-4(fp)
int Image::Get_Fractal_Level(float newRe, float newIm) {
	float cRe = -0.78;
	float cIm = 0.158;
    int i;

    for(i = 0; i < 63; i++) {
40000454:	e0bff617 	ldw	r2,-40(fp)
40000458:	10800044 	addi	r2,r2,1
4000045c:	e0bff615 	stw	r2,-40(fp)
40000460:	e0bff617 	ldw	r2,-40(fp)
40000464:	10800fd0 	cmplti	r2,r2,63
40000468:	103fda1e 	bne	r2,zero,400003d4 <__alt_data_end+0xc00003d4>
        newIm = 2 * oldRe * oldIm + cIm;

        //DEBUG
        //printf("(%f,%f)",newRe,newIm);
    }
    return i;
4000046c:	e0bff617 	ldw	r2,-40(fp)
}
40000470:	e037883a 	mov	sp,fp
40000474:	df000017 	ldw	fp,0(sp)
40000478:	dec00104 	addi	sp,sp,4
4000047c:	f800283a 	ret

40000480 <_ZN5Image17Get_Fractal_ColorEi>:

int Image::Get_Fractal_Color(int level) {
40000480:	defffd04 	addi	sp,sp,-12
40000484:	df000215 	stw	fp,8(sp)
40000488:	df000204 	addi	fp,sp,8
4000048c:	e13ffe15 	stw	r4,-8(fp)
40000490:	e17fff15 	stw	r5,-4(fp)
    if (level>63) level = 63;
40000494:	e0bfff17 	ldw	r2,-4(fp)
40000498:	10801010 	cmplti	r2,r2,64
4000049c:	1000021e 	bne	r2,zero,400004a8 <_ZN5Image17Get_Fractal_ColorEi+0x28>
400004a0:	00800fc4 	movi	r2,63
400004a4:	e0bfff15 	stw	r2,-4(fp)
    return ((level<<3) & 0xE0)+level;
400004a8:	e0bfff17 	ldw	r2,-4(fp)
400004ac:	100490fa 	slli	r2,r2,3
400004b0:	10c0380c 	andi	r3,r2,224
400004b4:	e0bfff17 	ldw	r2,-4(fp)
400004b8:	1885883a 	add	r2,r3,r2
}
400004bc:	e037883a 	mov	sp,fp
400004c0:	df000017 	ldw	fp,0(sp)
400004c4:	dec00104 	addi	sp,sp,4
400004c8:	f800283a 	ret

400004cc <_ZN5Image12make_fractalEv>:

void Image::make_fractal() {
400004cc:	defff004 	addi	sp,sp,-64
400004d0:	dfc00f15 	stw	ra,60(sp)
400004d4:	df000e15 	stw	fp,56(sp)
400004d8:	dc000d15 	stw	r16,52(sp)
400004dc:	df000e04 	addi	fp,sp,56
400004e0:	e13ffe15 	stw	r4,-8(fp)
	float sinAngle = 0;
400004e4:	e03ff415 	stw	zero,-48(fp)
	float cosAngle = 1;
400004e8:	008fe034 	movhi	r2,16256
400004ec:	e0bff515 	stw	r2,-44(fp)
	float Scale = 1;
400004f0:	008fe034 	movhi	r2,16256
400004f4:	e0bff615 	stw	r2,-40(fp)
	float X_position = 0;
400004f8:	e03ff715 	stw	zero,-36(fp)
	float Y_position = 0;
400004fc:	e03ff815 	stw	zero,-32(fp)

    float x,y;

    for (y=0; y<height; y++) {
40000500:	e03ff315 	stw	zero,-52(fp)
40000504:	00007a06 	br	400006f0 <_ZN5Image12make_fractalEv+0x224>
        for (x=0; x<length; x++) {
40000508:	e03ff215 	stw	zero,-56(fp)
4000050c:	00006e06 	br	400006c8 <_ZN5Image12make_fractalEv+0x1fc>
            if ( (x==length/2) || (y==height/2) ) *source_pixel(x,y) = 0;
40000510:	e0bffe17 	ldw	r2,-8(fp)
40000514:	10800117 	ldw	r2,4(r2)
40000518:	1006d7fa 	srli	r3,r2,31
4000051c:	1885883a 	add	r2,r3,r2
40000520:	1005d07a 	srai	r2,r2,1
40000524:	1007feb2 	custom	250,r3,r2,zero
40000528:	e0bff217 	ldw	r2,-56(fp)
4000052c:	1885f8f2 	custom	227,r2,r3,r2
40000530:	1000091e 	bne	r2,zero,40000558 <_ZN5Image12make_fractalEv+0x8c>
40000534:	e0bffe17 	ldw	r2,-8(fp)
40000538:	10800017 	ldw	r2,0(r2)
4000053c:	1006d7fa 	srli	r3,r2,31
40000540:	1885883a 	add	r2,r3,r2
40000544:	1005d07a 	srai	r2,r2,1
40000548:	1007feb2 	custom	250,r3,r2,zero
4000054c:	e0bff317 	ldw	r2,-52(fp)
40000550:	1885f8b2 	custom	226,r2,r3,r2
40000554:	10000a1e 	bne	r2,zero,40000580 <_ZN5Image12make_fractalEv+0xb4>
40000558:	e0bff217 	ldw	r2,-56(fp)
4000055c:	1007fe72 	custom	249,r3,r2,zero
40000560:	e13ff317 	ldw	r4,-52(fp)
40000564:	2005fe72 	custom	249,r2,r4,zero
40000568:	e13ffe17 	ldw	r4,-8(fp)
4000056c:	180b883a 	mov	r5,r3
40000570:	100d883a 	mov	r6,r2
40000574:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
40000578:	10000005 	stb	zero,0(r2)
4000057c:	00004e06 	br	400006b8 <_ZN5Image12make_fractalEv+0x1ec>
            else {
                float fx = (x-length/2)/(length/2);
40000580:	e0bffe17 	ldw	r2,-8(fp)
40000584:	10800117 	ldw	r2,4(r2)
40000588:	1006d7fa 	srli	r3,r2,31
4000058c:	1885883a 	add	r2,r3,r2
40000590:	1005d07a 	srai	r2,r2,1
40000594:	1005feb2 	custom	250,r2,r2,zero
40000598:	e0fff217 	ldw	r3,-56(fp)
4000059c:	1887ffb2 	custom	254,r3,r3,r2
400005a0:	e0bffe17 	ldw	r2,-8(fp)
400005a4:	10800117 	ldw	r2,4(r2)
400005a8:	1008d7fa 	srli	r4,r2,31
400005ac:	2085883a 	add	r2,r4,r2
400005b0:	1005d07a 	srai	r2,r2,1
400005b4:	1005feb2 	custom	250,r2,r2,zero
400005b8:	1885fff2 	custom	255,r2,r3,r2
400005bc:	e0bff915 	stw	r2,-28(fp)
                float fy = (y-height/2)/(height/2);
400005c0:	e0bffe17 	ldw	r2,-8(fp)
400005c4:	10800017 	ldw	r2,0(r2)
400005c8:	1006d7fa 	srli	r3,r2,31
400005cc:	1885883a 	add	r2,r3,r2
400005d0:	1005d07a 	srai	r2,r2,1
400005d4:	1005feb2 	custom	250,r2,r2,zero
400005d8:	e0fff317 	ldw	r3,-52(fp)
400005dc:	1887ffb2 	custom	254,r3,r3,r2
400005e0:	e0bffe17 	ldw	r2,-8(fp)
400005e4:	10800017 	ldw	r2,0(r2)
400005e8:	1008d7fa 	srli	r4,r2,31
400005ec:	2085883a 	add	r2,r4,r2
400005f0:	1005d07a 	srai	r2,r2,1
400005f4:	1005feb2 	custom	250,r2,r2,zero
400005f8:	1885fff2 	custom	255,r2,r3,r2
400005fc:	e0bffa15 	stw	r2,-24(fp)
                float rotated_fx = (fx*cosAngle + fy*sinAngle)/Scale;
40000600:	e0fff917 	ldw	r3,-28(fp)
40000604:	e0bff517 	ldw	r2,-44(fp)
40000608:	1887ff32 	custom	252,r3,r3,r2
4000060c:	e13ffa17 	ldw	r4,-24(fp)
40000610:	e0bff417 	ldw	r2,-48(fp)
40000614:	2085ff32 	custom	252,r2,r4,r2
40000618:	1887ff72 	custom	253,r3,r3,r2
4000061c:	e0bff617 	ldw	r2,-40(fp)
40000620:	1885fff2 	custom	255,r2,r3,r2
40000624:	e0bffb15 	stw	r2,-20(fp)
                float rotated_fy = (-fx*sinAngle + fy*cosAngle)/Scale;
40000628:	e0bff917 	ldw	r2,-28(fp)
4000062c:	1007f872 	custom	225,r3,r2,zero
40000630:	e0bff417 	ldw	r2,-48(fp)
40000634:	1887ff32 	custom	252,r3,r3,r2
40000638:	e13ffa17 	ldw	r4,-24(fp)
4000063c:	e0bff517 	ldw	r2,-44(fp)
40000640:	2085ff32 	custom	252,r2,r4,r2
40000644:	1887ff72 	custom	253,r3,r3,r2
40000648:	e0bff617 	ldw	r2,-40(fp)
4000064c:	1885fff2 	custom	255,r2,r3,r2
40000650:	e0bffc15 	stw	r2,-16(fp)

                int level = Get_Fractal_Level(X_position+rotated_fx, Y_position+rotated_fy);
40000654:	e0fff717 	ldw	r3,-36(fp)
40000658:	e0bffb17 	ldw	r2,-20(fp)
4000065c:	188bff72 	custom	253,r5,r3,r2
40000660:	e0fff817 	ldw	r3,-32(fp)
40000664:	e0bffc17 	ldw	r2,-16(fp)
40000668:	1885ff72 	custom	253,r2,r3,r2
4000066c:	e13ffe17 	ldw	r4,-8(fp)
40000670:	100d883a 	mov	r6,r2
40000674:	000039c0 	call	4000039c <_ZN5Image17Get_Fractal_LevelEff>
40000678:	e0bffd15 	stw	r2,-12(fp)
                *source_pixel(x,y) = 4*Get_Fractal_Color(level);
4000067c:	e0bff217 	ldw	r2,-56(fp)
40000680:	1007fe72 	custom	249,r3,r2,zero
40000684:	e13ff317 	ldw	r4,-52(fp)
40000688:	2005fe72 	custom	249,r2,r4,zero
4000068c:	e13ffe17 	ldw	r4,-8(fp)
40000690:	180b883a 	mov	r5,r3
40000694:	100d883a 	mov	r6,r2
40000698:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
4000069c:	1021883a 	mov	r16,r2
400006a0:	e13ffe17 	ldw	r4,-8(fp)
400006a4:	e17ffd17 	ldw	r5,-12(fp)
400006a8:	00004800 	call	40000480 <_ZN5Image17Get_Fractal_ColorEi>
400006ac:	1085883a 	add	r2,r2,r2
400006b0:	1085883a 	add	r2,r2,r2
400006b4:	80800005 	stb	r2,0(r16)
	float Y_position = 0;

    float x,y;

    for (y=0; y<height; y++) {
        for (x=0; x<length; x++) {
400006b8:	e0fff217 	ldw	r3,-56(fp)
400006bc:	008fe034 	movhi	r2,16256
400006c0:	1885ff72 	custom	253,r2,r3,r2
400006c4:	e0bff215 	stw	r2,-56(fp)
400006c8:	e0bffe17 	ldw	r2,-8(fp)
400006cc:	10800117 	ldw	r2,4(r2)
400006d0:	1007feb2 	custom	250,r3,r2,zero
400006d4:	e0bff217 	ldw	r2,-56(fp)
400006d8:	1885f972 	custom	229,r2,r3,r2
400006dc:	103f8c1e 	bne	r2,zero,40000510 <__alt_data_end+0xc0000510>
	float X_position = 0;
	float Y_position = 0;

    float x,y;

    for (y=0; y<height; y++) {
400006e0:	e0fff317 	ldw	r3,-52(fp)
400006e4:	008fe034 	movhi	r2,16256
400006e8:	1885ff72 	custom	253,r2,r3,r2
400006ec:	e0bff315 	stw	r2,-52(fp)
400006f0:	e0bffe17 	ldw	r2,-8(fp)
400006f4:	10800017 	ldw	r2,0(r2)
400006f8:	1007feb2 	custom	250,r3,r2,zero
400006fc:	e0bff317 	ldw	r2,-52(fp)
40000700:	1885f972 	custom	229,r2,r3,r2
40000704:	103f801e 	bne	r2,zero,40000508 <__alt_data_end+0xc0000508>
                int level = Get_Fractal_Level(X_position+rotated_fx, Y_position+rotated_fy);
                *source_pixel(x,y) = 4*Get_Fractal_Color(level);
            }
        }
    }
}
40000708:	e6ffff04 	addi	sp,fp,-4
4000070c:	dfc00217 	ldw	ra,8(sp)
40000710:	df000117 	ldw	fp,4(sp)
40000714:	dc000017 	ldw	r16,0(sp)
40000718:	dec00304 	addi	sp,sp,12
4000071c:	f800283a 	ret

40000720 <_ZN5Image12source_pixelEii>:

unsigned char * Image::source_pixel(int x, int y) {
40000720:	defffc04 	addi	sp,sp,-16
40000724:	df000315 	stw	fp,12(sp)
40000728:	df000304 	addi	fp,sp,12
4000072c:	e13ffd15 	stw	r4,-12(fp)
40000730:	e17ffe15 	stw	r5,-8(fp)
40000734:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	return source_array + (y*length+x);
40000738:	e0bffd17 	ldw	r2,-12(fp)
4000073c:	10800217 	ldw	r2,8(r2)
40000740:	e0fffd17 	ldw	r3,-12(fp)
40000744:	19000117 	ldw	r4,4(r3)
40000748:	e0ffff17 	ldw	r3,-4(fp)
4000074c:	20c9383a 	mul	r4,r4,r3
40000750:	e0fffe17 	ldw	r3,-8(fp)
40000754:	20c7883a 	add	r3,r4,r3
40000758:	10c5883a 	add	r2,r2,r3
}
4000075c:	e037883a 	mov	sp,fp
40000760:	df000017 	ldw	fp,0(sp)
40000764:	dec00104 	addi	sp,sp,4
40000768:	f800283a 	ret

4000076c <_ZN5Image7make_bwEv>:

void Image::make_bw() {
4000076c:	defffb04 	addi	sp,sp,-20
40000770:	dfc00415 	stw	ra,16(sp)
40000774:	df000315 	stw	fp,12(sp)
40000778:	df000304 	addi	fp,sp,12
4000077c:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	for (int y=0; y<height; y++) {
40000780:	e03ffd15 	stw	zero,-12(fp)
40000784:	00002206 	br	40000810 <_ZN5Image7make_bwEv+0xa4>
		for (int x=0; x<length; x++) {
40000788:	e03ffe15 	stw	zero,-8(fp)
4000078c:	00001906 	br	400007f4 <_ZN5Image7make_bwEv+0x88>
			if (*source_pixel(x,y)>127) *source_pixel(x,y)=255;
40000790:	e13fff17 	ldw	r4,-4(fp)
40000794:	e17ffe17 	ldw	r5,-8(fp)
40000798:	e1bffd17 	ldw	r6,-12(fp)
4000079c:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
400007a0:	10800003 	ldbu	r2,0(r2)
400007a4:	10803fcc 	andi	r2,r2,255
400007a8:	1004d1fa 	srli	r2,r2,7
400007ac:	10803fcc 	andi	r2,r2,255
400007b0:	10000826 	beq	r2,zero,400007d4 <_ZN5Image7make_bwEv+0x68>
400007b4:	e13fff17 	ldw	r4,-4(fp)
400007b8:	e17ffe17 	ldw	r5,-8(fp)
400007bc:	e1bffd17 	ldw	r6,-12(fp)
400007c0:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
400007c4:	1007883a 	mov	r3,r2
400007c8:	00bfffc4 	movi	r2,-1
400007cc:	18800005 	stb	r2,0(r3)
400007d0:	00000506 	br	400007e8 <_ZN5Image7make_bwEv+0x7c>
			else *source_pixel(x,y)=0;
400007d4:	e13fff17 	ldw	r4,-4(fp)
400007d8:	e17ffe17 	ldw	r5,-8(fp)
400007dc:	e1bffd17 	ldw	r6,-12(fp)
400007e0:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
400007e4:	10000005 	stb	zero,0(r2)
}

void Image::make_bw() {
	// TODO Auto-generated constructor stub
	for (int y=0; y<height; y++) {
		for (int x=0; x<length; x++) {
400007e8:	e0bffe17 	ldw	r2,-8(fp)
400007ec:	10800044 	addi	r2,r2,1
400007f0:	e0bffe15 	stw	r2,-8(fp)
400007f4:	e0bfff17 	ldw	r2,-4(fp)
400007f8:	10800117 	ldw	r2,4(r2)
400007fc:	e0fffe17 	ldw	r3,-8(fp)
40000800:	18bfe316 	blt	r3,r2,40000790 <__alt_data_end+0xc0000790>
	return source_array + (y*length+x);
}

void Image::make_bw() {
	// TODO Auto-generated constructor stub
	for (int y=0; y<height; y++) {
40000804:	e0bffd17 	ldw	r2,-12(fp)
40000808:	10800044 	addi	r2,r2,1
4000080c:	e0bffd15 	stw	r2,-12(fp)
40000810:	e0bfff17 	ldw	r2,-4(fp)
40000814:	10800017 	ldw	r2,0(r2)
40000818:	e0fffd17 	ldw	r3,-12(fp)
4000081c:	18bfda16 	blt	r3,r2,40000788 <__alt_data_end+0xc0000788>
		for (int x=0; x<length; x++) {
			if (*source_pixel(x,y)>127) *source_pixel(x,y)=255;
			else *source_pixel(x,y)=0;
		}
	}
}
40000820:	e037883a 	mov	sp,fp
40000824:	dfc00117 	ldw	ra,4(sp)
40000828:	df000017 	ldw	fp,0(sp)
4000082c:	dec00204 	addi	sp,sp,8
40000830:	f800283a 	ret

40000834 <_ZN5Image8apply_NNEP2NNii>:
 *
 * Applique toutes les sous-images size x size de cette
 * image a l'entree de ce reseau de neuronnes.
 *
 *******************************************************/
Image * Image::apply_NN(NN * network, int size, int pos) {
40000834:	deffda04 	addi	sp,sp,-152
40000838:	dfc02515 	stw	ra,148(sp)
4000083c:	df002415 	stw	fp,144(sp)
40000840:	ddc02315 	stw	r23,140(sp)
40000844:	dd802215 	stw	r22,136(sp)
40000848:	dd402115 	stw	r21,132(sp)
4000084c:	dd002015 	stw	r20,128(sp)
40000850:	dcc01f15 	stw	r19,124(sp)
40000854:	dc801e15 	stw	r18,120(sp)
40000858:	dc401d15 	stw	r17,116(sp)
4000085c:	dc001c15 	stw	r16,112(sp)
40000860:	df002404 	addi	fp,sp,144
40000864:	e13fe315 	stw	r4,-116(fp)
40000868:	e17fe415 	stw	r5,-112(fp)
4000086c:	e1bfe515 	stw	r6,-108(fp)
40000870:	e1ffe615 	stw	r7,-104(fp)
40000874:	00900034 	movhi	r2,16384
40000878:	108ab504 	addi	r2,r2,10964
4000087c:	e0bfed15 	stw	r2,-76(fp)
40000880:	00900074 	movhi	r2,16385
40000884:	10929704 	addi	r2,r2,19036
40000888:	e0bfee15 	stw	r2,-72(fp)
4000088c:	e0bfef04 	addi	r2,fp,-68
40000890:	e0ffdc04 	addi	r3,fp,-144
40000894:	10c00015 	stw	r3,0(r2)
40000898:	00d00034 	movhi	r3,16384
4000089c:	18c2b304 	addi	r3,r3,2764
400008a0:	10c00115 	stw	r3,4(r2)
400008a4:	16c00215 	stw	sp,8(r2)
400008a8:	e0bfe704 	addi	r2,fp,-100
400008ac:	1009883a 	mov	r4,r2
400008b0:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
	BYTE* source = new BYTE[size*size]; 
400008b4:	e0ffe517 	ldw	r3,-108(fp)
400008b8:	e0bfe517 	ldw	r2,-108(fp)
400008bc:	1885383a 	mul	r2,r3,r2
400008c0:	00cfe034 	movhi	r3,16256
400008c4:	18800336 	bltu	r3,r2,400008d4 <_ZN5Image8apply_NNEP2NNii+0xa0>
400008c8:	1085883a 	add	r2,r2,r2
400008cc:	1007883a 	mov	r3,r2
400008d0:	00000106 	br	400008d8 <_ZN5Image8apply_NNEP2NNii+0xa4>
400008d4:	00ffffc4 	movi	r3,-1
400008d8:	00bfffc4 	movi	r2,-1
400008dc:	e0bfe815 	stw	r2,-96(fp)
400008e0:	1809883a 	mov	r4,r3
400008e4:	0003b440 	call	40003b44 <_Znaj>
400008e8:	e0bfe015 	stw	r2,-128(fp)
	Image * result = new Image(length-size+1,height-size+1); //-size (pour tenir compte de l'épaisseur du kernel)
400008ec:	01000304 	movi	r4,12
400008f0:	00038f80 	call	400038f8 <_Znwj>
400008f4:	e0bff415 	stw	r2,-48(fp)
400008f8:	e0bfe317 	ldw	r2,-116(fp)
400008fc:	10c00117 	ldw	r3,4(r2)
40000900:	e0bfe517 	ldw	r2,-108(fp)
40000904:	1885c83a 	sub	r2,r3,r2
40000908:	11400044 	addi	r5,r2,1
4000090c:	e0bfe317 	ldw	r2,-116(fp)
40000910:	10c00017 	ldw	r3,0(r2)
40000914:	e0bfe517 	ldw	r2,-108(fp)
40000918:	1885c83a 	sub	r2,r3,r2
4000091c:	10c00044 	addi	r3,r2,1
40000920:	00800044 	movi	r2,1
40000924:	e0bfe815 	stw	r2,-96(fp)
40000928:	e13ff417 	ldw	r4,-48(fp)
4000092c:	180d883a 	mov	r6,r3
40000930:	00002200 	call	40000220 <_ZN5ImageC1Eii>
40000934:	e0bff417 	ldw	r2,-48(fp)
40000938:	e0bfe115 	stw	r2,-124(fp)

	for (int y=0; y<=height-size; y++) {
4000093c:	e03fdc15 	stw	zero,-144(fp)
40000940:	00005906 	br	40000aa8 <_ZN5Image8apply_NNEP2NNii+0x274>
		printf("Processing line %i\r\n",y);
40000944:	01100074 	movhi	r4,16385
40000948:	00bfffc4 	movi	r2,-1
4000094c:	e0bfe815 	stw	r2,-96(fp)
40000950:	2112af04 	addi	r4,r4,19132
40000954:	e17fdc17 	ldw	r5,-144(fp)
40000958:	00088500 	call	40008850 <printf>
		for (int x=0; x<=length-size; x++) {
4000095c:	e03fdd15 	stw	zero,-140(fp)
40000960:	00004806 	br	40000a84 <_ZN5Image8apply_NNEP2NNii+0x250>
			/* Appliquer le reseau sur un sous-bloc de l'image */
			for (int j=0; j<size; j++) {
40000964:	e03fde15 	stw	zero,-136(fp)
40000968:	00002606 	br	40000a04 <_ZN5Image8apply_NNEP2NNii+0x1d0>
				for (int i=0; i<size; i++) {
4000096c:	e03fdf15 	stw	zero,-132(fp)
40000970:	00001e06 	br	400009ec <_ZN5Image8apply_NNEP2NNii+0x1b8>
					source[j*size + i] = (*source_pixel(x + i, y + j)) / 255;   // source contient le résultat des multiplications
40000974:	e0ffde17 	ldw	r3,-136(fp)
40000978:	e0bfe517 	ldw	r2,-108(fp)
4000097c:	1887383a 	mul	r3,r3,r2
40000980:	e0bfdf17 	ldw	r2,-132(fp)
40000984:	1885883a 	add	r2,r3,r2
40000988:	1085883a 	add	r2,r2,r2
4000098c:	1007883a 	mov	r3,r2
40000990:	e0bfe017 	ldw	r2,-128(fp)
40000994:	10c5883a 	add	r2,r2,r3
40000998:	e0bff515 	stw	r2,-44(fp)
4000099c:	e0ffdd17 	ldw	r3,-140(fp)
400009a0:	e0bfdf17 	ldw	r2,-132(fp)
400009a4:	188b883a 	add	r5,r3,r2
400009a8:	e0ffdc17 	ldw	r3,-144(fp)
400009ac:	e0bfde17 	ldw	r2,-136(fp)
400009b0:	1885883a 	add	r2,r3,r2
400009b4:	e13fe317 	ldw	r4,-116(fp)
400009b8:	100d883a 	mov	r6,r2
400009bc:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
400009c0:	10800003 	ldbu	r2,0(r2)
400009c4:	10803fcc 	andi	r2,r2,255
400009c8:	1009883a 	mov	r4,r2
400009cc:	01403fc4 	movi	r5,255
400009d0:	000519c0 	call	4000519c <__udivsi3>
400009d4:	10803fcc 	andi	r2,r2,255
400009d8:	e0fff517 	ldw	r3,-44(fp)
400009dc:	1880000d 	sth	r2,0(r3)
	for (int y=0; y<=height-size; y++) {
		printf("Processing line %i\r\n",y);
		for (int x=0; x<=length-size; x++) {
			/* Appliquer le reseau sur un sous-bloc de l'image */
			for (int j=0; j<size; j++) {
				for (int i=0; i<size; i++) {
400009e0:	e0bfdf17 	ldw	r2,-132(fp)
400009e4:	10800044 	addi	r2,r2,1
400009e8:	e0bfdf15 	stw	r2,-132(fp)
400009ec:	e0ffdf17 	ldw	r3,-132(fp)
400009f0:	e0bfe517 	ldw	r2,-108(fp)
400009f4:	18bfdf16 	blt	r3,r2,40000974 <__alt_data_end+0xc0000974>

	for (int y=0; y<=height-size; y++) {
		printf("Processing line %i\r\n",y);
		for (int x=0; x<=length-size; x++) {
			/* Appliquer le reseau sur un sous-bloc de l'image */
			for (int j=0; j<size; j++) {
400009f8:	e0bfde17 	ldw	r2,-136(fp)
400009fc:	10800044 	addi	r2,r2,1
40000a00:	e0bfde15 	stw	r2,-136(fp)
40000a04:	e0ffde17 	ldw	r3,-136(fp)
40000a08:	e0bfe517 	ldw	r2,-108(fp)
40000a0c:	18bfd716 	blt	r3,r2,4000096c <__alt_data_end+0xc000096c>
				for (int i=0; i<size; i++) {
					source[j*size + i] = (*source_pixel(x + i, y + j)) / 255;   // source contient le résultat des multiplications
				}
			}
			network->propagate(source);  // Cette fonction fait les additions des multiplications précédentes
40000a10:	00bfffc4 	movi	r2,-1
40000a14:	e0bfe815 	stw	r2,-96(fp)
40000a18:	e13fe417 	ldw	r4,-112(fp)
40000a1c:	e17fe017 	ldw	r5,-128(fp)
40000a20:	00010880 	call	40001088 <_ZN2NN9propagateEPs>

			/* Stocker les bons/meilleurs matchs */
			unsigned char pixel;
			pixel = 255*(network->layer[network->n_layer-1].value[pos]);
40000a24:	e0bfe417 	ldw	r2,-112(fp)
40000a28:	10c00217 	ldw	r3,8(r2)
40000a2c:	e0bfe417 	ldw	r2,-112(fp)
40000a30:	10800117 	ldw	r2,4(r2)
40000a34:	10800624 	muli	r2,r2,24
40000a38:	10bffa04 	addi	r2,r2,-24
40000a3c:	1885883a 	add	r2,r3,r2
40000a40:	10c00517 	ldw	r3,20(r2)
40000a44:	e0bfe617 	ldw	r2,-104(fp)
40000a48:	1085883a 	add	r2,r2,r2
40000a4c:	1885883a 	add	r2,r3,r2
40000a50:	1080000b 	ldhu	r2,0(r2)
40000a54:	0085c83a 	sub	r2,zero,r2
40000a58:	e0bfe205 	stb	r2,-120(fp)
			*(result->source_pixel(x,y)) = pixel;
40000a5c:	e13fe117 	ldw	r4,-124(fp)
40000a60:	e17fdd17 	ldw	r5,-140(fp)
40000a64:	e1bfdc17 	ldw	r6,-144(fp)
40000a68:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
40000a6c:	1007883a 	mov	r3,r2
40000a70:	e0bfe203 	ldbu	r2,-120(fp)
40000a74:	18800005 	stb	r2,0(r3)
	BYTE* source = new BYTE[size*size]; 
	Image * result = new Image(length-size+1,height-size+1); //-size (pour tenir compte de l'épaisseur du kernel)

	for (int y=0; y<=height-size; y++) {
		printf("Processing line %i\r\n",y);
		for (int x=0; x<=length-size; x++) {
40000a78:	e0bfdd17 	ldw	r2,-140(fp)
40000a7c:	10800044 	addi	r2,r2,1
40000a80:	e0bfdd15 	stw	r2,-140(fp)
40000a84:	e0bfe317 	ldw	r2,-116(fp)
40000a88:	10c00117 	ldw	r3,4(r2)
40000a8c:	e0bfe517 	ldw	r2,-108(fp)
40000a90:	1887c83a 	sub	r3,r3,r2
40000a94:	e0bfdd17 	ldw	r2,-140(fp)
40000a98:	18bfb20e 	bge	r3,r2,40000964 <__alt_data_end+0xc0000964>
 *******************************************************/
Image * Image::apply_NN(NN * network, int size, int pos) {
	BYTE* source = new BYTE[size*size]; 
	Image * result = new Image(length-size+1,height-size+1); //-size (pour tenir compte de l'épaisseur du kernel)

	for (int y=0; y<=height-size; y++) {
40000a9c:	e0bfdc17 	ldw	r2,-144(fp)
40000aa0:	10800044 	addi	r2,r2,1
40000aa4:	e0bfdc15 	stw	r2,-144(fp)
40000aa8:	e0bfe317 	ldw	r2,-116(fp)
40000aac:	10c00017 	ldw	r3,0(r2)
40000ab0:	e0bfe517 	ldw	r2,-108(fp)
40000ab4:	1887c83a 	sub	r3,r3,r2
40000ab8:	e0bfdc17 	ldw	r2,-144(fp)
40000abc:	18bfa10e 	bge	r3,r2,40000944 <__alt_data_end+0xc0000944>
			unsigned char pixel;
			pixel = 255*(network->layer[network->n_layer-1].value[pos]);
			*(result->source_pixel(x,y)) = pixel;
		}
	}
	return result;
40000ac0:	e0bfe117 	ldw	r2,-124(fp)
40000ac4:	e0bff615 	stw	r2,-40(fp)
40000ac8:	00000a06 	br	40000af4 <_ZN5Image8apply_NNEP2NNii+0x2c0>
40000acc:	e7002404 	addi	fp,fp,144
40000ad0:	e0bfe917 	ldw	r2,-92(fp)
40000ad4:	e0bff715 	stw	r2,-36(fp)
 * image a l'entree de ce reseau de neuronnes.
 *
 *******************************************************/
Image * Image::apply_NN(NN * network, int size, int pos) {
	BYTE* source = new BYTE[size*size]; 
	Image * result = new Image(length-size+1,height-size+1); //-size (pour tenir compte de l'épaisseur du kernel)
40000ad8:	e13ff417 	ldw	r4,-48(fp)
40000adc:	00034e80 	call	400034e8 <_ZdlPv>
40000ae0:	e0fff717 	ldw	r3,-36(fp)
40000ae4:	00bfffc4 	movi	r2,-1
40000ae8:	e0bfe815 	stw	r2,-96(fp)
40000aec:	1809883a 	mov	r4,r3
40000af0:	0007d500 	call	40007d50 <_Unwind_SjLj_Resume>
40000af4:	e0bfe704 	addi	r2,fp,-100
40000af8:	1009883a 	mov	r4,r2
40000afc:	0007b6c0 	call	40007b6c <_Unwind_SjLj_Unregister>
			pixel = 255*(network->layer[network->n_layer-1].value[pos]);
			*(result->source_pixel(x,y)) = pixel;
		}
	}
	return result;
}
40000b00:	e0bff617 	ldw	r2,-40(fp)
40000b04:	e6fff804 	addi	sp,fp,-32
40000b08:	dfc00917 	ldw	ra,36(sp)
40000b0c:	df000817 	ldw	fp,32(sp)
40000b10:	ddc00717 	ldw	r23,28(sp)
40000b14:	dd800617 	ldw	r22,24(sp)
40000b18:	dd400517 	ldw	r21,20(sp)
40000b1c:	dd000417 	ldw	r20,16(sp)
40000b20:	dcc00317 	ldw	r19,12(sp)
40000b24:	dc800217 	ldw	r18,8(sp)
40000b28:	dc400117 	ldw	r17,4(sp)
40000b2c:	dc000017 	ldw	r16,0(sp)
40000b30:	dec00a04 	addi	sp,sp,40
40000b34:	f800283a 	ret

40000b38 <_ZN5Image13printToScreenEiiP3VGA>:
/**********************************************************
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/

void Image::printToScreen(int x, int y, VGA *pVGA) {
40000b38:	defff604 	addi	sp,sp,-40
40000b3c:	dfc00915 	stw	ra,36(sp)
40000b40:	df000815 	stw	fp,32(sp)
40000b44:	dc400715 	stw	r17,28(sp)
40000b48:	dc000615 	stw	r16,24(sp)
40000b4c:	df000804 	addi	fp,sp,32
40000b50:	e13ffa15 	stw	r4,-24(fp)
40000b54:	e17ffb15 	stw	r5,-20(fp)
40000b58:	e1bffc15 	stw	r6,-16(fp)
40000b5c:	e1fffd15 	stw	r7,-12(fp)
	for(int i=0; i<length; i++) {
40000b60:	e03ff815 	stw	zero,-32(fp)
40000b64:	00001f06 	br	40000be4 <_ZN5Image13printToScreenEiiP3VGA+0xac>
		for(int j=0; j<height; j++) {
40000b68:	e03ff915 	stw	zero,-28(fp)
40000b6c:	00001606 	br	40000bc8 <_ZN5Image13printToScreenEiiP3VGA+0x90>
			pVGA->Set_Pixel_Color(x+i,y+j,*source_pixel(i,j));
40000b70:	e0fffb17 	ldw	r3,-20(fp)
40000b74:	e0bff817 	ldw	r2,-32(fp)
40000b78:	1885883a 	add	r2,r3,r2
40000b7c:	1023883a 	mov	r17,r2
40000b80:	e0fffc17 	ldw	r3,-16(fp)
40000b84:	e0bff917 	ldw	r2,-28(fp)
40000b88:	1885883a 	add	r2,r3,r2
40000b8c:	1021883a 	mov	r16,r2
40000b90:	e13ffa17 	ldw	r4,-24(fp)
40000b94:	e17ff817 	ldw	r5,-32(fp)
40000b98:	e1bff917 	ldw	r6,-28(fp)
40000b9c:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
40000ba0:	10800003 	ldbu	r2,0(r2)
40000ba4:	10803fcc 	andi	r2,r2,255
40000ba8:	e13ffd17 	ldw	r4,-12(fp)
40000bac:	880b883a 	mov	r5,r17
40000bb0:	800d883a 	mov	r6,r16
40000bb4:	100f883a 	mov	r7,r2
40000bb8:	0000d0c0 	call	40000d0c <_ZN3VGA15Set_Pixel_ColorEjjj>
 *
 **********************************************************/

void Image::printToScreen(int x, int y, VGA *pVGA) {
	for(int i=0; i<length; i++) {
		for(int j=0; j<height; j++) {
40000bbc:	e0bff917 	ldw	r2,-28(fp)
40000bc0:	10800044 	addi	r2,r2,1
40000bc4:	e0bff915 	stw	r2,-28(fp)
40000bc8:	e0bffa17 	ldw	r2,-24(fp)
40000bcc:	10800017 	ldw	r2,0(r2)
40000bd0:	e0fff917 	ldw	r3,-28(fp)
40000bd4:	18bfe616 	blt	r3,r2,40000b70 <__alt_data_end+0xc0000b70>
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/

void Image::printToScreen(int x, int y, VGA *pVGA) {
	for(int i=0; i<length; i++) {
40000bd8:	e0bff817 	ldw	r2,-32(fp)
40000bdc:	10800044 	addi	r2,r2,1
40000be0:	e0bff815 	stw	r2,-32(fp)
40000be4:	e0bffa17 	ldw	r2,-24(fp)
40000be8:	10800117 	ldw	r2,4(r2)
40000bec:	e0fff817 	ldw	r3,-32(fp)
40000bf0:	18bfdd16 	blt	r3,r2,40000b68 <__alt_data_end+0xc0000b68>
		for(int j=0; j<height; j++) {
			pVGA->Set_Pixel_Color(x+i,y+j,*source_pixel(i,j));
		}
	}
}
40000bf4:	e6fffe04 	addi	sp,fp,-8
40000bf8:	dfc00317 	ldw	ra,12(sp)
40000bfc:	df000217 	ldw	fp,8(sp)
40000c00:	dc400117 	ldw	r17,4(sp)
40000c04:	dc000017 	ldw	r16,0(sp)
40000c08:	dec00404 	addi	sp,sp,16
40000c0c:	f800283a 	ret

40000c10 <_ZN5Image5printEv>:

/**********************************************************
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::print() {
40000c10:	defffa04 	addi	sp,sp,-24
40000c14:	dfc00515 	stw	ra,20(sp)
40000c18:	df000415 	stw	fp,16(sp)
40000c1c:	df000404 	addi	fp,sp,16
40000c20:	e13fff15 	stw	r4,-4(fp)
	printf("\n");
40000c24:	01000284 	movi	r4,10
40000c28:	00088940 	call	40008894 <putchar>
	for(int i=0; i<length; i++) {
40000c2c:	e03ffc15 	stw	zero,-16(fp)
40000c30:	00001906 	br	40000c98 <_ZN5Image5printEv+0x88>
		for(int j=0; j<height; j++) {
40000c34:	e03ffd15 	stw	zero,-12(fp)
40000c38:	00000e06 	br	40000c74 <_ZN5Image5printEv+0x64>
			int value = (int) *source_pixel(i,j);
40000c3c:	e13fff17 	ldw	r4,-4(fp)
40000c40:	e17ffc17 	ldw	r5,-16(fp)
40000c44:	e1bffd17 	ldw	r6,-12(fp)
40000c48:	00007200 	call	40000720 <_ZN5Image12source_pixelEii>
40000c4c:	10800003 	ldbu	r2,0(r2)
40000c50:	10803fcc 	andi	r2,r2,255
40000c54:	e0bffe15 	stw	r2,-8(fp)
			printf("%i,",value);
40000c58:	01100074 	movhi	r4,16385
40000c5c:	2112b504 	addi	r4,r4,19156
40000c60:	e17ffe17 	ldw	r5,-8(fp)
40000c64:	00088500 	call	40008850 <printf>
 *
 **********************************************************/
void Image::print() {
	printf("\n");
	for(int i=0; i<length; i++) {
		for(int j=0; j<height; j++) {
40000c68:	e0bffd17 	ldw	r2,-12(fp)
40000c6c:	10800044 	addi	r2,r2,1
40000c70:	e0bffd15 	stw	r2,-12(fp)
40000c74:	e0bfff17 	ldw	r2,-4(fp)
40000c78:	10800017 	ldw	r2,0(r2)
40000c7c:	e0fffd17 	ldw	r3,-12(fp)
40000c80:	18bfee16 	blt	r3,r2,40000c3c <__alt_data_end+0xc0000c3c>
			int value = (int) *source_pixel(i,j);
			printf("%i,",value);
		}
		printf("\n");
40000c84:	01000284 	movi	r4,10
40000c88:	00088940 	call	40008894 <putchar>
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::print() {
	printf("\n");
	for(int i=0; i<length; i++) {
40000c8c:	e0bffc17 	ldw	r2,-16(fp)
40000c90:	10800044 	addi	r2,r2,1
40000c94:	e0bffc15 	stw	r2,-16(fp)
40000c98:	e0bfff17 	ldw	r2,-4(fp)
40000c9c:	10800117 	ldw	r2,4(r2)
40000ca0:	e0fffc17 	ldw	r3,-16(fp)
40000ca4:	18bfe316 	blt	r3,r2,40000c34 <__alt_data_end+0xc0000c34>
			int value = (int) *source_pixel(i,j);
			printf("%i,",value);
		}
		printf("\n");
	}
}
40000ca8:	e037883a 	mov	sp,fp
40000cac:	dfc00117 	ldw	ra,4(sp)
40000cb0:	df000017 	ldw	fp,0(sp)
40000cb4:	dec00204 	addi	sp,sp,8
40000cb8:	f800283a 	ret

40000cbc <_ZN5ImageD1Ev>:

Image::~Image() {
40000cbc:	defffd04 	addi	sp,sp,-12
40000cc0:	dfc00215 	stw	ra,8(sp)
40000cc4:	df000115 	stw	fp,4(sp)
40000cc8:	df000104 	addi	fp,sp,4
40000ccc:	e13fff15 	stw	r4,-4(fp)
	if (source_array != 0) delete[] source_array;
40000cd0:	e0bfff17 	ldw	r2,-4(fp)
40000cd4:	10800217 	ldw	r2,8(r2)
40000cd8:	10000726 	beq	r2,zero,40000cf8 <_ZN5ImageD1Ev+0x3c>
40000cdc:	e0bfff17 	ldw	r2,-4(fp)
40000ce0:	10800217 	ldw	r2,8(r2)
40000ce4:	10000426 	beq	r2,zero,40000cf8 <_ZN5ImageD1Ev+0x3c>
40000ce8:	e0bfff17 	ldw	r2,-4(fp)
40000cec:	10800217 	ldw	r2,8(r2)
40000cf0:	1009883a 	mov	r4,r2
40000cf4:	0003c300 	call	40003c30 <_ZdaPv>
}
40000cf8:	e037883a 	mov	sp,fp
40000cfc:	dfc00117 	ldw	ra,4(sp)
40000d00:	df000017 	ldw	fp,0(sp)
40000d04:	dec00204 	addi	sp,sp,8
40000d08:	f800283a 	ret

40000d0c <_ZN3VGA15Set_Pixel_ColorEjjj>:
		if ( (x>=640) || (y>=480) ) return;
		int address = 640*y+x;
		IOWR_8DIRECT(memory_address, address, 192);
	}

	inline void Set_Pixel_Color(unsigned int x, unsigned int y, unsigned int color) {
40000d0c:	defffa04 	addi	sp,sp,-24
40000d10:	df000515 	stw	fp,20(sp)
40000d14:	df000504 	addi	fp,sp,20
40000d18:	e13ffc15 	stw	r4,-16(fp)
40000d1c:	e17ffd15 	stw	r5,-12(fp)
40000d20:	e1bffe15 	stw	r6,-8(fp)
40000d24:	e1ffff15 	stw	r7,-4(fp)
		if ( (x>=640) || (y>=480) ) return;
40000d28:	e0bffd17 	ldw	r2,-12(fp)
40000d2c:	1080a028 	cmpgeui	r2,r2,640
40000d30:	1000031e 	bne	r2,zero,40000d40 <_ZN3VGA15Set_Pixel_ColorEjjj+0x34>
40000d34:	e0bffe17 	ldw	r2,-8(fp)
40000d38:	10807830 	cmpltui	r2,r2,480
40000d3c:	1000011e 	bne	r2,zero,40000d44 <_ZN3VGA15Set_Pixel_ColorEjjj+0x38>
40000d40:	00000d06 	br	40000d78 <_ZN3VGA15Set_Pixel_ColorEjjj+0x6c>
		int address = 640*y+x;
40000d44:	e0bffe17 	ldw	r2,-8(fp)
40000d48:	10c0a024 	muli	r3,r2,640
40000d4c:	e0bffd17 	ldw	r2,-12(fp)
40000d50:	1885883a 	add	r2,r3,r2
40000d54:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT(memory_address, address, color);
40000d58:	e0bffc17 	ldw	r2,-16(fp)
40000d5c:	10800117 	ldw	r2,4(r2)
40000d60:	1007883a 	mov	r3,r2
40000d64:	e0bffb17 	ldw	r2,-20(fp)
40000d68:	1885883a 	add	r2,r3,r2
40000d6c:	1007883a 	mov	r3,r2
40000d70:	e0bfff17 	ldw	r2,-4(fp)
40000d74:	18800025 	stbio	r2,0(r3)
	}
40000d78:	e037883a 	mov	sp,fp
40000d7c:	df000017 	ldw	fp,0(sp)
40000d80:	dec00104 	addi	sp,sp,4
40000d84:	f800283a 	ret

40000d88 <_ZN2NNC1Ei>:
 */

#include "NN.h"
#include "stdio.h"

NN::NN(int new_n_layer) {
40000d88:	deffdf04 	addi	sp,sp,-132
40000d8c:	dfc02015 	stw	ra,128(sp)
40000d90:	df001f15 	stw	fp,124(sp)
40000d94:	ddc01e15 	stw	r23,120(sp)
40000d98:	dd801d15 	stw	r22,116(sp)
40000d9c:	dd401c15 	stw	r21,112(sp)
40000da0:	dd001b15 	stw	r20,108(sp)
40000da4:	dcc01a15 	stw	r19,104(sp)
40000da8:	dc801915 	stw	r18,100(sp)
40000dac:	dc401815 	stw	r17,96(sp)
40000db0:	dc001715 	stw	r16,92(sp)
40000db4:	df001f04 	addi	fp,sp,124
40000db8:	e13fe115 	stw	r4,-124(fp)
40000dbc:	e17fe215 	stw	r5,-120(fp)
40000dc0:	00900034 	movhi	r2,16384
40000dc4:	108ab504 	addi	r2,r2,10964
40000dc8:	e0bfe915 	stw	r2,-92(fp)
40000dcc:	00900074 	movhi	r2,16385
40000dd0:	10929884 	addi	r2,r2,19042
40000dd4:	e0bfea15 	stw	r2,-88(fp)
40000dd8:	e0bfeb04 	addi	r2,fp,-84
40000ddc:	e0ffe104 	addi	r3,fp,-124
40000de0:	10c00015 	stw	r3,0(r2)
40000de4:	00d00034 	movhi	r3,16384
40000de8:	18c3b504 	addi	r3,r3,3796
40000dec:	10c00115 	stw	r3,4(r2)
40000df0:	16c00215 	stw	sp,8(r2)
40000df4:	e0bfe304 	addi	r2,fp,-116
40000df8:	1009883a 	mov	r4,r2
40000dfc:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
40000e00:	e0ffe117 	ldw	r3,-124(fp)
40000e04:	00900074 	movhi	r2,16385
40000e08:	1092c304 	addi	r2,r2,19212
40000e0c:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub
	n_layer = new_n_layer;
40000e10:	e0bfe117 	ldw	r2,-124(fp)
40000e14:	e0ffe217 	ldw	r3,-120(fp)
40000e18:	10c00115 	stw	r3,4(r2)
	layer = new NNLayer[n_layer];
40000e1c:	e0bfe117 	ldw	r2,-124(fp)
40000e20:	10800117 	ldw	r2,4(r2)
40000e24:	e0bff315 	stw	r2,-52(fp)
40000e28:	00815434 	movhi	r2,1360
40000e2c:	e0fff317 	ldw	r3,-52(fp)
40000e30:	10c00436 	bltu	r2,r3,40000e44 <_ZN2NNC1Ei+0xbc>
40000e34:	e0fff317 	ldw	r3,-52(fp)
40000e38:	18800624 	muli	r2,r3,24
40000e3c:	10800104 	addi	r2,r2,4
40000e40:	00000106 	br	40000e48 <_ZN2NNC1Ei+0xc0>
40000e44:	00bfffc4 	movi	r2,-1
40000e48:	00ffffc4 	movi	r3,-1
40000e4c:	e0ffe415 	stw	r3,-112(fp)
40000e50:	1009883a 	mov	r4,r2
40000e54:	0003b440 	call	40003b44 <_Znaj>
40000e58:	e0bff415 	stw	r2,-48(fp)
40000e5c:	e0fff317 	ldw	r3,-52(fp)
40000e60:	e0bff417 	ldw	r2,-48(fp)
40000e64:	10c00015 	stw	r3,0(r2)
40000e68:	e0bff417 	ldw	r2,-48(fp)
40000e6c:	10800104 	addi	r2,r2,4
40000e70:	e0bff515 	stw	r2,-44(fp)
40000e74:	e0fff317 	ldw	r3,-52(fp)
40000e78:	18bfffc4 	addi	r2,r3,-1
40000e7c:	e0bff115 	stw	r2,-60(fp)
40000e80:	e0bff517 	ldw	r2,-44(fp)
40000e84:	e0bff015 	stw	r2,-64(fp)
40000e88:	00000a06 	br	40000eb4 <_ZN2NNC1Ei+0x12c>
40000e8c:	00800044 	movi	r2,1
40000e90:	e0bfe415 	stw	r2,-112(fp)
40000e94:	e13ff017 	ldw	r4,-64(fp)
40000e98:	00014a00 	call	400014a0 <_ZN7NNLayerC1Ev>
40000e9c:	e0fff017 	ldw	r3,-64(fp)
40000ea0:	18c00604 	addi	r3,r3,24
40000ea4:	e0fff015 	stw	r3,-64(fp)
40000ea8:	e0bff117 	ldw	r2,-60(fp)
40000eac:	10bfffc4 	addi	r2,r2,-1
40000eb0:	e0bff115 	stw	r2,-60(fp)
40000eb4:	e0fff117 	ldw	r3,-60(fp)
40000eb8:	18bfffd8 	cmpnei	r2,r3,-1
40000ebc:	103ff31e 	bne	r2,zero,40000e8c <__alt_data_end+0xc0000e8c>
40000ec0:	e0bff417 	ldw	r2,-48(fp)
40000ec4:	10c00104 	addi	r3,r2,4
40000ec8:	e0bfe117 	ldw	r2,-124(fp)
40000ecc:	10c00215 	stw	r3,8(r2)
40000ed0:	00002306 	br	40000f60 <_ZN2NNC1Ei+0x1d8>
40000ed4:	e7001f04 	addi	fp,fp,124
40000ed8:	e0bfe517 	ldw	r2,-108(fp)
40000edc:	e0bff715 	stw	r2,-36(fp)
40000ee0:	e0fff517 	ldw	r3,-44(fp)
40000ee4:	18001526 	beq	r3,zero,40000f3c <_ZN2NNC1Ei+0x1b4>
40000ee8:	e0bff117 	ldw	r2,-60(fp)
40000eec:	e0fff317 	ldw	r3,-52(fp)
40000ef0:	1885c83a 	sub	r2,r3,r2
40000ef4:	10800624 	muli	r2,r2,24
40000ef8:	10bffa04 	addi	r2,r2,-24
40000efc:	e0fff517 	ldw	r3,-44(fp)
40000f00:	1885883a 	add	r2,r3,r2
40000f04:	e0bff215 	stw	r2,-56(fp)
40000f08:	e0bff217 	ldw	r2,-56(fp)
40000f0c:	e0fff517 	ldw	r3,-44(fp)
40000f10:	10c00a26 	beq	r2,r3,40000f3c <_ZN2NNC1Ei+0x1b4>
40000f14:	e0bff217 	ldw	r2,-56(fp)
40000f18:	10bffa04 	addi	r2,r2,-24
40000f1c:	e0bff215 	stw	r2,-56(fp)
40000f20:	e0fff217 	ldw	r3,-56(fp)
40000f24:	18800017 	ldw	r2,0(r3)
40000f28:	10800017 	ldw	r2,0(r2)
40000f2c:	e03fe415 	stw	zero,-112(fp)
40000f30:	e13ff217 	ldw	r4,-56(fp)
40000f34:	103ee83a 	callr	r2
40000f38:	003ff306 	br	40000f08 <__alt_data_end+0xc0000f08>
40000f3c:	e0bff717 	ldw	r2,-36(fp)
40000f40:	e0bff615 	stw	r2,-40(fp)
40000f44:	e13ff417 	ldw	r4,-48(fp)
40000f48:	0003c300 	call	40003c30 <_ZdaPv>
40000f4c:	e0fff617 	ldw	r3,-40(fp)
40000f50:	00bfffc4 	movi	r2,-1
40000f54:	e0bfe415 	stw	r2,-112(fp)
40000f58:	1809883a 	mov	r4,r3
40000f5c:	0007d500 	call	40007d50 <_Unwind_SjLj_Resume>
40000f60:	e0bfe304 	addi	r2,fp,-116
40000f64:	1009883a 	mov	r4,r2
40000f68:	0007b6c0 	call	40007b6c <_Unwind_SjLj_Unregister>
}
40000f6c:	e6fff804 	addi	sp,fp,-32
40000f70:	dfc00917 	ldw	ra,36(sp)
40000f74:	df000817 	ldw	fp,32(sp)
40000f78:	ddc00717 	ldw	r23,28(sp)
40000f7c:	dd800617 	ldw	r22,24(sp)
40000f80:	dd400517 	ldw	r21,20(sp)
40000f84:	dd000417 	ldw	r20,16(sp)
40000f88:	dcc00317 	ldw	r19,12(sp)
40000f8c:	dc800217 	ldw	r18,8(sp)
40000f90:	dc400117 	ldw	r17,4(sp)
40000f94:	dc000017 	ldw	r16,0(sp)
40000f98:	dec00a04 	addi	sp,sp,40
40000f9c:	f800283a 	ret

40000fa0 <_ZN2NND1Ev>:

NN::~NN() {
40000fa0:	defffd04 	addi	sp,sp,-12
40000fa4:	dfc00215 	stw	ra,8(sp)
40000fa8:	df000115 	stw	fp,4(sp)
40000fac:	df000104 	addi	fp,sp,4
40000fb0:	e13fff15 	stw	r4,-4(fp)
40000fb4:	e0ffff17 	ldw	r3,-4(fp)
40000fb8:	00900074 	movhi	r2,16385
40000fbc:	1092c304 	addi	r2,r2,19212
40000fc0:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub
}
40000fc4:	0005883a 	mov	r2,zero
40000fc8:	10000226 	beq	r2,zero,40000fd4 <_ZN2NND1Ev+0x34>
40000fcc:	e13fff17 	ldw	r4,-4(fp)
40000fd0:	00034e80 	call	400034e8 <_ZdlPv>
40000fd4:	e037883a 	mov	sp,fp
40000fd8:	dfc00117 	ldw	ra,4(sp)
40000fdc:	df000017 	ldw	fp,0(sp)
40000fe0:	dec00204 	addi	sp,sp,8
40000fe4:	f800283a 	ret

40000fe8 <_ZN2NND0Ev>:
	// TODO Auto-generated constructor stub
	n_layer = new_n_layer;
	layer = new NNLayer[n_layer];
}

NN::~NN() {
40000fe8:	defffd04 	addi	sp,sp,-12
40000fec:	dfc00215 	stw	ra,8(sp)
40000ff0:	df000115 	stw	fp,4(sp)
40000ff4:	df000104 	addi	fp,sp,4
40000ff8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
40000ffc:	e13fff17 	ldw	r4,-4(fp)
40001000:	0000fa00 	call	40000fa0 <_ZN2NND1Ev>
40001004:	e13fff17 	ldw	r4,-4(fp)
40001008:	00034e80 	call	400034e8 <_ZdlPv>
4000100c:	e037883a 	mov	sp,fp
40001010:	dfc00117 	ldw	ra,4(sp)
40001014:	df000017 	ldw	fp,0(sp)
40001018:	dec00204 	addi	sp,sp,8
4000101c:	f800283a 	ret

40001020 <_ZN2NN12make_ternaryEv>:

void NN::make_ternary() {
40001020:	defffc04 	addi	sp,sp,-16
40001024:	dfc00315 	stw	ra,12(sp)
40001028:	df000215 	stw	fp,8(sp)
4000102c:	df000204 	addi	fp,sp,8
40001030:	e13fff15 	stw	r4,-4(fp)
	for (int i=0; i<n_layer; i++) {
40001034:	e03ffe15 	stw	zero,-8(fp)
40001038:	00000a06 	br	40001064 <_ZN2NN12make_ternaryEv+0x44>
		layer[i].make_ternary();
4000103c:	e0bfff17 	ldw	r2,-4(fp)
40001040:	10c00217 	ldw	r3,8(r2)
40001044:	e0bffe17 	ldw	r2,-8(fp)
40001048:	10800624 	muli	r2,r2,24
4000104c:	1885883a 	add	r2,r3,r2
40001050:	1009883a 	mov	r4,r2
40001054:	000196c0 	call	4000196c <_ZN7NNLayer12make_ternaryEv>
NN::~NN() {
	// TODO Auto-generated destructor stub
}

void NN::make_ternary() {
	for (int i=0; i<n_layer; i++) {
40001058:	e0bffe17 	ldw	r2,-8(fp)
4000105c:	10800044 	addi	r2,r2,1
40001060:	e0bffe15 	stw	r2,-8(fp)
40001064:	e0bfff17 	ldw	r2,-4(fp)
40001068:	10800117 	ldw	r2,4(r2)
4000106c:	e0fffe17 	ldw	r3,-8(fp)
40001070:	18bff216 	blt	r3,r2,4000103c <__alt_data_end+0xc000103c>
		layer[i].make_ternary();
	}
}
40001074:	e037883a 	mov	sp,fp
40001078:	dfc00117 	ldw	ra,4(sp)
4000107c:	df000017 	ldw	fp,0(sp)
40001080:	dec00204 	addi	sp,sp,8
40001084:	f800283a 	ret

40001088 <_ZN2NN9propagateEPs>:

BYTE * NN::propagate(BYTE * source) {
40001088:	defffb04 	addi	sp,sp,-20
4000108c:	dfc00415 	stw	ra,16(sp)
40001090:	df000315 	stw	fp,12(sp)
40001094:	df000304 	addi	fp,sp,12
40001098:	e13ffe15 	stw	r4,-8(fp)
4000109c:	e17fff15 	stw	r5,-4(fp)
	for (int i=0; i<n_layer; i++) {
400010a0:	e03ffd15 	stw	zero,-12(fp)
400010a4:	00000c06 	br	400010d8 <_ZN2NN9propagateEPs+0x50>
		source = layer[i].propagate(source);
400010a8:	e0bffe17 	ldw	r2,-8(fp)
400010ac:	10c00217 	ldw	r3,8(r2)
400010b0:	e0bffd17 	ldw	r2,-12(fp)
400010b4:	10800624 	muli	r2,r2,24
400010b8:	1885883a 	add	r2,r3,r2
400010bc:	1009883a 	mov	r4,r2
400010c0:	e17fff17 	ldw	r5,-4(fp)
400010c4:	0001bc00 	call	40001bc0 <_ZN7NNLayer9propagateEPs>
400010c8:	e0bfff15 	stw	r2,-4(fp)
		layer[i].make_ternary();
	}
}

BYTE * NN::propagate(BYTE * source) {
	for (int i=0; i<n_layer; i++) {
400010cc:	e0bffd17 	ldw	r2,-12(fp)
400010d0:	10800044 	addi	r2,r2,1
400010d4:	e0bffd15 	stw	r2,-12(fp)
400010d8:	e0bffe17 	ldw	r2,-8(fp)
400010dc:	10800117 	ldw	r2,4(r2)
400010e0:	e0fffd17 	ldw	r3,-12(fp)
400010e4:	18bff016 	blt	r3,r2,400010a8 <__alt_data_end+0xc00010a8>
		source = layer[i].propagate(source);
	}
	return source;
400010e8:	e0bfff17 	ldw	r2,-4(fp)
}
400010ec:	e037883a 	mov	sp,fp
400010f0:	dfc00117 	ldw	ra,4(sp)
400010f4:	df000017 	ldw	fp,0(sp)
400010f8:	dec00204 	addi	sp,sp,8
400010fc:	f800283a 	ret

40001100 <_ZN2NN17getMaxOutputIndexEv>:

int NN::getMaxOutputIndex() {
40001100:	defffb04 	addi	sp,sp,-20
40001104:	df000415 	stw	fp,16(sp)
40001108:	df000404 	addi	fp,sp,16
4000110c:	e13fff15 	stw	r4,-4(fp)
	float maxval = layer[n_layer-1].value[0];
40001110:	e0bfff17 	ldw	r2,-4(fp)
40001114:	10c00217 	ldw	r3,8(r2)
40001118:	e0bfff17 	ldw	r2,-4(fp)
4000111c:	10800117 	ldw	r2,4(r2)
40001120:	10800624 	muli	r2,r2,24
40001124:	10bffa04 	addi	r2,r2,-24
40001128:	1885883a 	add	r2,r3,r2
4000112c:	10800517 	ldw	r2,20(r2)
40001130:	1080000b 	ldhu	r2,0(r2)
40001134:	10bfffcc 	andi	r2,r2,65535
40001138:	10a0001c 	xori	r2,r2,32768
4000113c:	10a00004 	addi	r2,r2,-32768
40001140:	1005feb2 	custom	250,r2,r2,zero
40001144:	e0bffc15 	stw	r2,-16(fp)
	int maxindex = 0;
40001148:	e03ffd15 	stw	zero,-12(fp)
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
4000114c:	00800044 	movi	r2,1
40001150:	e0bffe15 	stw	r2,-8(fp)
40001154:	00002906 	br	400011fc <_ZN2NN17getMaxOutputIndexEv+0xfc>
		if( layer[n_layer-1].value[i] > maxval) {
40001158:	e0bfff17 	ldw	r2,-4(fp)
4000115c:	10c00217 	ldw	r3,8(r2)
40001160:	e0bfff17 	ldw	r2,-4(fp)
40001164:	10800117 	ldw	r2,4(r2)
40001168:	10800624 	muli	r2,r2,24
4000116c:	10bffa04 	addi	r2,r2,-24
40001170:	1885883a 	add	r2,r3,r2
40001174:	10c00517 	ldw	r3,20(r2)
40001178:	e0bffe17 	ldw	r2,-8(fp)
4000117c:	1085883a 	add	r2,r2,r2
40001180:	1885883a 	add	r2,r3,r2
40001184:	1080000b 	ldhu	r2,0(r2)
40001188:	10bfffcc 	andi	r2,r2,65535
4000118c:	10a0001c 	xori	r2,r2,32768
40001190:	10a00004 	addi	r2,r2,-32768
40001194:	1007feb2 	custom	250,r3,r2,zero
40001198:	e0bffc17 	ldw	r2,-16(fp)
4000119c:	1885f972 	custom	229,r2,r3,r2
400011a0:	10001326 	beq	r2,zero,400011f0 <_ZN2NN17getMaxOutputIndexEv+0xf0>
			maxval = layer[n_layer-1].value[i];
400011a4:	e0bfff17 	ldw	r2,-4(fp)
400011a8:	10c00217 	ldw	r3,8(r2)
400011ac:	e0bfff17 	ldw	r2,-4(fp)
400011b0:	10800117 	ldw	r2,4(r2)
400011b4:	10800624 	muli	r2,r2,24
400011b8:	10bffa04 	addi	r2,r2,-24
400011bc:	1885883a 	add	r2,r3,r2
400011c0:	10c00517 	ldw	r3,20(r2)
400011c4:	e0bffe17 	ldw	r2,-8(fp)
400011c8:	1085883a 	add	r2,r2,r2
400011cc:	1885883a 	add	r2,r3,r2
400011d0:	1080000b 	ldhu	r2,0(r2)
400011d4:	10bfffcc 	andi	r2,r2,65535
400011d8:	10a0001c 	xori	r2,r2,32768
400011dc:	10a00004 	addi	r2,r2,-32768
400011e0:	1005feb2 	custom	250,r2,r2,zero
400011e4:	e0bffc15 	stw	r2,-16(fp)
			maxindex = i;
400011e8:	e0bffe17 	ldw	r2,-8(fp)
400011ec:	e0bffd15 	stw	r2,-12(fp)
}

int NN::getMaxOutputIndex() {
	float maxval = layer[n_layer-1].value[0];
	int maxindex = 0;
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
400011f0:	e0bffe17 	ldw	r2,-8(fp)
400011f4:	10800044 	addi	r2,r2,1
400011f8:	e0bffe15 	stw	r2,-8(fp)
400011fc:	e0bfff17 	ldw	r2,-4(fp)
40001200:	10c00217 	ldw	r3,8(r2)
40001204:	e0bfff17 	ldw	r2,-4(fp)
40001208:	10800117 	ldw	r2,4(r2)
4000120c:	10800624 	muli	r2,r2,24
40001210:	10bffa04 	addi	r2,r2,-24
40001214:	1885883a 	add	r2,r3,r2
40001218:	10800217 	ldw	r2,8(r2)
4000121c:	e0fffe17 	ldw	r3,-8(fp)
40001220:	18bfcd16 	blt	r3,r2,40001158 <__alt_data_end+0xc0001158>
		if( layer[n_layer-1].value[i] > maxval) {
			maxval = layer[n_layer-1].value[i];
			maxindex = i;
		}
	}
	return maxindex;
40001224:	e0bffd17 	ldw	r2,-12(fp)
}
40001228:	e037883a 	mov	sp,fp
4000122c:	df000017 	ldw	fp,0(sp)
40001230:	dec00104 	addi	sp,sp,4
40001234:	f800283a 	ret

40001238 <_ZN2NN17getMaxOutputValueEv>:

int NN::getMaxOutputValue() {
40001238:	defffc04 	addi	sp,sp,-16
4000123c:	df000315 	stw	fp,12(sp)
40001240:	df000304 	addi	fp,sp,12
40001244:	e13fff15 	stw	r4,-4(fp)
	float maxval = layer[n_layer-1].value[0];
40001248:	e0bfff17 	ldw	r2,-4(fp)
4000124c:	10c00217 	ldw	r3,8(r2)
40001250:	e0bfff17 	ldw	r2,-4(fp)
40001254:	10800117 	ldw	r2,4(r2)
40001258:	10800624 	muli	r2,r2,24
4000125c:	10bffa04 	addi	r2,r2,-24
40001260:	1885883a 	add	r2,r3,r2
40001264:	10800517 	ldw	r2,20(r2)
40001268:	1080000b 	ldhu	r2,0(r2)
4000126c:	10bfffcc 	andi	r2,r2,65535
40001270:	10a0001c 	xori	r2,r2,32768
40001274:	10a00004 	addi	r2,r2,-32768
40001278:	1005feb2 	custom	250,r2,r2,zero
4000127c:	e0bffd15 	stw	r2,-12(fp)
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
40001280:	00800044 	movi	r2,1
40001284:	e0bffe15 	stw	r2,-8(fp)
40001288:	00002706 	br	40001328 <_ZN2NN17getMaxOutputValueEv+0xf0>
		if( layer[n_layer-1].value[i] > maxval) {
4000128c:	e0bfff17 	ldw	r2,-4(fp)
40001290:	10c00217 	ldw	r3,8(r2)
40001294:	e0bfff17 	ldw	r2,-4(fp)
40001298:	10800117 	ldw	r2,4(r2)
4000129c:	10800624 	muli	r2,r2,24
400012a0:	10bffa04 	addi	r2,r2,-24
400012a4:	1885883a 	add	r2,r3,r2
400012a8:	10c00517 	ldw	r3,20(r2)
400012ac:	e0bffe17 	ldw	r2,-8(fp)
400012b0:	1085883a 	add	r2,r2,r2
400012b4:	1885883a 	add	r2,r3,r2
400012b8:	1080000b 	ldhu	r2,0(r2)
400012bc:	10bfffcc 	andi	r2,r2,65535
400012c0:	10a0001c 	xori	r2,r2,32768
400012c4:	10a00004 	addi	r2,r2,-32768
400012c8:	1007feb2 	custom	250,r3,r2,zero
400012cc:	e0bffd17 	ldw	r2,-12(fp)
400012d0:	1885f972 	custom	229,r2,r3,r2
400012d4:	10001126 	beq	r2,zero,4000131c <_ZN2NN17getMaxOutputValueEv+0xe4>
			maxval = layer[n_layer-1].value[i];
400012d8:	e0bfff17 	ldw	r2,-4(fp)
400012dc:	10c00217 	ldw	r3,8(r2)
400012e0:	e0bfff17 	ldw	r2,-4(fp)
400012e4:	10800117 	ldw	r2,4(r2)
400012e8:	10800624 	muli	r2,r2,24
400012ec:	10bffa04 	addi	r2,r2,-24
400012f0:	1885883a 	add	r2,r3,r2
400012f4:	10c00517 	ldw	r3,20(r2)
400012f8:	e0bffe17 	ldw	r2,-8(fp)
400012fc:	1085883a 	add	r2,r2,r2
40001300:	1885883a 	add	r2,r3,r2
40001304:	1080000b 	ldhu	r2,0(r2)
40001308:	10bfffcc 	andi	r2,r2,65535
4000130c:	10a0001c 	xori	r2,r2,32768
40001310:	10a00004 	addi	r2,r2,-32768
40001314:	1005feb2 	custom	250,r2,r2,zero
40001318:	e0bffd15 	stw	r2,-12(fp)
	return maxindex;
}

int NN::getMaxOutputValue() {
	float maxval = layer[n_layer-1].value[0];
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
4000131c:	e0bffe17 	ldw	r2,-8(fp)
40001320:	10800044 	addi	r2,r2,1
40001324:	e0bffe15 	stw	r2,-8(fp)
40001328:	e0bfff17 	ldw	r2,-4(fp)
4000132c:	10c00217 	ldw	r3,8(r2)
40001330:	e0bfff17 	ldw	r2,-4(fp)
40001334:	10800117 	ldw	r2,4(r2)
40001338:	10800624 	muli	r2,r2,24
4000133c:	10bffa04 	addi	r2,r2,-24
40001340:	1885883a 	add	r2,r3,r2
40001344:	10800217 	ldw	r2,8(r2)
40001348:	e0fffe17 	ldw	r3,-8(fp)
4000134c:	18bfcf16 	blt	r3,r2,4000128c <__alt_data_end+0xc000128c>
		if( layer[n_layer-1].value[i] > maxval) {
			maxval = layer[n_layer-1].value[i];
		}
	}
	return maxval;
40001350:	e0fffd17 	ldw	r3,-12(fp)
40001354:	1805fe72 	custom	249,r2,r3,zero
}
40001358:	e037883a 	mov	sp,fp
4000135c:	df000017 	ldw	fp,0(sp)
40001360:	dec00104 	addi	sp,sp,4
40001364:	f800283a 	ret

40001368 <_ZN2NN5printEv>:

void NN::print() {
40001368:	defffc04 	addi	sp,sp,-16
4000136c:	dfc00315 	stw	ra,12(sp)
40001370:	df000215 	stw	fp,8(sp)
40001374:	df000204 	addi	fp,sp,8
40001378:	e13fff15 	stw	r4,-4(fp)
	for (int i=0; i<n_layer; i++) {
4000137c:	e03ffe15 	stw	zero,-8(fp)
40001380:	00000e06 	br	400013bc <_ZN2NN5printEv+0x54>
		printf("Layer : %i\r\n",i);
40001384:	01100074 	movhi	r4,16385
40001388:	2112b604 	addi	r4,r4,19160
4000138c:	e17ffe17 	ldw	r5,-8(fp)
40001390:	00088500 	call	40008850 <printf>

		layer[i].print();
40001394:	e0bfff17 	ldw	r2,-4(fp)
40001398:	10c00217 	ldw	r3,8(r2)
4000139c:	e0bffe17 	ldw	r2,-8(fp)
400013a0:	10800624 	muli	r2,r2,24
400013a4:	1885883a 	add	r2,r3,r2
400013a8:	1009883a 	mov	r4,r2
400013ac:	0001d740 	call	40001d74 <_ZN7NNLayer5printEv>
	}
	return maxval;
}

void NN::print() {
	for (int i=0; i<n_layer; i++) {
400013b0:	e0bffe17 	ldw	r2,-8(fp)
400013b4:	10800044 	addi	r2,r2,1
400013b8:	e0bffe15 	stw	r2,-8(fp)
400013bc:	e0bfff17 	ldw	r2,-4(fp)
400013c0:	10800117 	ldw	r2,4(r2)
400013c4:	e0fffe17 	ldw	r3,-8(fp)
400013c8:	18bfee16 	blt	r3,r2,40001384 <__alt_data_end+0xc0001384>
		printf("Layer : %i\r\n",i);

		layer[i].print();
	}
}
400013cc:	e037883a 	mov	sp,fp
400013d0:	dfc00117 	ldw	ra,4(sp)
400013d4:	df000017 	ldw	fp,0(sp)
400013d8:	dec00204 	addi	sp,sp,8
400013dc:	f800283a 	ret

400013e0 <_ZN2NN12printOutputsEv>:

void NN::printOutputs() {
400013e0:	defffc04 	addi	sp,sp,-16
400013e4:	dfc00315 	stw	ra,12(sp)
400013e8:	df000215 	stw	fp,8(sp)
400013ec:	df000204 	addi	fp,sp,8
400013f0:	e13fff15 	stw	r4,-4(fp)

	for(int i=0; i<layer[n_layer-1].n_neuron; i++) {
400013f4:	e03ffe15 	stw	zero,-8(fp)
400013f8:	00001706 	br	40001458 <_ZN2NN12printOutputsEv+0x78>
		printf("Neuron[%i]: %2.2f \r\n",i, layer[n_layer-1].value[i]);
400013fc:	e0bfff17 	ldw	r2,-4(fp)
40001400:	10c00217 	ldw	r3,8(r2)
40001404:	e0bfff17 	ldw	r2,-4(fp)
40001408:	10800117 	ldw	r2,4(r2)
4000140c:	10800624 	muli	r2,r2,24
40001410:	10bffa04 	addi	r2,r2,-24
40001414:	1885883a 	add	r2,r3,r2
40001418:	10c00517 	ldw	r3,20(r2)
4000141c:	e0bffe17 	ldw	r2,-8(fp)
40001420:	1085883a 	add	r2,r2,r2
40001424:	1885883a 	add	r2,r3,r2
40001428:	1080000b 	ldhu	r2,0(r2)
4000142c:	10bfffcc 	andi	r2,r2,65535
40001430:	10a0001c 	xori	r2,r2,32768
40001434:	10a00004 	addi	r2,r2,-32768
40001438:	01100074 	movhi	r4,16385
4000143c:	2112ba04 	addi	r4,r4,19176
40001440:	e17ffe17 	ldw	r5,-8(fp)
40001444:	100d883a 	mov	r6,r2
40001448:	00088500 	call	40008850 <printf>
	}
}

void NN::printOutputs() {

	for(int i=0; i<layer[n_layer-1].n_neuron; i++) {
4000144c:	e0bffe17 	ldw	r2,-8(fp)
40001450:	10800044 	addi	r2,r2,1
40001454:	e0bffe15 	stw	r2,-8(fp)
40001458:	e0bfff17 	ldw	r2,-4(fp)
4000145c:	10c00217 	ldw	r3,8(r2)
40001460:	e0bfff17 	ldw	r2,-4(fp)
40001464:	10800117 	ldw	r2,4(r2)
40001468:	10800624 	muli	r2,r2,24
4000146c:	10bffa04 	addi	r2,r2,-24
40001470:	1885883a 	add	r2,r3,r2
40001474:	10800217 	ldw	r2,8(r2)
40001478:	e0fffe17 	ldw	r3,-8(fp)
4000147c:	18bfdf16 	blt	r3,r2,400013fc <__alt_data_end+0xc00013fc>
		printf("Neuron[%i]: %2.2f \r\n",i, layer[n_layer-1].value[i]);
	}
	printf("\r\n");
40001480:	01100074 	movhi	r4,16385
40001484:	2112c004 	addi	r4,r4,19200
40001488:	00089640 	call	40008964 <puts>
}
4000148c:	e037883a 	mov	sp,fp
40001490:	dfc00117 	ldw	ra,4(sp)
40001494:	df000017 	ldw	fp,0(sp)
40001498:	dec00204 	addi	sp,sp,8
4000149c:	f800283a 	ret

400014a0 <_ZN7NNLayerC1Ev>:
#include "Image.h"


#define MAKE_TERNARY_THRESHOLD 0.3

NNLayer::NNLayer() {
400014a0:	defffe04 	addi	sp,sp,-8
400014a4:	df000115 	stw	fp,4(sp)
400014a8:	df000104 	addi	fp,sp,4
400014ac:	e13fff15 	stw	r4,-4(fp)
400014b0:	e0ffff17 	ldw	r3,-4(fp)
400014b4:	00900074 	movhi	r2,16385
400014b8:	1092d804 	addi	r2,r2,19296
400014bc:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub
	n_input = 0;
400014c0:	e0bfff17 	ldw	r2,-4(fp)
400014c4:	10000115 	stw	zero,4(r2)
	n_neuron = 0;
400014c8:	e0bfff17 	ldw	r2,-4(fp)
400014cc:	10000215 	stw	zero,8(r2)
	bias = 0;
400014d0:	e0bfff17 	ldw	r2,-4(fp)
400014d4:	10000315 	stw	zero,12(r2)
	weight = 0;
400014d8:	e0bfff17 	ldw	r2,-4(fp)
400014dc:	10000415 	stw	zero,16(r2)
	value = 0;
400014e0:	e0bfff17 	ldw	r2,-4(fp)
400014e4:	10000515 	stw	zero,20(r2)
}
400014e8:	e037883a 	mov	sp,fp
400014ec:	df000017 	ldw	fp,0(sp)
400014f0:	dec00104 	addi	sp,sp,4
400014f4:	f800283a 	ret

400014f8 <_ZN7NNLayerC1Eii>:

NNLayer::NNLayer(int new_n_input, int new_n_neuron) {
400014f8:	defffb04 	addi	sp,sp,-20
400014fc:	dfc00415 	stw	ra,16(sp)
40001500:	df000315 	stw	fp,12(sp)
40001504:	df000304 	addi	fp,sp,12
40001508:	e13ffd15 	stw	r4,-12(fp)
4000150c:	e17ffe15 	stw	r5,-8(fp)
40001510:	e1bfff15 	stw	r6,-4(fp)
40001514:	e0fffd17 	ldw	r3,-12(fp)
40001518:	00900074 	movhi	r2,16385
4000151c:	1092d804 	addi	r2,r2,19296
40001520:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub
	init(new_n_input, new_n_neuron);
40001524:	e13ffd17 	ldw	r4,-12(fp)
40001528:	e17ffe17 	ldw	r5,-8(fp)
4000152c:	e1bfff17 	ldw	r6,-4(fp)
40001530:	00015480 	call	40001548 <_ZN7NNLayer4initEii>
}
40001534:	e037883a 	mov	sp,fp
40001538:	dfc00117 	ldw	ra,4(sp)
4000153c:	df000017 	ldw	fp,0(sp)
40001540:	dec00204 	addi	sp,sp,8
40001544:	f800283a 	ret

40001548 <_ZN7NNLayer4initEii>:

void NNLayer::init(int new_n_input, int new_n_neuron) {
40001548:	defffb04 	addi	sp,sp,-20
4000154c:	dfc00415 	stw	ra,16(sp)
40001550:	df000315 	stw	fp,12(sp)
40001554:	df000304 	addi	fp,sp,12
40001558:	e13ffd15 	stw	r4,-12(fp)
4000155c:	e17ffe15 	stw	r5,-8(fp)
40001560:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	n_input = new_n_input;
40001564:	e0bffd17 	ldw	r2,-12(fp)
40001568:	e0fffe17 	ldw	r3,-8(fp)
4000156c:	10c00115 	stw	r3,4(r2)
	n_neuron = new_n_neuron;
40001570:	e0bffd17 	ldw	r2,-12(fp)
40001574:	e0ffff17 	ldw	r3,-4(fp)
40001578:	10c00215 	stw	r3,8(r2)

	bias = new BYTE[n_neuron];
4000157c:	e0bffd17 	ldw	r2,-12(fp)
40001580:	10800217 	ldw	r2,8(r2)
40001584:	00cfe034 	movhi	r3,16256
40001588:	18800236 	bltu	r3,r2,40001594 <_ZN7NNLayer4initEii+0x4c>
4000158c:	1085883a 	add	r2,r2,r2
40001590:	00000106 	br	40001598 <_ZN7NNLayer4initEii+0x50>
40001594:	00bfffc4 	movi	r2,-1
40001598:	1009883a 	mov	r4,r2
4000159c:	0003b440 	call	40003b44 <_Znaj>
400015a0:	1007883a 	mov	r3,r2
400015a4:	e0bffd17 	ldw	r2,-12(fp)
400015a8:	10c00315 	stw	r3,12(r2)

	weight = new BYTE[n_neuron*n_input];
400015ac:	e0bffd17 	ldw	r2,-12(fp)
400015b0:	10c00217 	ldw	r3,8(r2)
400015b4:	e0bffd17 	ldw	r2,-12(fp)
400015b8:	10800117 	ldw	r2,4(r2)
400015bc:	1885383a 	mul	r2,r3,r2
400015c0:	00cfe034 	movhi	r3,16256
400015c4:	18800236 	bltu	r3,r2,400015d0 <_ZN7NNLayer4initEii+0x88>
400015c8:	1085883a 	add	r2,r2,r2
400015cc:	00000106 	br	400015d4 <_ZN7NNLayer4initEii+0x8c>
400015d0:	00bfffc4 	movi	r2,-1
400015d4:	1009883a 	mov	r4,r2
400015d8:	0003b440 	call	40003b44 <_Znaj>
400015dc:	1007883a 	mov	r3,r2
400015e0:	e0bffd17 	ldw	r2,-12(fp)
400015e4:	10c00415 	stw	r3,16(r2)
	value = new BYTE[n_neuron];
400015e8:	e0bffd17 	ldw	r2,-12(fp)
400015ec:	10800217 	ldw	r2,8(r2)
400015f0:	00cfe034 	movhi	r3,16256
400015f4:	18800236 	bltu	r3,r2,40001600 <_ZN7NNLayer4initEii+0xb8>
400015f8:	1085883a 	add	r2,r2,r2
400015fc:	00000106 	br	40001604 <_ZN7NNLayer4initEii+0xbc>
40001600:	00bfffc4 	movi	r2,-1
40001604:	1009883a 	mov	r4,r2
40001608:	0003b440 	call	40003b44 <_Znaj>
4000160c:	1007883a 	mov	r3,r2
40001610:	e0bffd17 	ldw	r2,-12(fp)
40001614:	10c00515 	stw	r3,20(r2)
}
40001618:	e037883a 	mov	sp,fp
4000161c:	dfc00117 	ldw	ra,4(sp)
40001620:	df000017 	ldw	fp,0(sp)
40001624:	dec00204 	addi	sp,sp,8
40001628:	f800283a 	ret

4000162c <_Z6MYrandv>:

int MYrand() {
4000162c:	deffff04 	addi	sp,sp,-4
40001630:	df000015 	stw	fp,0(sp)
40001634:	d839883a 	mov	fp,sp
	static unsigned long seed=0x1234567;
	seed = seed * 3196829161;
40001638:	d0e00517 	ldw	r3,-32748(gp)
4000163c:	00afa334 	movhi	r2,48780
40001640:	10af7a44 	addi	r2,r2,-16919
40001644:	1885383a 	mul	r2,r3,r2
40001648:	d0a00515 	stw	r2,-32748(gp)
	return seed >> 1;
4000164c:	d0a00517 	ldw	r2,-32748(gp)
40001650:	1004d07a 	srli	r2,r2,1
}
40001654:	e037883a 	mov	sp,fp
40001658:	df000017 	ldw	fp,0(sp)
4000165c:	dec00104 	addi	sp,sp,4
40001660:	f800283a 	ret

40001664 <_ZN7NNLayer15rand_FloatRangeEff>:

float NNLayer::rand_FloatRange(float a, float b) {
40001664:	defffa04 	addi	sp,sp,-24
40001668:	dfc00515 	stw	ra,20(sp)
4000166c:	df000415 	stw	fp,16(sp)
40001670:	dc000315 	stw	r16,12(sp)
40001674:	df000404 	addi	fp,sp,16
40001678:	e13ffc15 	stw	r4,-16(fp)
4000167c:	e17ffd15 	stw	r5,-12(fp)
40001680:	e1bffe15 	stw	r6,-8(fp)
	return ((b-a)*((float)MYrand()/0x7FFFFFFF))+a;
40001684:	e0fffe17 	ldw	r3,-8(fp)
40001688:	e0bffd17 	ldw	r2,-12(fp)
4000168c:	18a1ffb2 	custom	254,r16,r3,r2
40001690:	000162c0 	call	4000162c <_Z6MYrandv>
40001694:	1007feb2 	custom	250,r3,r2,zero
40001698:	0093c034 	movhi	r2,20224
4000169c:	1885fff2 	custom	255,r2,r3,r2
400016a0:	8087ff32 	custom	252,r3,r16,r2
400016a4:	e0bffd17 	ldw	r2,-12(fp)
400016a8:	1885ff72 	custom	253,r2,r3,r2
400016ac:	1007883a 	mov	r3,r2
}
400016b0:	1805883a 	mov	r2,r3
400016b4:	e6ffff04 	addi	sp,fp,-4
400016b8:	dfc00217 	ldw	ra,8(sp)
400016bc:	df000117 	ldw	fp,4(sp)
400016c0:	dc000017 	ldw	r16,0(sp)
400016c4:	dec00304 	addi	sp,sp,12
400016c8:	f800283a 	ret

400016cc <_ZN7NNLayer16makeTernaryExtraEf>:

BYTE NNLayer::makeTernaryExtra(float fvalue){
400016cc:	defffc04 	addi	sp,sp,-16
400016d0:	dfc00315 	stw	ra,12(sp)
400016d4:	df000215 	stw	fp,8(sp)
400016d8:	df000204 	addi	fp,sp,8
400016dc:	e13ffe15 	stw	r4,-8(fp)
400016e0:	e17fff15 	stw	r5,-4(fp)
	if (fvalue >= 0.4) {
400016e4:	e13fff17 	ldw	r4,-4(fp)
400016e8:	00076a40 	call	400076a4 <__extendsfdf2>
400016ec:	100b883a 	mov	r5,r2
400016f0:	180d883a 	mov	r6,r3
400016f4:	2809883a 	mov	r4,r5
400016f8:	300b883a 	mov	r5,r6
400016fc:	01a666b4 	movhi	r6,39322
40001700:	31a66684 	addi	r6,r6,-26214
40001704:	01cff6b4 	movhi	r7,16346
40001708:	39e66644 	addi	r7,r7,-26215
4000170c:	00063980 	call	40006398 <__gedf2>
40001710:	10000216 	blt	r2,zero,4000171c <_ZN7NNLayer16makeTernaryExtraEf+0x50>
		return 1;
40001714:	00800044 	movi	r2,1
40001718:	00000f06 	br	40001758 <_ZN7NNLayer16makeTernaryExtraEf+0x8c>
	} else if(fvalue <=-0.4){
4000171c:	e13fff17 	ldw	r4,-4(fp)
40001720:	00076a40 	call	400076a4 <__extendsfdf2>
40001724:	100b883a 	mov	r5,r2
40001728:	180d883a 	mov	r6,r3
4000172c:	2809883a 	mov	r4,r5
40001730:	300b883a 	mov	r5,r6
40001734:	01a666b4 	movhi	r6,39322
40001738:	31a66684 	addi	r6,r6,-26214
4000173c:	01eff6b4 	movhi	r7,49114
40001740:	39e66644 	addi	r7,r7,-26215
40001744:	00064780 	call	40006478 <__ledf2>
40001748:	00800216 	blt	zero,r2,40001754 <_ZN7NNLayer16makeTernaryExtraEf+0x88>
		return -1;
4000174c:	00bfffc4 	movi	r2,-1
40001750:	00000106 	br	40001758 <_ZN7NNLayer16makeTernaryExtraEf+0x8c>
	} else {
		return 0;
40001754:	0005883a 	mov	r2,zero
	}
}
40001758:	e037883a 	mov	sp,fp
4000175c:	dfc00117 	ldw	ra,4(sp)
40001760:	df000017 	ldw	fp,0(sp)
40001764:	dec00204 	addi	sp,sp,8
40001768:	f800283a 	ret

4000176c <_ZN7NNLayer11random_initEii>:

void NNLayer::random_init(int new_n_input, int new_n_neuron) {
4000176c:	defff604 	addi	sp,sp,-40
40001770:	dfc00915 	stw	ra,36(sp)
40001774:	df000815 	stw	fp,32(sp)
40001778:	dc400715 	stw	r17,28(sp)
4000177c:	dc000615 	stw	r16,24(sp)
40001780:	df000804 	addi	fp,sp,32
40001784:	e13ffb15 	stw	r4,-20(fp)
40001788:	e17ffc15 	stw	r5,-16(fp)
4000178c:	e1bffd15 	stw	r6,-12(fp)
	// TODO Auto-generated constructor stub
	init(new_n_input, new_n_neuron);
40001790:	e13ffb17 	ldw	r4,-20(fp)
40001794:	e17ffc17 	ldw	r5,-16(fp)
40001798:	e1bffd17 	ldw	r6,-12(fp)
4000179c:	00015480 	call	40001548 <_ZN7NNLayer4initEii>

	bias = new BYTE[n_neuron];
400017a0:	e0bffb17 	ldw	r2,-20(fp)
400017a4:	10800217 	ldw	r2,8(r2)
400017a8:	00cfe034 	movhi	r3,16256
400017ac:	18800236 	bltu	r3,r2,400017b8 <_ZN7NNLayer11random_initEii+0x4c>
400017b0:	1085883a 	add	r2,r2,r2
400017b4:	00000106 	br	400017bc <_ZN7NNLayer11random_initEii+0x50>
400017b8:	00bfffc4 	movi	r2,-1
400017bc:	1009883a 	mov	r4,r2
400017c0:	0003b440 	call	40003b44 <_Znaj>
400017c4:	1007883a 	mov	r3,r2
400017c8:	e0bffb17 	ldw	r2,-20(fp)
400017cc:	10c00315 	stw	r3,12(r2)

	BYTE * cur_weight = weight;
400017d0:	e0bffb17 	ldw	r2,-20(fp)
400017d4:	10800417 	ldw	r2,16(r2)
400017d8:	e0bff815 	stw	r2,-32(fp)
	for (int i=0; i<n_neuron; i++) {
400017dc:	e03ff915 	stw	zero,-28(fp)
400017e0:	00004106 	br	400018e8 <_ZN7NNLayer11random_initEii+0x17c>
		bias[i] = makeTernaryExtra(rand_FloatRange(-log2(new_n_input),log2(new_n_input)));
400017e4:	e0bffb17 	ldw	r2,-20(fp)
400017e8:	10c00317 	ldw	r3,12(r2)
400017ec:	e0bff917 	ldw	r2,-28(fp)
400017f0:	1085883a 	add	r2,r2,r2
400017f4:	18a1883a 	add	r16,r3,r2
400017f8:	e13ffc17 	ldw	r4,-16(fp)
400017fc:	00075d40 	call	400075d4 <__floatsidf>
40001800:	100b883a 	mov	r5,r2
40001804:	180d883a 	mov	r6,r3
40001808:	2809883a 	mov	r4,r5
4000180c:	300b883a 	mov	r5,r6
40001810:	00040480 	call	40004048 <log2>
40001814:	100b883a 	mov	r5,r2
40001818:	180d883a 	mov	r6,r3
4000181c:	2809883a 	mov	r4,r5
40001820:	300b883a 	mov	r5,r6
40001824:	00077b40 	call	400077b4 <__truncdfsf2>
40001828:	1007883a 	mov	r3,r2
4000182c:	1823f872 	custom	225,r17,r3,zero
40001830:	e13ffc17 	ldw	r4,-16(fp)
40001834:	00075d40 	call	400075d4 <__floatsidf>
40001838:	100b883a 	mov	r5,r2
4000183c:	180d883a 	mov	r6,r3
40001840:	2809883a 	mov	r4,r5
40001844:	300b883a 	mov	r5,r6
40001848:	00040480 	call	40004048 <log2>
4000184c:	100b883a 	mov	r5,r2
40001850:	180d883a 	mov	r6,r3
40001854:	2809883a 	mov	r4,r5
40001858:	300b883a 	mov	r5,r6
4000185c:	00077b40 	call	400077b4 <__truncdfsf2>
40001860:	1007883a 	mov	r3,r2
40001864:	e13ffb17 	ldw	r4,-20(fp)
40001868:	880b883a 	mov	r5,r17
4000186c:	180d883a 	mov	r6,r3
40001870:	00016640 	call	40001664 <_ZN7NNLayer15rand_FloatRangeEff>
40001874:	1007883a 	mov	r3,r2
40001878:	e13ffb17 	ldw	r4,-20(fp)
4000187c:	180b883a 	mov	r5,r3
40001880:	00016cc0 	call	400016cc <_ZN7NNLayer16makeTernaryExtraEf>
40001884:	8080000d 	sth	r2,0(r16)
		for (int j=0; j<n_input; j++) {
40001888:	e03ffa15 	stw	zero,-24(fp)
4000188c:	00000f06 	br	400018cc <_ZN7NNLayer11random_initEii+0x160>
			*(cur_weight++) = makeTernaryExtra(rand_FloatRange(-1,1));
40001890:	e43ff817 	ldw	r16,-32(fp)
40001894:	80800084 	addi	r2,r16,2
40001898:	e0bff815 	stw	r2,-32(fp)
4000189c:	e13ffb17 	ldw	r4,-20(fp)
400018a0:	016fe034 	movhi	r5,49024
400018a4:	018fe034 	movhi	r6,16256
400018a8:	00016640 	call	40001664 <_ZN7NNLayer15rand_FloatRangeEff>
400018ac:	1007883a 	mov	r3,r2
400018b0:	e13ffb17 	ldw	r4,-20(fp)
400018b4:	180b883a 	mov	r5,r3
400018b8:	00016cc0 	call	400016cc <_ZN7NNLayer16makeTernaryExtraEf>
400018bc:	8080000d 	sth	r2,0(r16)
	bias = new BYTE[n_neuron];

	BYTE * cur_weight = weight;
	for (int i=0; i<n_neuron; i++) {
		bias[i] = makeTernaryExtra(rand_FloatRange(-log2(new_n_input),log2(new_n_input)));
		for (int j=0; j<n_input; j++) {
400018c0:	e0bffa17 	ldw	r2,-24(fp)
400018c4:	10800044 	addi	r2,r2,1
400018c8:	e0bffa15 	stw	r2,-24(fp)
400018cc:	e0bffb17 	ldw	r2,-20(fp)
400018d0:	10800117 	ldw	r2,4(r2)
400018d4:	e0fffa17 	ldw	r3,-24(fp)
400018d8:	18bfed16 	blt	r3,r2,40001890 <__alt_data_end+0xc0001890>
	init(new_n_input, new_n_neuron);

	bias = new BYTE[n_neuron];

	BYTE * cur_weight = weight;
	for (int i=0; i<n_neuron; i++) {
400018dc:	e0bff917 	ldw	r2,-28(fp)
400018e0:	10800044 	addi	r2,r2,1
400018e4:	e0bff915 	stw	r2,-28(fp)
400018e8:	e0bffb17 	ldw	r2,-20(fp)
400018ec:	10800217 	ldw	r2,8(r2)
400018f0:	e0fff917 	ldw	r3,-28(fp)
400018f4:	18bfbb16 	blt	r3,r2,400017e4 <__alt_data_end+0xc00017e4>
		bias[i] = makeTernaryExtra(rand_FloatRange(-log2(new_n_input),log2(new_n_input)));
		for (int j=0; j<n_input; j++) {
			*(cur_weight++) = makeTernaryExtra(rand_FloatRange(-1,1));
		}
	}
}
400018f8:	e6fffe04 	addi	sp,fp,-8
400018fc:	dfc00317 	ldw	ra,12(sp)
40001900:	df000217 	ldw	fp,8(sp)
40001904:	dc400117 	ldw	r17,4(sp)
40001908:	dc000017 	ldw	r16,0(sp)
4000190c:	dec00404 	addi	sp,sp,16
40001910:	f800283a 	ret

40001914 <_Z13vector_weighti>:

int vector_weight(int x) {
40001914:	defffd04 	addi	sp,sp,-12
40001918:	df000215 	stw	fp,8(sp)
4000191c:	df000204 	addi	fp,sp,8
40001920:	e13fff15 	stw	r4,-4(fp)
	int result = 0;
40001924:	e03ffe15 	stw	zero,-8(fp)
	while (x != 0) {
40001928:	00000906 	br	40001950 <_Z13vector_weighti+0x3c>
		if (x & 1) result++;
4000192c:	e0bfff17 	ldw	r2,-4(fp)
40001930:	1080004c 	andi	r2,r2,1
40001934:	10000326 	beq	r2,zero,40001944 <_Z13vector_weighti+0x30>
40001938:	e0bffe17 	ldw	r2,-8(fp)
4000193c:	10800044 	addi	r2,r2,1
40001940:	e0bffe15 	stw	r2,-8(fp)
		x >>=1;
40001944:	e0bfff17 	ldw	r2,-4(fp)
40001948:	1005d07a 	srai	r2,r2,1
4000194c:	e0bfff15 	stw	r2,-4(fp)
	}
}

int vector_weight(int x) {
	int result = 0;
	while (x != 0) {
40001950:	e0bfff17 	ldw	r2,-4(fp)
40001954:	103ff51e 	bne	r2,zero,4000192c <__alt_data_end+0xc000192c>
		if (x & 1) result++;
		x >>=1;
	}
	return result;
40001958:	e0bffe17 	ldw	r2,-8(fp)
}
4000195c:	e037883a 	mov	sp,fp
40001960:	df000017 	ldw	fp,0(sp)
40001964:	dec00104 	addi	sp,sp,4
40001968:	f800283a 	ret

4000196c <_ZN7NNLayer12make_ternaryEv>:

void NNLayer::make_ternary() {
4000196c:	defff904 	addi	sp,sp,-28
40001970:	dfc00615 	stw	ra,24(sp)
40001974:	df000515 	stw	fp,20(sp)
40001978:	dc000415 	stw	r16,16(sp)
4000197c:	df000504 	addi	fp,sp,20
40001980:	e13ffe15 	stw	r4,-8(fp)
	BYTE * cur_weight = weight;
40001984:	e0bffe17 	ldw	r2,-8(fp)
40001988:	10800417 	ldw	r2,16(r2)
4000198c:	e0bffb15 	stw	r2,-20(fp)
	for (int i=0; i<n_neuron; i++) {
40001990:	e03ffc15 	stw	zero,-16(fp)
40001994:	00005106 	br	40001adc <_ZN7NNLayer12make_ternaryEv+0x170>
		bias[i] = trunc(bias[i]);
40001998:	e0bffe17 	ldw	r2,-8(fp)
4000199c:	10c00317 	ldw	r3,12(r2)
400019a0:	e0bffc17 	ldw	r2,-16(fp)
400019a4:	1085883a 	add	r2,r2,r2
400019a8:	18a1883a 	add	r16,r3,r2
400019ac:	e0bffe17 	ldw	r2,-8(fp)
400019b0:	10c00317 	ldw	r3,12(r2)
400019b4:	e0bffc17 	ldw	r2,-16(fp)
400019b8:	1085883a 	add	r2,r2,r2
400019bc:	1885883a 	add	r2,r3,r2
400019c0:	1080000b 	ldhu	r2,0(r2)
400019c4:	10bfffcc 	andi	r2,r2,65535
400019c8:	10a0001c 	xori	r2,r2,32768
400019cc:	10a00004 	addi	r2,r2,-32768
400019d0:	1009883a 	mov	r4,r2
400019d4:	00075d40 	call	400075d4 <__floatsidf>
400019d8:	100b883a 	mov	r5,r2
400019dc:	180d883a 	mov	r6,r3
400019e0:	2809883a 	mov	r4,r5
400019e4:	300b883a 	mov	r5,r6
400019e8:	000754c0 	call	4000754c <__fixdfsi>
400019ec:	8080000d 	sth	r2,0(r16)
		for (int j=0; j<n_input; j++) {
400019f0:	e03ffd15 	stw	zero,-12(fp)
400019f4:	00003206 	br	40001ac0 <_ZN7NNLayer12make_ternaryEv+0x154>
			if (*cur_weight>MAKE_TERNARY_THRESHOLD) *cur_weight = 1;
400019f8:	e0bffb17 	ldw	r2,-20(fp)
400019fc:	1080000b 	ldhu	r2,0(r2)
40001a00:	10bfffcc 	andi	r2,r2,65535
40001a04:	10a0001c 	xori	r2,r2,32768
40001a08:	10a00004 	addi	r2,r2,-32768
40001a0c:	1009883a 	mov	r4,r2
40001a10:	00075d40 	call	400075d4 <__floatsidf>
40001a14:	100b883a 	mov	r5,r2
40001a18:	180d883a 	mov	r6,r3
40001a1c:	2809883a 	mov	r4,r5
40001a20:	300b883a 	mov	r5,r6
40001a24:	018cccf4 	movhi	r6,13107
40001a28:	318cccc4 	addi	r6,r6,13107
40001a2c:	01cff4f4 	movhi	r7,16339
40001a30:	39ccccc4 	addi	r7,r7,13107
40001a34:	00063980 	call	40006398 <__gedf2>
40001a38:	0080040e 	bge	zero,r2,40001a4c <_ZN7NNLayer12make_ternaryEv+0xe0>
40001a3c:	e0bffb17 	ldw	r2,-20(fp)
40001a40:	00c00044 	movi	r3,1
40001a44:	10c0000d 	sth	r3,0(r2)
40001a48:	00001706 	br	40001aa8 <_ZN7NNLayer12make_ternaryEv+0x13c>
			else if (*cur_weight<-MAKE_TERNARY_THRESHOLD) *cur_weight = -1;
40001a4c:	e0bffb17 	ldw	r2,-20(fp)
40001a50:	1080000b 	ldhu	r2,0(r2)
40001a54:	10bfffcc 	andi	r2,r2,65535
40001a58:	10a0001c 	xori	r2,r2,32768
40001a5c:	10a00004 	addi	r2,r2,-32768
40001a60:	1009883a 	mov	r4,r2
40001a64:	00075d40 	call	400075d4 <__floatsidf>
40001a68:	100b883a 	mov	r5,r2
40001a6c:	180d883a 	mov	r6,r3
40001a70:	2809883a 	mov	r4,r5
40001a74:	300b883a 	mov	r5,r6
40001a78:	018cccf4 	movhi	r6,13107
40001a7c:	318cccc4 	addi	r6,r6,13107
40001a80:	01eff4f4 	movhi	r7,49107
40001a84:	39ccccc4 	addi	r7,r7,13107
40001a88:	00064780 	call	40006478 <__ledf2>
40001a8c:	1000040e 	bge	r2,zero,40001aa0 <_ZN7NNLayer12make_ternaryEv+0x134>
40001a90:	e0bffb17 	ldw	r2,-20(fp)
40001a94:	00ffffc4 	movi	r3,-1
40001a98:	10c0000d 	sth	r3,0(r2)
40001a9c:	00000206 	br	40001aa8 <_ZN7NNLayer12make_ternaryEv+0x13c>
			else *cur_weight = 0;
40001aa0:	e0bffb17 	ldw	r2,-20(fp)
40001aa4:	1000000d 	sth	zero,0(r2)
			cur_weight++;
40001aa8:	e0bffb17 	ldw	r2,-20(fp)
40001aac:	10800084 	addi	r2,r2,2
40001ab0:	e0bffb15 	stw	r2,-20(fp)

void NNLayer::make_ternary() {
	BYTE * cur_weight = weight;
	for (int i=0; i<n_neuron; i++) {
		bias[i] = trunc(bias[i]);
		for (int j=0; j<n_input; j++) {
40001ab4:	e0bffd17 	ldw	r2,-12(fp)
40001ab8:	10800044 	addi	r2,r2,1
40001abc:	e0bffd15 	stw	r2,-12(fp)
40001ac0:	e0bffe17 	ldw	r2,-8(fp)
40001ac4:	10800117 	ldw	r2,4(r2)
40001ac8:	e0fffd17 	ldw	r3,-12(fp)
40001acc:	18bfca16 	blt	r3,r2,400019f8 <__alt_data_end+0xc00019f8>
	return result;
}

void NNLayer::make_ternary() {
	BYTE * cur_weight = weight;
	for (int i=0; i<n_neuron; i++) {
40001ad0:	e0bffc17 	ldw	r2,-16(fp)
40001ad4:	10800044 	addi	r2,r2,1
40001ad8:	e0bffc15 	stw	r2,-16(fp)
40001adc:	e0bffe17 	ldw	r2,-8(fp)
40001ae0:	10800217 	ldw	r2,8(r2)
40001ae4:	e0fffc17 	ldw	r3,-16(fp)
40001ae8:	18bfab16 	blt	r3,r2,40001998 <__alt_data_end+0xc0001998>
			else if (*cur_weight<-MAKE_TERNARY_THRESHOLD) *cur_weight = -1;
			else *cur_weight = 0;
			cur_weight++;
		}
	}
}
40001aec:	e6ffff04 	addi	sp,fp,-4
40001af0:	dfc00217 	ldw	ra,8(sp)
40001af4:	df000117 	ldw	fp,4(sp)
40001af8:	dc000017 	ldw	r16,0(sp)
40001afc:	dec00304 	addi	sp,sp,12
40001b00:	f800283a 	ret

40001b04 <_ZN7NNLayerD1Ev>:

NNLayer::~NNLayer() {
40001b04:	defffd04 	addi	sp,sp,-12
40001b08:	dfc00215 	stw	ra,8(sp)
40001b0c:	df000115 	stw	fp,4(sp)
40001b10:	df000104 	addi	fp,sp,4
40001b14:	e13fff15 	stw	r4,-4(fp)
40001b18:	e0ffff17 	ldw	r3,-4(fp)
40001b1c:	00900074 	movhi	r2,16385
40001b20:	1092d804 	addi	r2,r2,19296
40001b24:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub
}
40001b28:	0005883a 	mov	r2,zero
40001b2c:	10000226 	beq	r2,zero,40001b38 <_ZN7NNLayerD1Ev+0x34>
40001b30:	e13fff17 	ldw	r4,-4(fp)
40001b34:	00034e80 	call	400034e8 <_ZdlPv>
40001b38:	e037883a 	mov	sp,fp
40001b3c:	dfc00117 	ldw	ra,4(sp)
40001b40:	df000017 	ldw	fp,0(sp)
40001b44:	dec00204 	addi	sp,sp,8
40001b48:	f800283a 	ret

40001b4c <_ZN7NNLayerD0Ev>:
			cur_weight++;
		}
	}
}

NNLayer::~NNLayer() {
40001b4c:	defffd04 	addi	sp,sp,-12
40001b50:	dfc00215 	stw	ra,8(sp)
40001b54:	df000115 	stw	fp,4(sp)
40001b58:	df000104 	addi	fp,sp,4
40001b5c:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
40001b60:	e13fff17 	ldw	r4,-4(fp)
40001b64:	0001b040 	call	40001b04 <_ZN7NNLayerD1Ev>
40001b68:	e13fff17 	ldw	r4,-4(fp)
40001b6c:	00034e80 	call	400034e8 <_ZdlPv>
40001b70:	e037883a 	mov	sp,fp
40001b74:	dfc00117 	ldw	ra,4(sp)
40001b78:	df000017 	ldw	fp,0(sp)
40001b7c:	dec00204 	addi	sp,sp,8
40001b80:	f800283a 	ret

40001b84 <_ZN7NNLayer3fctEs>:

//Edit this function for ternary logic
BYTE NNLayer::fct(BYTE x) {
40001b84:	defffd04 	addi	sp,sp,-12
40001b88:	df000215 	stw	fp,8(sp)
40001b8c:	df000204 	addi	fp,sp,8
40001b90:	e13ffe15 	stw	r4,-8(fp)
40001b94:	2805883a 	mov	r2,r5
40001b98:	e0bfff0d 	sth	r2,-4(fp)
//	return 1.0/(1.0+exp(-x));
	if (x>0) return 1;
40001b9c:	e0bfff0f 	ldh	r2,-4(fp)
40001ba0:	0080020e 	bge	zero,r2,40001bac <_ZN7NNLayer3fctEs+0x28>
40001ba4:	00800044 	movi	r2,1
40001ba8:	00000106 	br	40001bb0 <_ZN7NNLayer3fctEs+0x2c>
	else return 0;
40001bac:	0005883a 	mov	r2,zero
}
40001bb0:	e037883a 	mov	sp,fp
40001bb4:	df000017 	ldw	fp,0(sp)
40001bb8:	dec00104 	addi	sp,sp,4
40001bbc:	f800283a 	ret

40001bc0 <_ZN7NNLayer9propagateEPs>:

BYTE * NNLayer::propagate(BYTE * source) {
40001bc0:	defff704 	addi	sp,sp,-36
40001bc4:	dfc00815 	stw	ra,32(sp)
40001bc8:	df000715 	stw	fp,28(sp)
40001bcc:	dc000615 	stw	r16,24(sp)
40001bd0:	df000704 	addi	fp,sp,28
40001bd4:	e13ffd15 	stw	r4,-12(fp)
40001bd8:	e17ffe15 	stw	r5,-8(fp)
	// TODO Auto-generated constructor stub
	BYTE * cur_weight = weight;
40001bdc:	e0bffd17 	ldw	r2,-12(fp)
40001be0:	10800417 	ldw	r2,16(r2)
40001be4:	e0bff915 	stw	r2,-28(fp)

	for (int i=0; i<n_neuron; i++) {
40001be8:	e03ffa15 	stw	zero,-24(fp)
40001bec:	00003106 	br	40001cb4 <_ZN7NNLayer9propagateEPs+0xf4>
		BYTE acc = bias[i];
40001bf0:	e0bffd17 	ldw	r2,-12(fp)
40001bf4:	10c00317 	ldw	r3,12(r2)
40001bf8:	e0bffa17 	ldw	r2,-24(fp)
40001bfc:	1085883a 	add	r2,r2,r2
40001c00:	1885883a 	add	r2,r3,r2
40001c04:	1080000b 	ldhu	r2,0(r2)
40001c08:	e0bffb0d 	sth	r2,-20(fp)

		for (int j=0; j<n_input; j++) {
40001c0c:	e03ffc15 	stw	zero,-16(fp)
40001c10:	00001706 	br	40001c70 <_ZN7NNLayer9propagateEPs+0xb0>
			acc += *(cur_weight++) * source[j];
40001c14:	e0bff917 	ldw	r2,-28(fp)
40001c18:	10c00084 	addi	r3,r2,2
40001c1c:	e0fff915 	stw	r3,-28(fp)
40001c20:	1080000b 	ldhu	r2,0(r2)
40001c24:	10ffffcc 	andi	r3,r2,65535
40001c28:	18e0001c 	xori	r3,r3,32768
40001c2c:	18e00004 	addi	r3,r3,-32768
40001c30:	e0bffc17 	ldw	r2,-16(fp)
40001c34:	1085883a 	add	r2,r2,r2
40001c38:	1009883a 	mov	r4,r2
40001c3c:	e0bffe17 	ldw	r2,-8(fp)
40001c40:	1105883a 	add	r2,r2,r4
40001c44:	1080000b 	ldhu	r2,0(r2)
40001c48:	10bfffcc 	andi	r2,r2,65535
40001c4c:	10a0001c 	xori	r2,r2,32768
40001c50:	10a00004 	addi	r2,r2,-32768
40001c54:	1885383a 	mul	r2,r3,r2
40001c58:	e0fffb0f 	ldh	r3,-20(fp)
40001c5c:	1885883a 	add	r2,r3,r2
40001c60:	e0bffb0d 	sth	r2,-20(fp)
	BYTE * cur_weight = weight;

	for (int i=0; i<n_neuron; i++) {
		BYTE acc = bias[i];

		for (int j=0; j<n_input; j++) {
40001c64:	e0bffc17 	ldw	r2,-16(fp)
40001c68:	10800044 	addi	r2,r2,1
40001c6c:	e0bffc15 	stw	r2,-16(fp)
40001c70:	e0bffd17 	ldw	r2,-12(fp)
40001c74:	10800117 	ldw	r2,4(r2)
40001c78:	e0fffc17 	ldw	r3,-16(fp)
40001c7c:	18bfe516 	blt	r3,r2,40001c14 <__alt_data_end+0xc0001c14>
			acc += *(cur_weight++) * source[j];
		}
		value[i] = fct(acc); //Binary result
40001c80:	e0bffd17 	ldw	r2,-12(fp)
40001c84:	10c00517 	ldw	r3,20(r2)
40001c88:	e0bffa17 	ldw	r2,-24(fp)
40001c8c:	1085883a 	add	r2,r2,r2
40001c90:	18a1883a 	add	r16,r3,r2
40001c94:	e0bffb0f 	ldh	r2,-20(fp)
40001c98:	e13ffd17 	ldw	r4,-12(fp)
40001c9c:	100b883a 	mov	r5,r2
40001ca0:	0001b840 	call	40001b84 <_ZN7NNLayer3fctEs>
40001ca4:	8080000d 	sth	r2,0(r16)

BYTE * NNLayer::propagate(BYTE * source) {
	// TODO Auto-generated constructor stub
	BYTE * cur_weight = weight;

	for (int i=0; i<n_neuron; i++) {
40001ca8:	e0bffa17 	ldw	r2,-24(fp)
40001cac:	10800044 	addi	r2,r2,1
40001cb0:	e0bffa15 	stw	r2,-24(fp)
40001cb4:	e0bffd17 	ldw	r2,-12(fp)
40001cb8:	10800217 	ldw	r2,8(r2)
40001cbc:	e0fffa17 	ldw	r3,-24(fp)
40001cc0:	18bfcb16 	blt	r3,r2,40001bf0 <__alt_data_end+0xc0001bf0>
		for (int j=0; j<n_input; j++) {
			acc += *(cur_weight++) * source[j];
		}
		value[i] = fct(acc); //Binary result
	}
	return value;
40001cc4:	e0bffd17 	ldw	r2,-12(fp)
40001cc8:	10800517 	ldw	r2,20(r2)
}
40001ccc:	e6ffff04 	addi	sp,fp,-4
40001cd0:	dfc00217 	ldw	ra,8(sp)
40001cd4:	df000117 	ldw	fp,4(sp)
40001cd8:	dc000017 	ldw	r16,0(sp)
40001cdc:	dec00304 	addi	sp,sp,12
40001ce0:	f800283a 	ret

40001ce4 <_ZN7NNLayer16print_activationEv>:

void NNLayer::print_activation() {
40001ce4:	defffc04 	addi	sp,sp,-16
40001ce8:	dfc00315 	stw	ra,12(sp)
40001cec:	df000215 	stw	fp,8(sp)
40001cf0:	df000204 	addi	fp,sp,8
40001cf4:	e13fff15 	stw	r4,-4(fp)
	printf("---------------\n");
40001cf8:	01100074 	movhi	r4,16385
40001cfc:	2112c504 	addi	r4,r4,19220
40001d00:	00089640 	call	40008964 <puts>
	for (int i=0; i<n_neuron; i++) {
40001d04:	e03ffe15 	stw	zero,-8(fp)
40001d08:	00001106 	br	40001d50 <_ZN7NNLayer16print_activationEv+0x6c>
		printf("%i, %i\n", i, (int)value[i]);
40001d0c:	e0bfff17 	ldw	r2,-4(fp)
40001d10:	10c00517 	ldw	r3,20(r2)
40001d14:	e0bffe17 	ldw	r2,-8(fp)
40001d18:	1085883a 	add	r2,r2,r2
40001d1c:	1885883a 	add	r2,r3,r2
40001d20:	1080000b 	ldhu	r2,0(r2)
40001d24:	10bfffcc 	andi	r2,r2,65535
40001d28:	10a0001c 	xori	r2,r2,32768
40001d2c:	10a00004 	addi	r2,r2,-32768
40001d30:	01100074 	movhi	r4,16385
40001d34:	2112c904 	addi	r4,r4,19236
40001d38:	e17ffe17 	ldw	r5,-8(fp)
40001d3c:	100d883a 	mov	r6,r2
40001d40:	00088500 	call	40008850 <printf>
	return value;
}

void NNLayer::print_activation() {
	printf("---------------\n");
	for (int i=0; i<n_neuron; i++) {
40001d44:	e0bffe17 	ldw	r2,-8(fp)
40001d48:	10800044 	addi	r2,r2,1
40001d4c:	e0bffe15 	stw	r2,-8(fp)
40001d50:	e0bfff17 	ldw	r2,-4(fp)
40001d54:	10800217 	ldw	r2,8(r2)
40001d58:	e0fffe17 	ldw	r3,-8(fp)
40001d5c:	18bfeb16 	blt	r3,r2,40001d0c <__alt_data_end+0xc0001d0c>
		printf("%i, %i\n", i, (int)value[i]);
	}
}
40001d60:	e037883a 	mov	sp,fp
40001d64:	dfc00117 	ldw	ra,4(sp)
40001d68:	df000017 	ldw	fp,0(sp)
40001d6c:	dec00204 	addi	sp,sp,8
40001d70:	f800283a 	ret

40001d74 <_ZN7NNLayer5printEv>:

void NNLayer::print() {
40001d74:	defffa04 	addi	sp,sp,-24
40001d78:	dfc00515 	stw	ra,20(sp)
40001d7c:	df000415 	stw	fp,16(sp)
40001d80:	df000404 	addi	fp,sp,16
40001d84:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub

	BYTE * cur_weight = weight;
40001d88:	e0bfff17 	ldw	r2,-4(fp)
40001d8c:	10800417 	ldw	r2,16(r2)
40001d90:	e0bffc15 	stw	r2,-16(fp)

	for (int i=0; i<n_neuron; i++) {
40001d94:	e03ffd15 	stw	zero,-12(fp)
40001d98:	00004106 	br	40001ea0 <_ZN7NNLayer5printEv+0x12c>
		printf("Neuron %i: %f, {", i+1, bias[i]);
40001d9c:	e0bffd17 	ldw	r2,-12(fp)
40001da0:	11400044 	addi	r5,r2,1
40001da4:	e0bfff17 	ldw	r2,-4(fp)
40001da8:	10c00317 	ldw	r3,12(r2)
40001dac:	e0bffd17 	ldw	r2,-12(fp)
40001db0:	1085883a 	add	r2,r2,r2
40001db4:	1885883a 	add	r2,r3,r2
40001db8:	1080000b 	ldhu	r2,0(r2)
40001dbc:	10bfffcc 	andi	r2,r2,65535
40001dc0:	10a0001c 	xori	r2,r2,32768
40001dc4:	10a00004 	addi	r2,r2,-32768
40001dc8:	01100074 	movhi	r4,16385
40001dcc:	2112cb04 	addi	r4,r4,19244
40001dd0:	100d883a 	mov	r6,r2
40001dd4:	00088500 	call	40008850 <printf>
		for (int j=0; j<n_input; j++) {
40001dd8:	e03ffe15 	stw	zero,-8(fp)
40001ddc:	00001c06 	br	40001e50 <_ZN7NNLayer5printEv+0xdc>
			if (j!=0) printf(", %2.2f", *(cur_weight++));
40001de0:	e0bffe17 	ldw	r2,-8(fp)
40001de4:	10000c26 	beq	r2,zero,40001e18 <_ZN7NNLayer5printEv+0xa4>
40001de8:	e0bffc17 	ldw	r2,-16(fp)
40001dec:	10c00084 	addi	r3,r2,2
40001df0:	e0fffc15 	stw	r3,-16(fp)
40001df4:	1080000b 	ldhu	r2,0(r2)
40001df8:	10bfffcc 	andi	r2,r2,65535
40001dfc:	10a0001c 	xori	r2,r2,32768
40001e00:	10a00004 	addi	r2,r2,-32768
40001e04:	01100074 	movhi	r4,16385
40001e08:	2112d004 	addi	r4,r4,19264
40001e0c:	100b883a 	mov	r5,r2
40001e10:	00088500 	call	40008850 <printf>
40001e14:	00000b06 	br	40001e44 <_ZN7NNLayer5printEv+0xd0>
			else printf("%2.2f", *(cur_weight++));
40001e18:	e0bffc17 	ldw	r2,-16(fp)
40001e1c:	10c00084 	addi	r3,r2,2
40001e20:	e0fffc15 	stw	r3,-16(fp)
40001e24:	1080000b 	ldhu	r2,0(r2)
40001e28:	10bfffcc 	andi	r2,r2,65535
40001e2c:	10a0001c 	xori	r2,r2,32768
40001e30:	10a00004 	addi	r2,r2,-32768
40001e34:	01100074 	movhi	r4,16385
40001e38:	2112d204 	addi	r4,r4,19272
40001e3c:	100b883a 	mov	r5,r2
40001e40:	00088500 	call	40008850 <printf>

	BYTE * cur_weight = weight;

	for (int i=0; i<n_neuron; i++) {
		printf("Neuron %i: %f, {", i+1, bias[i]);
		for (int j=0; j<n_input; j++) {
40001e44:	e0bffe17 	ldw	r2,-8(fp)
40001e48:	10800044 	addi	r2,r2,1
40001e4c:	e0bffe15 	stw	r2,-8(fp)
40001e50:	e0bfff17 	ldw	r2,-4(fp)
40001e54:	10800117 	ldw	r2,4(r2)
40001e58:	e0fffe17 	ldw	r3,-8(fp)
40001e5c:	18bfe016 	blt	r3,r2,40001de0 <__alt_data_end+0xc0001de0>
			if (j!=0) printf(", %2.2f", *(cur_weight++));
			else printf("%2.2f", *(cur_weight++));
		}
		printf("}, %f\r\n",value[i]);
40001e60:	e0bfff17 	ldw	r2,-4(fp)
40001e64:	10c00517 	ldw	r3,20(r2)
40001e68:	e0bffd17 	ldw	r2,-12(fp)
40001e6c:	1085883a 	add	r2,r2,r2
40001e70:	1885883a 	add	r2,r3,r2
40001e74:	1080000b 	ldhu	r2,0(r2)
40001e78:	10bfffcc 	andi	r2,r2,65535
40001e7c:	10a0001c 	xori	r2,r2,32768
40001e80:	10a00004 	addi	r2,r2,-32768
40001e84:	01100074 	movhi	r4,16385
40001e88:	2112d404 	addi	r4,r4,19280
40001e8c:	100b883a 	mov	r5,r2
40001e90:	00088500 	call	40008850 <printf>
void NNLayer::print() {
	// TODO Auto-generated constructor stub

	BYTE * cur_weight = weight;

	for (int i=0; i<n_neuron; i++) {
40001e94:	e0bffd17 	ldw	r2,-12(fp)
40001e98:	10800044 	addi	r2,r2,1
40001e9c:	e0bffd15 	stw	r2,-12(fp)
40001ea0:	e0bfff17 	ldw	r2,-4(fp)
40001ea4:	10800217 	ldw	r2,8(r2)
40001ea8:	e0fffd17 	ldw	r3,-12(fp)
40001eac:	18bfbb16 	blt	r3,r2,40001d9c <__alt_data_end+0xc0001d9c>
			if (j!=0) printf(", %2.2f", *(cur_weight++));
			else printf("%2.2f", *(cur_weight++));
		}
		printf("}, %f\r\n",value[i]);
	}
}
40001eb0:	e037883a 	mov	sp,fp
40001eb4:	dfc00117 	ldw	ra,4(sp)
40001eb8:	df000017 	ldw	fp,0(sp)
40001ebc:	dec00204 	addi	sp,sp,8
40001ec0:	f800283a 	ret

40001ec4 <_ZN3VGA3clrEv>:
#include "VGA.h"
#include "io.h"

//-------------------------------------------------------------------------
void VGA::clr() {
40001ec4:	defffd04 	addi	sp,sp,-12
40001ec8:	df000215 	stw	fp,8(sp)
40001ecc:	df000204 	addi	fp,sp,8
40001ed0:	e13fff15 	stw	r4,-4(fp)
  int x;
  for (x=0;x<640*480/4;x++) {
40001ed4:	e03ffe15 	stw	zero,-8(fp)
40001ed8:	00000c06 	br	40001f0c <_ZN3VGA3clrEv+0x48>
     IOWR(memory_address, x, 0x0);
40001edc:	e0bffe17 	ldw	r2,-8(fp)
40001ee0:	1085883a 	add	r2,r2,r2
40001ee4:	1085883a 	add	r2,r2,r2
40001ee8:	1007883a 	mov	r3,r2
40001eec:	e0bfff17 	ldw	r2,-4(fp)
40001ef0:	10800117 	ldw	r2,4(r2)
40001ef4:	1885883a 	add	r2,r3,r2
40001ef8:	0007883a 	mov	r3,zero
40001efc:	10c00035 	stwio	r3,0(r2)
#include "io.h"

//-------------------------------------------------------------------------
void VGA::clr() {
  int x;
  for (x=0;x<640*480/4;x++) {
40001f00:	e0bffe17 	ldw	r2,-8(fp)
40001f04:	10800044 	addi	r2,r2,1
40001f08:	e0bffe15 	stw	r2,-8(fp)
40001f0c:	e0fffe17 	ldw	r3,-8(fp)
40001f10:	00800074 	movhi	r2,1
40001f14:	108affc4 	addi	r2,r2,11263
40001f18:	10fff00e 	bge	r2,r3,40001edc <__alt_data_end+0xc0001edc>
     IOWR(memory_address, x, 0x0);
  }
}
40001f1c:	e037883a 	mov	sp,fp
40001f20:	df000017 	ldw	fp,0(sp)
40001f24:	dec00104 	addi	sp,sp,4
40001f28:	f800283a 	ret

40001f2c <main>:

/*********************************************************************
 * main
 *********************************************************************/
int main(int argc, char **argv)
{
40001f2c:	deffd704 	addi	sp,sp,-164
40001f30:	dfc02815 	stw	ra,160(sp)
40001f34:	df002715 	stw	fp,156(sp)
40001f38:	ddc02615 	stw	r23,152(sp)
40001f3c:	dd802515 	stw	r22,148(sp)
40001f40:	dd402415 	stw	r21,144(sp)
40001f44:	dd002315 	stw	r20,140(sp)
40001f48:	dcc02215 	stw	r19,136(sp)
40001f4c:	dc802115 	stw	r18,132(sp)
40001f50:	dc402015 	stw	r17,128(sp)
40001f54:	dc001f15 	stw	r16,124(sp)
40001f58:	df002704 	addi	fp,sp,156
40001f5c:	e13fe415 	stw	r4,-112(fp)
40001f60:	e17fe515 	stw	r5,-108(fp)
40001f64:	00900034 	movhi	r2,16384
40001f68:	108ab504 	addi	r2,r2,10964
40001f6c:	e0bfec15 	stw	r2,-80(fp)
40001f70:	00900074 	movhi	r2,16385
40001f74:	10929a04 	addi	r2,r2,19048
40001f78:	e0bfed15 	stw	r2,-76(fp)
40001f7c:	e0bfee04 	addi	r2,fp,-72
40001f80:	e0ffd904 	addi	r3,fp,-156
40001f84:	10c00015 	stw	r3,0(r2)
40001f88:	00d00034 	movhi	r3,16384
40001f8c:	18c87f04 	addi	r3,r3,8700
40001f90:	10c00115 	stw	r3,4(r2)
40001f94:	16c00215 	stw	sp,8(r2)
40001f98:	e0bfe604 	addi	r2,fp,-104
40001f9c:	1009883a 	mov	r4,r2
40001fa0:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
	printf("Entering ELE8307 Fall 2018 Project main() \r\n");
40001fa4:	01100074 	movhi	r4,16385
40001fa8:	00bfffc4 	movi	r2,-1
40001fac:	e0bfe715 	stw	r2,-100(fp)
40001fb0:	2112dd04 	addi	r4,r4,19316
40001fb4:	00089640 	call	40008964 <puts>

	pVGA = new VGA(ELE8307_VGA_0_BASE, (int)display);
40001fb8:	01000204 	movi	r4,8
40001fbc:	00038f80 	call	400038f8 <_Znwj>
40001fc0:	e0bff315 	stw	r2,-52(fp)
40001fc4:	009000b4 	movhi	r2,16386
40001fc8:	10a22904 	addi	r2,r2,-30556
40001fcc:	e13ff317 	ldw	r4,-52(fp)
40001fd0:	01400174 	movhi	r5,5
40001fd4:	100d883a 	mov	r6,r2
40001fd8:	00022440 	call	40002244 <_ZN3VGAC1Eii>
40001fdc:	e0bff317 	ldw	r2,-52(fp)
40001fe0:	d0a71b15 	stw	r2,-25492(gp)
	pVGA->send_to_display();
40001fe4:	d0a71b17 	ldw	r2,-25492(gp)
40001fe8:	1009883a 	mov	r4,r2
40001fec:	00022840 	call	40002284 <_ZN3VGA15send_to_displayEv>
	pVGA->clr();
40001ff0:	d0a71b17 	ldw	r2,-25492(gp)
40001ff4:	1009883a 	mov	r4,r2
40001ff8:	0001ec40 	call	40001ec4 <_ZN3VGA3clrEv>

    /* Initialisation et application a une image de la machine neuronale (poids aleatoires) */

    printf("> Exemple 1: NN Aleatoire \r\n");
40001ffc:	01100074 	movhi	r4,16385
40002000:	2112e804 	addi	r4,r4,19360
40002004:	00089640 	call	40008964 <puts>
    NN network(3);
40002008:	e0bfde04 	addi	r2,fp,-136
4000200c:	1009883a 	mov	r4,r2
40002010:	014000c4 	movi	r5,3
40002014:	0000d880 	call	40000d88 <_ZN2NNC1Ei>
    int matrix_size = 16;
40002018:	00800404 	movi	r2,16
4000201c:	e0bfda15 	stw	r2,-152(fp)

    network.layer[0].random_init(matrix_size*matrix_size, 40);
40002020:	e13fe017 	ldw	r4,-128(fp)
40002024:	e0ffda17 	ldw	r3,-152(fp)
40002028:	e0bfda17 	ldw	r2,-152(fp)
4000202c:	1887383a 	mul	r3,r3,r2
40002030:	00800044 	movi	r2,1
40002034:	e0bfe715 	stw	r2,-100(fp)
40002038:	180b883a 	mov	r5,r3
4000203c:	01800a04 	movi	r6,40
40002040:	000176c0 	call	4000176c <_ZN7NNLayer11random_initEii>
    network.layer[1].random_init(40, 40);network.layer[1].make_ternary();
40002044:	e0bfe017 	ldw	r2,-128(fp)
40002048:	10800604 	addi	r2,r2,24
4000204c:	1009883a 	mov	r4,r2
40002050:	01400a04 	movi	r5,40
40002054:	01800a04 	movi	r6,40
40002058:	000176c0 	call	4000176c <_ZN7NNLayer11random_initEii>
4000205c:	e0bfe017 	ldw	r2,-128(fp)
40002060:	10800604 	addi	r2,r2,24
40002064:	1009883a 	mov	r4,r2
40002068:	000196c0 	call	4000196c <_ZN7NNLayer12make_ternaryEv>
    network.layer[2].random_init(40, 10);network.layer[2].make_ternary();
4000206c:	e0bfe017 	ldw	r2,-128(fp)
40002070:	10800c04 	addi	r2,r2,48
40002074:	1009883a 	mov	r4,r2
40002078:	01400a04 	movi	r5,40
4000207c:	01800284 	movi	r6,10
40002080:	000176c0 	call	4000176c <_ZN7NNLayer11random_initEii>
40002084:	e0bfe017 	ldw	r2,-128(fp)
40002088:	10800c04 	addi	r2,r2,48
4000208c:	1009883a 	mov	r4,r2
40002090:	000196c0 	call	4000196c <_ZN7NNLayer12make_ternaryEv>

	Image my_image(60,200);
40002094:	e0bfe104 	addi	r2,fp,-124
40002098:	1009883a 	mov	r4,r2
4000209c:	01400f04 	movi	r5,60
400020a0:	01803204 	movi	r6,200
400020a4:	00002200 	call	40000220 <_ZN5ImageC1Eii>
	my_image.make_fractal();
400020a8:	e0ffe104 	addi	r3,fp,-124
400020ac:	00800084 	movi	r2,2
400020b0:	e0bfe715 	stw	r2,-100(fp)
400020b4:	1809883a 	mov	r4,r3
400020b8:	00004cc0 	call	400004cc <_ZN5Image12make_fractalEv>
	my_image.printToScreen(0,0,pVGA);
400020bc:	d0a71b17 	ldw	r2,-25492(gp)
400020c0:	e0ffe104 	addi	r3,fp,-124
400020c4:	1809883a 	mov	r4,r3
400020c8:	000b883a 	mov	r5,zero
400020cc:	000d883a 	mov	r6,zero
400020d0:	100f883a 	mov	r7,r2
400020d4:	0000b380 	call	40000b38 <_ZN5Image13printToScreenEiiP3VGA>
	my_image.make_bw();
400020d8:	e0bfe104 	addi	r2,fp,-124
400020dc:	1009883a 	mov	r4,r2
400020e0:	000076c0 	call	4000076c <_ZN5Image7make_bwEv>
	my_image.printToScreen(120,0,pVGA);
400020e4:	d0a71b17 	ldw	r2,-25492(gp)
400020e8:	e0ffe104 	addi	r3,fp,-124
400020ec:	1809883a 	mov	r4,r3
400020f0:	01401e04 	movi	r5,120
400020f4:	000d883a 	mov	r6,zero
400020f8:	100f883a 	mov	r7,r2
400020fc:	0000b380 	call	40000b38 <_ZN5Image13printToScreenEiiP3VGA>
	printf("Start processing ...");
40002100:	01100074 	movhi	r4,16385
40002104:	2112ef04 	addi	r4,r4,19388
40002108:	00088500 	call	40008850 <printf>

	for (int i=0;i<1;i++) {
4000210c:	e03fd915 	stw	zero,-156(fp)
40002110:	00002e06 	br	400021cc <main+0x2a0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
40002114:	009000b4 	movhi	r2,16386
40002118:	10a22704 	addi	r2,r2,-30564
4000211c:	10800017 	ldw	r2,0(r2)
		int time1 = alt_nticks();
40002120:	e0bfdb15 	stw	r2,-148(fp)
		Image * result_image = my_image.apply_NN(&network, matrix_size, i);
40002124:	e13fe104 	addi	r4,fp,-124
40002128:	e0ffde04 	addi	r3,fp,-136
4000212c:	00800084 	movi	r2,2
40002130:	e0bfe715 	stw	r2,-100(fp)
40002134:	180b883a 	mov	r5,r3
40002138:	e1bfda17 	ldw	r6,-152(fp)
4000213c:	e1ffd917 	ldw	r7,-156(fp)
40002140:	00008340 	call	40000834 <_ZN5Image8apply_NNEP2NNii>
40002144:	e0bfdc15 	stw	r2,-144(fp)
40002148:	009000b4 	movhi	r2,16386
4000214c:	10a22704 	addi	r2,r2,-30564
40002150:	10800017 	ldw	r2,0(r2)
		int time2 = alt_nticks();
40002154:	e0bfdd15 	stw	r2,-140(fp)
		result_image->printToScreen(60*i,240,pVGA);
40002158:	e0bfd917 	ldw	r2,-156(fp)
4000215c:	11400f24 	muli	r5,r2,60
40002160:	d0e71b17 	ldw	r3,-25492(gp)
40002164:	00800084 	movi	r2,2
40002168:	e0bfe715 	stw	r2,-100(fp)
4000216c:	e13fdc17 	ldw	r4,-144(fp)
40002170:	01803c04 	movi	r6,240
40002174:	180f883a 	mov	r7,r3
40002178:	0000b380 	call	40000b38 <_ZN5Image13printToScreenEiiP3VGA>
		delete result_image;
4000217c:	e0ffdc17 	ldw	r3,-144(fp)
40002180:	e0fff415 	stw	r3,-48(fp)
40002184:	e0bff417 	ldw	r2,-48(fp)
40002188:	10000426 	beq	r2,zero,4000219c <main+0x270>
4000218c:	e13ff417 	ldw	r4,-48(fp)
40002190:	0000cbc0 	call	40000cbc <_ZN5ImageD1Ev>
40002194:	e13ff417 	ldw	r4,-48(fp)
40002198:	00034e80 	call	400034e8 <_ZdlPv>
		printf("done in %d ms\r\n",(time2-time1));
4000219c:	e0ffdd17 	ldw	r3,-140(fp)
400021a0:	e0bfdb17 	ldw	r2,-148(fp)
400021a4:	1887c83a 	sub	r3,r3,r2
400021a8:	01100074 	movhi	r4,16385
400021ac:	00800084 	movi	r2,2
400021b0:	e0bfe715 	stw	r2,-100(fp)
400021b4:	2112f504 	addi	r4,r4,19412
400021b8:	180b883a 	mov	r5,r3
400021bc:	00088500 	call	40008850 <printf>
	my_image.printToScreen(0,0,pVGA);
	my_image.make_bw();
	my_image.printToScreen(120,0,pVGA);
	printf("Start processing ...");

	for (int i=0;i<1;i++) {
400021c0:	e0bfd917 	ldw	r2,-156(fp)
400021c4:	10800044 	addi	r2,r2,1
400021c8:	e0bfd915 	stw	r2,-156(fp)
400021cc:	e0bfd917 	ldw	r2,-156(fp)
400021d0:	00bfd00e 	bge	zero,r2,40002114 <__alt_data_end+0xc0002114>
		int time2 = alt_nticks();
		result_image->printToScreen(60*i,240,pVGA);
		delete result_image;
		printf("done in %d ms\r\n",(time2-time1));
	}
	exit(0);
400021d4:	0009883a 	mov	r4,zero
400021d8:	0007ef80 	call	40007ef8 <exit>
400021dc:	e0fff615 	stw	r3,-40(fp)

    network.layer[0].random_init(matrix_size*matrix_size, 40);
    network.layer[1].random_init(40, 40);network.layer[1].make_ternary();
    network.layer[2].random_init(40, 10);network.layer[2].make_ternary();

	Image my_image(60,200);
400021e0:	e0bfe104 	addi	r2,fp,-124
400021e4:	e03fe715 	stw	zero,-100(fp)
400021e8:	1009883a 	mov	r4,r2
400021ec:	0000cbc0 	call	40000cbc <_ZN5ImageD1Ev>
400021f0:	e0fff617 	ldw	r3,-40(fp)
400021f4:	e0fff515 	stw	r3,-44(fp)
400021f8:	00000906 	br	40002220 <main+0x2f4>
400021fc:	e7002704 	addi	fp,fp,156
40002200:	e0ffe817 	ldw	r3,-96(fp)
40002204:	e0bfe717 	ldw	r2,-100(fp)
40002208:	10000426 	beq	r2,zero,4000221c <main+0x2f0>
4000220c:	10bfffc4 	addi	r2,r2,-1
40002210:	103ff226 	beq	r2,zero,400021dc <__alt_data_end+0xc00021dc>
40002214:	10bfffc4 	addi	r2,r2,-1
40002218:	003da0fa 	break	3
4000221c:	e0fff515 	stw	r3,-44(fp)
		result_image->printToScreen(60*i,240,pVGA);
		delete result_image;
		printf("done in %d ms\r\n",(time2-time1));
	}
	exit(0);
	return 0;
40002220:	e0bfde04 	addi	r2,fp,-136
40002224:	e03fe715 	stw	zero,-100(fp)
40002228:	1009883a 	mov	r4,r2
4000222c:	0000fa00 	call	40000fa0 <_ZN2NND1Ev>
40002230:	e0fff517 	ldw	r3,-44(fp)
40002234:	00bfffc4 	movi	r2,-1
40002238:	e0bfe715 	stw	r2,-100(fp)
4000223c:	1809883a 	mov	r4,r3
40002240:	0007d500 	call	40007d50 <_Unwind_SjLj_Resume>

40002244 <_ZN3VGAC1Eii>:
class VGA {
	int system_base_address;
	int memory_address;

public:
	VGA(int system_base_address, int memory_address) : system_base_address(system_base_address), memory_address(memory_address) {};
40002244:	defffc04 	addi	sp,sp,-16
40002248:	df000315 	stw	fp,12(sp)
4000224c:	df000304 	addi	fp,sp,12
40002250:	e13ffd15 	stw	r4,-12(fp)
40002254:	e17ffe15 	stw	r5,-8(fp)
40002258:	e1bfff15 	stw	r6,-4(fp)
4000225c:	e0bffd17 	ldw	r2,-12(fp)
40002260:	e0fffe17 	ldw	r3,-8(fp)
40002264:	10c00015 	stw	r3,0(r2)
40002268:	e0bffd17 	ldw	r2,-12(fp)
4000226c:	e0ffff17 	ldw	r3,-4(fp)
40002270:	10c00115 	stw	r3,4(r2)
40002274:	e037883a 	mov	sp,fp
40002278:	df000017 	ldw	fp,0(sp)
4000227c:	dec00104 	addi	sp,sp,4
40002280:	f800283a 	ret

40002284 <_ZN3VGA15send_to_displayEv>:
		if ( (x>=640) || (y>=480) ) return;
		int address = 640*y+x;
		IOWR_8DIRECT(memory_address, address, color);
	}

	inline void send_to_display() {
40002284:	defffe04 	addi	sp,sp,-8
40002288:	df000115 	stw	fp,4(sp)
4000228c:	df000104 	addi	fp,sp,4
40002290:	e13fff15 	stw	r4,-4(fp)
		IOWR(system_base_address,0,memory_address);
40002294:	e0bfff17 	ldw	r2,-4(fp)
40002298:	10800017 	ldw	r2,0(r2)
4000229c:	1007883a 	mov	r3,r2
400022a0:	e0bfff17 	ldw	r2,-4(fp)
400022a4:	10800117 	ldw	r2,4(r2)
400022a8:	18800035 	stwio	r2,0(r3)
	}
400022ac:	e037883a 	mov	sp,fp
400022b0:	df000017 	ldw	fp,0(sp)
400022b4:	dec00104 	addi	sp,sp,4
400022b8:	f800283a 	ret

400022bc <_ZL12read_sleb128PKhPl>:
400022bc:	0011883a 	mov	r8,zero
400022c0:	000d883a 	mov	r6,zero
400022c4:	21c00003 	ldbu	r7,0(r4)
400022c8:	20800044 	addi	r2,r4,1
400022cc:	1009883a 	mov	r4,r2
400022d0:	38c01fcc 	andi	r3,r7,127
400022d4:	1986983a 	sll	r3,r3,r6
400022d8:	3a403fcc 	andi	r9,r7,255
400022dc:	4a40201c 	xori	r9,r9,128
400022e0:	4a7fe004 	addi	r9,r9,-128
400022e4:	40d0b03a 	or	r8,r8,r3
400022e8:	318001c4 	addi	r6,r6,7
400022ec:	483ff516 	blt	r9,zero,400022c4 <__alt_data_end+0xc00022c4>
400022f0:	00c007c4 	movi	r3,31
400022f4:	19800536 	bltu	r3,r6,4000230c <_ZL12read_sleb128PKhPl+0x50>
400022f8:	39c0100c 	andi	r7,r7,64
400022fc:	38000326 	beq	r7,zero,4000230c <_ZL12read_sleb128PKhPl+0x50>
40002300:	00ffffc4 	movi	r3,-1
40002304:	198c983a 	sll	r6,r3,r6
40002308:	3210b03a 	or	r8,r6,r8
4000230c:	2a000015 	stw	r8,0(r5)
40002310:	f800283a 	ret

40002314 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
40002314:	28800017 	ldw	r2,0(r5)
40002318:	30c00017 	ldw	r3,0(r6)
4000231c:	defffb04 	addi	sp,sp,-20
40002320:	10800217 	ldw	r2,8(r2)
40002324:	dc400315 	stw	r17,12(sp)
40002328:	dc000215 	stw	r16,8(sp)
4000232c:	d9400115 	stw	r5,4(sp)
40002330:	dfc00415 	stw	ra,16(sp)
40002334:	2021883a 	mov	r16,r4
40002338:	d8c00015 	stw	r3,0(sp)
4000233c:	2809883a 	mov	r4,r5
40002340:	3023883a 	mov	r17,r6
40002344:	103ee83a 	callr	r2
40002348:	10803fcc 	andi	r2,r2,255
4000234c:	d9400117 	ldw	r5,4(sp)
40002350:	10000326 	beq	r2,zero,40002360 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
40002354:	d8800017 	ldw	r2,0(sp)
40002358:	10800017 	ldw	r2,0(r2)
4000235c:	d8800015 	stw	r2,0(sp)
40002360:	80800017 	ldw	r2,0(r16)
40002364:	8009883a 	mov	r4,r16
40002368:	d80d883a 	mov	r6,sp
4000236c:	10800417 	ldw	r2,16(r2)
40002370:	01c00044 	movi	r7,1
40002374:	103ee83a 	callr	r2
40002378:	10c03fcc 	andi	r3,r2,255
4000237c:	18000226 	beq	r3,zero,40002388 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
40002380:	d8c00017 	ldw	r3,0(sp)
40002384:	88c00015 	stw	r3,0(r17)
40002388:	dfc00417 	ldw	ra,16(sp)
4000238c:	dc400317 	ldw	r17,12(sp)
40002390:	dc000217 	ldw	r16,8(sp)
40002394:	dec00504 	addi	sp,sp,20
40002398:	f800283a 	ret

4000239c <_ZL21size_of_encoded_valueh>:
4000239c:	deffff04 	addi	sp,sp,-4
400023a0:	dfc00015 	stw	ra,0(sp)
400023a4:	00803fc4 	movi	r2,255
400023a8:	20802026 	beq	r4,r2,4000242c <_ZL21size_of_encoded_valueh+0x90>
400023ac:	210001cc 	andi	r4,r4,7
400023b0:	00800144 	movi	r2,5
400023b4:	11001c36 	bltu	r2,r4,40002428 <_ZL21size_of_encoded_valueh+0x8c>
400023b8:	200890ba 	slli	r4,r4,2
400023bc:	00900034 	movhi	r2,16384
400023c0:	1088f404 	addi	r2,r2,9168
400023c4:	2089883a 	add	r4,r4,r2
400023c8:	20800017 	ldw	r2,0(r4)
400023cc:	1000683a 	jmp	r2
400023d0:	400023e8 	cmpgeui	zero,r8,143
400023d4:	40002428 	cmpgeui	zero,r8,144
400023d8:	400023f8 	rdprs	zero,r8,143
400023dc:	400023e8 	cmpgeui	zero,r8,143
400023e0:	40002418 	cmpnei	zero,r8,144
400023e4:	40002408 	cmpgei	zero,r8,144
400023e8:	00800104 	movi	r2,4
400023ec:	dfc00017 	ldw	ra,0(sp)
400023f0:	dec00104 	addi	sp,sp,4
400023f4:	f800283a 	ret
400023f8:	00800084 	movi	r2,2
400023fc:	dfc00017 	ldw	ra,0(sp)
40002400:	dec00104 	addi	sp,sp,4
40002404:	f800283a 	ret
40002408:	00800044 	movi	r2,1
4000240c:	dfc00017 	ldw	ra,0(sp)
40002410:	dec00104 	addi	sp,sp,4
40002414:	f800283a 	ret
40002418:	00800204 	movi	r2,8
4000241c:	dfc00017 	ldw	ra,0(sp)
40002420:	dec00104 	addi	sp,sp,4
40002424:	f800283a 	ret
40002428:	0007ed00 	call	40007ed0 <abort>
4000242c:	0005883a 	mov	r2,zero
40002430:	dfc00017 	ldw	ra,0(sp)
40002434:	dec00104 	addi	sp,sp,4
40002438:	f800283a 	ret

4000243c <_ZL28read_encoded_value_with_basehjPKhPj>:
4000243c:	defffa04 	addi	sp,sp,-24
40002440:	dc000315 	stw	r16,12(sp)
40002444:	dfc00515 	stw	ra,20(sp)
40002448:	dc400415 	stw	r17,16(sp)
4000244c:	00801404 	movi	r2,80
40002450:	2021883a 	mov	r16,r4
40002454:	20807526 	beq	r4,r2,4000262c <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
40002458:	208003cc 	andi	r2,r4,15
4000245c:	00c00304 	movi	r3,12
40002460:	18807136 	bltu	r3,r2,40002628 <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
40002464:	100490ba 	slli	r2,r2,2
40002468:	00d00034 	movhi	r3,16384
4000246c:	18c92004 	addi	r3,r3,9344
40002470:	10c5883a 	add	r2,r2,r3
40002474:	10800017 	ldw	r2,0(r2)
40002478:	2823883a 	mov	r17,r5
4000247c:	1000683a 	jmp	r2
40002480:	40002568 	cmpgeui	zero,r8,149
40002484:	40002598 	cmpnei	zero,r8,150
40002488:	40002550 	cmplti	zero,r8,149
4000248c:	400024b4 	orhi	zero,r8,146
40002490:	40002520 	cmpeqi	zero,r8,148
40002494:	400025d4 	ori	zero,r8,151
40002498:	40002628 	cmpgeui	zero,r8,152
4000249c:	40002628 	cmpgeui	zero,r8,152
400024a0:	40002628 	cmpgeui	zero,r8,152
400024a4:	400025e0 	cmpeqi	zero,r8,151
400024a8:	40002604 	addi	zero,r8,152
400024ac:	400024b4 	orhi	zero,r8,146
400024b0:	40002520 	cmpeqi	zero,r8,148
400024b4:	30800043 	ldbu	r2,1(r6)
400024b8:	30c00083 	ldbu	r3,2(r6)
400024bc:	310000c3 	ldbu	r4,3(r6)
400024c0:	32000003 	ldbu	r8,0(r6)
400024c4:	1004923a 	slli	r2,r2,8
400024c8:	1806943a 	slli	r3,r3,16
400024cc:	2008963a 	slli	r4,r4,24
400024d0:	1204b03a 	or	r2,r2,r8
400024d4:	1884b03a 	or	r2,r3,r2
400024d8:	2086b03a 	or	r3,r4,r2
400024dc:	30800104 	addi	r2,r6,4
400024e0:	18000926 	beq	r3,zero,40002508 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
400024e4:	81401c0c 	andi	r5,r16,112
400024e8:	01000404 	movi	r4,16
400024ec:	29005526 	beq	r5,r4,40002644 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
400024f0:	84003fcc 	andi	r16,r16,255
400024f4:	8400201c 	xori	r16,r16,128
400024f8:	843fe004 	addi	r16,r16,-128
400024fc:	1c47883a 	add	r3,r3,r17
40002500:	8000010e 	bge	r16,zero,40002508 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
40002504:	18c00017 	ldw	r3,0(r3)
40002508:	38c00015 	stw	r3,0(r7)
4000250c:	dfc00517 	ldw	ra,20(sp)
40002510:	dc400417 	ldw	r17,16(sp)
40002514:	dc000317 	ldw	r16,12(sp)
40002518:	dec00604 	addi	sp,sp,24
4000251c:	f800283a 	ret
40002520:	30800043 	ldbu	r2,1(r6)
40002524:	30c00083 	ldbu	r3,2(r6)
40002528:	310000c3 	ldbu	r4,3(r6)
4000252c:	32000003 	ldbu	r8,0(r6)
40002530:	1004923a 	slli	r2,r2,8
40002534:	1806943a 	slli	r3,r3,16
40002538:	2008963a 	slli	r4,r4,24
4000253c:	1204b03a 	or	r2,r2,r8
40002540:	1884b03a 	or	r2,r3,r2
40002544:	2086b03a 	or	r3,r4,r2
40002548:	30800204 	addi	r2,r6,8
4000254c:	003fe406 	br	400024e0 <__alt_data_end+0xc00024e0>
40002550:	30c00043 	ldbu	r3,1(r6)
40002554:	32000003 	ldbu	r8,0(r6)
40002558:	30800084 	addi	r2,r6,2
4000255c:	1806923a 	slli	r3,r3,8
40002560:	1a06b03a 	or	r3,r3,r8
40002564:	003fde06 	br	400024e0 <__alt_data_end+0xc00024e0>
40002568:	30800043 	ldbu	r2,1(r6)
4000256c:	30c00083 	ldbu	r3,2(r6)
40002570:	314000c3 	ldbu	r5,3(r6)
40002574:	31000003 	ldbu	r4,0(r6)
40002578:	1004923a 	slli	r2,r2,8
4000257c:	1806943a 	slli	r3,r3,16
40002580:	280a963a 	slli	r5,r5,24
40002584:	1104b03a 	or	r2,r2,r4
40002588:	1884b03a 	or	r2,r3,r2
4000258c:	2886b03a 	or	r3,r5,r2
40002590:	30800104 	addi	r2,r6,4
40002594:	003fd206 	br	400024e0 <__alt_data_end+0xc00024e0>
40002598:	3013883a 	mov	r9,r6
4000259c:	0007883a 	mov	r3,zero
400025a0:	0011883a 	mov	r8,zero
400025a4:	49000003 	ldbu	r4,0(r9)
400025a8:	48800044 	addi	r2,r9,1
400025ac:	1013883a 	mov	r9,r2
400025b0:	21401fcc 	andi	r5,r4,127
400025b4:	2a0a983a 	sll	r5,r5,r8
400025b8:	21003fcc 	andi	r4,r4,255
400025bc:	2100201c 	xori	r4,r4,128
400025c0:	213fe004 	addi	r4,r4,-128
400025c4:	1946b03a 	or	r3,r3,r5
400025c8:	420001c4 	addi	r8,r8,7
400025cc:	203ff516 	blt	r4,zero,400025a4 <__alt_data_end+0xc00025a4>
400025d0:	003fc306 	br	400024e0 <__alt_data_end+0xc00024e0>
400025d4:	30c00003 	ldbu	r3,0(r6)
400025d8:	30800044 	addi	r2,r6,1
400025dc:	003fc006 	br	400024e0 <__alt_data_end+0xc00024e0>
400025e0:	3009883a 	mov	r4,r6
400025e4:	d80b883a 	mov	r5,sp
400025e8:	d9800115 	stw	r6,4(sp)
400025ec:	d9c00215 	stw	r7,8(sp)
400025f0:	00022bc0 	call	400022bc <_ZL12read_sleb128PKhPl>
400025f4:	d8c00017 	ldw	r3,0(sp)
400025f8:	d9800117 	ldw	r6,4(sp)
400025fc:	d9c00217 	ldw	r7,8(sp)
40002600:	003fb706 	br	400024e0 <__alt_data_end+0xc00024e0>
40002604:	30c00043 	ldbu	r3,1(r6)
40002608:	32000003 	ldbu	r8,0(r6)
4000260c:	30800084 	addi	r2,r6,2
40002610:	1806923a 	slli	r3,r3,8
40002614:	1a06b03a 	or	r3,r3,r8
40002618:	18ffffcc 	andi	r3,r3,65535
4000261c:	18e0001c 	xori	r3,r3,32768
40002620:	18e00004 	addi	r3,r3,-32768
40002624:	003fae06 	br	400024e0 <__alt_data_end+0xc00024e0>
40002628:	0007ed00 	call	40007ed0 <abort>
4000262c:	318000c4 	addi	r6,r6,3
40002630:	00bfff04 	movi	r2,-4
40002634:	3084703a 	and	r2,r6,r2
40002638:	10c00017 	ldw	r3,0(r2)
4000263c:	10800104 	addi	r2,r2,4
40002640:	003fb106 	br	40002508 <__alt_data_end+0xc0002508>
40002644:	3023883a 	mov	r17,r6
40002648:	003fa906 	br	400024f0 <__alt_data_end+0xc00024f0>

4000264c <_ZL15get_ttype_entryP16lsda_header_infom>:
4000264c:	defffc04 	addi	sp,sp,-16
40002650:	dfc00315 	stw	ra,12(sp)
40002654:	dc400215 	stw	r17,8(sp)
40002658:	dc000115 	stw	r16,4(sp)
4000265c:	2021883a 	mov	r16,r4
40002660:	21000503 	ldbu	r4,20(r4)
40002664:	2823883a 	mov	r17,r5
40002668:	000239c0 	call	4000239c <_ZL21size_of_encoded_valueh>
4000266c:	1445383a 	mul	r2,r2,r17
40002670:	81800317 	ldw	r6,12(r16)
40002674:	81000503 	ldbu	r4,20(r16)
40002678:	81400217 	ldw	r5,8(r16)
4000267c:	308dc83a 	sub	r6,r6,r2
40002680:	d80f883a 	mov	r7,sp
40002684:	000243c0 	call	4000243c <_ZL28read_encoded_value_with_basehjPKhPj>
40002688:	d8800017 	ldw	r2,0(sp)
4000268c:	dfc00317 	ldw	ra,12(sp)
40002690:	dc400217 	ldw	r17,8(sp)
40002694:	dc000117 	ldw	r16,4(sp)
40002698:	dec00404 	addi	sp,sp,16
4000269c:	f800283a 	ret

400026a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
400026a0:	defffb04 	addi	sp,sp,-20
400026a4:	dc000115 	stw	r16,4(sp)
400026a8:	24000317 	ldw	r16,12(r4)
400026ac:	01ce303a 	nor	r7,zero,r7
400026b0:	dc800315 	stw	r18,12(sp)
400026b4:	dc400215 	stw	r17,8(sp)
400026b8:	dfc00415 	stw	ra,16(sp)
400026bc:	2023883a 	mov	r17,r4
400026c0:	2825883a 	mov	r18,r5
400026c4:	d9800015 	stw	r6,0(sp)
400026c8:	81e1883a 	add	r16,r16,r7
400026cc:	8009883a 	mov	r4,r16
400026d0:	000b883a 	mov	r5,zero
400026d4:	000d883a 	mov	r6,zero
400026d8:	20800003 	ldbu	r2,0(r4)
400026dc:	84000044 	addi	r16,r16,1
400026e0:	8009883a 	mov	r4,r16
400026e4:	10c01fcc 	andi	r3,r2,127
400026e8:	1986983a 	sll	r3,r3,r6
400026ec:	10803fcc 	andi	r2,r2,255
400026f0:	1080201c 	xori	r2,r2,128
400026f4:	10bfe004 	addi	r2,r2,-128
400026f8:	28cab03a 	or	r5,r5,r3
400026fc:	318001c4 	addi	r6,r6,7
40002700:	103ff516 	blt	r2,zero,400026d8 <__alt_data_end+0xc00026d8>
40002704:	28000e26 	beq	r5,zero,40002740 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
40002708:	8809883a 	mov	r4,r17
4000270c:	000264c0 	call	4000264c <_ZL15get_ttype_entryP16lsda_header_infom>
40002710:	1009883a 	mov	r4,r2
40002714:	900b883a 	mov	r5,r18
40002718:	d80d883a 	mov	r6,sp
4000271c:	00023140 	call	40002314 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
40002720:	10c03fcc 	andi	r3,r2,255
40002724:	183fe926 	beq	r3,zero,400026cc <__alt_data_end+0xc00026cc>
40002728:	dfc00417 	ldw	ra,16(sp)
4000272c:	dc800317 	ldw	r18,12(sp)
40002730:	dc400217 	ldw	r17,8(sp)
40002734:	dc000117 	ldw	r16,4(sp)
40002738:	dec00504 	addi	sp,sp,20
4000273c:	f800283a 	ret
40002740:	0005883a 	mov	r2,zero
40002744:	003ff806 	br	40002728 <__alt_data_end+0xc0002728>

40002748 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
40002748:	deffff04 	addi	sp,sp,-4
4000274c:	dfc00015 	stw	ra,0(sp)
40002750:	00803fc4 	movi	r2,255
40002754:	20800e26 	beq	r4,r2,40002790 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
40002758:	20801c0c 	andi	r2,r4,112
4000275c:	00c00804 	movi	r3,32
40002760:	10c01726 	beq	r2,r3,400027c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
40002764:	18800e2e 	bgeu	r3,r2,400027a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
40002768:	00c01004 	movi	r3,64
4000276c:	10c01026 	beq	r2,r3,400027b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
40002770:	00c01404 	movi	r3,80
40002774:	10c00626 	beq	r2,r3,40002790 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
40002778:	00c00c04 	movi	r3,48
4000277c:	10c00b1e 	bne	r2,r3,400027ac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
40002780:	2809883a 	mov	r4,r5
40002784:	dfc00017 	ldw	ra,0(sp)
40002788:	dec00104 	addi	sp,sp,4
4000278c:	0007c2c1 	jmpi	40007c2c <_Unwind_GetDataRelBase>
40002790:	0005883a 	mov	r2,zero
40002794:	dfc00017 	ldw	ra,0(sp)
40002798:	dec00104 	addi	sp,sp,4
4000279c:	f800283a 	ret
400027a0:	103ffb26 	beq	r2,zero,40002790 <__alt_data_end+0xc0002790>
400027a4:	00c00404 	movi	r3,16
400027a8:	10fff926 	beq	r2,r3,40002790 <__alt_data_end+0xc0002790>
400027ac:	0007ed00 	call	40007ed0 <abort>
400027b0:	2809883a 	mov	r4,r5
400027b4:	dfc00017 	ldw	ra,0(sp)
400027b8:	dec00104 	addi	sp,sp,4
400027bc:	0007c1c1 	jmpi	40007c1c <_Unwind_GetRegionStart>
400027c0:	2809883a 	mov	r4,r5
400027c4:	dfc00017 	ldw	ra,0(sp)
400027c8:	dec00104 	addi	sp,sp,4
400027cc:	0007c341 	jmpi	40007c34 <_Unwind_GetTextRelBase>

400027d0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
400027d0:	defff504 	addi	sp,sp,-44
400027d4:	dc400515 	stw	r17,20(sp)
400027d8:	3823d23a 	srai	r17,r7,8
400027dc:	dcc00715 	stw	r19,28(sp)
400027e0:	dc800615 	stw	r18,24(sp)
400027e4:	dc000415 	stw	r16,16(sp)
400027e8:	dfc00a15 	stw	ra,40(sp)
400027ec:	dd400915 	stw	r21,36(sp)
400027f0:	dd000815 	stw	r20,32(sp)
400027f4:	d9400215 	stw	r5,8(sp)
400027f8:	3821883a 	mov	r16,r7
400027fc:	2025883a 	mov	r18,r4
40002800:	dcc00b17 	ldw	r19,44(sp)
40002804:	8800010e 	bge	r17,zero,4000280c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x3c>
40002808:	0463c83a 	sub	r17,zero,r17
4000280c:	01000144 	movi	r4,5
40002810:	000b883a 	mov	r5,zero
40002814:	d9800315 	stw	r6,12(sp)
40002818:	00027480 	call	40002748 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
4000281c:	d9800317 	ldw	r6,12(sp)
40002820:	d9c00104 	addi	r7,sp,4
40002824:	01000144 	movi	r4,5
40002828:	100b883a 	mov	r5,r2
4000282c:	000243c0 	call	4000243c <_ZL28read_encoded_value_with_basehjPKhPj>
40002830:	11fffe64 	muli	r7,r2,-7
40002834:	000d883a 	mov	r6,zero
40002838:	11000003 	ldbu	r4,0(r2)
4000283c:	10c001e4 	muli	r3,r2,7
40002840:	10800044 	addi	r2,r2,1
40002844:	21401fcc 	andi	r5,r4,127
40002848:	19c7883a 	add	r3,r3,r7
4000284c:	28c6983a 	sll	r3,r5,r3
40002850:	21003fcc 	andi	r4,r4,255
40002854:	2100201c 	xori	r4,r4,128
40002858:	213fe004 	addi	r4,r4,-128
4000285c:	30ccb03a 	or	r6,r6,r3
40002860:	203ff516 	blt	r4,zero,40002838 <__alt_data_end+0xc0002838>
40002864:	118d883a 	add	r6,r2,r6
40002868:	323ffe64 	muli	r8,r6,-7
4000286c:	3009883a 	mov	r4,r6
40002870:	000f883a 	mov	r7,zero
40002874:	20c00003 	ldbu	r3,0(r4)
40002878:	208001e4 	muli	r2,r4,7
4000287c:	21000044 	addi	r4,r4,1
40002880:	19401fcc 	andi	r5,r3,127
40002884:	1205883a 	add	r2,r2,r8
40002888:	2884983a 	sll	r2,r5,r2
4000288c:	18c03fcc 	andi	r3,r3,255
40002890:	18c0201c 	xori	r3,r3,128
40002894:	18ffe004 	addi	r3,r3,-128
40002898:	388eb03a 	or	r7,r7,r2
4000289c:	183ff516 	blt	r3,zero,40002874 <__alt_data_end+0xc0002874>
400028a0:	88803fcc 	andi	r2,r17,255
400028a4:	10bfffc4 	addi	r2,r2,-1
400028a8:	2087883a 	add	r3,r4,r2
400028ac:	318000c4 	addi	r6,r6,3
400028b0:	197ffe64 	muli	r5,r3,-7
400028b4:	31cd883a 	add	r6,r6,r7
400028b8:	047fff04 	movi	r17,-4
400028bc:	3462703a 	and	r17,r6,r17
400028c0:	002b883a 	mov	r21,zero
400028c4:	18800003 	ldbu	r2,0(r3)
400028c8:	190001e4 	muli	r4,r3,7
400028cc:	1d000044 	addi	r20,r3,1
400028d0:	10c01fcc 	andi	r3,r2,127
400028d4:	2149883a 	add	r4,r4,r5
400028d8:	1908983a 	sll	r4,r3,r4
400028dc:	10803fcc 	andi	r2,r2,255
400028e0:	1080201c 	xori	r2,r2,128
400028e4:	10bfe004 	addi	r2,r2,-128
400028e8:	a007883a 	mov	r3,r20
400028ec:	a92ab03a 	or	r21,r21,r4
400028f0:	103ff416 	blt	r2,zero,400028c4 <__alt_data_end+0xc00028c4>
400028f4:	84003fcc 	andi	r16,r16,255
400028f8:	a8001f26 	beq	r21,zero,40002978 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a8>
400028fc:	8009883a 	mov	r4,r16
40002900:	000239c0 	call	4000239c <_ZL21size_of_encoded_valueh>
40002904:	ad7fffc4 	addi	r21,r21,-1
40002908:	1545383a 	mul	r2,r2,r21
4000290c:	8009883a 	mov	r4,r16
40002910:	980b883a 	mov	r5,r19
40002914:	144d883a 	add	r6,r2,r17
40002918:	d80f883a 	mov	r7,sp
4000291c:	000243c0 	call	4000243c <_ZL28read_encoded_value_with_basehjPKhPj>
40002920:	d9000017 	ldw	r4,0(sp)
40002924:	900b883a 	mov	r5,r18
40002928:	d9800204 	addi	r6,sp,8
4000292c:	00023140 	call	40002314 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
40002930:	10c03fcc 	andi	r3,r2,255
40002934:	1800111e 	bne	r3,zero,4000297c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1ac>
40002938:	a1bffe64 	muli	r6,r20,-7
4000293c:	a009883a 	mov	r4,r20
40002940:	002b883a 	mov	r21,zero
40002944:	20c00003 	ldbu	r3,0(r4)
40002948:	208001e4 	muli	r2,r4,7
4000294c:	21000044 	addi	r4,r4,1
40002950:	19401fcc 	andi	r5,r3,127
40002954:	1185883a 	add	r2,r2,r6
40002958:	2884983a 	sll	r2,r5,r2
4000295c:	18c03fcc 	andi	r3,r3,255
40002960:	18c0201c 	xori	r3,r3,128
40002964:	18ffe004 	addi	r3,r3,-128
40002968:	a8aab03a 	or	r21,r21,r2
4000296c:	183ff516 	blt	r3,zero,40002944 <__alt_data_end+0xc0002944>
40002970:	2029883a 	mov	r20,r4
40002974:	003fe006 	br	400028f8 <__alt_data_end+0xc00028f8>
40002978:	0005883a 	mov	r2,zero
4000297c:	dfc00a17 	ldw	ra,40(sp)
40002980:	dd400917 	ldw	r21,36(sp)
40002984:	dd000817 	ldw	r20,32(sp)
40002988:	dcc00717 	ldw	r19,28(sp)
4000298c:	dc800617 	ldw	r18,24(sp)
40002990:	dc400517 	ldw	r17,20(sp)
40002994:	dc000417 	ldw	r16,16(sp)
40002998:	dec00b04 	addi	sp,sp,44
4000299c:	f800283a 	ret

400029a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
400029a0:	defffb04 	addi	sp,sp,-20
400029a4:	dcc00315 	stw	r19,12(sp)
400029a8:	dc400115 	stw	r17,4(sp)
400029ac:	dc000015 	stw	r16,0(sp)
400029b0:	dfc00415 	stw	ra,16(sp)
400029b4:	dc800215 	stw	r18,8(sp)
400029b8:	2027883a 	mov	r19,r4
400029bc:	2821883a 	mov	r16,r5
400029c0:	3023883a 	mov	r17,r6
400029c4:	20003f26 	beq	r4,zero,40002ac4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
400029c8:	0007c1c0 	call	40007c1c <_Unwind_GetRegionStart>
400029cc:	88800015 	stw	r2,0(r17)
400029d0:	84800003 	ldbu	r18,0(r16)
400029d4:	00c03fc4 	movi	r3,255
400029d8:	84000044 	addi	r16,r16,1
400029dc:	90c03726 	beq	r18,r3,40002abc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
400029e0:	9009883a 	mov	r4,r18
400029e4:	980b883a 	mov	r5,r19
400029e8:	00027480 	call	40002748 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
400029ec:	800d883a 	mov	r6,r16
400029f0:	9009883a 	mov	r4,r18
400029f4:	100b883a 	mov	r5,r2
400029f8:	89c00104 	addi	r7,r17,4
400029fc:	000243c0 	call	4000243c <_ZL28read_encoded_value_with_basehjPKhPj>
40002a00:	1021883a 	mov	r16,r2
40002a04:	80c00003 	ldbu	r3,0(r16)
40002a08:	01003fc4 	movi	r4,255
40002a0c:	80800044 	addi	r2,r16,1
40002a10:	88c00505 	stb	r3,20(r17)
40002a14:	18c03fcc 	andi	r3,r3,255
40002a18:	19002c26 	beq	r3,r4,40002acc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
40002a1c:	100d883a 	mov	r6,r2
40002a20:	000f883a 	mov	r7,zero
40002a24:	000b883a 	mov	r5,zero
40002a28:	30c00003 	ldbu	r3,0(r6)
40002a2c:	10800044 	addi	r2,r2,1
40002a30:	100d883a 	mov	r6,r2
40002a34:	19001fcc 	andi	r4,r3,127
40002a38:	2148983a 	sll	r4,r4,r5
40002a3c:	18c03fcc 	andi	r3,r3,255
40002a40:	18c0201c 	xori	r3,r3,128
40002a44:	18ffe004 	addi	r3,r3,-128
40002a48:	390eb03a 	or	r7,r7,r4
40002a4c:	294001c4 	addi	r5,r5,7
40002a50:	183ff516 	blt	r3,zero,40002a28 <__alt_data_end+0xc0002a28>
40002a54:	11cf883a 	add	r7,r2,r7
40002a58:	89c00315 	stw	r7,12(r17)
40002a5c:	10c00003 	ldbu	r3,0(r2)
40002a60:	000f883a 	mov	r7,zero
40002a64:	10800044 	addi	r2,r2,1
40002a68:	88c00545 	stb	r3,21(r17)
40002a6c:	000b883a 	mov	r5,zero
40002a70:	10c00003 	ldbu	r3,0(r2)
40002a74:	10800044 	addi	r2,r2,1
40002a78:	19001fcc 	andi	r4,r3,127
40002a7c:	2148983a 	sll	r4,r4,r5
40002a80:	18c03fcc 	andi	r3,r3,255
40002a84:	18c0201c 	xori	r3,r3,128
40002a88:	18ffe004 	addi	r3,r3,-128
40002a8c:	390eb03a 	or	r7,r7,r4
40002a90:	294001c4 	addi	r5,r5,7
40002a94:	183ff616 	blt	r3,zero,40002a70 <__alt_data_end+0xc0002a70>
40002a98:	11cf883a 	add	r7,r2,r7
40002a9c:	89c00415 	stw	r7,16(r17)
40002aa0:	dfc00417 	ldw	ra,16(sp)
40002aa4:	dcc00317 	ldw	r19,12(sp)
40002aa8:	dc800217 	ldw	r18,8(sp)
40002aac:	dc400117 	ldw	r17,4(sp)
40002ab0:	dc000017 	ldw	r16,0(sp)
40002ab4:	dec00504 	addi	sp,sp,20
40002ab8:	f800283a 	ret
40002abc:	88800115 	stw	r2,4(r17)
40002ac0:	003fd006 	br	40002a04 <__alt_data_end+0xc0002a04>
40002ac4:	0005883a 	mov	r2,zero
40002ac8:	003fc006 	br	400029cc <__alt_data_end+0xc00029cc>
40002acc:	88000315 	stw	zero,12(r17)
40002ad0:	003fe206 	br	40002a5c <__alt_data_end+0xc0002a5c>

40002ad4 <__gxx_personality_sj0>:
40002ad4:	00900034 	movhi	r2,16384
40002ad8:	deffde04 	addi	sp,sp,-136
40002adc:	108ab504 	addi	r2,r2,10964
40002ae0:	d8801015 	stw	r2,64(sp)
40002ae4:	00900074 	movhi	r2,16385
40002ae8:	10929c04 	addi	r2,r2,19056
40002aec:	d8801115 	stw	r2,68(sp)
40002af0:	00900034 	movhi	r2,16384
40002af4:	108bf004 	addi	r2,r2,12224
40002af8:	d9001715 	stw	r4,92(sp)
40002afc:	d9000a04 	addi	r4,sp,40
40002b00:	d8801315 	stw	r2,76(sp)
40002b04:	dfc02115 	stw	ra,132(sp)
40002b08:	df002015 	stw	fp,128(sp)
40002b0c:	dec01215 	stw	sp,72(sp)
40002b10:	dec01415 	stw	sp,80(sp)
40002b14:	d9401a15 	stw	r5,104(sp)
40002b18:	d9801815 	stw	r6,96(sp)
40002b1c:	d9c01915 	stw	r7,100(sp)
40002b20:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
40002b24:	d8c01717 	ldw	r3,92(sp)
40002b28:	d8000915 	stw	zero,36(sp)
40002b2c:	d8000815 	stw	zero,32(sp)
40002b30:	00800044 	movi	r2,1
40002b34:	18800926 	beq	r3,r2,40002b5c <__gxx_personality_sj0+0x88>
40002b38:	014000c4 	movi	r5,3
40002b3c:	d9401715 	stw	r5,92(sp)
40002b40:	d9000a04 	addi	r4,sp,40
40002b44:	0007b6c0 	call	40007b6c <_Unwind_SjLj_Unregister>
40002b48:	d8801717 	ldw	r2,92(sp)
40002b4c:	dfc02117 	ldw	ra,132(sp)
40002b50:	df002017 	ldw	fp,128(sp)
40002b54:	dec02204 	addi	sp,sp,136
40002b58:	f800283a 	ret
40002b5c:	d9401817 	ldw	r5,96(sp)
40002b60:	012f3574 	movhi	r4,48341
40002b64:	21354004 	addi	r4,r4,-11008
40002b68:	2909883a 	add	r4,r5,r4
40002b6c:	2145803a 	cmpltu	r2,r4,r5
40002b70:	d9401917 	ldw	r5,100(sp)
40002b74:	d8c01b05 	stb	r3,108(sp)
40002b78:	00ee2cb4 	movhi	r3,47282
40002b7c:	18eaaf04 	addi	r3,r3,-21828
40002b80:	28c7883a 	add	r3,r5,r3
40002b84:	10c5883a 	add	r2,r2,r3
40002b88:	10003526 	beq	r2,zero,40002c60 <__gxx_personality_sj0+0x18c>
40002b8c:	d8c01a17 	ldw	r3,104(sp)
40002b90:	00800184 	movi	r2,6
40002b94:	18803826 	beq	r3,r2,40002c78 <__gxx_personality_sj0+0x1a4>
40002b98:	d9002317 	ldw	r4,140(sp)
40002b9c:	00ffffc4 	movi	r3,-1
40002ba0:	d8c00b15 	stw	r3,44(sp)
40002ba4:	0007c100 	call	40007c10 <_Unwind_GetLanguageSpecificData>
40002ba8:	d8801915 	stw	r2,100(sp)
40002bac:	1000a326 	beq	r2,zero,40002e3c <__gxx_personality_sj0+0x368>
40002bb0:	d9002317 	ldw	r4,140(sp)
40002bb4:	d9401917 	ldw	r5,100(sp)
40002bb8:	d80d883a 	mov	r6,sp
40002bbc:	00bfffc4 	movi	r2,-1
40002bc0:	d8800b15 	stw	r2,44(sp)
40002bc4:	00029a00 	call	400029a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
40002bc8:	d9000503 	ldbu	r4,20(sp)
40002bcc:	d9402317 	ldw	r5,140(sp)
40002bd0:	d8801715 	stw	r2,92(sp)
40002bd4:	00027480 	call	40002748 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
40002bd8:	d9002317 	ldw	r4,140(sp)
40002bdc:	d9400804 	addi	r5,sp,32
40002be0:	d8800215 	stw	r2,8(sp)
40002be4:	0007be00 	call	40007be0 <_Unwind_GetIPInfo>
40002be8:	d8c00817 	ldw	r3,32(sp)
40002bec:	1800011e 	bne	r3,zero,40002bf4 <__gxx_personality_sj0+0x120>
40002bf0:	10bfffc4 	addi	r2,r2,-1
40002bf4:	10009116 	blt	r2,zero,40002e3c <__gxx_personality_sj0+0x368>
40002bf8:	10004c1e 	bne	r2,zero,40002d2c <__gxx_personality_sj0+0x258>
40002bfc:	d8001c15 	stw	zero,112(sp)
40002c00:	00800044 	movi	r2,1
40002c04:	d8001715 	stw	zero,92(sp)
40002c08:	d8001815 	stw	zero,96(sp)
40002c0c:	d9001a17 	ldw	r4,104(sp)
40002c10:	20c0004c 	andi	r3,r4,1
40002c14:	18008c26 	beq	r3,zero,40002e48 <__gxx_personality_sj0+0x374>
40002c18:	00c00084 	movi	r3,2
40002c1c:	10c08726 	beq	r2,r3,40002e3c <__gxx_personality_sj0+0x368>
40002c20:	d8801b03 	ldbu	r2,108(sp)
40002c24:	1000d21e 	bne	r2,zero,40002f70 <__gxx_personality_sj0+0x49c>
40002c28:	d9402217 	ldw	r5,136(sp)
40002c2c:	d8801717 	ldw	r2,92(sp)
40002c30:	d8c01817 	ldw	r3,96(sp)
40002c34:	d9001917 	ldw	r4,100(sp)
40002c38:	28bffb15 	stw	r2,-20(r5)
40002c3c:	d8800917 	ldw	r2,36(sp)
40002c40:	28fffc15 	stw	r3,-16(r5)
40002c44:	00c00184 	movi	r3,6
40002c48:	28bfff15 	stw	r2,-4(r5)
40002c4c:	d8801c17 	ldw	r2,112(sp)
40002c50:	293ffd15 	stw	r4,-12(r5)
40002c54:	d8c01715 	stw	r3,92(sp)
40002c58:	28bffe15 	stw	r2,-8(r5)
40002c5c:	003fb806 	br	40002b40 <__alt_data_end+0xc0002b40>
40002c60:	d8801717 	ldw	r2,92(sp)
40002c64:	113fc936 	bltu	r2,r4,40002b8c <__alt_data_end+0xc0002b8c>
40002c68:	d8c01a17 	ldw	r3,104(sp)
40002c6c:	d8001b05 	stb	zero,108(sp)
40002c70:	00800184 	movi	r2,6
40002c74:	18bfc81e 	bne	r3,r2,40002b98 <__alt_data_end+0xc0002b98>
40002c78:	d8801b03 	ldbu	r2,108(sp)
40002c7c:	103fc61e 	bne	r2,zero,40002b98 <__alt_data_end+0xc0002b98>
40002c80:	d9002217 	ldw	r4,136(sp)
40002c84:	d9402217 	ldw	r5,136(sp)
40002c88:	d8802217 	ldw	r2,136(sp)
40002c8c:	213ffe17 	ldw	r4,-8(r4)
40002c90:	297ffb17 	ldw	r5,-20(r5)
40002c94:	10bffd17 	ldw	r2,-12(r2)
40002c98:	d9001c15 	stw	r4,112(sp)
40002c9c:	d9401715 	stw	r5,92(sp)
40002ca0:	d8801915 	stw	r2,100(sp)
40002ca4:	20008726 	beq	r4,zero,40002ec4 <__gxx_personality_sj0+0x3f0>
40002ca8:	d8801717 	ldw	r2,92(sp)
40002cac:	10006f0e 	bge	r2,zero,40002e6c <__gxx_personality_sj0+0x398>
40002cb0:	d9002317 	ldw	r4,140(sp)
40002cb4:	d9401917 	ldw	r5,100(sp)
40002cb8:	d80d883a 	mov	r6,sp
40002cbc:	00bfffc4 	movi	r2,-1
40002cc0:	d8800b15 	stw	r2,44(sp)
40002cc4:	00029a00 	call	400029a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
40002cc8:	d9000503 	ldbu	r4,20(sp)
40002ccc:	d9402317 	ldw	r5,140(sp)
40002cd0:	00027480 	call	40002748 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
40002cd4:	d9000503 	ldbu	r4,20(sp)
40002cd8:	d9402317 	ldw	r5,140(sp)
40002cdc:	d8800215 	stw	r2,8(sp)
40002ce0:	00027480 	call	40002748 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
40002ce4:	d8c02217 	ldw	r3,136(sp)
40002ce8:	18bffe15 	stw	r2,-8(r3)
40002cec:	00005f06 	br	40002e6c <__gxx_personality_sj0+0x398>
40002cf0:	000f883a 	mov	r7,zero
40002cf4:	000d883a 	mov	r6,zero
40002cf8:	19000003 	ldbu	r4,0(r3)
40002cfc:	18c00044 	addi	r3,r3,1
40002d00:	d8c01715 	stw	r3,92(sp)
40002d04:	21401fcc 	andi	r5,r4,127
40002d08:	298a983a 	sll	r5,r5,r6
40002d0c:	21003fcc 	andi	r4,r4,255
40002d10:	2100201c 	xori	r4,r4,128
40002d14:	213fe004 	addi	r4,r4,-128
40002d18:	394eb03a 	or	r7,r7,r5
40002d1c:	318001c4 	addi	r6,r6,7
40002d20:	203ff516 	blt	r4,zero,40002cf8 <__alt_data_end+0xc0002cf8>
40002d24:	10bfffc4 	addi	r2,r2,-1
40002d28:	10000e26 	beq	r2,zero,40002d64 <__gxx_personality_sj0+0x290>
40002d2c:	d8c01717 	ldw	r3,92(sp)
40002d30:	0011883a 	mov	r8,zero
40002d34:	000d883a 	mov	r6,zero
40002d38:	19000003 	ldbu	r4,0(r3)
40002d3c:	18c00044 	addi	r3,r3,1
40002d40:	21401fcc 	andi	r5,r4,127
40002d44:	298a983a 	sll	r5,r5,r6
40002d48:	21003fcc 	andi	r4,r4,255
40002d4c:	2100201c 	xori	r4,r4,128
40002d50:	213fe004 	addi	r4,r4,-128
40002d54:	4150b03a 	or	r8,r8,r5
40002d58:	318001c4 	addi	r6,r6,7
40002d5c:	203ff616 	blt	r4,zero,40002d38 <__alt_data_end+0xc0002d38>
40002d60:	003fe306 	br	40002cf0 <__alt_data_end+0xc0002cf0>
40002d64:	42000044 	addi	r8,r8,1
40002d68:	da001c15 	stw	r8,112(sp)
40002d6c:	38004f26 	beq	r7,zero,40002eac <__gxx_personality_sj0+0x3d8>
40002d70:	d8800417 	ldw	r2,16(sp)
40002d74:	39ffffc4 	addi	r7,r7,-1
40002d78:	11c5883a 	add	r2,r2,r7
40002d7c:	d8801815 	stw	r2,96(sp)
40002d80:	40002e26 	beq	r8,zero,40002e3c <__gxx_personality_sj0+0x368>
40002d84:	10004b26 	beq	r2,zero,40002eb4 <__gxx_personality_sj0+0x3e0>
40002d88:	d8c01a17 	ldw	r3,104(sp)
40002d8c:	18c0020c 	andi	r3,r3,8
40002d90:	d8c01e15 	stw	r3,120(sp)
40002d94:	1800801e 	bne	r3,zero,40002f98 <__gxx_personality_sj0+0x4c4>
40002d98:	d8801b03 	ldbu	r2,108(sp)
40002d9c:	1000821e 	bne	r2,zero,40002fa8 <__gxx_personality_sj0+0x4d4>
40002da0:	d9002217 	ldw	r4,136(sp)
40002da4:	20800017 	ldw	r2,0(r4)
40002da8:	1080004c 	andi	r2,r2,1
40002dac:	1000821e 	bne	r2,zero,40002fb8 <__gxx_personality_sj0+0x4e4>
40002db0:	d9402217 	ldw	r5,136(sp)
40002db4:	28800504 	addi	r2,r5,20
40002db8:	d8800915 	stw	r2,36(sp)
40002dbc:	10bff017 	ldw	r2,-64(r2)
40002dc0:	d8801d15 	stw	r2,116(sp)
40002dc4:	d9001b03 	ldbu	r4,108(sp)
40002dc8:	d8001b45 	stb	zero,109(sp)
40002dcc:	d9001f15 	stw	r4,124(sp)
40002dd0:	00000e06 	br	40002e0c <__gxx_personality_sj0+0x338>
40002dd4:	01c03d0e 	bge	zero,r7,40002ecc <__gxx_personality_sj0+0x3f8>
40002dd8:	017fffc4 	movi	r5,-1
40002ddc:	d9400b15 	stw	r5,44(sp)
40002de0:	d809883a 	mov	r4,sp
40002de4:	380b883a 	mov	r5,r7
40002de8:	000264c0 	call	4000264c <_ZL15get_ttype_entryP16lsda_header_infom>
40002dec:	10004f26 	beq	r2,zero,40002f2c <__gxx_personality_sj0+0x458>
40002df0:	d8c01d17 	ldw	r3,116(sp)
40002df4:	1800611e 	bne	r3,zero,40002f7c <__gxx_personality_sj0+0x4a8>
40002df8:	d8800617 	ldw	r2,24(sp)
40002dfc:	10005726 	beq	r2,zero,40002f5c <__gxx_personality_sj0+0x488>
40002e00:	d9401717 	ldw	r5,92(sp)
40002e04:	2885883a 	add	r2,r5,r2
40002e08:	d8801815 	stw	r2,96(sp)
40002e0c:	d9001817 	ldw	r4,96(sp)
40002e10:	d9400704 	addi	r5,sp,28
40002e14:	00022bc0 	call	400022bc <_ZL12read_sleb128PKhPl>
40002e18:	1009883a 	mov	r4,r2
40002e1c:	d9400604 	addi	r5,sp,24
40002e20:	d8801715 	stw	r2,92(sp)
40002e24:	00022bc0 	call	400022bc <_ZL12read_sleb128PKhPl>
40002e28:	d9c00717 	ldw	r7,28(sp)
40002e2c:	383fe91e 	bne	r7,zero,40002dd4 <__alt_data_end+0xc0002dd4>
40002e30:	01000044 	movi	r4,1
40002e34:	d9001b45 	stb	r4,109(sp)
40002e38:	003fef06 	br	40002df8 <__alt_data_end+0xc0002df8>
40002e3c:	01000204 	movi	r4,8
40002e40:	d9001715 	stw	r4,92(sp)
40002e44:	003f3e06 	br	40002b40 <__alt_data_end+0xc0002b40>
40002e48:	d9001a17 	ldw	r4,104(sp)
40002e4c:	20c0020c 	andi	r3,r4,8
40002e50:	1800021e 	bne	r3,zero,40002e5c <__gxx_personality_sj0+0x388>
40002e54:	d8c01b03 	ldbu	r3,108(sp)
40002e58:	18001826 	beq	r3,zero,40002ebc <__gxx_personality_sj0+0x3e8>
40002e5c:	00c00044 	movi	r3,1
40002e60:	10c05926 	beq	r2,r3,40002fc8 <__gxx_personality_sj0+0x4f4>
40002e64:	d9401717 	ldw	r5,92(sp)
40002e68:	28005816 	blt	r5,zero,40002fcc <__gxx_personality_sj0+0x4f8>
40002e6c:	d9802217 	ldw	r6,136(sp)
40002e70:	d9002317 	ldw	r4,140(sp)
40002e74:	00bfffc4 	movi	r2,-1
40002e78:	000b883a 	mov	r5,zero
40002e7c:	d8800b15 	stw	r2,44(sp)
40002e80:	0007bb40 	call	40007bb4 <_Unwind_SetGR>
40002e84:	d9002317 	ldw	r4,140(sp)
40002e88:	d9801717 	ldw	r6,92(sp)
40002e8c:	01400044 	movi	r5,1
40002e90:	0007bb40 	call	40007bb4 <_Unwind_SetGR>
40002e94:	d9002317 	ldw	r4,140(sp)
40002e98:	d9401c17 	ldw	r5,112(sp)
40002e9c:	0007c000 	call	40007c00 <_Unwind_SetIP>
40002ea0:	010001c4 	movi	r4,7
40002ea4:	d9001715 	stw	r4,92(sp)
40002ea8:	003f2506 	br	40002b40 <__alt_data_end+0xc0002b40>
40002eac:	d8c01c17 	ldw	r3,112(sp)
40002eb0:	183fe226 	beq	r3,zero,40002e3c <__alt_data_end+0xc0002e3c>
40002eb4:	00800084 	movi	r2,2
40002eb8:	003f5206 	br	40002c04 <__alt_data_end+0xc0002c04>
40002ebc:	00c00044 	movi	r3,1
40002ec0:	10ff791e 	bne	r2,r3,40002ca8 <__alt_data_end+0xc0002ca8>
40002ec4:	d9002217 	ldw	r4,136(sp)
40002ec8:	0003bd80 	call	40003bd8 <__cxa_call_terminate>
40002ecc:	d9001d17 	ldw	r4,116(sp)
40002ed0:	20000426 	beq	r4,zero,40002ee4 <__gxx_personality_sj0+0x410>
40002ed4:	d9401e17 	ldw	r5,120(sp)
40002ed8:	2800021e 	bne	r5,zero,40002ee4 <__gxx_personality_sj0+0x410>
40002edc:	d8801f17 	ldw	r2,124(sp)
40002ee0:	10001626 	beq	r2,zero,40002f3c <__gxx_personality_sj0+0x468>
40002ee4:	d8c00317 	ldw	r3,12(sp)
40002ee8:	01ce303a 	nor	r7,zero,r7
40002eec:	000d883a 	mov	r6,zero
40002ef0:	19c7883a 	add	r3,r3,r7
40002ef4:	000b883a 	mov	r5,zero
40002ef8:	18800003 	ldbu	r2,0(r3)
40002efc:	18c00044 	addi	r3,r3,1
40002f00:	11001fcc 	andi	r4,r2,127
40002f04:	2148983a 	sll	r4,r4,r5
40002f08:	10803fcc 	andi	r2,r2,255
40002f0c:	1080201c 	xori	r2,r2,128
40002f10:	10bfe004 	addi	r2,r2,-128
40002f14:	310cb03a 	or	r6,r6,r4
40002f18:	294001c4 	addi	r5,r5,7
40002f1c:	103ff616 	blt	r2,zero,40002ef8 <__alt_data_end+0xc0002ef8>
40002f20:	3005003a 	cmpeq	r2,r6,zero
40002f24:	10803fcc 	andi	r2,r2,255
40002f28:	103fb326 	beq	r2,zero,40002df8 <__alt_data_end+0xc0002df8>
40002f2c:	d8800717 	ldw	r2,28(sp)
40002f30:	d8801715 	stw	r2,92(sp)
40002f34:	008000c4 	movi	r2,3
40002f38:	003f3406 	br	40002c0c <__alt_data_end+0xc0002c0c>
40002f3c:	d9401d17 	ldw	r5,116(sp)
40002f40:	d9800917 	ldw	r6,36(sp)
40002f44:	00ffffc4 	movi	r3,-1
40002f48:	d809883a 	mov	r4,sp
40002f4c:	d8c00b15 	stw	r3,44(sp)
40002f50:	00026a00 	call	400026a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
40002f54:	1080005c 	xori	r2,r2,1
40002f58:	003ff206 	br	40002f24 <__alt_data_end+0xc0002f24>
40002f5c:	d8801b43 	ldbu	r2,109(sp)
40002f60:	103fb626 	beq	r2,zero,40002e3c <__alt_data_end+0xc0002e3c>
40002f64:	d8001715 	stw	zero,92(sp)
40002f68:	00800084 	movi	r2,2
40002f6c:	003f2706 	br	40002c0c <__alt_data_end+0xc0002c0c>
40002f70:	00800184 	movi	r2,6
40002f74:	d8801715 	stw	r2,92(sp)
40002f78:	003ef106 	br	40002b40 <__alt_data_end+0xc0002b40>
40002f7c:	1009883a 	mov	r4,r2
40002f80:	180b883a 	mov	r5,r3
40002f84:	d9800904 	addi	r6,sp,36
40002f88:	00023140 	call	40002314 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
40002f8c:	10803fcc 	andi	r2,r2,255
40002f90:	103fe61e 	bne	r2,zero,40002f2c <__alt_data_end+0xc0002f2c>
40002f94:	003f9806 	br	40002df8 <__alt_data_end+0xc0002df8>
40002f98:	00900074 	movhi	r2,16385
40002f9c:	109b0504 	addi	r2,r2,27668
40002fa0:	d8801d15 	stw	r2,116(sp)
40002fa4:	003f8706 	br	40002dc4 <__alt_data_end+0xc0002dc4>
40002fa8:	00d00074 	movhi	r3,16385
40002fac:	18db0704 	addi	r3,r3,27676
40002fb0:	d8c01d15 	stw	r3,116(sp)
40002fb4:	003f8306 	br	40002dc4 <__alt_data_end+0xc0002dc4>
40002fb8:	20bff517 	ldw	r2,-44(r4)
40002fbc:	003f7e06 	br	40002db8 <__alt_data_end+0xc0002db8>
40002fc0:	d9000c17 	ldw	r4,48(sp)
40002fc4:	00039c00 	call	400039c0 <__cxa_begin_catch>
40002fc8:	00035ac0 	call	400035ac <_ZSt9terminatev>
40002fcc:	d8c00b15 	stw	r3,44(sp)
40002fd0:	00035d40 	call	400035d4 <_ZSt10unexpectedv>

40002fd4 <__cxa_call_unexpected>:
40002fd4:	00900034 	movhi	r2,16384
40002fd8:	deffe604 	addi	sp,sp,-104
40002fdc:	108ab504 	addi	r2,r2,10964
40002fe0:	d8800d15 	stw	r2,52(sp)
40002fe4:	00900074 	movhi	r2,16385
40002fe8:	1092a004 	addi	r2,r2,19072
40002fec:	d8800e15 	stw	r2,56(sp)
40002ff0:	d8800104 	addi	r2,sp,4
40002ff4:	d8800f15 	stw	r2,60(sp)
40002ff8:	00900034 	movhi	r2,16384
40002ffc:	108c1804 	addi	r2,r2,12384
40003000:	d9001415 	stw	r4,80(sp)
40003004:	d9000704 	addi	r4,sp,28
40003008:	dfc01915 	stw	ra,100(sp)
4000300c:	d8801015 	stw	r2,64(sp)
40003010:	df001815 	stw	fp,96(sp)
40003014:	dec01115 	stw	sp,68(sp)
40003018:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
4000301c:	d9001417 	ldw	r4,80(sp)
40003020:	00039c00 	call	400039c0 <__cxa_begin_catch>
40003024:	d8c01417 	ldw	r3,80(sp)
40003028:	18bffe17 	ldw	r2,-8(r3)
4000302c:	193ff717 	ldw	r4,-36(r3)
40003030:	18fffd17 	ldw	r3,-12(r3)
40003034:	d8800315 	stw	r2,12(sp)
40003038:	d8c01615 	stw	r3,88(sp)
4000303c:	d8c01417 	ldw	r3,80(sp)
40003040:	18fffb17 	ldw	r3,-20(r3)
40003044:	d8c01515 	stw	r3,84(sp)
40003048:	d8c01417 	ldw	r3,80(sp)
4000304c:	18fff817 	ldw	r3,-32(r3)
40003050:	d8c01415 	stw	r3,80(sp)
40003054:	00c00044 	movi	r3,1
40003058:	d8c00815 	stw	r3,32(sp)
4000305c:	00035c40 	call	400035c4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
40003060:	d8c00917 	ldw	r3,36(sp)
40003064:	d8800817 	ldw	r2,32(sp)
40003068:	d8c01715 	stw	r3,92(sp)
4000306c:	10000a26 	beq	r2,zero,40003098 <__cxa_call_unexpected+0xc4>
40003070:	10bfffc4 	addi	r2,r2,-1
40003074:	10000126 	beq	r2,zero,4000307c <__cxa_call_unexpected+0xa8>
40003078:	003da0fa 	break	3
4000307c:	d8000815 	stw	zero,32(sp)
40003080:	0003a740 	call	40003a74 <__cxa_end_catch>
40003084:	0003a740 	call	40003a74 <__cxa_end_catch>
40003088:	d9001717 	ldw	r4,92(sp)
4000308c:	00bfffc4 	movi	r2,-1
40003090:	d8800815 	stw	r2,32(sp)
40003094:	0007d500 	call	40007d50 <_Unwind_SjLj_Resume>
40003098:	d9001717 	ldw	r4,92(sp)
4000309c:	00039c00 	call	400039c0 <__cxa_begin_catch>
400030a0:	00032080 	call	40003208 <__cxa_get_globals_fast>
400030a4:	10800017 	ldw	r2,0(r2)
400030a8:	10c00b17 	ldw	r3,44(r2)
400030ac:	18c0004c 	andi	r3,r3,1
400030b0:	18001e26 	beq	r3,zero,4000312c <__cxa_call_unexpected+0x158>
400030b4:	10800017 	ldw	r2,0(r2)
400030b8:	d8801715 	stw	r2,92(sp)
400030bc:	d8801517 	ldw	r2,84(sp)
400030c0:	00802b0e 	bge	zero,r2,40003170 <__cxa_call_unexpected+0x19c>
400030c4:	d8c01717 	ldw	r3,92(sp)
400030c8:	d8800317 	ldw	r2,12(sp)
400030cc:	d9801617 	ldw	r6,88(sp)
400030d0:	193ff017 	ldw	r4,-64(r3)
400030d4:	d9c01517 	ldw	r7,84(sp)
400030d8:	d8800015 	stw	r2,0(sp)
400030dc:	180b883a 	mov	r5,r3
400030e0:	00800084 	movi	r2,2
400030e4:	d8800815 	stw	r2,32(sp)
400030e8:	00027d00 	call	400027d0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
400030ec:	10803fcc 	andi	r2,r2,255
400030f0:	10001e1e 	bne	r2,zero,4000316c <__cxa_call_unexpected+0x198>
400030f4:	d8800317 	ldw	r2,12(sp)
400030f8:	d9801617 	ldw	r6,88(sp)
400030fc:	d9c01517 	ldw	r7,84(sp)
40003100:	01100074 	movhi	r4,16385
40003104:	d8800015 	stw	r2,0(sp)
40003108:	21135604 	addi	r4,r4,19800
4000310c:	00800084 	movi	r2,2
40003110:	000b883a 	mov	r5,zero
40003114:	d8800815 	stw	r2,32(sp)
40003118:	00027d00 	call	400027d0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
4000311c:	10803fcc 	andi	r2,r2,255
40003120:	1000051e 	bne	r2,zero,40003138 <__cxa_call_unexpected+0x164>
40003124:	d9001417 	ldw	r4,80(sp)
40003128:	00034ec0 	call	400034ec <_ZN10__cxxabiv111__terminateEPFvvE>
4000312c:	10801004 	addi	r2,r2,64
40003130:	d8801715 	stw	r2,92(sp)
40003134:	003fe106 	br	400030bc <__alt_data_end+0xc00030bc>
40003138:	01000104 	movi	r4,4
4000313c:	0003df00 	call	40003df0 <__cxa_allocate_exception>
40003140:	00d00074 	movhi	r3,16385
40003144:	18d37104 	addi	r3,r3,19908
40003148:	01500074 	movhi	r5,16385
4000314c:	01900034 	movhi	r6,16384
40003150:	10c00015 	stw	r3,0(r2)
40003154:	29535604 	addi	r5,r5,19800
40003158:	00c00084 	movi	r3,2
4000315c:	318fec04 	addi	r6,r6,16304
40003160:	1009883a 	mov	r4,r2
40003164:	d8c00815 	stw	r3,32(sp)
40003168:	0003c780 	call	40003c78 <__cxa_throw>
4000316c:	0003d080 	call	40003d08 <__cxa_rethrow>
40003170:	d9401617 	ldw	r5,88(sp)
40003174:	00800084 	movi	r2,2
40003178:	0009883a 	mov	r4,zero
4000317c:	d9800104 	addi	r6,sp,4
40003180:	d8800815 	stw	r2,32(sp)
40003184:	00029a00 	call	400029a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
40003188:	d8801717 	ldw	r2,92(sp)
4000318c:	d9c01517 	ldw	r7,84(sp)
40003190:	d9000104 	addi	r4,sp,4
40003194:	117ff017 	ldw	r5,-64(r2)
40003198:	100d883a 	mov	r6,r2
4000319c:	00026a00 	call	400026a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
400031a0:	10803fcc 	andi	r2,r2,255
400031a4:	1000171e 	bne	r2,zero,40003204 <__cxa_call_unexpected+0x230>
400031a8:	d9c01517 	ldw	r7,84(sp)
400031ac:	01500074 	movhi	r5,16385
400031b0:	00800084 	movi	r2,2
400031b4:	29535604 	addi	r5,r5,19800
400031b8:	d9000104 	addi	r4,sp,4
400031bc:	000d883a 	mov	r6,zero
400031c0:	d8800815 	stw	r2,32(sp)
400031c4:	00026a00 	call	400026a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
400031c8:	10803fcc 	andi	r2,r2,255
400031cc:	103fd526 	beq	r2,zero,40003124 <__alt_data_end+0xc0003124>
400031d0:	01000104 	movi	r4,4
400031d4:	0003df00 	call	40003df0 <__cxa_allocate_exception>
400031d8:	00d00074 	movhi	r3,16385
400031dc:	18d37104 	addi	r3,r3,19908
400031e0:	01500074 	movhi	r5,16385
400031e4:	01900034 	movhi	r6,16384
400031e8:	10c00015 	stw	r3,0(r2)
400031ec:	29535604 	addi	r5,r5,19800
400031f0:	00c00084 	movi	r3,2
400031f4:	318fec04 	addi	r6,r6,16304
400031f8:	1009883a 	mov	r4,r2
400031fc:	d8c00815 	stw	r3,32(sp)
40003200:	0003c780 	call	40003c78 <__cxa_throw>
40003204:	0003d080 	call	40003d08 <__cxa_rethrow>

40003208 <__cxa_get_globals_fast>:
40003208:	009000b4 	movhi	r2,16386
4000320c:	10a21604 	addi	r2,r2,-30632
40003210:	f800283a 	ret

40003214 <__cxa_get_globals>:
40003214:	009000b4 	movhi	r2,16386
40003218:	10a21604 	addi	r2,r2,-30632
4000321c:	f800283a 	ret

40003220 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
40003220:	20800017 	ldw	r2,0(r4)
40003224:	defffa04 	addi	sp,sp,-24
40003228:	dc000415 	stw	r16,16(sp)
4000322c:	10800617 	ldw	r2,24(r2)
40003230:	3021883a 	mov	r16,r6
40003234:	31800017 	ldw	r6,0(r6)
40003238:	00c00404 	movi	r3,16
4000323c:	d8c00215 	stw	r3,8(sp)
40003240:	dfc00515 	stw	ra,20(sp)
40003244:	d8000015 	stw	zero,0(sp)
40003248:	d8000115 	stw	zero,4(sp)
4000324c:	d8000315 	stw	zero,12(sp)
40003250:	d80f883a 	mov	r7,sp
40003254:	103ee83a 	callr	r2
40003258:	d8800117 	ldw	r2,4(sp)
4000325c:	00c00184 	movi	r3,6
40003260:	1080018c 	andi	r2,r2,6
40003264:	10c00526 	beq	r2,r3,4000327c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
40003268:	0005883a 	mov	r2,zero
4000326c:	dfc00517 	ldw	ra,20(sp)
40003270:	dc000417 	ldw	r16,16(sp)
40003274:	dec00604 	addi	sp,sp,24
40003278:	f800283a 	ret
4000327c:	d8c00017 	ldw	r3,0(sp)
40003280:	00800044 	movi	r2,1
40003284:	80c00015 	stw	r3,0(r16)
40003288:	dfc00517 	ldw	ra,20(sp)
4000328c:	dc000417 	ldw	r16,16(sp)
40003290:	dec00604 	addi	sp,sp,24
40003294:	f800283a 	ret

40003298 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
40003298:	d8800017 	ldw	r2,0(sp)
4000329c:	11800226 	beq	r2,r6,400032a8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
400032a0:	00800044 	movi	r2,1
400032a4:	f800283a 	ret
400032a8:	00800184 	movi	r2,6
400032ac:	f800283a 	ret

400032b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
400032b0:	00900074 	movhi	r2,16385
400032b4:	10930704 	addi	r2,r2,19484
400032b8:	20800015 	stw	r2,0(r4)
400032bc:	0003d8c1 	jmpi	40003d8c <_ZNSt9type_infoD1Ev>

400032c0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
400032c0:	defffe04 	addi	sp,sp,-8
400032c4:	00900074 	movhi	r2,16385
400032c8:	dc000015 	stw	r16,0(sp)
400032cc:	dfc00115 	stw	ra,4(sp)
400032d0:	10930704 	addi	r2,r2,19484
400032d4:	20800015 	stw	r2,0(r4)
400032d8:	2021883a 	mov	r16,r4
400032dc:	0003d8c0 	call	40003d8c <_ZNSt9type_infoD1Ev>
400032e0:	8009883a 	mov	r4,r16
400032e4:	dfc00117 	ldw	ra,4(sp)
400032e8:	dc000017 	ldw	r16,0(sp)
400032ec:	dec00204 	addi	sp,sp,8
400032f0:	00034e81 	jmpi	400034e8 <_ZdlPv>

400032f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
400032f4:	21000117 	ldw	r4,4(r4)
400032f8:	29400117 	ldw	r5,4(r5)
400032fc:	defffd04 	addi	sp,sp,-12
40003300:	dc400115 	stw	r17,4(sp)
40003304:	dc000015 	stw	r16,0(sp)
40003308:	dfc00215 	stw	ra,8(sp)
4000330c:	3023883a 	mov	r17,r6
40003310:	3821883a 	mov	r16,r7
40003314:	21400b26 	beq	r4,r5,40003344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
40003318:	20c00007 	ldb	r3,0(r4)
4000331c:	00800a84 	movi	r2,42
40003320:	18800226 	beq	r3,r2,4000332c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
40003324:	0008d480 	call	40008d48 <strcmp>
40003328:	10000626 	beq	r2,zero,40003344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
4000332c:	0005883a 	mov	r2,zero
40003330:	dfc00217 	ldw	ra,8(sp)
40003334:	dc400117 	ldw	r17,4(sp)
40003338:	dc000017 	ldw	r16,0(sp)
4000333c:	dec00304 	addi	sp,sp,12
40003340:	f800283a 	ret
40003344:	00800204 	movi	r2,8
40003348:	80800315 	stw	r2,12(r16)
4000334c:	00800184 	movi	r2,6
40003350:	80800115 	stw	r2,4(r16)
40003354:	84400015 	stw	r17,0(r16)
40003358:	00800044 	movi	r2,1
4000335c:	003ff406 	br	40003330 <__alt_data_end+0xc0003330>

40003360 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
40003360:	20800117 	ldw	r2,4(r4)
40003364:	28c00117 	ldw	r3,4(r5)
40003368:	10c02926 	beq	r2,r3,40003410 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
4000336c:	defffb04 	addi	sp,sp,-20
40003370:	dcc00315 	stw	r19,12(sp)
40003374:	dc800215 	stw	r18,8(sp)
40003378:	dc400115 	stw	r17,4(sp)
4000337c:	dc000015 	stw	r16,0(sp)
40003380:	dfc00415 	stw	ra,16(sp)
40003384:	2821883a 	mov	r16,r5
40003388:	11400007 	ldb	r5,0(r2)
4000338c:	2025883a 	mov	r18,r4
40003390:	01000a84 	movi	r4,42
40003394:	3823883a 	mov	r17,r7
40003398:	3027883a 	mov	r19,r6
4000339c:	29000426 	beq	r5,r4,400033b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
400033a0:	1009883a 	mov	r4,r2
400033a4:	180b883a 	mov	r5,r3
400033a8:	0008d480 	call	40008d48 <strcmp>
400033ac:	10000a26 	beq	r2,zero,400033d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
400033b0:	008000c4 	movi	r2,3
400033b4:	14400a2e 	bgeu	r2,r17,400033e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
400033b8:	0005883a 	mov	r2,zero
400033bc:	dfc00417 	ldw	ra,16(sp)
400033c0:	dcc00317 	ldw	r19,12(sp)
400033c4:	dc800217 	ldw	r18,8(sp)
400033c8:	dc400117 	ldw	r17,4(sp)
400033cc:	dc000017 	ldw	r16,0(sp)
400033d0:	dec00504 	addi	sp,sp,20
400033d4:	f800283a 	ret
400033d8:	00800044 	movi	r2,1
400033dc:	003ff706 	br	400033bc <__alt_data_end+0xc00033bc>
400033e0:	80800017 	ldw	r2,0(r16)
400033e4:	8009883a 	mov	r4,r16
400033e8:	900b883a 	mov	r5,r18
400033ec:	10800517 	ldw	r2,20(r2)
400033f0:	980d883a 	mov	r6,r19
400033f4:	dfc00417 	ldw	ra,16(sp)
400033f8:	dcc00317 	ldw	r19,12(sp)
400033fc:	dc800217 	ldw	r18,8(sp)
40003400:	dc400117 	ldw	r17,4(sp)
40003404:	dc000017 	ldw	r16,0(sp)
40003408:	dec00504 	addi	sp,sp,20
4000340c:	1000683a 	jmp	r2
40003410:	00800044 	movi	r2,1
40003414:	f800283a 	ret

40003418 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
40003418:	defffb04 	addi	sp,sp,-20
4000341c:	dc400315 	stw	r17,12(sp)
40003420:	d8800717 	ldw	r2,28(sp)
40003424:	dc400517 	ldw	r17,20(sp)
40003428:	dc000215 	stw	r16,8(sp)
4000342c:	dfc00415 	stw	ra,16(sp)
40003430:	24000117 	ldw	r16,4(r4)
40003434:	88801026 	beq	r17,r2,40003478 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
40003438:	39400117 	ldw	r5,4(r7)
4000343c:	81401d26 	beq	r16,r5,400034b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
40003440:	80c00007 	ldb	r3,0(r16)
40003444:	00800a84 	movi	r2,42
40003448:	18800526 	beq	r3,r2,40003460 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
4000344c:	8009883a 	mov	r4,r16
40003450:	d9800115 	stw	r6,4(sp)
40003454:	0008d480 	call	40008d48 <strcmp>
40003458:	d9800117 	ldw	r6,4(sp)
4000345c:	10001526 	beq	r2,zero,400034b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
40003460:	0005883a 	mov	r2,zero
40003464:	dfc00417 	ldw	ra,16(sp)
40003468:	dc400317 	ldw	r17,12(sp)
4000346c:	dc000217 	ldw	r16,8(sp)
40003470:	dec00504 	addi	sp,sp,20
40003474:	f800283a 	ret
40003478:	d8800617 	ldw	r2,24(sp)
4000347c:	11400117 	ldw	r5,4(r2)
40003480:	81401326 	beq	r16,r5,400034d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
40003484:	80c00007 	ldb	r3,0(r16)
40003488:	00800a84 	movi	r2,42
4000348c:	18801326 	beq	r3,r2,400034dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
40003490:	8009883a 	mov	r4,r16
40003494:	d9800115 	stw	r6,4(sp)
40003498:	d9c00015 	stw	r7,0(sp)
4000349c:	0008d480 	call	40008d48 <strcmp>
400034a0:	d9800117 	ldw	r6,4(sp)
400034a4:	d9c00017 	ldw	r7,0(sp)
400034a8:	10000926 	beq	r2,zero,400034d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
400034ac:	39400117 	ldw	r5,4(r7)
400034b0:	817fe61e 	bne	r16,r5,4000344c <__alt_data_end+0xc000344c>
400034b4:	d8800817 	ldw	r2,32(sp)
400034b8:	d8c00817 	ldw	r3,32(sp)
400034bc:	14400015 	stw	r17,0(r2)
400034c0:	11800115 	stw	r6,4(r2)
400034c4:	00800044 	movi	r2,1
400034c8:	18800315 	stw	r2,12(r3)
400034cc:	003fe406 	br	40003460 <__alt_data_end+0xc0003460>
400034d0:	d8800817 	ldw	r2,32(sp)
400034d4:	11800215 	stw	r6,8(r2)
400034d8:	003fe106 	br	40003460 <__alt_data_end+0xc0003460>
400034dc:	38800117 	ldw	r2,4(r7)
400034e0:	80bfdf1e 	bne	r16,r2,40003460 <__alt_data_end+0xc0003460>
400034e4:	003ff306 	br	400034b4 <__alt_data_end+0xc00034b4>

400034e8 <_ZdlPv>:
400034e8:	0007f441 	jmpi	40007f44 <free>

400034ec <_ZN10__cxxabiv111__terminateEPFvvE>:
400034ec:	00900034 	movhi	r2,16384
400034f0:	deffef04 	addi	sp,sp,-68
400034f4:	108ab504 	addi	r2,r2,10964
400034f8:	d8800615 	stw	r2,24(sp)
400034fc:	00900074 	movhi	r2,16385
40003500:	1092a404 	addi	r2,r2,19088
40003504:	d8800715 	stw	r2,28(sp)
40003508:	00900034 	movhi	r2,16384
4000350c:	108d5104 	addi	r2,r2,13636
40003510:	d9000d15 	stw	r4,52(sp)
40003514:	d809883a 	mov	r4,sp
40003518:	d8800915 	stw	r2,36(sp)
4000351c:	dfc01015 	stw	ra,64(sp)
40003520:	df000f15 	stw	fp,60(sp)
40003524:	dec00815 	stw	sp,32(sp)
40003528:	dec00a15 	stw	sp,40(sp)
4000352c:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
40003530:	00800044 	movi	r2,1
40003534:	d8800115 	stw	r2,4(sp)
40003538:	d8800d17 	ldw	r2,52(sp)
4000353c:	103ee83a 	callr	r2
40003540:	0007ed00 	call	40007ed0 <abort>
40003544:	d8c00217 	ldw	r3,8(sp)
40003548:	d8800117 	ldw	r2,4(sp)
4000354c:	d8c00d15 	stw	r3,52(sp)
40003550:	d8c00317 	ldw	r3,12(sp)
40003554:	d8c00e15 	stw	r3,56(sp)
40003558:	10000b26 	beq	r2,zero,40003588 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
4000355c:	10bfffc4 	addi	r2,r2,-1
40003560:	10000126 	beq	r2,zero,40003568 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
40003564:	003da0fa 	break	3
40003568:	d8000115 	stw	zero,4(sp)
4000356c:	0003a740 	call	40003a74 <__cxa_end_catch>
40003570:	d8c00e17 	ldw	r3,56(sp)
40003574:	00bfffc4 	movi	r2,-1
40003578:	18800826 	beq	r3,r2,4000359c <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
4000357c:	d9000d17 	ldw	r4,52(sp)
40003580:	d8800115 	stw	r2,4(sp)
40003584:	0007d500 	call	40007d50 <_Unwind_SjLj_Resume>
40003588:	d9000d17 	ldw	r4,52(sp)
4000358c:	00039c00 	call	400039c0 <__cxa_begin_catch>
40003590:	00800084 	movi	r2,2
40003594:	d8800115 	stw	r2,4(sp)
40003598:	0007ed00 	call	40007ed0 <abort>
4000359c:	d8800e17 	ldw	r2,56(sp)
400035a0:	d9000d17 	ldw	r4,52(sp)
400035a4:	d8800115 	stw	r2,4(sp)
400035a8:	0002fd40 	call	40002fd4 <__cxa_call_unexpected>

400035ac <_ZSt9terminatev>:
400035ac:	00900074 	movhi	r2,16385
400035b0:	109b0004 	addi	r2,r2,27648
400035b4:	11000017 	ldw	r4,0(r2)
400035b8:	deffff04 	addi	sp,sp,-4
400035bc:	dfc00015 	stw	ra,0(sp)
400035c0:	00034ec0 	call	400034ec <_ZN10__cxxabiv111__terminateEPFvvE>

400035c4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
400035c4:	deffff04 	addi	sp,sp,-4
400035c8:	dfc00015 	stw	ra,0(sp)
400035cc:	203ee83a 	callr	r4
400035d0:	00035ac0 	call	400035ac <_ZSt9terminatev>

400035d4 <_ZSt10unexpectedv>:
400035d4:	00900074 	movhi	r2,16385
400035d8:	109b0a04 	addi	r2,r2,27688
400035dc:	11000017 	ldw	r4,0(r2)
400035e0:	deffff04 	addi	sp,sp,-4
400035e4:	dfc00015 	stw	ra,0(sp)
400035e8:	00035c40 	call	400035c4 <_ZN10__cxxabiv112__unexpectedEPFvvE>

400035ec <_ZSt13set_terminatePFvvE>:
400035ec:	00d00074 	movhi	r3,16385
400035f0:	18db0004 	addi	r3,r3,27648
400035f4:	18800017 	ldw	r2,0(r3)
400035f8:	19000015 	stw	r4,0(r3)
400035fc:	f800283a 	ret

40003600 <_ZSt13get_terminatev>:
40003600:	00900074 	movhi	r2,16385
40003604:	109b0004 	addi	r2,r2,27648
40003608:	10800017 	ldw	r2,0(r2)
4000360c:	f800283a 	ret

40003610 <_ZSt14set_unexpectedPFvvE>:
40003610:	00d00074 	movhi	r3,16385
40003614:	18db0a04 	addi	r3,r3,27688
40003618:	18800017 	ldw	r2,0(r3)
4000361c:	19000015 	stw	r4,0(r3)
40003620:	f800283a 	ret

40003624 <_ZSt14get_unexpectedv>:
40003624:	00900074 	movhi	r2,16385
40003628:	109b0a04 	addi	r2,r2,27688
4000362c:	10800017 	ldw	r2,0(r2)
40003630:	f800283a 	ret

40003634 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
40003634:	00900074 	movhi	r2,16385
40003638:	10931f04 	addi	r2,r2,19580
4000363c:	20800015 	stw	r2,0(r4)
40003640:	00032b01 	jmpi	400032b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>

40003644 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
40003644:	defffe04 	addi	sp,sp,-8
40003648:	00900074 	movhi	r2,16385
4000364c:	dc000015 	stw	r16,0(sp)
40003650:	dfc00115 	stw	ra,4(sp)
40003654:	10931f04 	addi	r2,r2,19580
40003658:	20800015 	stw	r2,0(r4)
4000365c:	2021883a 	mov	r16,r4
40003660:	00032b00 	call	400032b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
40003664:	8009883a 	mov	r4,r16
40003668:	dfc00117 	ldw	ra,4(sp)
4000366c:	dc000017 	ldw	r16,0(sp)
40003670:	dec00204 	addi	sp,sp,8
40003674:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003678 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
40003678:	defff504 	addi	sp,sp,-44
4000367c:	dc000115 	stw	r16,4(sp)
40003680:	38800117 	ldw	r2,4(r7)
40003684:	24000117 	ldw	r16,4(r4)
40003688:	ddc00815 	stw	r23,32(sp)
4000368c:	dd800715 	stw	r22,28(sp)
40003690:	dd400615 	stw	r21,24(sp)
40003694:	dd000515 	stw	r20,20(sp)
40003698:	dcc00415 	stw	r19,16(sp)
4000369c:	dc800315 	stw	r18,12(sp)
400036a0:	dc400215 	stw	r17,8(sp)
400036a4:	dfc00a15 	stw	ra,40(sp)
400036a8:	df000915 	stw	fp,36(sp)
400036ac:	202b883a 	mov	r21,r4
400036b0:	382d883a 	mov	r22,r7
400036b4:	2823883a 	mov	r17,r5
400036b8:	dc800b17 	ldw	r18,44(sp)
400036bc:	ddc00c17 	ldw	r23,48(sp)
400036c0:	dd000d17 	ldw	r20,52(sp)
400036c4:	dcc00e17 	ldw	r19,56(sp)
400036c8:	80801f26 	beq	r16,r2,40003748 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
400036cc:	87000007 	ldb	fp,0(r16)
400036d0:	00c00a84 	movi	r3,42
400036d4:	e0c00626 	beq	fp,r3,400036f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
400036d8:	8009883a 	mov	r4,r16
400036dc:	100b883a 	mov	r5,r2
400036e0:	d9800015 	stw	r6,0(sp)
400036e4:	0008d480 	call	40008d48 <strcmp>
400036e8:	d9800017 	ldw	r6,0(sp)
400036ec:	10001626 	beq	r2,zero,40003748 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
400036f0:	95002c26 	beq	r18,r20,400037a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
400036f4:	a9000217 	ldw	r4,8(r21)
400036f8:	880b883a 	mov	r5,r17
400036fc:	b00f883a 	mov	r7,r22
40003700:	20800017 	ldw	r2,0(r4)
40003704:	dc800b15 	stw	r18,44(sp)
40003708:	ddc00c15 	stw	r23,48(sp)
4000370c:	dd000d15 	stw	r20,52(sp)
40003710:	dcc00e15 	stw	r19,56(sp)
40003714:	10800717 	ldw	r2,28(r2)
40003718:	dfc00a17 	ldw	ra,40(sp)
4000371c:	df000917 	ldw	fp,36(sp)
40003720:	ddc00817 	ldw	r23,32(sp)
40003724:	dd800717 	ldw	r22,28(sp)
40003728:	dd400617 	ldw	r21,24(sp)
4000372c:	dd000517 	ldw	r20,20(sp)
40003730:	dcc00417 	ldw	r19,16(sp)
40003734:	dc800317 	ldw	r18,12(sp)
40003738:	dc400217 	ldw	r17,8(sp)
4000373c:	dc000117 	ldw	r16,4(sp)
40003740:	dec00b04 	addi	sp,sp,44
40003744:	1000683a 	jmp	r2
40003748:	9c800015 	stw	r18,0(r19)
4000374c:	99800115 	stw	r6,4(r19)
40003750:	88001116 	blt	r17,zero,40003798 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
40003754:	9463883a 	add	r17,r18,r17
40003758:	a4401d26 	beq	r20,r17,400037d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
4000375c:	00800044 	movi	r2,1
40003760:	98800315 	stw	r2,12(r19)
40003764:	0005883a 	mov	r2,zero
40003768:	dfc00a17 	ldw	ra,40(sp)
4000376c:	df000917 	ldw	fp,36(sp)
40003770:	ddc00817 	ldw	r23,32(sp)
40003774:	dd800717 	ldw	r22,28(sp)
40003778:	dd400617 	ldw	r21,24(sp)
4000377c:	dd000517 	ldw	r20,20(sp)
40003780:	dcc00417 	ldw	r19,16(sp)
40003784:	dc800317 	ldw	r18,12(sp)
40003788:	dc400217 	ldw	r17,8(sp)
4000378c:	dc000117 	ldw	r16,4(sp)
40003790:	dec00b04 	addi	sp,sp,44
40003794:	f800283a 	ret
40003798:	00bfff84 	movi	r2,-2
4000379c:	88bff11e 	bne	r17,r2,40003764 <__alt_data_end+0xc0003764>
400037a0:	003fee06 	br	4000375c <__alt_data_end+0xc000375c>
400037a4:	b9400117 	ldw	r5,4(r23)
400037a8:	81400726 	beq	r16,r5,400037c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
400037ac:	00800a84 	movi	r2,42
400037b0:	e0bfd026 	beq	fp,r2,400036f4 <__alt_data_end+0xc00036f4>
400037b4:	8009883a 	mov	r4,r16
400037b8:	d9800015 	stw	r6,0(sp)
400037bc:	0008d480 	call	40008d48 <strcmp>
400037c0:	d9800017 	ldw	r6,0(sp)
400037c4:	103fcb1e 	bne	r2,zero,400036f4 <__alt_data_end+0xc00036f4>
400037c8:	99800215 	stw	r6,8(r19)
400037cc:	003fe506 	br	40003764 <__alt_data_end+0xc0003764>
400037d0:	00800184 	movi	r2,6
400037d4:	003fe206 	br	40003760 <__alt_data_end+0xc0003760>

400037d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
400037d8:	defffa04 	addi	sp,sp,-24
400037dc:	dc000215 	stw	r16,8(sp)
400037e0:	dc000617 	ldw	r16,24(sp)
400037e4:	dc800415 	stw	r18,16(sp)
400037e8:	dc400315 	stw	r17,12(sp)
400037ec:	dfc00515 	stw	ra,20(sp)
400037f0:	2023883a 	mov	r17,r4
400037f4:	2825883a 	mov	r18,r5
400037f8:	81800b26 	beq	r16,r6,40003828 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
400037fc:	89000217 	ldw	r4,8(r17)
40003800:	900b883a 	mov	r5,r18
40003804:	20800017 	ldw	r2,0(r4)
40003808:	dc000615 	stw	r16,24(sp)
4000380c:	10800817 	ldw	r2,32(r2)
40003810:	dfc00517 	ldw	ra,20(sp)
40003814:	dc800417 	ldw	r18,16(sp)
40003818:	dc400317 	ldw	r17,12(sp)
4000381c:	dc000217 	ldw	r16,8(sp)
40003820:	dec00604 	addi	sp,sp,24
40003824:	1000683a 	jmp	r2
40003828:	21000117 	ldw	r4,4(r4)
4000382c:	39400117 	ldw	r5,4(r7)
40003830:	21400926 	beq	r4,r5,40003858 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
40003834:	20c00007 	ldb	r3,0(r4)
40003838:	00800a84 	movi	r2,42
4000383c:	18bfef26 	beq	r3,r2,400037fc <__alt_data_end+0xc00037fc>
40003840:	d9800015 	stw	r6,0(sp)
40003844:	d9c00115 	stw	r7,4(sp)
40003848:	0008d480 	call	40008d48 <strcmp>
4000384c:	d9800017 	ldw	r6,0(sp)
40003850:	d9c00117 	ldw	r7,4(sp)
40003854:	103fe91e 	bne	r2,zero,400037fc <__alt_data_end+0xc00037fc>
40003858:	00800184 	movi	r2,6
4000385c:	dfc00517 	ldw	ra,20(sp)
40003860:	dc800417 	ldw	r18,16(sp)
40003864:	dc400317 	ldw	r17,12(sp)
40003868:	dc000217 	ldw	r16,8(sp)
4000386c:	dec00604 	addi	sp,sp,24
40003870:	f800283a 	ret

40003874 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
40003874:	defffb04 	addi	sp,sp,-20
40003878:	dcc00315 	stw	r19,12(sp)
4000387c:	dc800215 	stw	r18,8(sp)
40003880:	dc400115 	stw	r17,4(sp)
40003884:	dc000015 	stw	r16,0(sp)
40003888:	dfc00415 	stw	ra,16(sp)
4000388c:	2027883a 	mov	r19,r4
40003890:	2825883a 	mov	r18,r5
40003894:	3023883a 	mov	r17,r6
40003898:	3821883a 	mov	r16,r7
4000389c:	00032f40 	call	400032f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
400038a0:	10c03fcc 	andi	r3,r2,255
400038a4:	18000726 	beq	r3,zero,400038c4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
400038a8:	dfc00417 	ldw	ra,16(sp)
400038ac:	dcc00317 	ldw	r19,12(sp)
400038b0:	dc800217 	ldw	r18,8(sp)
400038b4:	dc400117 	ldw	r17,4(sp)
400038b8:	dc000017 	ldw	r16,0(sp)
400038bc:	dec00504 	addi	sp,sp,20
400038c0:	f800283a 	ret
400038c4:	99000217 	ldw	r4,8(r19)
400038c8:	900b883a 	mov	r5,r18
400038cc:	880d883a 	mov	r6,r17
400038d0:	20800017 	ldw	r2,0(r4)
400038d4:	800f883a 	mov	r7,r16
400038d8:	10800617 	ldw	r2,24(r2)
400038dc:	dfc00417 	ldw	ra,16(sp)
400038e0:	dcc00317 	ldw	r19,12(sp)
400038e4:	dc800217 	ldw	r18,8(sp)
400038e8:	dc400117 	ldw	r17,4(sp)
400038ec:	dc000017 	ldw	r16,0(sp)
400038f0:	dec00504 	addi	sp,sp,20
400038f4:	1000683a 	jmp	r2

400038f8 <_Znwj>:
400038f8:	defffe04 	addi	sp,sp,-8
400038fc:	dc000015 	stw	r16,0(sp)
40003900:	dfc00115 	stw	ra,4(sp)
40003904:	2021883a 	mov	r16,r4
40003908:	2000051e 	bne	r4,zero,40003920 <_Znwj+0x28>
4000390c:	04000044 	movi	r16,1
40003910:	00000306 	br	40003920 <_Znwj+0x28>
40003914:	0003ff80 	call	40003ff8 <_ZSt15get_new_handlerv>
40003918:	10000826 	beq	r2,zero,4000393c <_Znwj+0x44>
4000391c:	103ee83a 	callr	r2
40003920:	8009883a 	mov	r4,r16
40003924:	0007f300 	call	40007f30 <malloc>
40003928:	103ffa26 	beq	r2,zero,40003914 <__alt_data_end+0xc0003914>
4000392c:	dfc00117 	ldw	ra,4(sp)
40003930:	dc000017 	ldw	r16,0(sp)
40003934:	dec00204 	addi	sp,sp,8
40003938:	f800283a 	ret
4000393c:	01000104 	movi	r4,4
40003940:	0003df00 	call	40003df0 <__cxa_allocate_exception>
40003944:	00d00074 	movhi	r3,16385
40003948:	01500074 	movhi	r5,16385
4000394c:	01900034 	movhi	r6,16384
40003950:	18d33504 	addi	r3,r3,19668
40003954:	29533004 	addi	r5,r5,19648
40003958:	318e5d04 	addi	r6,r6,14708
4000395c:	1009883a 	mov	r4,r2
40003960:	10c00015 	stw	r3,0(r2)
40003964:	0003c780 	call	40003c78 <__cxa_throw>

40003968 <_ZNKSt9bad_alloc4whatEv>:
40003968:	00900074 	movhi	r2,16385
4000396c:	10932804 	addi	r2,r2,19616
40003970:	f800283a 	ret

40003974 <_ZNSt9bad_allocD1Ev>:
40003974:	00900074 	movhi	r2,16385
40003978:	10933504 	addi	r2,r2,19668
4000397c:	20800015 	stw	r2,0(r4)
40003980:	0003fac1 	jmpi	40003fac <_ZNSt9exceptionD1Ev>

40003984 <_ZNSt9bad_allocD0Ev>:
40003984:	defffe04 	addi	sp,sp,-8
40003988:	00900074 	movhi	r2,16385
4000398c:	dc000015 	stw	r16,0(sp)
40003990:	dfc00115 	stw	ra,4(sp)
40003994:	10933504 	addi	r2,r2,19668
40003998:	20800015 	stw	r2,0(r4)
4000399c:	2021883a 	mov	r16,r4
400039a0:	0003fac0 	call	40003fac <_ZNSt9exceptionD1Ev>
400039a4:	8009883a 	mov	r4,r16
400039a8:	dfc00117 	ldw	ra,4(sp)
400039ac:	dc000017 	ldw	r16,0(sp)
400039b0:	dec00204 	addi	sp,sp,8
400039b4:	00034e81 	jmpi	400034e8 <_ZdlPv>

400039b8 <__cxa_get_exception_ptr>:
400039b8:	20bfff17 	ldw	r2,-4(r4)
400039bc:	f800283a 	ret

400039c0 <__cxa_begin_catch>:
400039c0:	defffe04 	addi	sp,sp,-8
400039c4:	dc000015 	stw	r16,0(sp)
400039c8:	dfc00115 	stw	ra,4(sp)
400039cc:	2021883a 	mov	r16,r4
400039d0:	00032140 	call	40003214 <__cxa_get_globals>
400039d4:	81000017 	ldw	r4,0(r16)
400039d8:	80c00117 	ldw	r3,4(r16)
400039dc:	01af3574 	movhi	r6,48341
400039e0:	31b54004 	addi	r6,r6,-11008
400039e4:	016e2cb4 	movhi	r5,47282
400039e8:	296aaf04 	addi	r5,r5,-21828
400039ec:	218d883a 	add	r6,r4,r6
400039f0:	3109803a 	cmpltu	r4,r6,r4
400039f4:	1947883a 	add	r3,r3,r5
400039f8:	20c7883a 	add	r3,r4,r3
400039fc:	817ff504 	addi	r5,r16,-44
40003a00:	11000017 	ldw	r4,0(r2)
40003a04:	18000726 	beq	r3,zero,40003a24 <__cxa_begin_catch+0x64>
40003a08:	2000191e 	bne	r4,zero,40003a70 <__cxa_begin_catch+0xb0>
40003a0c:	11400015 	stw	r5,0(r2)
40003a10:	0005883a 	mov	r2,zero
40003a14:	dfc00117 	ldw	ra,4(sp)
40003a18:	dc000017 	ldw	r16,0(sp)
40003a1c:	dec00204 	addi	sp,sp,8
40003a20:	f800283a 	ret
40003a24:	01c00044 	movi	r7,1
40003a28:	39bff736 	bltu	r7,r6,40003a08 <__alt_data_end+0xc0003a08>
40003a2c:	80fffa17 	ldw	r3,-24(r16)
40003a30:	18000d16 	blt	r3,zero,40003a68 <__cxa_begin_catch+0xa8>
40003a34:	18c00044 	addi	r3,r3,1
40003a38:	11800117 	ldw	r6,4(r2)
40003a3c:	80fffa15 	stw	r3,-24(r16)
40003a40:	30ffffc4 	addi	r3,r6,-1
40003a44:	10c00115 	stw	r3,4(r2)
40003a48:	21400226 	beq	r4,r5,40003a54 <__cxa_begin_catch+0x94>
40003a4c:	813ff915 	stw	r4,-28(r16)
40003a50:	11400015 	stw	r5,0(r2)
40003a54:	80bfff17 	ldw	r2,-4(r16)
40003a58:	dfc00117 	ldw	ra,4(sp)
40003a5c:	dc000017 	ldw	r16,0(sp)
40003a60:	dec00204 	addi	sp,sp,8
40003a64:	f800283a 	ret
40003a68:	38c7c83a 	sub	r3,r7,r3
40003a6c:	003ff206 	br	40003a38 <__alt_data_end+0xc0003a38>
40003a70:	00035ac0 	call	400035ac <_ZSt9terminatev>

40003a74 <__cxa_end_catch>:
40003a74:	deffff04 	addi	sp,sp,-4
40003a78:	dfc00015 	stw	ra,0(sp)
40003a7c:	00032080 	call	40003208 <__cxa_get_globals_fast>
40003a80:	11000017 	ldw	r4,0(r2)
40003a84:	20001326 	beq	r4,zero,40003ad4 <__cxa_end_catch+0x60>
40003a88:	21400b17 	ldw	r5,44(r4)
40003a8c:	01ef3574 	movhi	r7,48341
40003a90:	39f54004 	addi	r7,r7,-11008
40003a94:	29cf883a 	add	r7,r5,r7
40003a98:	20c00c17 	ldw	r3,48(r4)
40003a9c:	394d803a 	cmpltu	r6,r7,r5
40003aa0:	016e2cb4 	movhi	r5,47282
40003aa4:	296aaf04 	addi	r5,r5,-21828
40003aa8:	1947883a 	add	r3,r3,r5
40003aac:	30c7883a 	add	r3,r6,r3
40003ab0:	18000b1e 	bne	r3,zero,40003ae0 <__cxa_end_catch+0x6c>
40003ab4:	00c00044 	movi	r3,1
40003ab8:	19c00936 	bltu	r3,r7,40003ae0 <__cxa_end_catch+0x6c>
40003abc:	20c00517 	ldw	r3,20(r4)
40003ac0:	18000c16 	blt	r3,zero,40003af4 <__cxa_end_catch+0x80>
40003ac4:	197fffc4 	addi	r5,r3,-1
40003ac8:	28000f26 	beq	r5,zero,40003b08 <__cxa_end_catch+0x94>
40003acc:	18001426 	beq	r3,zero,40003b20 <__cxa_end_catch+0xac>
40003ad0:	21400515 	stw	r5,20(r4)
40003ad4:	dfc00017 	ldw	ra,0(sp)
40003ad8:	dec00104 	addi	sp,sp,4
40003adc:	f800283a 	ret
40003ae0:	21000b04 	addi	r4,r4,44
40003ae4:	10000015 	stw	zero,0(r2)
40003ae8:	dfc00017 	ldw	ra,0(sp)
40003aec:	dec00104 	addi	sp,sp,4
40003af0:	0007de01 	jmpi	40007de0 <_Unwind_DeleteException>
40003af4:	19400044 	addi	r5,r3,1
40003af8:	283ff51e 	bne	r5,zero,40003ad0 <__alt_data_end+0xc0003ad0>
40003afc:	20c00417 	ldw	r3,16(r4)
40003b00:	10c00015 	stw	r3,0(r2)
40003b04:	003ff206 	br	40003ad0 <__alt_data_end+0xc0003ad0>
40003b08:	20c00417 	ldw	r3,16(r4)
40003b0c:	21000b04 	addi	r4,r4,44
40003b10:	10c00015 	stw	r3,0(r2)
40003b14:	dfc00017 	ldw	ra,0(sp)
40003b18:	dec00104 	addi	sp,sp,4
40003b1c:	0007de01 	jmpi	40007de0 <_Unwind_DeleteException>
40003b20:	00035ac0 	call	400035ac <_ZSt9terminatev>

40003b24 <_ZSt18uncaught_exceptionv>:
40003b24:	deffff04 	addi	sp,sp,-4
40003b28:	dfc00015 	stw	ra,0(sp)
40003b2c:	00032140 	call	40003214 <__cxa_get_globals>
40003b30:	10800117 	ldw	r2,4(r2)
40003b34:	1004c03a 	cmpne	r2,r2,zero
40003b38:	dfc00017 	ldw	ra,0(sp)
40003b3c:	dec00104 	addi	sp,sp,4
40003b40:	f800283a 	ret

40003b44 <_Znaj>:
40003b44:	00900034 	movhi	r2,16384
40003b48:	defff004 	addi	sp,sp,-64
40003b4c:	108ab504 	addi	r2,r2,10964
40003b50:	d8800615 	stw	r2,24(sp)
40003b54:	00900074 	movhi	r2,16385
40003b58:	1092aa04 	addi	r2,r2,19112
40003b5c:	d8800715 	stw	r2,28(sp)
40003b60:	00900034 	movhi	r2,16384
40003b64:	108eee04 	addi	r2,r2,15288
40003b68:	d9000d15 	stw	r4,52(sp)
40003b6c:	d809883a 	mov	r4,sp
40003b70:	d8800915 	stw	r2,36(sp)
40003b74:	dfc00f15 	stw	ra,60(sp)
40003b78:	df000e15 	stw	fp,56(sp)
40003b7c:	dec00815 	stw	sp,32(sp)
40003b80:	dec00a15 	stw	sp,40(sp)
40003b84:	0007b540 	call	40007b54 <_Unwind_SjLj_Register>
40003b88:	d9000d17 	ldw	r4,52(sp)
40003b8c:	00800044 	movi	r2,1
40003b90:	d8800115 	stw	r2,4(sp)
40003b94:	00038f80 	call	400038f8 <_Znwj>
40003b98:	d809883a 	mov	r4,sp
40003b9c:	d8800d15 	stw	r2,52(sp)
40003ba0:	0007b6c0 	call	40007b6c <_Unwind_SjLj_Unregister>
40003ba4:	d8800d17 	ldw	r2,52(sp)
40003ba8:	dfc00f17 	ldw	ra,60(sp)
40003bac:	df000e17 	ldw	fp,56(sp)
40003bb0:	dec01004 	addi	sp,sp,64
40003bb4:	f800283a 	ret
40003bb8:	d8800317 	ldw	r2,12(sp)
40003bbc:	00ffffc4 	movi	r3,-1
40003bc0:	d9000217 	ldw	r4,8(sp)
40003bc4:	10c00226 	beq	r2,r3,40003bd0 <_Znaj+0x8c>
40003bc8:	d8c00115 	stw	r3,4(sp)
40003bcc:	0007d500 	call	40007d50 <_Unwind_SjLj_Resume>
40003bd0:	d8800115 	stw	r2,4(sp)
40003bd4:	0002fd40 	call	40002fd4 <__cxa_call_unexpected>

40003bd8 <__cxa_call_terminate>:
40003bd8:	defffe04 	addi	sp,sp,-8
40003bdc:	dc000015 	stw	r16,0(sp)
40003be0:	dfc00115 	stw	ra,4(sp)
40003be4:	2021883a 	mov	r16,r4
40003be8:	20000c26 	beq	r4,zero,40003c1c <__cxa_call_terminate+0x44>
40003bec:	00039c00 	call	400039c0 <__cxa_begin_catch>
40003bf0:	80c00017 	ldw	r3,0(r16)
40003bf4:	012f3574 	movhi	r4,48341
40003bf8:	21354004 	addi	r4,r4,-11008
40003bfc:	1909883a 	add	r4,r3,r4
40003c00:	80800117 	ldw	r2,4(r16)
40003c04:	20cb803a 	cmpltu	r5,r4,r3
40003c08:	00ee2cb4 	movhi	r3,47282
40003c0c:	18eaaf04 	addi	r3,r3,-21828
40003c10:	10c5883a 	add	r2,r2,r3
40003c14:	2885883a 	add	r2,r5,r2
40003c18:	10000126 	beq	r2,zero,40003c20 <__cxa_call_terminate+0x48>
40003c1c:	00035ac0 	call	400035ac <_ZSt9terminatev>
40003c20:	00800044 	movi	r2,1
40003c24:	113ffd36 	bltu	r2,r4,40003c1c <__alt_data_end+0xc0003c1c>
40003c28:	813ff817 	ldw	r4,-32(r16)
40003c2c:	00034ec0 	call	400034ec <_ZN10__cxxabiv111__terminateEPFvvE>

40003c30 <_ZdaPv>:
40003c30:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003c34 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
40003c34:	defffe04 	addi	sp,sp,-8
40003c38:	dfc00115 	stw	ra,4(sp)
40003c3c:	dc000015 	stw	r16,0(sp)
40003c40:	00800044 	movi	r2,1
40003c44:	11000a36 	bltu	r2,r4,40003c70 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
40003c48:	28bff617 	ldw	r2,-40(r5)
40003c4c:	2c000504 	addi	r16,r5,20
40003c50:	10000226 	beq	r2,zero,40003c5c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
40003c54:	8009883a 	mov	r4,r16
40003c58:	103ee83a 	callr	r2
40003c5c:	8009883a 	mov	r4,r16
40003c60:	dfc00117 	ldw	ra,4(sp)
40003c64:	dc000017 	ldw	r16,0(sp)
40003c68:	dec00204 	addi	sp,sp,8
40003c6c:	0003e941 	jmpi	40003e94 <__cxa_free_exception>
40003c70:	293ff817 	ldw	r4,-32(r5)
40003c74:	00034ec0 	call	400034ec <_ZN10__cxxabiv111__terminateEPFvvE>

40003c78 <__cxa_throw>:
40003c78:	defffb04 	addi	sp,sp,-20
40003c7c:	dfc00415 	stw	ra,16(sp)
40003c80:	dcc00315 	stw	r19,12(sp)
40003c84:	dc800215 	stw	r18,8(sp)
40003c88:	2827883a 	mov	r19,r5
40003c8c:	3025883a 	mov	r18,r6
40003c90:	dc400115 	stw	r17,4(sp)
40003c94:	dc000015 	stw	r16,0(sp)
40003c98:	2021883a 	mov	r16,r4
40003c9c:	00032140 	call	40003214 <__cxa_get_globals>
40003ca0:	10c00117 	ldw	r3,4(r2)
40003ca4:	847ffb04 	addi	r17,r16,-20
40003ca8:	18c00044 	addi	r3,r3,1
40003cac:	10c00115 	stw	r3,4(r2)
40003cb0:	00800044 	movi	r2,1
40003cb4:	80bfef15 	stw	r2,-68(r16)
40003cb8:	84fff015 	stw	r19,-64(r16)
40003cbc:	84bff115 	stw	r18,-60(r16)
40003cc0:	00036240 	call	40003624 <_ZSt14get_unexpectedv>
40003cc4:	80bff215 	stw	r2,-56(r16)
40003cc8:	00036000 	call	40003600 <_ZSt13get_terminatev>
40003ccc:	80bff315 	stw	r2,-52(r16)
40003cd0:	0090caf4 	movhi	r2,17195
40003cd4:	108ac004 	addi	r2,r2,11008
40003cd8:	80bffb15 	stw	r2,-20(r16)
40003cdc:	0091d3b4 	movhi	r2,18254
40003ce0:	109550c4 	addi	r2,r2,21827
40003ce4:	80bffc15 	stw	r2,-16(r16)
40003ce8:	00900034 	movhi	r2,16384
40003cec:	108f0d04 	addi	r2,r2,15412
40003cf0:	8809883a 	mov	r4,r17
40003cf4:	80bffd15 	stw	r2,-12(r16)
40003cf8:	0007c3c0 	call	40007c3c <_Unwind_SjLj_RaiseException>
40003cfc:	8809883a 	mov	r4,r17
40003d00:	00039c00 	call	400039c0 <__cxa_begin_catch>
40003d04:	00035ac0 	call	400035ac <_ZSt9terminatev>

40003d08 <__cxa_rethrow>:
40003d08:	defffe04 	addi	sp,sp,-8
40003d0c:	dfc00115 	stw	ra,4(sp)
40003d10:	dc000015 	stw	r16,0(sp)
40003d14:	00032140 	call	40003214 <__cxa_get_globals>
40003d18:	10c00117 	ldw	r3,4(r2)
40003d1c:	11000017 	ldw	r4,0(r2)
40003d20:	18c00044 	addi	r3,r3,1
40003d24:	10c00115 	stw	r3,4(r2)
40003d28:	20001126 	beq	r4,zero,40003d70 <__cxa_rethrow+0x68>
40003d2c:	21400b17 	ldw	r5,44(r4)
40003d30:	01ef3574 	movhi	r7,48341
40003d34:	39f54004 	addi	r7,r7,-11008
40003d38:	29cf883a 	add	r7,r5,r7
40003d3c:	20c00c17 	ldw	r3,48(r4)
40003d40:	394d803a 	cmpltu	r6,r7,r5
40003d44:	016e2cb4 	movhi	r5,47282
40003d48:	296aaf04 	addi	r5,r5,-21828
40003d4c:	1947883a 	add	r3,r3,r5
40003d50:	30c7883a 	add	r3,r6,r3
40003d54:	18000726 	beq	r3,zero,40003d74 <__cxa_rethrow+0x6c>
40003d58:	10000015 	stw	zero,0(r2)
40003d5c:	24000b04 	addi	r16,r4,44
40003d60:	8009883a 	mov	r4,r16
40003d64:	0007d940 	call	40007d94 <_Unwind_SjLj_Resume_or_Rethrow>
40003d68:	8009883a 	mov	r4,r16
40003d6c:	00039c00 	call	400039c0 <__cxa_begin_catch>
40003d70:	00035ac0 	call	400035ac <_ZSt9terminatev>
40003d74:	00c00044 	movi	r3,1
40003d78:	19fff736 	bltu	r3,r7,40003d58 <__alt_data_end+0xc0003d58>
40003d7c:	20800517 	ldw	r2,20(r4)
40003d80:	0085c83a 	sub	r2,zero,r2
40003d84:	20800515 	stw	r2,20(r4)
40003d88:	003ff406 	br	40003d5c <__alt_data_end+0xc0003d5c>

40003d8c <_ZNSt9type_infoD1Ev>:
40003d8c:	f800283a 	ret

40003d90 <_ZNKSt9type_info14__is_pointer_pEv>:
40003d90:	0005883a 	mov	r2,zero
40003d94:	f800283a 	ret

40003d98 <_ZNKSt9type_info15__is_function_pEv>:
40003d98:	0005883a 	mov	r2,zero
40003d9c:	f800283a 	ret

40003da0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
40003da0:	0005883a 	mov	r2,zero
40003da4:	f800283a 	ret

40003da8 <_ZNSt9type_infoD0Ev>:
40003da8:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003dac <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
40003dac:	21000117 	ldw	r4,4(r4)
40003db0:	29400117 	ldw	r5,4(r5)
40003db4:	21400c26 	beq	r4,r5,40003de8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
40003db8:	20c00007 	ldb	r3,0(r4)
40003dbc:	00800a84 	movi	r2,42
40003dc0:	18800726 	beq	r3,r2,40003de0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
40003dc4:	deffff04 	addi	sp,sp,-4
40003dc8:	dfc00015 	stw	ra,0(sp)
40003dcc:	0008d480 	call	40008d48 <strcmp>
40003dd0:	1005003a 	cmpeq	r2,r2,zero
40003dd4:	dfc00017 	ldw	ra,0(sp)
40003dd8:	dec00104 	addi	sp,sp,4
40003ddc:	f800283a 	ret
40003de0:	0005883a 	mov	r2,zero
40003de4:	f800283a 	ret
40003de8:	00800044 	movi	r2,1
40003dec:	f800283a 	ret

40003df0 <__cxa_allocate_exception>:
40003df0:	defffd04 	addi	sp,sp,-12
40003df4:	dc400115 	stw	r17,4(sp)
40003df8:	24401104 	addi	r17,r4,68
40003dfc:	8809883a 	mov	r4,r17
40003e00:	dc000015 	stw	r16,0(sp)
40003e04:	dfc00215 	stw	ra,8(sp)
40003e08:	0007f300 	call	40007f30 <malloc>
40003e0c:	1021883a 	mov	r16,r2
40003e10:	10000a26 	beq	r2,zero,40003e3c <__cxa_allocate_exception+0x4c>
40003e14:	8009883a 	mov	r4,r16
40003e18:	000b883a 	mov	r5,zero
40003e1c:	01801104 	movi	r6,68
40003e20:	00087000 	call	40008700 <memset>
40003e24:	80801104 	addi	r2,r16,68
40003e28:	dfc00217 	ldw	ra,8(sp)
40003e2c:	dc400117 	ldw	r17,4(sp)
40003e30:	dc000017 	ldw	r16,0(sp)
40003e34:	dec00304 	addi	sp,sp,12
40003e38:	f800283a 	ret
40003e3c:	015000b4 	movhi	r5,16386
40003e40:	29621904 	addi	r5,r5,-30620
40003e44:	00808004 	movi	r2,512
40003e48:	29800017 	ldw	r6,0(r5)
40003e4c:	14400736 	bltu	r2,r17,40003e6c <__cxa_allocate_exception+0x7c>
40003e50:	3005883a 	mov	r2,r6
40003e54:	01000104 	movi	r4,4
40003e58:	10c0004c 	andi	r3,r2,1
40003e5c:	18000426 	beq	r3,zero,40003e70 <__cxa_allocate_exception+0x80>
40003e60:	84000044 	addi	r16,r16,1
40003e64:	1004d07a 	srli	r2,r2,1
40003e68:	813ffb1e 	bne	r16,r4,40003e58 <__alt_data_end+0xc0003e58>
40003e6c:	00035ac0 	call	400035ac <_ZSt9terminatev>
40003e70:	00800044 	movi	r2,1
40003e74:	1404983a 	sll	r2,r2,r16
40003e78:	8020927a 	slli	r16,r16,9
40003e7c:	118cb03a 	or	r6,r2,r6
40003e80:	009001b4 	movhi	r2,16390
40003e84:	108e6904 	addi	r2,r2,14756
40003e88:	29800015 	stw	r6,0(r5)
40003e8c:	80a1883a 	add	r16,r16,r2
40003e90:	003fe006 	br	40003e14 <__alt_data_end+0xc0003e14>

40003e94 <__cxa_free_exception>:
40003e94:	009001b4 	movhi	r2,16390
40003e98:	108e6904 	addi	r2,r2,14756
40003e9c:	20800236 	bltu	r4,r2,40003ea8 <__cxa_free_exception+0x14>
40003ea0:	10c20004 	addi	r3,r2,2048
40003ea4:	20c00236 	bltu	r4,r3,40003eb0 <__cxa_free_exception+0x1c>
40003ea8:	213fef04 	addi	r4,r4,-68
40003eac:	0007f441 	jmpi	40007f44 <free>
40003eb0:	2089c83a 	sub	r4,r4,r2
40003eb4:	2008d27a 	srli	r4,r4,9
40003eb8:	015000b4 	movhi	r5,16386
40003ebc:	29621904 	addi	r5,r5,-30620
40003ec0:	00ffff84 	movi	r3,-2
40003ec4:	28800017 	ldw	r2,0(r5)
40003ec8:	1908183a 	rol	r4,r3,r4
40003ecc:	2088703a 	and	r4,r4,r2
40003ed0:	29000015 	stw	r4,0(r5)
40003ed4:	f800283a 	ret

40003ed8 <__cxa_allocate_dependent_exception>:
40003ed8:	defffe04 	addi	sp,sp,-8
40003edc:	01001004 	movi	r4,64
40003ee0:	dc000015 	stw	r16,0(sp)
40003ee4:	dfc00115 	stw	ra,4(sp)
40003ee8:	0007f300 	call	40007f30 <malloc>
40003eec:	1021883a 	mov	r16,r2
40003ef0:	10000926 	beq	r2,zero,40003f18 <__cxa_allocate_dependent_exception+0x40>
40003ef4:	8009883a 	mov	r4,r16
40003ef8:	000b883a 	mov	r5,zero
40003efc:	01801004 	movi	r6,64
40003f00:	00087000 	call	40008700 <memset>
40003f04:	8005883a 	mov	r2,r16
40003f08:	dfc00117 	ldw	ra,4(sp)
40003f0c:	dc000017 	ldw	r16,0(sp)
40003f10:	dec00204 	addi	sp,sp,8
40003f14:	f800283a 	ret
40003f18:	01d000b4 	movhi	r7,16386
40003f1c:	39e21804 	addi	r7,r7,-30624
40003f20:	39800017 	ldw	r6,0(r7)
40003f24:	0005883a 	mov	r2,zero
40003f28:	01400104 	movi	r5,4
40003f2c:	3007883a 	mov	r3,r6
40003f30:	1900004c 	andi	r4,r3,1
40003f34:	20000426 	beq	r4,zero,40003f48 <__cxa_allocate_dependent_exception+0x70>
40003f38:	10800044 	addi	r2,r2,1
40003f3c:	1806d07a 	srli	r3,r3,1
40003f40:	117ffb1e 	bne	r2,r5,40003f30 <__alt_data_end+0xc0003f30>
40003f44:	00035ac0 	call	400035ac <_ZSt9terminatev>
40003f48:	00c00044 	movi	r3,1
40003f4c:	1886983a 	sll	r3,r3,r2
40003f50:	100491ba 	slli	r2,r2,6
40003f54:	041001b4 	movhi	r16,16390
40003f58:	198cb03a 	or	r6,r3,r6
40003f5c:	840e2904 	addi	r16,r16,14500
40003f60:	39800015 	stw	r6,0(r7)
40003f64:	1421883a 	add	r16,r2,r16
40003f68:	003fe206 	br	40003ef4 <__alt_data_end+0xc0003ef4>

40003f6c <__cxa_free_dependent_exception>:
40003f6c:	009001b4 	movhi	r2,16390
40003f70:	108e2904 	addi	r2,r2,14500
40003f74:	20800236 	bltu	r4,r2,40003f80 <__cxa_free_dependent_exception+0x14>
40003f78:	10c04004 	addi	r3,r2,256
40003f7c:	20c00136 	bltu	r4,r3,40003f84 <__cxa_free_dependent_exception+0x18>
40003f80:	0007f441 	jmpi	40007f44 <free>
40003f84:	2089c83a 	sub	r4,r4,r2
40003f88:	2008d1ba 	srli	r4,r4,6
40003f8c:	015000b4 	movhi	r5,16386
40003f90:	29621804 	addi	r5,r5,-30624
40003f94:	00ffff84 	movi	r3,-2
40003f98:	28800017 	ldw	r2,0(r5)
40003f9c:	1908183a 	rol	r4,r3,r4
40003fa0:	2088703a 	and	r4,r4,r2
40003fa4:	29000015 	stw	r4,0(r5)
40003fa8:	f800283a 	ret

40003fac <_ZNSt9exceptionD1Ev>:
40003fac:	f800283a 	ret

40003fb0 <_ZNSt13bad_exceptionD1Ev>:
40003fb0:	f800283a 	ret

40003fb4 <_ZNKSt9exception4whatEv>:
40003fb4:	00900074 	movhi	r2,16385
40003fb8:	10934404 	addi	r2,r2,19728
40003fbc:	f800283a 	ret

40003fc0 <_ZNKSt13bad_exception4whatEv>:
40003fc0:	00900074 	movhi	r2,16385
40003fc4:	10934804 	addi	r2,r2,19744
40003fc8:	f800283a 	ret

40003fcc <_ZNSt9exceptionD0Ev>:
40003fcc:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003fd0 <_ZNSt13bad_exceptionD0Ev>:
40003fd0:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003fd4 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
40003fd4:	f800283a 	ret

40003fd8 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
40003fd8:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003fdc <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
40003fdc:	f800283a 	ret

40003fe0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
40003fe0:	00034e81 	jmpi	400034e8 <_ZdlPv>

40003fe4 <_ZSt15set_new_handlerPFvvE>:
40003fe4:	00d000b4 	movhi	r3,16386
40003fe8:	18e21a04 	addi	r3,r3,-30616
40003fec:	18800017 	ldw	r2,0(r3)
40003ff0:	19000015 	stw	r4,0(r3)
40003ff4:	f800283a 	ret

40003ff8 <_ZSt15get_new_handlerv>:
40003ff8:	009000b4 	movhi	r2,16386
40003ffc:	10a21a04 	addi	r2,r2,-30616
40004000:	10800017 	ldw	r2,0(r2)
40004004:	f800283a 	ret

40004008 <__cxa_pure_virtual>:
40004008:	01500074 	movhi	r5,16385
4000400c:	deffff04 	addi	sp,sp,-4
40004010:	29537e04 	addi	r5,r5,19960
40004014:	01000084 	movi	r4,2
40004018:	018006c4 	movi	r6,27
4000401c:	dfc00015 	stw	ra,0(sp)
40004020:	0012ed00 	call	40012ed0 <write>
40004024:	00035ac0 	call	400035ac <_ZSt9terminatev>

40004028 <__cxa_deleted_virtual>:
40004028:	01500074 	movhi	r5,16385
4000402c:	deffff04 	addi	sp,sp,-4
40004030:	29538504 	addi	r5,r5,19988
40004034:	01000084 	movi	r4,2
40004038:	01800784 	movi	r6,30
4000403c:	dfc00015 	stw	ra,0(sp)
40004040:	0012ed00 	call	40012ed0 <write>
40004044:	00035ac0 	call	400035ac <_ZSt9terminatev>

40004048 <log2>:
	double log2(double x)		/* wrapper log2 */
#else
	double log2(x)			/* wrapper log2 */
	double x;
#endif
{
40004048:	defffc04 	addi	sp,sp,-16
4000404c:	dfc00315 	stw	ra,12(sp)
40004050:	df000215 	stw	fp,8(sp)
40004054:	df000204 	addi	fp,sp,8
40004058:	e13ffe15 	stw	r4,-8(fp)
4000405c:	e17fff15 	stw	r5,-4(fp)
  return (log(x) / M_LOG2_E);
40004060:	e13ffe17 	ldw	r4,-8(fp)
40004064:	e17fff17 	ldw	r5,-4(fp)
40004068:	00040c40 	call	400040c4 <log>
4000406c:	100b883a 	mov	r5,r2
40004070:	180d883a 	mov	r6,r3
40004074:	2809883a 	mov	r4,r5
40004078:	300b883a 	mov	r5,r6
4000407c:	01bfbeb4 	movhi	r6,65274
40004080:	318e7bc4 	addi	r6,r6,14831
40004084:	01cff9b4 	movhi	r7,16358
40004088:	39cb9084 	addi	r7,r7,11842
4000408c:	0005a480 	call	40005a48 <__divdf3>
40004090:	100f883a 	mov	r7,r2
40004094:	1811883a 	mov	r8,r3
40004098:	380b883a 	mov	r5,r7
4000409c:	400d883a 	mov	r6,r8
400040a0:	2807883a 	mov	r3,r5
400040a4:	3009883a 	mov	r4,r6
}
400040a8:	1805883a 	mov	r2,r3
400040ac:	2007883a 	mov	r3,r4
400040b0:	e037883a 	mov	sp,fp
400040b4:	dfc00117 	ldw	ra,4(sp)
400040b8:	df000017 	ldw	fp,0(sp)
400040bc:	dec00204 	addi	sp,sp,8
400040c0:	f800283a 	ret

400040c4 <log>:
	double log(double x)		/* wrapper log */
#else
	double log(x)			/* wrapper log */
	double x;
#endif
{
400040c4:	defff104 	addi	sp,sp,-60
400040c8:	dfc00e15 	stw	ra,56(sp)
400040cc:	df000d15 	stw	fp,52(sp)
400040d0:	df000d04 	addi	fp,sp,52
400040d4:	e13ffe15 	stw	r4,-8(fp)
400040d8:	e17fff15 	stw	r5,-4(fp)
#ifdef _IEEE_LIBM
	return __ieee754_log(x);
#else
	double z;
	struct exception exc;
	z = __ieee754_log(x);
400040dc:	e13ffe17 	ldw	r4,-8(fp)
400040e0:	e17fff17 	ldw	r5,-4(fp)
400040e4:	00042b80 	call	400042b8 <__ieee754_log>
400040e8:	e0bff315 	stw	r2,-52(fp)
400040ec:	e0fff415 	stw	r3,-48(fp)
	if(_LIB_VERSION == _IEEE_ || isnan(x) || x > 0.0) return z;
400040f0:	00900074 	movhi	r2,16385
400040f4:	109b2104 	addi	r2,r2,27780
400040f8:	10800017 	ldw	r2,0(r2)
400040fc:	10bfffe0 	cmpeqi	r2,r2,-1
40004100:	10000a1e 	bne	r2,zero,4000412c <log+0x68>
40004104:	e13ffe17 	ldw	r4,-8(fp)
40004108:	e17fff17 	ldw	r5,-4(fp)
4000410c:	0004ec00 	call	40004ec0 <__fpclassifyd>
40004110:	10000626 	beq	r2,zero,4000412c <log+0x68>
40004114:	e13ffe17 	ldw	r4,-8(fp)
40004118:	e17fff17 	ldw	r5,-4(fp)
4000411c:	000d883a 	mov	r6,zero
40004120:	000f883a 	mov	r7,zero
40004124:	00063980 	call	40006398 <__gedf2>
40004128:	0080030e 	bge	zero,r2,40004138 <log+0x74>
4000412c:	e0bff317 	ldw	r2,-52(fp)
40004130:	e0fff417 	ldw	r3,-48(fp)
40004134:	00005706 	br	40004294 <log+0x1d0>
#define HUGE_VAL inf
	double inf = 0.0;

	SET_HIGH_WORD(inf,0x7ff00000);	/* set inf to infinite */
#endif
	exc.name = "log";
40004138:	00900074 	movhi	r2,16385
4000413c:	10938d04 	addi	r2,r2,20020
40004140:	e0bff615 	stw	r2,-40(fp)
	exc.err = 0;
40004144:	e03ffd15 	stw	zero,-12(fp)
	exc.arg1 = x;
40004148:	e0bffe17 	ldw	r2,-8(fp)
4000414c:	e0bff715 	stw	r2,-36(fp)
40004150:	e0bfff17 	ldw	r2,-4(fp)
40004154:	e0bff815 	stw	r2,-32(fp)
	exc.arg2 = x;
40004158:	e0bffe17 	ldw	r2,-8(fp)
4000415c:	e0bff915 	stw	r2,-28(fp)
40004160:	e0bfff17 	ldw	r2,-4(fp)
40004164:	e0bffa15 	stw	r2,-24(fp)
	if (_LIB_VERSION == _SVID_)
40004168:	00900074 	movhi	r2,16385
4000416c:	109b2104 	addi	r2,r2,27780
40004170:	10800017 	ldw	r2,0(r2)
40004174:	1000061e 	bne	r2,zero,40004190 <log+0xcc>
           exc.retval = -HUGE;
40004178:	00b80034 	movhi	r2,57344
4000417c:	e0bffb15 	stw	r2,-20(fp)
40004180:	00b1fc34 	movhi	r2,51184
40004184:	10bfffc4 	addi	r2,r2,-1
40004188:	e0bffc15 	stw	r2,-16(fp)
4000418c:	00000306 	br	4000419c <log+0xd8>
	else
	   exc.retval = -HUGE_VAL;
40004190:	e03ffb15 	stw	zero,-20(fp)
40004194:	00bffc34 	movhi	r2,65520
40004198:	e0bffc15 	stw	r2,-16(fp)
	if(x==0.0) {
4000419c:	e13ffe17 	ldw	r4,-8(fp)
400041a0:	e17fff17 	ldw	r5,-4(fp)
400041a4:	000d883a 	mov	r6,zero
400041a8:	000f883a 	mov	r7,zero
400041ac:	00063140 	call	40006314 <__eqdf2>
400041b0:	1000151e 	bne	r2,zero,40004208 <log+0x144>
	    /* log(0) */
	    exc.type = SING;
400041b4:	00800084 	movi	r2,2
400041b8:	e0bff515 	stw	r2,-44(fp)
	    if (_LIB_VERSION == _POSIX_)
400041bc:	00900074 	movhi	r2,16385
400041c0:	109b2104 	addi	r2,r2,27780
400041c4:	10800017 	ldw	r2,0(r2)
400041c8:	10800098 	cmpnei	r2,r2,2
400041cc:	1000051e 	bne	r2,zero,400041e4 <log+0x120>
	       errno = ERANGE;
400041d0:	0007ee80 	call	40007ee8 <__errno>
400041d4:	1007883a 	mov	r3,r2
400041d8:	00800884 	movi	r2,34
400041dc:	18800015 	stw	r2,0(r3)
400041e0:	00002406 	br	40004274 <log+0x1b0>
	    else if (!matherr(&exc)) {
400041e4:	e0bff504 	addi	r2,fp,-44
400041e8:	1009883a 	mov	r4,r2
400041ec:	0004fc40 	call	40004fc4 <matherr>
400041f0:	1000201e 	bne	r2,zero,40004274 <log+0x1b0>
	       errno = ERANGE;
400041f4:	0007ee80 	call	40007ee8 <__errno>
400041f8:	1007883a 	mov	r3,r2
400041fc:	00800884 	movi	r2,34
40004200:	18800015 	stw	r2,0(r3)
40004204:	00001b06 	br	40004274 <log+0x1b0>
	    }
	} else { 
	    /* log(x<0) */
	    exc.type = DOMAIN;
40004208:	00800044 	movi	r2,1
4000420c:	e0bff515 	stw	r2,-44(fp)
	    if (_LIB_VERSION == _POSIX_)
40004210:	00900074 	movhi	r2,16385
40004214:	109b2104 	addi	r2,r2,27780
40004218:	10800017 	ldw	r2,0(r2)
4000421c:	10800098 	cmpnei	r2,r2,2
40004220:	1000051e 	bne	r2,zero,40004238 <log+0x174>
	       errno = EDOM;
40004224:	0007ee80 	call	40007ee8 <__errno>
40004228:	1007883a 	mov	r3,r2
4000422c:	00800844 	movi	r2,33
40004230:	18800015 	stw	r2,0(r3)
40004234:	00000806 	br	40004258 <log+0x194>
	    else if (!matherr(&exc)) {
40004238:	e0bff504 	addi	r2,fp,-44
4000423c:	1009883a 	mov	r4,r2
40004240:	0004fc40 	call	40004fc4 <matherr>
40004244:	1000041e 	bne	r2,zero,40004258 <log+0x194>
	       errno = EDOM;
40004248:	0007ee80 	call	40007ee8 <__errno>
4000424c:	1007883a 	mov	r3,r2
40004250:	00800844 	movi	r2,33
40004254:	18800015 	stw	r2,0(r3)
	    }
            exc.retval = nan("");
40004258:	01100074 	movhi	r4,16385
4000425c:	21138e04 	addi	r4,r4,20024
40004260:	000502c0 	call	4000502c <nan>
40004264:	1009883a 	mov	r4,r2
40004268:	180b883a 	mov	r5,r3
4000426c:	e13ffb15 	stw	r4,-20(fp)
40004270:	e17ffc15 	stw	r5,-16(fp)
        }
	if (exc.err != 0)
40004274:	e0bffd17 	ldw	r2,-12(fp)
40004278:	10000426 	beq	r2,zero,4000428c <log+0x1c8>
           errno = exc.err;
4000427c:	0007ee80 	call	40007ee8 <__errno>
40004280:	1007883a 	mov	r3,r2
40004284:	e0bffd17 	ldw	r2,-12(fp)
40004288:	18800015 	stw	r2,0(r3)
        return exc.retval; 
4000428c:	e0bffb17 	ldw	r2,-20(fp)
40004290:	e0fffc17 	ldw	r3,-16(fp)
40004294:	1009883a 	mov	r4,r2
40004298:	180b883a 	mov	r5,r3
#endif
}
4000429c:	2005883a 	mov	r2,r4
400042a0:	2807883a 	mov	r3,r5
400042a4:	e037883a 	mov	sp,fp
400042a8:	dfc00117 	ldw	ra,4(sp)
400042ac:	df000017 	ldw	fp,0(sp)
400042b0:	dec00204 	addi	sp,sp,8
400042b4:	f800283a 	ret

400042b8 <__ieee754_log>:
	double __ieee754_log(double x)
#else
	double __ieee754_log(x)
	double x;
#endif
{
400042b8:	deffdb04 	addi	sp,sp,-148
400042bc:	dfc02415 	stw	ra,144(sp)
400042c0:	df002315 	stw	fp,140(sp)
400042c4:	dcc02215 	stw	r19,136(sp)
400042c8:	dc802115 	stw	r18,132(sp)
400042cc:	dc402015 	stw	r17,128(sp)
400042d0:	dc001f15 	stw	r16,124(sp)
400042d4:	df002304 	addi	fp,sp,140
400042d8:	e13ffa15 	stw	r4,-24(fp)
400042dc:	e17ffb15 	stw	r5,-20(fp)
	double hfsq,f,s,z,R,w,t1,t2,dk;
	__int32_t k,hx,i,j;
	__uint32_t lx;

	EXTRACT_WORDS(hx,lx,x);
400042e0:	e0bffa17 	ldw	r2,-24(fp)
400042e4:	e0bff415 	stw	r2,-48(fp)
400042e8:	e0bffb17 	ldw	r2,-20(fp)
400042ec:	e0bff515 	stw	r2,-44(fp)
400042f0:	e0bff517 	ldw	r2,-44(fp)
400042f4:	e0bfde15 	stw	r2,-136(fp)
400042f8:	e0bff417 	ldw	r2,-48(fp)
400042fc:	e0bfdf15 	stw	r2,-132(fp)

	k=0;
40004300:	e03fdd15 	stw	zero,-140(fp)
	if (hx < 0x00100000) {			/* x < 2**-1022  */
40004304:	e0ffde17 	ldw	r3,-136(fp)
40004308:	00800434 	movhi	r2,16
4000430c:	1880420e 	bge	r3,r2,40004418 <__ieee754_log+0x160>
	    if (((hx&0x7fffffff)|lx)==0) 
40004310:	e0ffde17 	ldw	r3,-136(fp)
40004314:	00a00034 	movhi	r2,32768
40004318:	10bfffc4 	addi	r2,r2,-1
4000431c:	1886703a 	and	r3,r3,r2
40004320:	e0bfdf17 	ldw	r2,-132(fp)
40004324:	1884b03a 	or	r2,r3,r2
40004328:	1000101e 	bne	r2,zero,4000436c <__ieee754_log+0xb4>
		return -two54/zero;		/* log(+-0)=-inf */
4000432c:	0005883a 	mov	r2,zero
40004330:	00d0d434 	movhi	r3,17232
40004334:	100d883a 	mov	r6,r2
40004338:	19e0003c 	xorhi	r7,r3,32768
4000433c:	0005883a 	mov	r2,zero
40004340:	0007883a 	mov	r3,zero
40004344:	3009883a 	mov	r4,r6
40004348:	380b883a 	mov	r5,r7
4000434c:	100d883a 	mov	r6,r2
40004350:	180f883a 	mov	r7,r3
40004354:	0005a480 	call	40005a48 <__divdf3>
40004358:	1009883a 	mov	r4,r2
4000435c:	180b883a 	mov	r5,r3
40004360:	2005883a 	mov	r2,r4
40004364:	2807883a 	mov	r3,r5
40004368:	0002c806 	br	40004e8c <__ieee754_log+0xbd4>
	    if (hx<0) return (x-x)/zero;	/* log(-#) = NaN */
4000436c:	e0bfde17 	ldw	r2,-136(fp)
40004370:	1000150e 	bge	r2,zero,400043c8 <__ieee754_log+0x110>
40004374:	e13ffa17 	ldw	r4,-24(fp)
40004378:	e17ffb17 	ldw	r5,-20(fp)
4000437c:	e1bffa17 	ldw	r6,-24(fp)
40004380:	e1fffb17 	ldw	r7,-20(fp)
40004384:	0006c7c0 	call	40006c7c <__subdf3>
40004388:	100f883a 	mov	r7,r2
4000438c:	1811883a 	mov	r8,r3
40004390:	380b883a 	mov	r5,r7
40004394:	400d883a 	mov	r6,r8
40004398:	0005883a 	mov	r2,zero
4000439c:	0007883a 	mov	r3,zero
400043a0:	2809883a 	mov	r4,r5
400043a4:	300b883a 	mov	r5,r6
400043a8:	100d883a 	mov	r6,r2
400043ac:	180f883a 	mov	r7,r3
400043b0:	0005a480 	call	40005a48 <__divdf3>
400043b4:	1009883a 	mov	r4,r2
400043b8:	180b883a 	mov	r5,r3
400043bc:	2005883a 	mov	r2,r4
400043c0:	2807883a 	mov	r3,r5
400043c4:	0002b106 	br	40004e8c <__ieee754_log+0xbd4>
	    k -= 54; x *= two54; /* subnormal number, scale up x */
400043c8:	e0bfdd17 	ldw	r2,-140(fp)
400043cc:	10bff284 	addi	r2,r2,-54
400043d0:	e0bfdd15 	stw	r2,-140(fp)
400043d4:	0005883a 	mov	r2,zero
400043d8:	00d0d434 	movhi	r3,17232
400043dc:	e13ffa17 	ldw	r4,-24(fp)
400043e0:	e17ffb17 	ldw	r5,-20(fp)
400043e4:	100d883a 	mov	r6,r2
400043e8:	180f883a 	mov	r7,r3
400043ec:	00065580 	call	40006558 <__muldf3>
400043f0:	1009883a 	mov	r4,r2
400043f4:	180b883a 	mov	r5,r3
400043f8:	e13ffa15 	stw	r4,-24(fp)
400043fc:	e17ffb15 	stw	r5,-20(fp)
	    GET_HIGH_WORD(hx,x);
40004400:	e0bffa17 	ldw	r2,-24(fp)
40004404:	e0bff615 	stw	r2,-40(fp)
40004408:	e0bffb17 	ldw	r2,-20(fp)
4000440c:	e0bff715 	stw	r2,-36(fp)
40004410:	e0bff717 	ldw	r2,-36(fp)
40004414:	e0bfde15 	stw	r2,-136(fp)
	} 
	if (hx >= 0x7ff00000) return x+x;
40004418:	e0ffde17 	ldw	r3,-136(fp)
4000441c:	009ffc34 	movhi	r2,32752
40004420:	18800c16 	blt	r3,r2,40004454 <__ieee754_log+0x19c>
40004424:	e0bffa17 	ldw	r2,-24(fp)
40004428:	e0fffb17 	ldw	r3,-20(fp)
4000442c:	1009883a 	mov	r4,r2
40004430:	180b883a 	mov	r5,r3
40004434:	100d883a 	mov	r6,r2
40004438:	180f883a 	mov	r7,r3
4000443c:	00051ac0 	call	400051ac <__adddf3>
40004440:	1009883a 	mov	r4,r2
40004444:	180b883a 	mov	r5,r3
40004448:	2005883a 	mov	r2,r4
4000444c:	2807883a 	mov	r3,r5
40004450:	00028e06 	br	40004e8c <__ieee754_log+0xbd4>
	k += (hx>>20)-1023;
40004454:	e0bfde17 	ldw	r2,-136(fp)
40004458:	1005d53a 	srai	r2,r2,20
4000445c:	10bf0044 	addi	r2,r2,-1023
40004460:	e0ffdd17 	ldw	r3,-140(fp)
40004464:	1885883a 	add	r2,r3,r2
40004468:	e0bfdd15 	stw	r2,-140(fp)
	hx &= 0x000fffff;
4000446c:	e0ffde17 	ldw	r3,-136(fp)
40004470:	00800434 	movhi	r2,16
40004474:	10bfffc4 	addi	r2,r2,-1
40004478:	1884703a 	and	r2,r3,r2
4000447c:	e0bfde15 	stw	r2,-136(fp)
	i = (hx+0x95f64)&0x100000;
40004480:	e0ffde17 	ldw	r3,-136(fp)
40004484:	00800274 	movhi	r2,9
40004488:	1097d904 	addi	r2,r2,24420
4000448c:	1885883a 	add	r2,r3,r2
40004490:	1080042c 	andhi	r2,r2,16
40004494:	e0bfe015 	stw	r2,-128(fp)
	SET_HIGH_WORD(x,hx|(i^0x3ff00000));	/* normalize x or x/2 */
40004498:	e0bffa17 	ldw	r2,-24(fp)
4000449c:	e0bff815 	stw	r2,-32(fp)
400044a0:	e0bffb17 	ldw	r2,-20(fp)
400044a4:	e0bff915 	stw	r2,-28(fp)
400044a8:	e0bfe017 	ldw	r2,-128(fp)
400044ac:	10cffc3c 	xorhi	r3,r2,16368
400044b0:	e0bfde17 	ldw	r2,-136(fp)
400044b4:	1884b03a 	or	r2,r3,r2
400044b8:	e0bff915 	stw	r2,-28(fp)
400044bc:	e0bff817 	ldw	r2,-32(fp)
400044c0:	e0bffa15 	stw	r2,-24(fp)
400044c4:	e0bff917 	ldw	r2,-28(fp)
400044c8:	e0bffb15 	stw	r2,-20(fp)
	k += (i>>20);
400044cc:	e0bfe017 	ldw	r2,-128(fp)
400044d0:	1005d53a 	srai	r2,r2,20
400044d4:	e0ffdd17 	ldw	r3,-140(fp)
400044d8:	1885883a 	add	r2,r3,r2
400044dc:	e0bfdd15 	stw	r2,-140(fp)
	f = x-1.0;
400044e0:	e13ffa17 	ldw	r4,-24(fp)
400044e4:	e17ffb17 	ldw	r5,-20(fp)
400044e8:	000d883a 	mov	r6,zero
400044ec:	01cffc34 	movhi	r7,16368
400044f0:	0006c7c0 	call	40006c7c <__subdf3>
400044f4:	1009883a 	mov	r4,r2
400044f8:	180b883a 	mov	r5,r3
400044fc:	e13fe115 	stw	r4,-124(fp)
40004500:	e17fe215 	stw	r5,-120(fp)
	if((0x000fffff&(2+hx))<3) {	/* |f| < 2**-20 */
40004504:	e0bfde17 	ldw	r2,-136(fp)
40004508:	10c00084 	addi	r3,r2,2
4000450c:	00800434 	movhi	r2,16
40004510:	10bfffc4 	addi	r2,r2,-1
40004514:	1884703a 	and	r2,r3,r2
40004518:	108000c8 	cmpgei	r2,r2,3
4000451c:	1000a31e 	bne	r2,zero,400047ac <__ieee754_log+0x4f4>
          if(f==zero) { if(k==0) return zero;  else {dk=(double)k;
40004520:	0005883a 	mov	r2,zero
40004524:	0007883a 	mov	r3,zero
40004528:	e13fe117 	ldw	r4,-124(fp)
4000452c:	e17fe217 	ldw	r5,-120(fp)
40004530:	100d883a 	mov	r6,r2
40004534:	180f883a 	mov	r7,r3
40004538:	00063140 	call	40006314 <__eqdf2>
4000453c:	10002e1e 	bne	r2,zero,400045f8 <__ieee754_log+0x340>
40004540:	e0bfdd17 	ldw	r2,-140(fp)
40004544:	1000031e 	bne	r2,zero,40004554 <__ieee754_log+0x29c>
40004548:	0005883a 	mov	r2,zero
4000454c:	0007883a 	mov	r3,zero
40004550:	00024e06 	br	40004e8c <__ieee754_log+0xbd4>
40004554:	e13fdd17 	ldw	r4,-140(fp)
40004558:	00075d40 	call	400075d4 <__floatsidf>
4000455c:	1009883a 	mov	r4,r2
40004560:	180b883a 	mov	r5,r3
40004564:	e13fe315 	stw	r4,-116(fp)
40004568:	e17fe415 	stw	r5,-112(fp)
                               return dk*ln2_hi+dk*ln2_lo;}}
4000456c:	00bfb834 	movhi	r2,65248
40004570:	00cff9b4 	movhi	r3,16358
40004574:	18cb9084 	addi	r3,r3,11842
40004578:	1009883a 	mov	r4,r2
4000457c:	180b883a 	mov	r5,r3
40004580:	e1bfe317 	ldw	r6,-116(fp)
40004584:	e1ffe417 	ldw	r7,-112(fp)
40004588:	00065580 	call	40006558 <__muldf3>
4000458c:	1009883a 	mov	r4,r2
40004590:	180b883a 	mov	r5,r3
40004594:	2021883a 	mov	r16,r4
40004598:	2823883a 	mov	r17,r5
4000459c:	008d5e74 	movhi	r2,13689
400045a0:	108f1d84 	addi	r2,r2,15478
400045a4:	00cf7ab4 	movhi	r3,15850
400045a8:	18ce7bc4 	addi	r3,r3,14831
400045ac:	1009883a 	mov	r4,r2
400045b0:	180b883a 	mov	r5,r3
400045b4:	e1bfe317 	ldw	r6,-116(fp)
400045b8:	e1ffe417 	ldw	r7,-112(fp)
400045bc:	00065580 	call	40006558 <__muldf3>
400045c0:	1009883a 	mov	r4,r2
400045c4:	180b883a 	mov	r5,r3
400045c8:	2005883a 	mov	r2,r4
400045cc:	2807883a 	mov	r3,r5
400045d0:	8009883a 	mov	r4,r16
400045d4:	880b883a 	mov	r5,r17
400045d8:	100d883a 	mov	r6,r2
400045dc:	180f883a 	mov	r7,r3
400045e0:	00051ac0 	call	400051ac <__adddf3>
400045e4:	1009883a 	mov	r4,r2
400045e8:	180b883a 	mov	r5,r3
400045ec:	2005883a 	mov	r2,r4
400045f0:	2807883a 	mov	r3,r5
400045f4:	00022506 	br	40004e8c <__ieee754_log+0xbd4>
	    R = f*f*(0.5-0.33333333333333333*f);
400045f8:	e13fe117 	ldw	r4,-124(fp)
400045fc:	e17fe217 	ldw	r5,-120(fp)
40004600:	e1bfe117 	ldw	r6,-124(fp)
40004604:	e1ffe217 	ldw	r7,-120(fp)
40004608:	00065580 	call	40006558 <__muldf3>
4000460c:	1009883a 	mov	r4,r2
40004610:	180b883a 	mov	r5,r3
40004614:	2021883a 	mov	r16,r4
40004618:	2823883a 	mov	r17,r5
4000461c:	e13fe117 	ldw	r4,-124(fp)
40004620:	e17fe217 	ldw	r5,-120(fp)
40004624:	01955574 	movhi	r6,21845
40004628:	31955544 	addi	r6,r6,21845
4000462c:	01cff574 	movhi	r7,16341
40004630:	39d55544 	addi	r7,r7,21845
40004634:	00065580 	call	40006558 <__muldf3>
40004638:	1009883a 	mov	r4,r2
4000463c:	180b883a 	mov	r5,r3
40004640:	2005883a 	mov	r2,r4
40004644:	2807883a 	mov	r3,r5
40004648:	0009883a 	mov	r4,zero
4000464c:	014ff834 	movhi	r5,16352
40004650:	100d883a 	mov	r6,r2
40004654:	180f883a 	mov	r7,r3
40004658:	0006c7c0 	call	40006c7c <__subdf3>
4000465c:	1009883a 	mov	r4,r2
40004660:	180b883a 	mov	r5,r3
40004664:	2005883a 	mov	r2,r4
40004668:	2807883a 	mov	r3,r5
4000466c:	8009883a 	mov	r4,r16
40004670:	880b883a 	mov	r5,r17
40004674:	100d883a 	mov	r6,r2
40004678:	180f883a 	mov	r7,r3
4000467c:	00065580 	call	40006558 <__muldf3>
40004680:	1009883a 	mov	r4,r2
40004684:	180b883a 	mov	r5,r3
40004688:	e13fe515 	stw	r4,-108(fp)
4000468c:	e17fe615 	stw	r5,-104(fp)
	    if(k==0) return f-R; else {dk=(double)k;
40004690:	e0bfdd17 	ldw	r2,-140(fp)
40004694:	10000a1e 	bne	r2,zero,400046c0 <__ieee754_log+0x408>
40004698:	e13fe117 	ldw	r4,-124(fp)
4000469c:	e17fe217 	ldw	r5,-120(fp)
400046a0:	e1bfe517 	ldw	r6,-108(fp)
400046a4:	e1ffe617 	ldw	r7,-104(fp)
400046a8:	0006c7c0 	call	40006c7c <__subdf3>
400046ac:	1009883a 	mov	r4,r2
400046b0:	180b883a 	mov	r5,r3
400046b4:	2005883a 	mov	r2,r4
400046b8:	2807883a 	mov	r3,r5
400046bc:	0001f306 	br	40004e8c <__ieee754_log+0xbd4>
400046c0:	e13fdd17 	ldw	r4,-140(fp)
400046c4:	00075d40 	call	400075d4 <__floatsidf>
400046c8:	1009883a 	mov	r4,r2
400046cc:	180b883a 	mov	r5,r3
400046d0:	e13fe315 	stw	r4,-116(fp)
400046d4:	e17fe415 	stw	r5,-112(fp)
	    	     return dk*ln2_hi-((R-dk*ln2_lo)-f);}
400046d8:	00bfb834 	movhi	r2,65248
400046dc:	00cff9b4 	movhi	r3,16358
400046e0:	18cb9084 	addi	r3,r3,11842
400046e4:	1009883a 	mov	r4,r2
400046e8:	180b883a 	mov	r5,r3
400046ec:	e1bfe317 	ldw	r6,-116(fp)
400046f0:	e1ffe417 	ldw	r7,-112(fp)
400046f4:	00065580 	call	40006558 <__muldf3>
400046f8:	1009883a 	mov	r4,r2
400046fc:	180b883a 	mov	r5,r3
40004700:	2021883a 	mov	r16,r4
40004704:	2823883a 	mov	r17,r5
40004708:	008d5e74 	movhi	r2,13689
4000470c:	108f1d84 	addi	r2,r2,15478
40004710:	00cf7ab4 	movhi	r3,15850
40004714:	18ce7bc4 	addi	r3,r3,14831
40004718:	1009883a 	mov	r4,r2
4000471c:	180b883a 	mov	r5,r3
40004720:	e1bfe317 	ldw	r6,-116(fp)
40004724:	e1ffe417 	ldw	r7,-112(fp)
40004728:	00065580 	call	40006558 <__muldf3>
4000472c:	1009883a 	mov	r4,r2
40004730:	180b883a 	mov	r5,r3
40004734:	2005883a 	mov	r2,r4
40004738:	2807883a 	mov	r3,r5
4000473c:	e13fe517 	ldw	r4,-108(fp)
40004740:	e17fe617 	ldw	r5,-104(fp)
40004744:	100d883a 	mov	r6,r2
40004748:	180f883a 	mov	r7,r3
4000474c:	0006c7c0 	call	40006c7c <__subdf3>
40004750:	1009883a 	mov	r4,r2
40004754:	180b883a 	mov	r5,r3
40004758:	2005883a 	mov	r2,r4
4000475c:	2807883a 	mov	r3,r5
40004760:	1009883a 	mov	r4,r2
40004764:	180b883a 	mov	r5,r3
40004768:	e1bfe117 	ldw	r6,-124(fp)
4000476c:	e1ffe217 	ldw	r7,-120(fp)
40004770:	0006c7c0 	call	40006c7c <__subdf3>
40004774:	1009883a 	mov	r4,r2
40004778:	180b883a 	mov	r5,r3
4000477c:	2005883a 	mov	r2,r4
40004780:	2807883a 	mov	r3,r5
40004784:	8009883a 	mov	r4,r16
40004788:	880b883a 	mov	r5,r17
4000478c:	100d883a 	mov	r6,r2
40004790:	180f883a 	mov	r7,r3
40004794:	0006c7c0 	call	40006c7c <__subdf3>
40004798:	1009883a 	mov	r4,r2
4000479c:	180b883a 	mov	r5,r3
400047a0:	2005883a 	mov	r2,r4
400047a4:	2807883a 	mov	r3,r5
400047a8:	0001b806 	br	40004e8c <__ieee754_log+0xbd4>
	}
 	s = f/(2.0+f); 
400047ac:	e13fe117 	ldw	r4,-124(fp)
400047b0:	e17fe217 	ldw	r5,-120(fp)
400047b4:	000d883a 	mov	r6,zero
400047b8:	01d00034 	movhi	r7,16384
400047bc:	00051ac0 	call	400051ac <__adddf3>
400047c0:	1009883a 	mov	r4,r2
400047c4:	180b883a 	mov	r5,r3
400047c8:	2005883a 	mov	r2,r4
400047cc:	2807883a 	mov	r3,r5
400047d0:	e13fe117 	ldw	r4,-124(fp)
400047d4:	e17fe217 	ldw	r5,-120(fp)
400047d8:	100d883a 	mov	r6,r2
400047dc:	180f883a 	mov	r7,r3
400047e0:	0005a480 	call	40005a48 <__divdf3>
400047e4:	1009883a 	mov	r4,r2
400047e8:	180b883a 	mov	r5,r3
400047ec:	e13fe715 	stw	r4,-100(fp)
400047f0:	e17fe815 	stw	r5,-96(fp)
	dk = (double)k;
400047f4:	e13fdd17 	ldw	r4,-140(fp)
400047f8:	00075d40 	call	400075d4 <__floatsidf>
400047fc:	1009883a 	mov	r4,r2
40004800:	180b883a 	mov	r5,r3
40004804:	e13fe315 	stw	r4,-116(fp)
40004808:	e17fe415 	stw	r5,-112(fp)
	z = s*s;
4000480c:	e13fe717 	ldw	r4,-100(fp)
40004810:	e17fe817 	ldw	r5,-96(fp)
40004814:	e1bfe717 	ldw	r6,-100(fp)
40004818:	e1ffe817 	ldw	r7,-96(fp)
4000481c:	00065580 	call	40006558 <__muldf3>
40004820:	1009883a 	mov	r4,r2
40004824:	180b883a 	mov	r5,r3
40004828:	e13fe915 	stw	r4,-92(fp)
4000482c:	e17fea15 	stw	r5,-88(fp)
	i = hx-0x6147a;
40004830:	e0ffde17 	ldw	r3,-136(fp)
40004834:	00bffeb4 	movhi	r2,65530
40004838:	10bae184 	addi	r2,r2,-5242
4000483c:	1885883a 	add	r2,r3,r2
40004840:	e0bfe015 	stw	r2,-128(fp)
	w = z*z;
40004844:	e13fe917 	ldw	r4,-92(fp)
40004848:	e17fea17 	ldw	r5,-88(fp)
4000484c:	e1bfe917 	ldw	r6,-92(fp)
40004850:	e1ffea17 	ldw	r7,-88(fp)
40004854:	00065580 	call	40006558 <__muldf3>
40004858:	1009883a 	mov	r4,r2
4000485c:	180b883a 	mov	r5,r3
40004860:	e13feb15 	stw	r4,-84(fp)
40004864:	e17fec15 	stw	r5,-80(fp)
	j = 0x6b851-hx;
40004868:	008001f4 	movhi	r2,7
4000486c:	10ae1444 	addi	r2,r2,-18351
40004870:	e0ffde17 	ldw	r3,-136(fp)
40004874:	10c5c83a 	sub	r2,r2,r3
40004878:	e0bfed15 	stw	r2,-76(fp)
	t1= w*(Lg2+w*(Lg4+w*Lg6)); 
4000487c:	00b41e74 	movhi	r2,53369
40004880:	10b1a7c4 	addi	r2,r2,-14689
40004884:	00cff134 	movhi	r3,16324
40004888:	18e68244 	addi	r3,r3,-26103
4000488c:	1009883a 	mov	r4,r2
40004890:	180b883a 	mov	r5,r3
40004894:	e1bfeb17 	ldw	r6,-84(fp)
40004898:	e1ffec17 	ldw	r7,-80(fp)
4000489c:	00065580 	call	40006558 <__muldf3>
400048a0:	100f883a 	mov	r7,r2
400048a4:	1811883a 	mov	r8,r3
400048a8:	380b883a 	mov	r5,r7
400048ac:	400d883a 	mov	r6,r8
400048b0:	008763b4 	movhi	r2,7566
400048b4:	109e2bc4 	addi	r2,r2,30895
400048b8:	00cff334 	movhi	r3,16332
400048bc:	18dc7144 	addi	r3,r3,29125
400048c0:	2809883a 	mov	r4,r5
400048c4:	300b883a 	mov	r5,r6
400048c8:	100d883a 	mov	r6,r2
400048cc:	180f883a 	mov	r7,r3
400048d0:	00051ac0 	call	400051ac <__adddf3>
400048d4:	1009883a 	mov	r4,r2
400048d8:	180b883a 	mov	r5,r3
400048dc:	2005883a 	mov	r2,r4
400048e0:	2807883a 	mov	r3,r5
400048e4:	1009883a 	mov	r4,r2
400048e8:	180b883a 	mov	r5,r3
400048ec:	e1bfeb17 	ldw	r6,-84(fp)
400048f0:	e1ffec17 	ldw	r7,-80(fp)
400048f4:	00065580 	call	40006558 <__muldf3>
400048f8:	100f883a 	mov	r7,r2
400048fc:	1811883a 	mov	r8,r3
40004900:	380b883a 	mov	r5,r7
40004904:	400d883a 	mov	r6,r8
40004908:	00a66634 	movhi	r2,39320
4000490c:	10be8104 	addi	r2,r2,-1532
40004910:	00cff6b4 	movhi	r3,16346
40004914:	18e66644 	addi	r3,r3,-26215
40004918:	2809883a 	mov	r4,r5
4000491c:	300b883a 	mov	r5,r6
40004920:	100d883a 	mov	r6,r2
40004924:	180f883a 	mov	r7,r3
40004928:	00051ac0 	call	400051ac <__adddf3>
4000492c:	1009883a 	mov	r4,r2
40004930:	180b883a 	mov	r5,r3
40004934:	2005883a 	mov	r2,r4
40004938:	2807883a 	mov	r3,r5
4000493c:	1009883a 	mov	r4,r2
40004940:	180b883a 	mov	r5,r3
40004944:	e1bfeb17 	ldw	r6,-84(fp)
40004948:	e1ffec17 	ldw	r7,-80(fp)
4000494c:	00065580 	call	40006558 <__muldf3>
40004950:	1009883a 	mov	r4,r2
40004954:	180b883a 	mov	r5,r3
40004958:	e13fee15 	stw	r4,-72(fp)
4000495c:	e17fef15 	stw	r5,-68(fp)
	t2= z*(Lg1+w*(Lg3+w*(Lg5+w*Lg7))); 
40004960:	00b7cfb4 	movhi	r2,57150
40004964:	10949104 	addi	r2,r2,21060
40004968:	00cff0f4 	movhi	r3,16323
4000496c:	18fc4484 	addi	r3,r3,-3822
40004970:	1009883a 	mov	r4,r2
40004974:	180b883a 	mov	r5,r3
40004978:	e1bfeb17 	ldw	r6,-84(fp)
4000497c:	e1ffec17 	ldw	r7,-80(fp)
40004980:	00065580 	call	40006558 <__muldf3>
40004984:	100f883a 	mov	r7,r2
40004988:	1811883a 	mov	r8,r3
4000498c:	380b883a 	mov	r5,r7
40004990:	400d883a 	mov	r6,r8
40004994:	00a5b2f4 	movhi	r2,38603
40004998:	1080f784 	addi	r2,r2,990
4000499c:	00cff1f4 	movhi	r3,16327
400049a0:	18d19904 	addi	r3,r3,18020
400049a4:	2809883a 	mov	r4,r5
400049a8:	300b883a 	mov	r5,r6
400049ac:	100d883a 	mov	r6,r2
400049b0:	180f883a 	mov	r7,r3
400049b4:	00051ac0 	call	400051ac <__adddf3>
400049b8:	1009883a 	mov	r4,r2
400049bc:	180b883a 	mov	r5,r3
400049c0:	2005883a 	mov	r2,r4
400049c4:	2807883a 	mov	r3,r5
400049c8:	1009883a 	mov	r4,r2
400049cc:	180b883a 	mov	r5,r3
400049d0:	e1bfeb17 	ldw	r6,-84(fp)
400049d4:	e1ffec17 	ldw	r7,-80(fp)
400049d8:	00065580 	call	40006558 <__muldf3>
400049dc:	100f883a 	mov	r7,r2
400049e0:	1811883a 	mov	r8,r3
400049e4:	380b883a 	mov	r5,r7
400049e8:	400d883a 	mov	r6,r8
400049ec:	00a508f4 	movhi	r2,37923
400049f0:	10a4d644 	addi	r2,r2,-27815
400049f4:	00cff4b4 	movhi	r3,16338
400049f8:	18d24904 	addi	r3,r3,18724
400049fc:	2809883a 	mov	r4,r5
40004a00:	300b883a 	mov	r5,r6
40004a04:	100d883a 	mov	r6,r2
40004a08:	180f883a 	mov	r7,r3
40004a0c:	00051ac0 	call	400051ac <__adddf3>
40004a10:	1009883a 	mov	r4,r2
40004a14:	180b883a 	mov	r5,r3
40004a18:	2005883a 	mov	r2,r4
40004a1c:	2807883a 	mov	r3,r5
40004a20:	1009883a 	mov	r4,r2
40004a24:	180b883a 	mov	r5,r3
40004a28:	e1bfeb17 	ldw	r6,-84(fp)
40004a2c:	e1ffec17 	ldw	r7,-80(fp)
40004a30:	00065580 	call	40006558 <__muldf3>
40004a34:	100f883a 	mov	r7,r2
40004a38:	1811883a 	mov	r8,r3
40004a3c:	380b883a 	mov	r5,r7
40004a40:	400d883a 	mov	r6,r8
40004a44:	00955574 	movhi	r2,21845
40004a48:	109564c4 	addi	r2,r2,21907
40004a4c:	00cff974 	movhi	r3,16357
40004a50:	18d55544 	addi	r3,r3,21845
40004a54:	2809883a 	mov	r4,r5
40004a58:	300b883a 	mov	r5,r6
40004a5c:	100d883a 	mov	r6,r2
40004a60:	180f883a 	mov	r7,r3
40004a64:	00051ac0 	call	400051ac <__adddf3>
40004a68:	1009883a 	mov	r4,r2
40004a6c:	180b883a 	mov	r5,r3
40004a70:	2005883a 	mov	r2,r4
40004a74:	2807883a 	mov	r3,r5
40004a78:	1009883a 	mov	r4,r2
40004a7c:	180b883a 	mov	r5,r3
40004a80:	e1bfe917 	ldw	r6,-92(fp)
40004a84:	e1ffea17 	ldw	r7,-88(fp)
40004a88:	00065580 	call	40006558 <__muldf3>
40004a8c:	1009883a 	mov	r4,r2
40004a90:	180b883a 	mov	r5,r3
40004a94:	e13ff015 	stw	r4,-64(fp)
40004a98:	e17ff115 	stw	r5,-60(fp)
	i |= j;
40004a9c:	e0ffe017 	ldw	r3,-128(fp)
40004aa0:	e0bfed17 	ldw	r2,-76(fp)
40004aa4:	1884b03a 	or	r2,r3,r2
40004aa8:	e0bfe015 	stw	r2,-128(fp)
	R = t2+t1;
40004aac:	e13ff017 	ldw	r4,-64(fp)
40004ab0:	e17ff117 	ldw	r5,-60(fp)
40004ab4:	e1bfee17 	ldw	r6,-72(fp)
40004ab8:	e1ffef17 	ldw	r7,-68(fp)
40004abc:	00051ac0 	call	400051ac <__adddf3>
40004ac0:	1009883a 	mov	r4,r2
40004ac4:	180b883a 	mov	r5,r3
40004ac8:	e13fe515 	stw	r4,-108(fp)
40004acc:	e17fe615 	stw	r5,-104(fp)
	if(i>0) {
40004ad0:	e0bfe017 	ldw	r2,-128(fp)
40004ad4:	0080890e 	bge	zero,r2,40004cfc <__ieee754_log+0xa44>
	    hfsq=0.5*f*f;
40004ad8:	e13fe117 	ldw	r4,-124(fp)
40004adc:	e17fe217 	ldw	r5,-120(fp)
40004ae0:	000d883a 	mov	r6,zero
40004ae4:	01cff834 	movhi	r7,16352
40004ae8:	00065580 	call	40006558 <__muldf3>
40004aec:	1009883a 	mov	r4,r2
40004af0:	180b883a 	mov	r5,r3
40004af4:	2005883a 	mov	r2,r4
40004af8:	2807883a 	mov	r3,r5
40004afc:	1009883a 	mov	r4,r2
40004b00:	180b883a 	mov	r5,r3
40004b04:	e1bfe117 	ldw	r6,-124(fp)
40004b08:	e1ffe217 	ldw	r7,-120(fp)
40004b0c:	00065580 	call	40006558 <__muldf3>
40004b10:	1009883a 	mov	r4,r2
40004b14:	180b883a 	mov	r5,r3
40004b18:	e13ff215 	stw	r4,-56(fp)
40004b1c:	e17ff315 	stw	r5,-52(fp)
	    if(k==0) return f-(hfsq-s*(hfsq+R)); else
40004b20:	e0bfdd17 	ldw	r2,-140(fp)
40004b24:	1000251e 	bne	r2,zero,40004bbc <__ieee754_log+0x904>
40004b28:	e13ff217 	ldw	r4,-56(fp)
40004b2c:	e17ff317 	ldw	r5,-52(fp)
40004b30:	e1bfe517 	ldw	r6,-108(fp)
40004b34:	e1ffe617 	ldw	r7,-104(fp)
40004b38:	00051ac0 	call	400051ac <__adddf3>
40004b3c:	1009883a 	mov	r4,r2
40004b40:	180b883a 	mov	r5,r3
40004b44:	2005883a 	mov	r2,r4
40004b48:	2807883a 	mov	r3,r5
40004b4c:	1009883a 	mov	r4,r2
40004b50:	180b883a 	mov	r5,r3
40004b54:	e1bfe717 	ldw	r6,-100(fp)
40004b58:	e1ffe817 	ldw	r7,-96(fp)
40004b5c:	00065580 	call	40006558 <__muldf3>
40004b60:	1009883a 	mov	r4,r2
40004b64:	180b883a 	mov	r5,r3
40004b68:	2005883a 	mov	r2,r4
40004b6c:	2807883a 	mov	r3,r5
40004b70:	e13ff217 	ldw	r4,-56(fp)
40004b74:	e17ff317 	ldw	r5,-52(fp)
40004b78:	100d883a 	mov	r6,r2
40004b7c:	180f883a 	mov	r7,r3
40004b80:	0006c7c0 	call	40006c7c <__subdf3>
40004b84:	1009883a 	mov	r4,r2
40004b88:	180b883a 	mov	r5,r3
40004b8c:	2005883a 	mov	r2,r4
40004b90:	2807883a 	mov	r3,r5
40004b94:	e13fe117 	ldw	r4,-124(fp)
40004b98:	e17fe217 	ldw	r5,-120(fp)
40004b9c:	100d883a 	mov	r6,r2
40004ba0:	180f883a 	mov	r7,r3
40004ba4:	0006c7c0 	call	40006c7c <__subdf3>
40004ba8:	1009883a 	mov	r4,r2
40004bac:	180b883a 	mov	r5,r3
40004bb0:	2005883a 	mov	r2,r4
40004bb4:	2807883a 	mov	r3,r5
40004bb8:	0000b406 	br	40004e8c <__ieee754_log+0xbd4>
		     return dk*ln2_hi-((hfsq-(s*(hfsq+R)+dk*ln2_lo))-f);
40004bbc:	00bfb834 	movhi	r2,65248
40004bc0:	00cff9b4 	movhi	r3,16358
40004bc4:	18cb9084 	addi	r3,r3,11842
40004bc8:	1009883a 	mov	r4,r2
40004bcc:	180b883a 	mov	r5,r3
40004bd0:	e1bfe317 	ldw	r6,-116(fp)
40004bd4:	e1ffe417 	ldw	r7,-112(fp)
40004bd8:	00065580 	call	40006558 <__muldf3>
40004bdc:	1009883a 	mov	r4,r2
40004be0:	180b883a 	mov	r5,r3
40004be4:	2021883a 	mov	r16,r4
40004be8:	2823883a 	mov	r17,r5
40004bec:	e13ff217 	ldw	r4,-56(fp)
40004bf0:	e17ff317 	ldw	r5,-52(fp)
40004bf4:	e1bfe517 	ldw	r6,-108(fp)
40004bf8:	e1ffe617 	ldw	r7,-104(fp)
40004bfc:	00051ac0 	call	400051ac <__adddf3>
40004c00:	1009883a 	mov	r4,r2
40004c04:	180b883a 	mov	r5,r3
40004c08:	2005883a 	mov	r2,r4
40004c0c:	2807883a 	mov	r3,r5
40004c10:	1009883a 	mov	r4,r2
40004c14:	180b883a 	mov	r5,r3
40004c18:	e1bfe717 	ldw	r6,-100(fp)
40004c1c:	e1ffe817 	ldw	r7,-96(fp)
40004c20:	00065580 	call	40006558 <__muldf3>
40004c24:	1009883a 	mov	r4,r2
40004c28:	180b883a 	mov	r5,r3
40004c2c:	2025883a 	mov	r18,r4
40004c30:	2827883a 	mov	r19,r5
40004c34:	008d5e74 	movhi	r2,13689
40004c38:	108f1d84 	addi	r2,r2,15478
40004c3c:	00cf7ab4 	movhi	r3,15850
40004c40:	18ce7bc4 	addi	r3,r3,14831
40004c44:	1009883a 	mov	r4,r2
40004c48:	180b883a 	mov	r5,r3
40004c4c:	e1bfe317 	ldw	r6,-116(fp)
40004c50:	e1ffe417 	ldw	r7,-112(fp)
40004c54:	00065580 	call	40006558 <__muldf3>
40004c58:	1009883a 	mov	r4,r2
40004c5c:	180b883a 	mov	r5,r3
40004c60:	2005883a 	mov	r2,r4
40004c64:	2807883a 	mov	r3,r5
40004c68:	9009883a 	mov	r4,r18
40004c6c:	980b883a 	mov	r5,r19
40004c70:	100d883a 	mov	r6,r2
40004c74:	180f883a 	mov	r7,r3
40004c78:	00051ac0 	call	400051ac <__adddf3>
40004c7c:	1009883a 	mov	r4,r2
40004c80:	180b883a 	mov	r5,r3
40004c84:	2005883a 	mov	r2,r4
40004c88:	2807883a 	mov	r3,r5
40004c8c:	e13ff217 	ldw	r4,-56(fp)
40004c90:	e17ff317 	ldw	r5,-52(fp)
40004c94:	100d883a 	mov	r6,r2
40004c98:	180f883a 	mov	r7,r3
40004c9c:	0006c7c0 	call	40006c7c <__subdf3>
40004ca0:	1009883a 	mov	r4,r2
40004ca4:	180b883a 	mov	r5,r3
40004ca8:	2005883a 	mov	r2,r4
40004cac:	2807883a 	mov	r3,r5
40004cb0:	1009883a 	mov	r4,r2
40004cb4:	180b883a 	mov	r5,r3
40004cb8:	e1bfe117 	ldw	r6,-124(fp)
40004cbc:	e1ffe217 	ldw	r7,-120(fp)
40004cc0:	0006c7c0 	call	40006c7c <__subdf3>
40004cc4:	1009883a 	mov	r4,r2
40004cc8:	180b883a 	mov	r5,r3
40004ccc:	2005883a 	mov	r2,r4
40004cd0:	2807883a 	mov	r3,r5
40004cd4:	8009883a 	mov	r4,r16
40004cd8:	880b883a 	mov	r5,r17
40004cdc:	100d883a 	mov	r6,r2
40004ce0:	180f883a 	mov	r7,r3
40004ce4:	0006c7c0 	call	40006c7c <__subdf3>
40004ce8:	1009883a 	mov	r4,r2
40004cec:	180b883a 	mov	r5,r3
40004cf0:	2005883a 	mov	r2,r4
40004cf4:	2807883a 	mov	r3,r5
40004cf8:	00006406 	br	40004e8c <__ieee754_log+0xbd4>
	} else {
	    if(k==0) return f-s*(f-R); else
40004cfc:	e0bfdd17 	ldw	r2,-140(fp)
40004d00:	10001c1e 	bne	r2,zero,40004d74 <__ieee754_log+0xabc>
40004d04:	e13fe117 	ldw	r4,-124(fp)
40004d08:	e17fe217 	ldw	r5,-120(fp)
40004d0c:	e1bfe517 	ldw	r6,-108(fp)
40004d10:	e1ffe617 	ldw	r7,-104(fp)
40004d14:	0006c7c0 	call	40006c7c <__subdf3>
40004d18:	1009883a 	mov	r4,r2
40004d1c:	180b883a 	mov	r5,r3
40004d20:	2005883a 	mov	r2,r4
40004d24:	2807883a 	mov	r3,r5
40004d28:	1009883a 	mov	r4,r2
40004d2c:	180b883a 	mov	r5,r3
40004d30:	e1bfe717 	ldw	r6,-100(fp)
40004d34:	e1ffe817 	ldw	r7,-96(fp)
40004d38:	00065580 	call	40006558 <__muldf3>
40004d3c:	1009883a 	mov	r4,r2
40004d40:	180b883a 	mov	r5,r3
40004d44:	2005883a 	mov	r2,r4
40004d48:	2807883a 	mov	r3,r5
40004d4c:	e13fe117 	ldw	r4,-124(fp)
40004d50:	e17fe217 	ldw	r5,-120(fp)
40004d54:	100d883a 	mov	r6,r2
40004d58:	180f883a 	mov	r7,r3
40004d5c:	0006c7c0 	call	40006c7c <__subdf3>
40004d60:	1009883a 	mov	r4,r2
40004d64:	180b883a 	mov	r5,r3
40004d68:	2005883a 	mov	r2,r4
40004d6c:	2807883a 	mov	r3,r5
40004d70:	00004606 	br	40004e8c <__ieee754_log+0xbd4>
		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);
40004d74:	00bfb834 	movhi	r2,65248
40004d78:	00cff9b4 	movhi	r3,16358
40004d7c:	18cb9084 	addi	r3,r3,11842
40004d80:	1009883a 	mov	r4,r2
40004d84:	180b883a 	mov	r5,r3
40004d88:	e1bfe317 	ldw	r6,-116(fp)
40004d8c:	e1ffe417 	ldw	r7,-112(fp)
40004d90:	00065580 	call	40006558 <__muldf3>
40004d94:	1009883a 	mov	r4,r2
40004d98:	180b883a 	mov	r5,r3
40004d9c:	2021883a 	mov	r16,r4
40004da0:	2823883a 	mov	r17,r5
40004da4:	e13fe117 	ldw	r4,-124(fp)
40004da8:	e17fe217 	ldw	r5,-120(fp)
40004dac:	e1bfe517 	ldw	r6,-108(fp)
40004db0:	e1ffe617 	ldw	r7,-104(fp)
40004db4:	0006c7c0 	call	40006c7c <__subdf3>
40004db8:	1009883a 	mov	r4,r2
40004dbc:	180b883a 	mov	r5,r3
40004dc0:	2005883a 	mov	r2,r4
40004dc4:	2807883a 	mov	r3,r5
40004dc8:	1009883a 	mov	r4,r2
40004dcc:	180b883a 	mov	r5,r3
40004dd0:	e1bfe717 	ldw	r6,-100(fp)
40004dd4:	e1ffe817 	ldw	r7,-96(fp)
40004dd8:	00065580 	call	40006558 <__muldf3>
40004ddc:	1009883a 	mov	r4,r2
40004de0:	180b883a 	mov	r5,r3
40004de4:	2025883a 	mov	r18,r4
40004de8:	2827883a 	mov	r19,r5
40004dec:	008d5e74 	movhi	r2,13689
40004df0:	108f1d84 	addi	r2,r2,15478
40004df4:	00cf7ab4 	movhi	r3,15850
40004df8:	18ce7bc4 	addi	r3,r3,14831
40004dfc:	1009883a 	mov	r4,r2
40004e00:	180b883a 	mov	r5,r3
40004e04:	e1bfe317 	ldw	r6,-116(fp)
40004e08:	e1ffe417 	ldw	r7,-112(fp)
40004e0c:	00065580 	call	40006558 <__muldf3>
40004e10:	1009883a 	mov	r4,r2
40004e14:	180b883a 	mov	r5,r3
40004e18:	2005883a 	mov	r2,r4
40004e1c:	2807883a 	mov	r3,r5
40004e20:	9009883a 	mov	r4,r18
40004e24:	980b883a 	mov	r5,r19
40004e28:	100d883a 	mov	r6,r2
40004e2c:	180f883a 	mov	r7,r3
40004e30:	0006c7c0 	call	40006c7c <__subdf3>
40004e34:	1009883a 	mov	r4,r2
40004e38:	180b883a 	mov	r5,r3
40004e3c:	2005883a 	mov	r2,r4
40004e40:	2807883a 	mov	r3,r5
40004e44:	1009883a 	mov	r4,r2
40004e48:	180b883a 	mov	r5,r3
40004e4c:	e1bfe117 	ldw	r6,-124(fp)
40004e50:	e1ffe217 	ldw	r7,-120(fp)
40004e54:	0006c7c0 	call	40006c7c <__subdf3>
40004e58:	1009883a 	mov	r4,r2
40004e5c:	180b883a 	mov	r5,r3
40004e60:	2005883a 	mov	r2,r4
40004e64:	2807883a 	mov	r3,r5
40004e68:	8009883a 	mov	r4,r16
40004e6c:	880b883a 	mov	r5,r17
40004e70:	100d883a 	mov	r6,r2
40004e74:	180f883a 	mov	r7,r3
40004e78:	0006c7c0 	call	40006c7c <__subdf3>
40004e7c:	1009883a 	mov	r4,r2
40004e80:	180b883a 	mov	r5,r3
40004e84:	2005883a 	mov	r2,r4
40004e88:	2807883a 	mov	r3,r5
40004e8c:	1009883a 	mov	r4,r2
40004e90:	180b883a 	mov	r5,r3
	}
}
40004e94:	2005883a 	mov	r2,r4
40004e98:	2807883a 	mov	r3,r5
40004e9c:	e6fffc04 	addi	sp,fp,-16
40004ea0:	dfc00517 	ldw	ra,20(sp)
40004ea4:	df000417 	ldw	fp,16(sp)
40004ea8:	dcc00317 	ldw	r19,12(sp)
40004eac:	dc800217 	ldw	r18,8(sp)
40004eb0:	dc400117 	ldw	r17,4(sp)
40004eb4:	dc000017 	ldw	r16,0(sp)
40004eb8:	dec00604 	addi	sp,sp,24
40004ebc:	f800283a 	ret

40004ec0 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
40004ec0:	defff904 	addi	sp,sp,-28
40004ec4:	df000615 	stw	fp,24(sp)
40004ec8:	df000604 	addi	fp,sp,24
40004ecc:	e13ffe15 	stw	r4,-8(fp)
40004ed0:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
40004ed4:	e0bffe17 	ldw	r2,-8(fp)
40004ed8:	e0bffc15 	stw	r2,-16(fp)
40004edc:	e0bfff17 	ldw	r2,-4(fp)
40004ee0:	e0bffd15 	stw	r2,-12(fp)
40004ee4:	e0bffd17 	ldw	r2,-12(fp)
40004ee8:	e0bffa15 	stw	r2,-24(fp)
40004eec:	e0bffc17 	ldw	r2,-16(fp)
40004ef0:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
40004ef4:	e0bffa17 	ldw	r2,-24(fp)
40004ef8:	1000021e 	bne	r2,zero,40004f04 <__fpclassifyd+0x44>
40004efc:	e0bffb17 	ldw	r2,-20(fp)
40004f00:	10000526 	beq	r2,zero,40004f18 <__fpclassifyd+0x58>
40004f04:	e0fffa17 	ldw	r3,-24(fp)
40004f08:	00a00034 	movhi	r2,32768
40004f0c:	1880041e 	bne	r3,r2,40004f20 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
40004f10:	e0bffb17 	ldw	r2,-20(fp)
40004f14:	1000021e 	bne	r2,zero,40004f20 <__fpclassifyd+0x60>
    return FP_ZERO;
40004f18:	00800084 	movi	r2,2
40004f1c:	00002506 	br	40004fb4 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
40004f20:	e0fffa17 	ldw	r3,-24(fp)
40004f24:	00800434 	movhi	r2,16
40004f28:	18800336 	bltu	r3,r2,40004f38 <__fpclassifyd+0x78>
40004f2c:	e0fffa17 	ldw	r3,-24(fp)
40004f30:	009ffc34 	movhi	r2,32752
40004f34:	18800636 	bltu	r3,r2,40004f50 <__fpclassifyd+0x90>
40004f38:	e0fffa17 	ldw	r3,-24(fp)
40004f3c:	00a00434 	movhi	r2,32784
40004f40:	18800536 	bltu	r3,r2,40004f58 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
40004f44:	e0fffa17 	ldw	r3,-24(fp)
40004f48:	00bffc34 	movhi	r2,65520
40004f4c:	1880022e 	bgeu	r3,r2,40004f58 <__fpclassifyd+0x98>
    return FP_NORMAL;
40004f50:	00800104 	movi	r2,4
40004f54:	00001706 	br	40004fb4 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
40004f58:	e0fffa17 	ldw	r3,-24(fp)
40004f5c:	00800434 	movhi	r2,16
40004f60:	18800536 	bltu	r3,r2,40004f78 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
40004f64:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
40004f68:	1000050e 	bge	r2,zero,40004f80 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
40004f6c:	e0fffa17 	ldw	r3,-24(fp)
40004f70:	00a00434 	movhi	r2,32784
40004f74:	1880022e 	bgeu	r3,r2,40004f80 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
40004f78:	008000c4 	movi	r2,3
40004f7c:	00000d06 	br	40004fb4 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
40004f80:	e0fffa17 	ldw	r3,-24(fp)
40004f84:	009ffc34 	movhi	r2,32752
40004f88:	1880021e 	bne	r3,r2,40004f94 <__fpclassifyd+0xd4>
40004f8c:	e0bffb17 	ldw	r2,-20(fp)
40004f90:	10000526 	beq	r2,zero,40004fa8 <__fpclassifyd+0xe8>
40004f94:	e0fffa17 	ldw	r3,-24(fp)
40004f98:	00bffc34 	movhi	r2,65520
40004f9c:	1880041e 	bne	r3,r2,40004fb0 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
40004fa0:	e0bffb17 	ldw	r2,-20(fp)
40004fa4:	1000021e 	bne	r2,zero,40004fb0 <__fpclassifyd+0xf0>
    return FP_INFINITE;
40004fa8:	00800044 	movi	r2,1
40004fac:	00000106 	br	40004fb4 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
40004fb0:	0005883a 	mov	r2,zero
}
40004fb4:	e037883a 	mov	sp,fp
40004fb8:	df000017 	ldw	fp,0(sp)
40004fbc:	dec00104 	addi	sp,sp,4
40004fc0:	f800283a 	ret

40004fc4 <matherr>:
	int matherr(struct exception *x)
#else
	int matherr(x)
	struct exception *x;
#endif
{
40004fc4:	defffc04 	addi	sp,sp,-16
40004fc8:	dfc00315 	stw	ra,12(sp)
40004fcc:	df000215 	stw	fp,8(sp)
40004fd0:	df000204 	addi	fp,sp,8
40004fd4:	e13fff15 	stw	r4,-4(fp)
	int n=0;
40004fd8:	e03ffe15 	stw	zero,-8(fp)
	if(x->arg1!=x->arg1) return 0;
40004fdc:	e0bfff17 	ldw	r2,-4(fp)
40004fe0:	11400217 	ldw	r5,8(r2)
40004fe4:	11800317 	ldw	r6,12(r2)
40004fe8:	e13fff17 	ldw	r4,-4(fp)
40004fec:	20800217 	ldw	r2,8(r4)
40004ff0:	20c00317 	ldw	r3,12(r4)
40004ff4:	2809883a 	mov	r4,r5
40004ff8:	300b883a 	mov	r5,r6
40004ffc:	100d883a 	mov	r6,r2
40005000:	180f883a 	mov	r7,r3
40005004:	00063140 	call	40006314 <__eqdf2>
40005008:	10000226 	beq	r2,zero,40005014 <matherr+0x50>
4000500c:	0005883a 	mov	r2,zero
40005010:	00000106 	br	40005018 <matherr+0x54>
	return n;
40005014:	e0bffe17 	ldw	r2,-8(fp)
}
40005018:	e037883a 	mov	sp,fp
4000501c:	dfc00117 	ldw	ra,4(sp)
40005020:	df000017 	ldw	fp,0(sp)
40005024:	dec00204 	addi	sp,sp,8
40005028:	f800283a 	ret

4000502c <nan>:
#include "fdlibm.h"

#ifndef _DOUBLE_IS_32BITS

	double nan(const char *unused)
{
4000502c:	defffa04 	addi	sp,sp,-24
40005030:	df000515 	stw	fp,20(sp)
40005034:	df000504 	addi	fp,sp,20
40005038:	e13fff15 	stw	r4,-4(fp)
	double x;

	INSERT_WORDS(x,0x7ff80000,0);
4000503c:	009ffe34 	movhi	r2,32760
40005040:	e0bffe15 	stw	r2,-8(fp)
40005044:	e03ffd15 	stw	zero,-12(fp)
40005048:	e0bffd17 	ldw	r2,-12(fp)
4000504c:	e0bffb15 	stw	r2,-20(fp)
40005050:	e0bffe17 	ldw	r2,-8(fp)
40005054:	e0bffc15 	stw	r2,-16(fp)
	return x;
40005058:	e0bffb17 	ldw	r2,-20(fp)
4000505c:	e0fffc17 	ldw	r3,-16(fp)
40005060:	1009883a 	mov	r4,r2
40005064:	180b883a 	mov	r5,r3
}
40005068:	2005883a 	mov	r2,r4
4000506c:	2807883a 	mov	r3,r5
40005070:	e037883a 	mov	sp,fp
40005074:	df000017 	ldw	fp,0(sp)
40005078:	dec00104 	addi	sp,sp,4
4000507c:	f800283a 	ret

40005080 <udivmodsi4>:
40005080:	2900182e 	bgeu	r5,r4,400050e4 <udivmodsi4+0x64>
40005084:	28001716 	blt	r5,zero,400050e4 <udivmodsi4+0x64>
40005088:	00800804 	movi	r2,32
4000508c:	00c00044 	movi	r3,1
40005090:	00000206 	br	4000509c <udivmodsi4+0x1c>
40005094:	10001126 	beq	r2,zero,400050dc <udivmodsi4+0x5c>
40005098:	28000516 	blt	r5,zero,400050b0 <udivmodsi4+0x30>
4000509c:	294b883a 	add	r5,r5,r5
400050a0:	10bfffc4 	addi	r2,r2,-1
400050a4:	18c7883a 	add	r3,r3,r3
400050a8:	293ffa36 	bltu	r5,r4,40005094 <__alt_data_end+0xc0005094>
400050ac:	18000b26 	beq	r3,zero,400050dc <udivmodsi4+0x5c>
400050b0:	0005883a 	mov	r2,zero
400050b4:	21400236 	bltu	r4,r5,400050c0 <udivmodsi4+0x40>
400050b8:	2149c83a 	sub	r4,r4,r5
400050bc:	10c4b03a 	or	r2,r2,r3
400050c0:	1806d07a 	srli	r3,r3,1
400050c4:	280ad07a 	srli	r5,r5,1
400050c8:	183ffa1e 	bne	r3,zero,400050b4 <__alt_data_end+0xc00050b4>
400050cc:	3000011e 	bne	r6,zero,400050d4 <udivmodsi4+0x54>
400050d0:	f800283a 	ret
400050d4:	2005883a 	mov	r2,r4
400050d8:	f800283a 	ret
400050dc:	0005883a 	mov	r2,zero
400050e0:	003ffa06 	br	400050cc <__alt_data_end+0xc00050cc>
400050e4:	00c00044 	movi	r3,1
400050e8:	003ff106 	br	400050b0 <__alt_data_end+0xc00050b0>

400050ec <__divsi3>:
400050ec:	defffe04 	addi	sp,sp,-8
400050f0:	dfc00115 	stw	ra,4(sp)
400050f4:	dc000015 	stw	r16,0(sp)
400050f8:	20000b16 	blt	r4,zero,40005128 <__divsi3+0x3c>
400050fc:	0021883a 	mov	r16,zero
40005100:	28000c16 	blt	r5,zero,40005134 <__divsi3+0x48>
40005104:	000d883a 	mov	r6,zero
40005108:	00050800 	call	40005080 <udivmodsi4>
4000510c:	0407c83a 	sub	r3,zero,r16
40005110:	1884f03a 	xor	r2,r3,r2
40005114:	1405883a 	add	r2,r2,r16
40005118:	dfc00117 	ldw	ra,4(sp)
4000511c:	dc000017 	ldw	r16,0(sp)
40005120:	dec00204 	addi	sp,sp,8
40005124:	f800283a 	ret
40005128:	0109c83a 	sub	r4,zero,r4
4000512c:	04000044 	movi	r16,1
40005130:	283ff40e 	bge	r5,zero,40005104 <__alt_data_end+0xc0005104>
40005134:	014bc83a 	sub	r5,zero,r5
40005138:	8400005c 	xori	r16,r16,1
4000513c:	003ff106 	br	40005104 <__alt_data_end+0xc0005104>

40005140 <__modsi3>:
40005140:	defffd04 	addi	sp,sp,-12
40005144:	dfc00215 	stw	ra,8(sp)
40005148:	dc400115 	stw	r17,4(sp)
4000514c:	dc000015 	stw	r16,0(sp)
40005150:	20000c16 	blt	r4,zero,40005184 <__modsi3+0x44>
40005154:	0023883a 	mov	r17,zero
40005158:	0021883a 	mov	r16,zero
4000515c:	28000d16 	blt	r5,zero,40005194 <__modsi3+0x54>
40005160:	01800044 	movi	r6,1
40005164:	00050800 	call	40005080 <udivmodsi4>
40005168:	1404f03a 	xor	r2,r2,r16
4000516c:	8885883a 	add	r2,r17,r2
40005170:	dfc00217 	ldw	ra,8(sp)
40005174:	dc400117 	ldw	r17,4(sp)
40005178:	dc000017 	ldw	r16,0(sp)
4000517c:	dec00304 	addi	sp,sp,12
40005180:	f800283a 	ret
40005184:	0109c83a 	sub	r4,zero,r4
40005188:	04400044 	movi	r17,1
4000518c:	043fffc4 	movi	r16,-1
40005190:	283ff30e 	bge	r5,zero,40005160 <__alt_data_end+0xc0005160>
40005194:	014bc83a 	sub	r5,zero,r5
40005198:	003ff106 	br	40005160 <__alt_data_end+0xc0005160>

4000519c <__udivsi3>:
4000519c:	000d883a 	mov	r6,zero
400051a0:	00050801 	jmpi	40005080 <udivmodsi4>

400051a4 <__umodsi3>:
400051a4:	01800044 	movi	r6,1
400051a8:	00050801 	jmpi	40005080 <udivmodsi4>

400051ac <__adddf3>:
400051ac:	02000434 	movhi	r8,16
400051b0:	423fffc4 	addi	r8,r8,-1
400051b4:	defffb04 	addi	sp,sp,-20
400051b8:	2a12703a 	and	r9,r5,r8
400051bc:	2806d7fa 	srli	r3,r5,31
400051c0:	3a10703a 	and	r8,r7,r8
400051c4:	3804d53a 	srli	r2,r7,20
400051c8:	3014d77a 	srli	r10,r6,29
400051cc:	dc000015 	stw	r16,0(sp)
400051d0:	481290fa 	slli	r9,r9,3
400051d4:	2820d53a 	srli	r16,r5,20
400051d8:	401090fa 	slli	r8,r8,3
400051dc:	200ad77a 	srli	r5,r4,29
400051e0:	380ed7fa 	srli	r7,r7,31
400051e4:	dc800215 	stw	r18,8(sp)
400051e8:	dc400115 	stw	r17,4(sp)
400051ec:	dfc00415 	stw	ra,16(sp)
400051f0:	dcc00315 	stw	r19,12(sp)
400051f4:	1c803fcc 	andi	r18,r3,255
400051f8:	8401ffcc 	andi	r16,r16,2047
400051fc:	494ab03a 	or	r5,r9,r5
40005200:	202290fa 	slli	r17,r4,3
40005204:	1081ffcc 	andi	r2,r2,2047
40005208:	4290b03a 	or	r8,r8,r10
4000520c:	300c90fa 	slli	r6,r6,3
40005210:	91c07026 	beq	r18,r7,400053d4 <__adddf3+0x228>
40005214:	8087c83a 	sub	r3,r16,r2
40005218:	00c0b30e 	bge	zero,r3,400054e8 <__adddf3+0x33c>
4000521c:	10002a1e 	bne	r2,zero,400052c8 <__adddf3+0x11c>
40005220:	4184b03a 	or	r2,r8,r6
40005224:	1000991e 	bne	r2,zero,4000548c <__adddf3+0x2e0>
40005228:	888001cc 	andi	r2,r17,7
4000522c:	10005b26 	beq	r2,zero,4000539c <__adddf3+0x1f0>
40005230:	88c003cc 	andi	r3,r17,15
40005234:	00800104 	movi	r2,4
40005238:	18805826 	beq	r3,r2,4000539c <__adddf3+0x1f0>
4000523c:	89800104 	addi	r6,r17,4
40005240:	3463803a 	cmpltu	r17,r6,r17
40005244:	2c4b883a 	add	r5,r5,r17
40005248:	2880202c 	andhi	r2,r5,128
4000524c:	9007883a 	mov	r3,r18
40005250:	3023883a 	mov	r17,r6
40005254:	10005426 	beq	r2,zero,400053a8 <__adddf3+0x1fc>
40005258:	84000044 	addi	r16,r16,1
4000525c:	0081ffc4 	movi	r2,2047
40005260:	8080c126 	beq	r16,r2,40005568 <__adddf3+0x3bc>
40005264:	013fe034 	movhi	r4,65408
40005268:	213fffc4 	addi	r4,r4,-1
4000526c:	290a703a 	and	r5,r5,r4
40005270:	2804977a 	slli	r2,r5,29
40005274:	280a927a 	slli	r5,r5,9
40005278:	8822d0fa 	srli	r17,r17,3
4000527c:	8401ffcc 	andi	r16,r16,2047
40005280:	2808d33a 	srli	r4,r5,12
40005284:	1444b03a 	or	r2,r2,r17
40005288:	8401ffcc 	andi	r16,r16,2047
4000528c:	800a953a 	slli	r5,r16,20
40005290:	18c03fcc 	andi	r3,r3,255
40005294:	04000434 	movhi	r16,16
40005298:	180697fa 	slli	r3,r3,31
4000529c:	843fffc4 	addi	r16,r16,-1
400052a0:	2420703a 	and	r16,r4,r16
400052a4:	8160b03a 	or	r16,r16,r5
400052a8:	80c6b03a 	or	r3,r16,r3
400052ac:	dfc00417 	ldw	ra,16(sp)
400052b0:	dcc00317 	ldw	r19,12(sp)
400052b4:	dc800217 	ldw	r18,8(sp)
400052b8:	dc400117 	ldw	r17,4(sp)
400052bc:	dc000017 	ldw	r16,0(sp)
400052c0:	dec00504 	addi	sp,sp,20
400052c4:	f800283a 	ret
400052c8:	0081ffc4 	movi	r2,2047
400052cc:	80bfd626 	beq	r16,r2,40005228 <__alt_data_end+0xc0005228>
400052d0:	42002034 	orhi	r8,r8,128
400052d4:	00800e04 	movi	r2,56
400052d8:	10c0a616 	blt	r2,r3,40005574 <__adddf3+0x3c8>
400052dc:	008007c4 	movi	r2,31
400052e0:	10c0c916 	blt	r2,r3,40005608 <__adddf3+0x45c>
400052e4:	00800804 	movi	r2,32
400052e8:	10c5c83a 	sub	r2,r2,r3
400052ec:	408e983a 	sll	r7,r8,r2
400052f0:	30c8d83a 	srl	r4,r6,r3
400052f4:	3084983a 	sll	r2,r6,r2
400052f8:	40c6d83a 	srl	r3,r8,r3
400052fc:	390cb03a 	or	r6,r7,r4
40005300:	1004c03a 	cmpne	r2,r2,zero
40005304:	308cb03a 	or	r6,r6,r2
40005308:	898dc83a 	sub	r6,r17,r6
4000530c:	89a3803a 	cmpltu	r17,r17,r6
40005310:	28cbc83a 	sub	r5,r5,r3
40005314:	2c4bc83a 	sub	r5,r5,r17
40005318:	3023883a 	mov	r17,r6
4000531c:	2880202c 	andhi	r2,r5,128
40005320:	10006d26 	beq	r2,zero,400054d8 <__adddf3+0x32c>
40005324:	04c02034 	movhi	r19,128
40005328:	9cffffc4 	addi	r19,r19,-1
4000532c:	2ce6703a 	and	r19,r5,r19
40005330:	98007e26 	beq	r19,zero,4000552c <__adddf3+0x380>
40005334:	9809883a 	mov	r4,r19
40005338:	0007e6c0 	call	40007e6c <__clzsi2>
4000533c:	10fffe04 	addi	r3,r2,-8
40005340:	010007c4 	movi	r4,31
40005344:	20c07f16 	blt	r4,r3,40005544 <__adddf3+0x398>
40005348:	01400a04 	movi	r5,40
4000534c:	2885c83a 	sub	r2,r5,r2
40005350:	888ad83a 	srl	r5,r17,r2
40005354:	98e6983a 	sll	r19,r19,r3
40005358:	88e2983a 	sll	r17,r17,r3
4000535c:	2ce6b03a 	or	r19,r5,r19
40005360:	1c007c16 	blt	r3,r16,40005554 <__adddf3+0x3a8>
40005364:	1c21c83a 	sub	r16,r3,r16
40005368:	81400044 	addi	r5,r16,1
4000536c:	00c007c4 	movi	r3,31
40005370:	19409816 	blt	r3,r5,400055d4 <__adddf3+0x428>
40005374:	1c21c83a 	sub	r16,r3,r16
40005378:	8c08983a 	sll	r4,r17,r16
4000537c:	8946d83a 	srl	r3,r17,r5
40005380:	9c20983a 	sll	r16,r19,r16
40005384:	2008c03a 	cmpne	r4,r4,zero
40005388:	994ad83a 	srl	r5,r19,r5
4000538c:	1c06b03a 	or	r3,r3,r16
40005390:	1922b03a 	or	r17,r3,r4
40005394:	0021883a 	mov	r16,zero
40005398:	003fa306 	br	40005228 <__alt_data_end+0xc0005228>
4000539c:	2880202c 	andhi	r2,r5,128
400053a0:	9007883a 	mov	r3,r18
400053a4:	103fac1e 	bne	r2,zero,40005258 <__alt_data_end+0xc0005258>
400053a8:	2804977a 	slli	r2,r5,29
400053ac:	8822d0fa 	srli	r17,r17,3
400053b0:	0101ffc4 	movi	r4,2047
400053b4:	280ad0fa 	srli	r5,r5,3
400053b8:	1444b03a 	or	r2,r2,r17
400053bc:	81002c26 	beq	r16,r4,40005470 <__adddf3+0x2c4>
400053c0:	8120703a 	and	r16,r16,r4
400053c4:	01000434 	movhi	r4,16
400053c8:	213fffc4 	addi	r4,r4,-1
400053cc:	2908703a 	and	r4,r5,r4
400053d0:	003fad06 	br	40005288 <__alt_data_end+0xc0005288>
400053d4:	8089c83a 	sub	r4,r16,r2
400053d8:	01006a0e 	bge	zero,r4,40005584 <__adddf3+0x3d8>
400053dc:	10003326 	beq	r2,zero,400054ac <__adddf3+0x300>
400053e0:	0081ffc4 	movi	r2,2047
400053e4:	80bf9026 	beq	r16,r2,40005228 <__alt_data_end+0xc0005228>
400053e8:	42002034 	orhi	r8,r8,128
400053ec:	00800e04 	movi	r2,56
400053f0:	1100b116 	blt	r2,r4,400056b8 <__adddf3+0x50c>
400053f4:	008007c4 	movi	r2,31
400053f8:	1100e216 	blt	r2,r4,40005784 <__adddf3+0x5d8>
400053fc:	00800804 	movi	r2,32
40005400:	1105c83a 	sub	r2,r2,r4
40005404:	4092983a 	sll	r9,r8,r2
40005408:	310ed83a 	srl	r7,r6,r4
4000540c:	3084983a 	sll	r2,r6,r2
40005410:	4110d83a 	srl	r8,r8,r4
40005414:	49ccb03a 	or	r6,r9,r7
40005418:	1004c03a 	cmpne	r2,r2,zero
4000541c:	308cb03a 	or	r6,r6,r2
40005420:	344d883a 	add	r6,r6,r17
40005424:	3463803a 	cmpltu	r17,r6,r17
40005428:	414b883a 	add	r5,r8,r5
4000542c:	2c4b883a 	add	r5,r5,r17
40005430:	3023883a 	mov	r17,r6
40005434:	2880202c 	andhi	r2,r5,128
40005438:	10002726 	beq	r2,zero,400054d8 <__adddf3+0x32c>
4000543c:	84000044 	addi	r16,r16,1
40005440:	0081ffc4 	movi	r2,2047
40005444:	8080ae26 	beq	r16,r2,40005700 <__adddf3+0x554>
40005448:	00bfe034 	movhi	r2,65408
4000544c:	10bfffc4 	addi	r2,r2,-1
40005450:	288a703a 	and	r5,r5,r2
40005454:	880cd07a 	srli	r6,r17,1
40005458:	280897fa 	slli	r4,r5,31
4000545c:	88c0004c 	andi	r3,r17,1
40005460:	30e2b03a 	or	r17,r6,r3
40005464:	280ad07a 	srli	r5,r5,1
40005468:	8922b03a 	or	r17,r17,r4
4000546c:	003f6e06 	br	40005228 <__alt_data_end+0xc0005228>
40005470:	1148b03a 	or	r4,r2,r5
40005474:	20003c26 	beq	r4,zero,40005568 <__adddf3+0x3bc>
40005478:	29000234 	orhi	r4,r5,8
4000547c:	01400434 	movhi	r5,16
40005480:	297fffc4 	addi	r5,r5,-1
40005484:	2148703a 	and	r4,r4,r5
40005488:	003f7f06 	br	40005288 <__alt_data_end+0xc0005288>
4000548c:	18ffffc4 	addi	r3,r3,-1
40005490:	18004d1e 	bne	r3,zero,400055c8 <__adddf3+0x41c>
40005494:	898dc83a 	sub	r6,r17,r6
40005498:	89a3803a 	cmpltu	r17,r17,r6
4000549c:	2a0bc83a 	sub	r5,r5,r8
400054a0:	2c4bc83a 	sub	r5,r5,r17
400054a4:	3023883a 	mov	r17,r6
400054a8:	003f9c06 	br	4000531c <__alt_data_end+0xc000531c>
400054ac:	4184b03a 	or	r2,r8,r6
400054b0:	103f5d26 	beq	r2,zero,40005228 <__alt_data_end+0xc0005228>
400054b4:	213fffc4 	addi	r4,r4,-1
400054b8:	203fd926 	beq	r4,zero,40005420 <__alt_data_end+0xc0005420>
400054bc:	0081ffc4 	movi	r2,2047
400054c0:	80bfca1e 	bne	r16,r2,400053ec <__alt_data_end+0xc00053ec>
400054c4:	003f5806 	br	40005228 <__alt_data_end+0xc0005228>
400054c8:	10c8b03a 	or	r4,r2,r3
400054cc:	20008b26 	beq	r4,zero,400056fc <__adddf3+0x550>
400054d0:	100b883a 	mov	r5,r2
400054d4:	1823883a 	mov	r17,r3
400054d8:	888001cc 	andi	r2,r17,7
400054dc:	103f541e 	bne	r2,zero,40005230 <__alt_data_end+0xc0005230>
400054e0:	9007883a 	mov	r3,r18
400054e4:	003fb006 	br	400053a8 <__alt_data_end+0xc00053a8>
400054e8:	1800531e 	bne	r3,zero,40005638 <__adddf3+0x48c>
400054ec:	80800044 	addi	r2,r16,1
400054f0:	1081ffcc 	andi	r2,r2,2047
400054f4:	00c00044 	movi	r3,1
400054f8:	1880990e 	bge	r3,r2,40005760 <__adddf3+0x5b4>
400054fc:	8985c83a 	sub	r2,r17,r6
40005500:	8887803a 	cmpltu	r3,r17,r2
40005504:	2a27c83a 	sub	r19,r5,r8
40005508:	98e7c83a 	sub	r19,r19,r3
4000550c:	98c0202c 	andhi	r3,r19,128
40005510:	18006226 	beq	r3,zero,4000569c <__adddf3+0x4f0>
40005514:	3463c83a 	sub	r17,r6,r17
40005518:	4151c83a 	sub	r8,r8,r5
4000551c:	344d803a 	cmpltu	r6,r6,r17
40005520:	41a7c83a 	sub	r19,r8,r6
40005524:	3825883a 	mov	r18,r7
40005528:	983f821e 	bne	r19,zero,40005334 <__alt_data_end+0xc0005334>
4000552c:	8809883a 	mov	r4,r17
40005530:	0007e6c0 	call	40007e6c <__clzsi2>
40005534:	10800804 	addi	r2,r2,32
40005538:	10fffe04 	addi	r3,r2,-8
4000553c:	010007c4 	movi	r4,31
40005540:	20ff810e 	bge	r4,r3,40005348 <__alt_data_end+0xc0005348>
40005544:	14fff604 	addi	r19,r2,-40
40005548:	8ce6983a 	sll	r19,r17,r19
4000554c:	0023883a 	mov	r17,zero
40005550:	1c3f840e 	bge	r3,r16,40005364 <__alt_data_end+0xc0005364>
40005554:	017fe034 	movhi	r5,65408
40005558:	297fffc4 	addi	r5,r5,-1
4000555c:	80e1c83a 	sub	r16,r16,r3
40005560:	994a703a 	and	r5,r19,r5
40005564:	003f3006 	br	40005228 <__alt_data_end+0xc0005228>
40005568:	0009883a 	mov	r4,zero
4000556c:	0005883a 	mov	r2,zero
40005570:	003f4506 	br	40005288 <__alt_data_end+0xc0005288>
40005574:	418cb03a 	or	r6,r8,r6
40005578:	300cc03a 	cmpne	r6,r6,zero
4000557c:	0007883a 	mov	r3,zero
40005580:	003f6106 	br	40005308 <__alt_data_end+0xc0005308>
40005584:	2000921e 	bne	r4,zero,400057d0 <__adddf3+0x624>
40005588:	80800044 	addi	r2,r16,1
4000558c:	11c1ffcc 	andi	r7,r2,2047
40005590:	01000044 	movi	r4,1
40005594:	21c0610e 	bge	r4,r7,4000571c <__adddf3+0x570>
40005598:	0101ffc4 	movi	r4,2047
4000559c:	1100a326 	beq	r2,r4,4000582c <__adddf3+0x680>
400055a0:	344d883a 	add	r6,r6,r17
400055a4:	3463803a 	cmpltu	r17,r6,r17
400055a8:	414b883a 	add	r5,r8,r5
400055ac:	2c4b883a 	add	r5,r5,r17
400055b0:	282297fa 	slli	r17,r5,31
400055b4:	300cd07a 	srli	r6,r6,1
400055b8:	280ad07a 	srli	r5,r5,1
400055bc:	1021883a 	mov	r16,r2
400055c0:	89a2b03a 	or	r17,r17,r6
400055c4:	003f1806 	br	40005228 <__alt_data_end+0xc0005228>
400055c8:	0081ffc4 	movi	r2,2047
400055cc:	80bf411e 	bne	r16,r2,400052d4 <__alt_data_end+0xc00052d4>
400055d0:	003f1506 	br	40005228 <__alt_data_end+0xc0005228>
400055d4:	80bff844 	addi	r2,r16,-31
400055d8:	00c00804 	movi	r3,32
400055dc:	9884d83a 	srl	r2,r19,r2
400055e0:	28c04a26 	beq	r5,r3,4000570c <__adddf3+0x560>
400055e4:	00c00fc4 	movi	r3,63
400055e8:	1c21c83a 	sub	r16,r3,r16
400055ec:	9c26983a 	sll	r19,r19,r16
400055f0:	9c62b03a 	or	r17,r19,r17
400055f4:	8822c03a 	cmpne	r17,r17,zero
400055f8:	88a2b03a 	or	r17,r17,r2
400055fc:	000b883a 	mov	r5,zero
40005600:	0021883a 	mov	r16,zero
40005604:	003fb406 	br	400054d8 <__alt_data_end+0xc00054d8>
40005608:	18bff804 	addi	r2,r3,-32
4000560c:	01000804 	movi	r4,32
40005610:	4084d83a 	srl	r2,r8,r2
40005614:	19003f26 	beq	r3,r4,40005714 <__adddf3+0x568>
40005618:	01001004 	movi	r4,64
4000561c:	20c7c83a 	sub	r3,r4,r3
40005620:	40d0983a 	sll	r8,r8,r3
40005624:	418cb03a 	or	r6,r8,r6
40005628:	300cc03a 	cmpne	r6,r6,zero
4000562c:	308cb03a 	or	r6,r6,r2
40005630:	0007883a 	mov	r3,zero
40005634:	003f3406 	br	40005308 <__alt_data_end+0xc0005308>
40005638:	80002326 	beq	r16,zero,400056c8 <__adddf3+0x51c>
4000563c:	0101ffc4 	movi	r4,2047
40005640:	11005e26 	beq	r2,r4,400057bc <__adddf3+0x610>
40005644:	00c7c83a 	sub	r3,zero,r3
40005648:	29402034 	orhi	r5,r5,128
4000564c:	01000e04 	movi	r4,56
40005650:	20c07216 	blt	r4,r3,4000581c <__adddf3+0x670>
40005654:	010007c4 	movi	r4,31
40005658:	20c0ce16 	blt	r4,r3,40005994 <__adddf3+0x7e8>
4000565c:	01000804 	movi	r4,32
40005660:	20c9c83a 	sub	r4,r4,r3
40005664:	2914983a 	sll	r10,r5,r4
40005668:	88d2d83a 	srl	r9,r17,r3
4000566c:	8908983a 	sll	r4,r17,r4
40005670:	28c6d83a 	srl	r3,r5,r3
40005674:	5262b03a 	or	r17,r10,r9
40005678:	2008c03a 	cmpne	r4,r4,zero
4000567c:	8922b03a 	or	r17,r17,r4
40005680:	3463c83a 	sub	r17,r6,r17
40005684:	40c7c83a 	sub	r3,r8,r3
40005688:	344d803a 	cmpltu	r6,r6,r17
4000568c:	198bc83a 	sub	r5,r3,r6
40005690:	1021883a 	mov	r16,r2
40005694:	3825883a 	mov	r18,r7
40005698:	003f2006 	br	4000531c <__alt_data_end+0xc000531c>
4000569c:	9886b03a 	or	r3,r19,r2
400056a0:	1800141e 	bne	r3,zero,400056f4 <__adddf3+0x548>
400056a4:	0007883a 	mov	r3,zero
400056a8:	000b883a 	mov	r5,zero
400056ac:	0023883a 	mov	r17,zero
400056b0:	0021883a 	mov	r16,zero
400056b4:	003f3c06 	br	400053a8 <__alt_data_end+0xc00053a8>
400056b8:	418cb03a 	or	r6,r8,r6
400056bc:	300cc03a 	cmpne	r6,r6,zero
400056c0:	0011883a 	mov	r8,zero
400056c4:	003f5606 	br	40005420 <__alt_data_end+0xc0005420>
400056c8:	2c48b03a 	or	r4,r5,r17
400056cc:	20003b26 	beq	r4,zero,400057bc <__adddf3+0x610>
400056d0:	00c6303a 	nor	r3,zero,r3
400056d4:	1800371e 	bne	r3,zero,400057b4 <__adddf3+0x608>
400056d8:	3463c83a 	sub	r17,r6,r17
400056dc:	414bc83a 	sub	r5,r8,r5
400056e0:	344d803a 	cmpltu	r6,r6,r17
400056e4:	298bc83a 	sub	r5,r5,r6
400056e8:	1021883a 	mov	r16,r2
400056ec:	3825883a 	mov	r18,r7
400056f0:	003f0a06 	br	4000531c <__alt_data_end+0xc000531c>
400056f4:	1023883a 	mov	r17,r2
400056f8:	003f0d06 	br	40005330 <__alt_data_end+0xc0005330>
400056fc:	0007883a 	mov	r3,zero
40005700:	000b883a 	mov	r5,zero
40005704:	0023883a 	mov	r17,zero
40005708:	003f2706 	br	400053a8 <__alt_data_end+0xc00053a8>
4000570c:	0027883a 	mov	r19,zero
40005710:	003fb706 	br	400055f0 <__alt_data_end+0xc00055f0>
40005714:	0011883a 	mov	r8,zero
40005718:	003fc206 	br	40005624 <__alt_data_end+0xc0005624>
4000571c:	2c44b03a 	or	r2,r5,r17
40005720:	8000871e 	bne	r16,zero,40005940 <__adddf3+0x794>
40005724:	1000b126 	beq	r2,zero,400059ec <__adddf3+0x840>
40005728:	4184b03a 	or	r2,r8,r6
4000572c:	103ebe26 	beq	r2,zero,40005228 <__alt_data_end+0xc0005228>
40005730:	3445883a 	add	r2,r6,r17
40005734:	1463803a 	cmpltu	r17,r2,r17
40005738:	414b883a 	add	r5,r8,r5
4000573c:	2c4b883a 	add	r5,r5,r17
40005740:	28c0202c 	andhi	r3,r5,128
40005744:	1023883a 	mov	r17,r2
40005748:	183f6326 	beq	r3,zero,400054d8 <__alt_data_end+0xc00054d8>
4000574c:	00bfe034 	movhi	r2,65408
40005750:	10bfffc4 	addi	r2,r2,-1
40005754:	2021883a 	mov	r16,r4
40005758:	288a703a 	and	r5,r5,r2
4000575c:	003eb206 	br	40005228 <__alt_data_end+0xc0005228>
40005760:	2c44b03a 	or	r2,r5,r17
40005764:	8000251e 	bne	r16,zero,400057fc <__adddf3+0x650>
40005768:	10004b1e 	bne	r2,zero,40005898 <__adddf3+0x6ec>
4000576c:	4184b03a 	or	r2,r8,r6
40005770:	103fe226 	beq	r2,zero,400056fc <__alt_data_end+0xc00056fc>
40005774:	400b883a 	mov	r5,r8
40005778:	3023883a 	mov	r17,r6
4000577c:	3825883a 	mov	r18,r7
40005780:	003ea906 	br	40005228 <__alt_data_end+0xc0005228>
40005784:	20bff804 	addi	r2,r4,-32
40005788:	01c00804 	movi	r7,32
4000578c:	4084d83a 	srl	r2,r8,r2
40005790:	21c07e26 	beq	r4,r7,4000598c <__adddf3+0x7e0>
40005794:	01c01004 	movi	r7,64
40005798:	3909c83a 	sub	r4,r7,r4
4000579c:	4110983a 	sll	r8,r8,r4
400057a0:	418cb03a 	or	r6,r8,r6
400057a4:	300cc03a 	cmpne	r6,r6,zero
400057a8:	308cb03a 	or	r6,r6,r2
400057ac:	0011883a 	mov	r8,zero
400057b0:	003f1b06 	br	40005420 <__alt_data_end+0xc0005420>
400057b4:	0101ffc4 	movi	r4,2047
400057b8:	113fa41e 	bne	r2,r4,4000564c <__alt_data_end+0xc000564c>
400057bc:	400b883a 	mov	r5,r8
400057c0:	3023883a 	mov	r17,r6
400057c4:	1021883a 	mov	r16,r2
400057c8:	3825883a 	mov	r18,r7
400057cc:	003e9606 	br	40005228 <__alt_data_end+0xc0005228>
400057d0:	80001a1e 	bne	r16,zero,4000583c <__adddf3+0x690>
400057d4:	2c4eb03a 	or	r7,r5,r17
400057d8:	38005526 	beq	r7,zero,40005930 <__adddf3+0x784>
400057dc:	0108303a 	nor	r4,zero,r4
400057e0:	2000511e 	bne	r4,zero,40005928 <__adddf3+0x77c>
400057e4:	89a3883a 	add	r17,r17,r6
400057e8:	414b883a 	add	r5,r8,r5
400057ec:	898d803a 	cmpltu	r6,r17,r6
400057f0:	298b883a 	add	r5,r5,r6
400057f4:	1021883a 	mov	r16,r2
400057f8:	003f0e06 	br	40005434 <__alt_data_end+0xc0005434>
400057fc:	1000341e 	bne	r2,zero,400058d0 <__adddf3+0x724>
40005800:	4184b03a 	or	r2,r8,r6
40005804:	10006f26 	beq	r2,zero,400059c4 <__adddf3+0x818>
40005808:	400b883a 	mov	r5,r8
4000580c:	3023883a 	mov	r17,r6
40005810:	3825883a 	mov	r18,r7
40005814:	0401ffc4 	movi	r16,2047
40005818:	003e8306 	br	40005228 <__alt_data_end+0xc0005228>
4000581c:	2c62b03a 	or	r17,r5,r17
40005820:	8822c03a 	cmpne	r17,r17,zero
40005824:	0007883a 	mov	r3,zero
40005828:	003f9506 	br	40005680 <__alt_data_end+0xc0005680>
4000582c:	1021883a 	mov	r16,r2
40005830:	000b883a 	mov	r5,zero
40005834:	0023883a 	mov	r17,zero
40005838:	003edb06 	br	400053a8 <__alt_data_end+0xc00053a8>
4000583c:	01c1ffc4 	movi	r7,2047
40005840:	11c03b26 	beq	r2,r7,40005930 <__adddf3+0x784>
40005844:	0109c83a 	sub	r4,zero,r4
40005848:	29402034 	orhi	r5,r5,128
4000584c:	01c00e04 	movi	r7,56
40005850:	39006216 	blt	r7,r4,400059dc <__adddf3+0x830>
40005854:	01c007c4 	movi	r7,31
40005858:	39006b16 	blt	r7,r4,40005a08 <__adddf3+0x85c>
4000585c:	01c00804 	movi	r7,32
40005860:	390fc83a 	sub	r7,r7,r4
40005864:	29d4983a 	sll	r10,r5,r7
40005868:	8912d83a 	srl	r9,r17,r4
4000586c:	89ce983a 	sll	r7,r17,r7
40005870:	2908d83a 	srl	r4,r5,r4
40005874:	5262b03a 	or	r17,r10,r9
40005878:	380ac03a 	cmpne	r5,r7,zero
4000587c:	8962b03a 	or	r17,r17,r5
40005880:	89a3883a 	add	r17,r17,r6
40005884:	2211883a 	add	r8,r4,r8
40005888:	898d803a 	cmpltu	r6,r17,r6
4000588c:	418b883a 	add	r5,r8,r6
40005890:	1021883a 	mov	r16,r2
40005894:	003ee706 	br	40005434 <__alt_data_end+0xc0005434>
40005898:	4184b03a 	or	r2,r8,r6
4000589c:	103e6226 	beq	r2,zero,40005228 <__alt_data_end+0xc0005228>
400058a0:	8987c83a 	sub	r3,r17,r6
400058a4:	88c9803a 	cmpltu	r4,r17,r3
400058a8:	2a05c83a 	sub	r2,r5,r8
400058ac:	1105c83a 	sub	r2,r2,r4
400058b0:	1100202c 	andhi	r4,r2,128
400058b4:	203f0426 	beq	r4,zero,400054c8 <__alt_data_end+0xc00054c8>
400058b8:	3463c83a 	sub	r17,r6,r17
400058bc:	414bc83a 	sub	r5,r8,r5
400058c0:	344d803a 	cmpltu	r6,r6,r17
400058c4:	298bc83a 	sub	r5,r5,r6
400058c8:	3825883a 	mov	r18,r7
400058cc:	003e5606 	br	40005228 <__alt_data_end+0xc0005228>
400058d0:	4184b03a 	or	r2,r8,r6
400058d4:	10002b26 	beq	r2,zero,40005984 <__adddf3+0x7d8>
400058d8:	2804d0fa 	srli	r2,r5,3
400058dc:	8822d0fa 	srli	r17,r17,3
400058e0:	280a977a 	slli	r5,r5,29
400058e4:	10c0022c 	andhi	r3,r2,8
400058e8:	2c62b03a 	or	r17,r5,r17
400058ec:	18000826 	beq	r3,zero,40005910 <__adddf3+0x764>
400058f0:	4008d0fa 	srli	r4,r8,3
400058f4:	20c0022c 	andhi	r3,r4,8
400058f8:	1800051e 	bne	r3,zero,40005910 <__adddf3+0x764>
400058fc:	300cd0fa 	srli	r6,r6,3
40005900:	4010977a 	slli	r8,r8,29
40005904:	2005883a 	mov	r2,r4
40005908:	3825883a 	mov	r18,r7
4000590c:	41a2b03a 	or	r17,r8,r6
40005910:	880ad77a 	srli	r5,r17,29
40005914:	100490fa 	slli	r2,r2,3
40005918:	882290fa 	slli	r17,r17,3
4000591c:	0401ffc4 	movi	r16,2047
40005920:	288ab03a 	or	r5,r5,r2
40005924:	003e4006 	br	40005228 <__alt_data_end+0xc0005228>
40005928:	01c1ffc4 	movi	r7,2047
4000592c:	11ffc71e 	bne	r2,r7,4000584c <__alt_data_end+0xc000584c>
40005930:	400b883a 	mov	r5,r8
40005934:	3023883a 	mov	r17,r6
40005938:	1021883a 	mov	r16,r2
4000593c:	003e3a06 	br	40005228 <__alt_data_end+0xc0005228>
40005940:	10002d26 	beq	r2,zero,400059f8 <__adddf3+0x84c>
40005944:	4184b03a 	or	r2,r8,r6
40005948:	10000e26 	beq	r2,zero,40005984 <__adddf3+0x7d8>
4000594c:	2804d0fa 	srli	r2,r5,3
40005950:	8822d0fa 	srli	r17,r17,3
40005954:	280a977a 	slli	r5,r5,29
40005958:	10c0022c 	andhi	r3,r2,8
4000595c:	2c62b03a 	or	r17,r5,r17
40005960:	183feb26 	beq	r3,zero,40005910 <__alt_data_end+0xc0005910>
40005964:	4008d0fa 	srli	r4,r8,3
40005968:	20c0022c 	andhi	r3,r4,8
4000596c:	183fe81e 	bne	r3,zero,40005910 <__alt_data_end+0xc0005910>
40005970:	300cd0fa 	srli	r6,r6,3
40005974:	4010977a 	slli	r8,r8,29
40005978:	2005883a 	mov	r2,r4
4000597c:	41a2b03a 	or	r17,r8,r6
40005980:	003fe306 	br	40005910 <__alt_data_end+0xc0005910>
40005984:	0401ffc4 	movi	r16,2047
40005988:	003e2706 	br	40005228 <__alt_data_end+0xc0005228>
4000598c:	0011883a 	mov	r8,zero
40005990:	003f8306 	br	400057a0 <__alt_data_end+0xc00057a0>
40005994:	193ff804 	addi	r4,r3,-32
40005998:	02400804 	movi	r9,32
4000599c:	2908d83a 	srl	r4,r5,r4
400059a0:	1a402526 	beq	r3,r9,40005a38 <__adddf3+0x88c>
400059a4:	02401004 	movi	r9,64
400059a8:	48c7c83a 	sub	r3,r9,r3
400059ac:	28ca983a 	sll	r5,r5,r3
400059b0:	2c62b03a 	or	r17,r5,r17
400059b4:	8822c03a 	cmpne	r17,r17,zero
400059b8:	8922b03a 	or	r17,r17,r4
400059bc:	0007883a 	mov	r3,zero
400059c0:	003f2f06 	br	40005680 <__alt_data_end+0xc0005680>
400059c4:	01402034 	movhi	r5,128
400059c8:	0007883a 	mov	r3,zero
400059cc:	297fffc4 	addi	r5,r5,-1
400059d0:	047ffe04 	movi	r17,-8
400059d4:	0401ffc4 	movi	r16,2047
400059d8:	003e7306 	br	400053a8 <__alt_data_end+0xc00053a8>
400059dc:	2c62b03a 	or	r17,r5,r17
400059e0:	8822c03a 	cmpne	r17,r17,zero
400059e4:	0009883a 	mov	r4,zero
400059e8:	003fa506 	br	40005880 <__alt_data_end+0xc0005880>
400059ec:	400b883a 	mov	r5,r8
400059f0:	3023883a 	mov	r17,r6
400059f4:	003e0c06 	br	40005228 <__alt_data_end+0xc0005228>
400059f8:	400b883a 	mov	r5,r8
400059fc:	3023883a 	mov	r17,r6
40005a00:	0401ffc4 	movi	r16,2047
40005a04:	003e0806 	br	40005228 <__alt_data_end+0xc0005228>
40005a08:	21fff804 	addi	r7,r4,-32
40005a0c:	02400804 	movi	r9,32
40005a10:	29ced83a 	srl	r7,r5,r7
40005a14:	22400a26 	beq	r4,r9,40005a40 <__adddf3+0x894>
40005a18:	02401004 	movi	r9,64
40005a1c:	4909c83a 	sub	r4,r9,r4
40005a20:	290a983a 	sll	r5,r5,r4
40005a24:	2c62b03a 	or	r17,r5,r17
40005a28:	8822c03a 	cmpne	r17,r17,zero
40005a2c:	89e2b03a 	or	r17,r17,r7
40005a30:	0009883a 	mov	r4,zero
40005a34:	003f9206 	br	40005880 <__alt_data_end+0xc0005880>
40005a38:	000b883a 	mov	r5,zero
40005a3c:	003fdc06 	br	400059b0 <__alt_data_end+0xc00059b0>
40005a40:	000b883a 	mov	r5,zero
40005a44:	003ff706 	br	40005a24 <__alt_data_end+0xc0005a24>

40005a48 <__divdf3>:
40005a48:	defff204 	addi	sp,sp,-56
40005a4c:	dd000815 	stw	r20,32(sp)
40005a50:	2828d53a 	srli	r20,r5,20
40005a54:	dd800a15 	stw	r22,40(sp)
40005a58:	282cd7fa 	srli	r22,r5,31
40005a5c:	dc000415 	stw	r16,16(sp)
40005a60:	04000434 	movhi	r16,16
40005a64:	df000c15 	stw	fp,48(sp)
40005a68:	dcc00715 	stw	r19,28(sp)
40005a6c:	dc800615 	stw	r18,24(sp)
40005a70:	dc400515 	stw	r17,20(sp)
40005a74:	843fffc4 	addi	r16,r16,-1
40005a78:	dfc00d15 	stw	ra,52(sp)
40005a7c:	ddc00b15 	stw	r23,44(sp)
40005a80:	dd400915 	stw	r21,36(sp)
40005a84:	a501ffcc 	andi	r20,r20,2047
40005a88:	2025883a 	mov	r18,r4
40005a8c:	2027883a 	mov	r19,r4
40005a90:	2c22703a 	and	r17,r5,r16
40005a94:	b7003fcc 	andi	fp,r22,255
40005a98:	a0005e26 	beq	r20,zero,40005c14 <__divdf3+0x1cc>
40005a9c:	0081ffc4 	movi	r2,2047
40005aa0:	a0803526 	beq	r20,r2,40005b78 <__divdf3+0x130>
40005aa4:	8c000434 	orhi	r16,r17,16
40005aa8:	2004d77a 	srli	r2,r4,29
40005aac:	802090fa 	slli	r16,r16,3
40005ab0:	202690fa 	slli	r19,r4,3
40005ab4:	a53f0044 	addi	r20,r20,-1023
40005ab8:	80a2b03a 	or	r17,r16,r2
40005abc:	0025883a 	mov	r18,zero
40005ac0:	0011883a 	mov	r8,zero
40005ac4:	380ad53a 	srli	r5,r7,20
40005ac8:	382ed7fa 	srli	r23,r7,31
40005acc:	04000434 	movhi	r16,16
40005ad0:	843fffc4 	addi	r16,r16,-1
40005ad4:	2941ffcc 	andi	r5,r5,2047
40005ad8:	302b883a 	mov	r21,r6
40005adc:	3c20703a 	and	r16,r7,r16
40005ae0:	ba403fcc 	andi	r9,r23,255
40005ae4:	28006726 	beq	r5,zero,40005c84 <__divdf3+0x23c>
40005ae8:	0081ffc4 	movi	r2,2047
40005aec:	28805f26 	beq	r5,r2,40005c6c <__divdf3+0x224>
40005af0:	84000434 	orhi	r16,r16,16
40005af4:	3004d77a 	srli	r2,r6,29
40005af8:	802090fa 	slli	r16,r16,3
40005afc:	302a90fa 	slli	r21,r6,3
40005b00:	297f0044 	addi	r5,r5,-1023
40005b04:	80a0b03a 	or	r16,r16,r2
40005b08:	000f883a 	mov	r7,zero
40005b0c:	3c86b03a 	or	r3,r7,r18
40005b10:	180690ba 	slli	r3,r3,2
40005b14:	00900034 	movhi	r2,16384
40005b18:	1096ce04 	addi	r2,r2,23352
40005b1c:	1887883a 	add	r3,r3,r2
40005b20:	18c00017 	ldw	r3,0(r3)
40005b24:	b5c8f03a 	xor	r4,r22,r23
40005b28:	200d883a 	mov	r6,r4
40005b2c:	24803fcc 	andi	r18,r4,255
40005b30:	a169c83a 	sub	r20,r20,r5
40005b34:	1800683a 	jmp	r3
40005b38:	40005d80 	call	440005d8 <__alt_heap_start+0x3f9c30c>
40005b3c:	40005bb0 	cmpltui	zero,r8,366
40005b40:	40005d44 	addi	zero,r8,373
40005b44:	40005b94 	ori	zero,r8,366
40005b48:	40005d44 	addi	zero,r8,373
40005b4c:	40005d18 	cmpnei	zero,r8,372
40005b50:	40005d44 	addi	zero,r8,373
40005b54:	40005b94 	ori	zero,r8,366
40005b58:	40005bb0 	cmpltui	zero,r8,366
40005b5c:	40005bb0 	cmpltui	zero,r8,366
40005b60:	40005d18 	cmpnei	zero,r8,372
40005b64:	40005b94 	ori	zero,r8,366
40005b68:	40005ba4 	muli	zero,r8,366
40005b6c:	40005ba4 	muli	zero,r8,366
40005b70:	40005ba4 	muli	zero,r8,366
40005b74:	40005d54 	ori	zero,r8,373
40005b78:	8904b03a 	or	r2,r17,r4
40005b7c:	1000631e 	bne	r2,zero,40005d0c <__divdf3+0x2c4>
40005b80:	04800204 	movi	r18,8
40005b84:	0023883a 	mov	r17,zero
40005b88:	0027883a 	mov	r19,zero
40005b8c:	02000084 	movi	r8,2
40005b90:	003fcc06 	br	40005ac4 <__alt_data_end+0xc0005ac4>
40005b94:	8023883a 	mov	r17,r16
40005b98:	a827883a 	mov	r19,r21
40005b9c:	4839883a 	mov	fp,r9
40005ba0:	3811883a 	mov	r8,r7
40005ba4:	00800084 	movi	r2,2
40005ba8:	40812a1e 	bne	r8,r2,40006054 <__divdf3+0x60c>
40005bac:	e025883a 	mov	r18,fp
40005bb0:	9180004c 	andi	r6,r18,1
40005bb4:	0101ffc4 	movi	r4,2047
40005bb8:	000b883a 	mov	r5,zero
40005bbc:	0027883a 	mov	r19,zero
40005bc0:	2008953a 	slli	r4,r4,20
40005bc4:	30c03fcc 	andi	r3,r6,255
40005bc8:	04000434 	movhi	r16,16
40005bcc:	180697fa 	slli	r3,r3,31
40005bd0:	843fffc4 	addi	r16,r16,-1
40005bd4:	2c20703a 	and	r16,r5,r16
40005bd8:	8120b03a 	or	r16,r16,r4
40005bdc:	80c6b03a 	or	r3,r16,r3
40005be0:	9805883a 	mov	r2,r19
40005be4:	dfc00d17 	ldw	ra,52(sp)
40005be8:	df000c17 	ldw	fp,48(sp)
40005bec:	ddc00b17 	ldw	r23,44(sp)
40005bf0:	dd800a17 	ldw	r22,40(sp)
40005bf4:	dd400917 	ldw	r21,36(sp)
40005bf8:	dd000817 	ldw	r20,32(sp)
40005bfc:	dcc00717 	ldw	r19,28(sp)
40005c00:	dc800617 	ldw	r18,24(sp)
40005c04:	dc400517 	ldw	r17,20(sp)
40005c08:	dc000417 	ldw	r16,16(sp)
40005c0c:	dec00e04 	addi	sp,sp,56
40005c10:	f800283a 	ret
40005c14:	8904b03a 	or	r2,r17,r4
40005c18:	10003726 	beq	r2,zero,40005cf8 <__divdf3+0x2b0>
40005c1c:	88011c26 	beq	r17,zero,40006090 <__divdf3+0x648>
40005c20:	8809883a 	mov	r4,r17
40005c24:	d9800315 	stw	r6,12(sp)
40005c28:	d9c00115 	stw	r7,4(sp)
40005c2c:	0007e6c0 	call	40007e6c <__clzsi2>
40005c30:	d9800317 	ldw	r6,12(sp)
40005c34:	d9c00117 	ldw	r7,4(sp)
40005c38:	1007883a 	mov	r3,r2
40005c3c:	01000a04 	movi	r4,40
40005c40:	1cfffe04 	addi	r19,r3,-8
40005c44:	20c9c83a 	sub	r4,r4,r3
40005c48:	8cca983a 	sll	r5,r17,r19
40005c4c:	9108d83a 	srl	r4,r18,r4
40005c50:	94e6983a 	sll	r19,r18,r19
40005c54:	2162b03a 	or	r17,r4,r5
40005c58:	053f0344 	movi	r20,-1011
40005c5c:	a0e9c83a 	sub	r20,r20,r3
40005c60:	0025883a 	mov	r18,zero
40005c64:	0011883a 	mov	r8,zero
40005c68:	003f9606 	br	40005ac4 <__alt_data_end+0xc0005ac4>
40005c6c:	8184b03a 	or	r2,r16,r6
40005c70:	10001f1e 	bne	r2,zero,40005cf0 <__divdf3+0x2a8>
40005c74:	0021883a 	mov	r16,zero
40005c78:	002b883a 	mov	r21,zero
40005c7c:	01c00084 	movi	r7,2
40005c80:	003fa206 	br	40005b0c <__alt_data_end+0xc0005b0c>
40005c84:	8184b03a 	or	r2,r16,r6
40005c88:	10001526 	beq	r2,zero,40005ce0 <__divdf3+0x298>
40005c8c:	80010c26 	beq	r16,zero,400060c0 <__divdf3+0x678>
40005c90:	8009883a 	mov	r4,r16
40005c94:	d9800315 	stw	r6,12(sp)
40005c98:	da000215 	stw	r8,8(sp)
40005c9c:	da400015 	stw	r9,0(sp)
40005ca0:	0007e6c0 	call	40007e6c <__clzsi2>
40005ca4:	d9800317 	ldw	r6,12(sp)
40005ca8:	da000217 	ldw	r8,8(sp)
40005cac:	da400017 	ldw	r9,0(sp)
40005cb0:	1007883a 	mov	r3,r2
40005cb4:	01000a04 	movi	r4,40
40005cb8:	1d7ffe04 	addi	r21,r3,-8
40005cbc:	20c9c83a 	sub	r4,r4,r3
40005cc0:	8560983a 	sll	r16,r16,r21
40005cc4:	3108d83a 	srl	r4,r6,r4
40005cc8:	356a983a 	sll	r21,r6,r21
40005ccc:	2420b03a 	or	r16,r4,r16
40005cd0:	017f0344 	movi	r5,-1011
40005cd4:	28cbc83a 	sub	r5,r5,r3
40005cd8:	000f883a 	mov	r7,zero
40005cdc:	003f8b06 	br	40005b0c <__alt_data_end+0xc0005b0c>
40005ce0:	0021883a 	mov	r16,zero
40005ce4:	002b883a 	mov	r21,zero
40005ce8:	01c00044 	movi	r7,1
40005cec:	003f8706 	br	40005b0c <__alt_data_end+0xc0005b0c>
40005cf0:	01c000c4 	movi	r7,3
40005cf4:	003f8506 	br	40005b0c <__alt_data_end+0xc0005b0c>
40005cf8:	04800104 	movi	r18,4
40005cfc:	0023883a 	mov	r17,zero
40005d00:	0027883a 	mov	r19,zero
40005d04:	02000044 	movi	r8,1
40005d08:	003f6e06 	br	40005ac4 <__alt_data_end+0xc0005ac4>
40005d0c:	04800304 	movi	r18,12
40005d10:	020000c4 	movi	r8,3
40005d14:	003f6b06 	br	40005ac4 <__alt_data_end+0xc0005ac4>
40005d18:	01400434 	movhi	r5,16
40005d1c:	000d883a 	mov	r6,zero
40005d20:	297fffc4 	addi	r5,r5,-1
40005d24:	04ffffc4 	movi	r19,-1
40005d28:	0101ffc4 	movi	r4,2047
40005d2c:	003fa406 	br	40005bc0 <__alt_data_end+0xc0005bc0>
40005d30:	043f0084 	movi	r16,-1022
40005d34:	8521c83a 	sub	r16,r16,r20
40005d38:	00800e04 	movi	r2,56
40005d3c:	1401200e 	bge	r2,r16,400061c0 <__divdf3+0x778>
40005d40:	9180004c 	andi	r6,r18,1
40005d44:	0009883a 	mov	r4,zero
40005d48:	000b883a 	mov	r5,zero
40005d4c:	0027883a 	mov	r19,zero
40005d50:	003f9b06 	br	40005bc0 <__alt_data_end+0xc0005bc0>
40005d54:	8880022c 	andhi	r2,r17,8
40005d58:	1000c726 	beq	r2,zero,40006078 <__divdf3+0x630>
40005d5c:	8080022c 	andhi	r2,r16,8
40005d60:	1000c51e 	bne	r2,zero,40006078 <__divdf3+0x630>
40005d64:	00800434 	movhi	r2,16
40005d68:	81400234 	orhi	r5,r16,8
40005d6c:	10bfffc4 	addi	r2,r2,-1
40005d70:	b80d883a 	mov	r6,r23
40005d74:	288a703a 	and	r5,r5,r2
40005d78:	a827883a 	mov	r19,r21
40005d7c:	003fea06 	br	40005d28 <__alt_data_end+0xc0005d28>
40005d80:	8440ea36 	bltu	r16,r17,4000612c <__divdf3+0x6e4>
40005d84:	8c00e826 	beq	r17,r16,40006128 <__divdf3+0x6e0>
40005d88:	a53fffc4 	addi	r20,r20,-1
40005d8c:	882d883a 	mov	r22,r17
40005d90:	000d883a 	mov	r6,zero
40005d94:	a804d63a 	srli	r2,r21,24
40005d98:	8020923a 	slli	r16,r16,8
40005d9c:	b009883a 	mov	r4,r22
40005da0:	d9800315 	stw	r6,12(sp)
40005da4:	1420b03a 	or	r16,r2,r16
40005da8:	802ed43a 	srli	r23,r16,16
40005dac:	873fffcc 	andi	fp,r16,65535
40005db0:	a82a923a 	slli	r21,r21,8
40005db4:	b80b883a 	mov	r5,r23
40005db8:	000519c0 	call	4000519c <__udivsi3>
40005dbc:	b009883a 	mov	r4,r22
40005dc0:	b80b883a 	mov	r5,r23
40005dc4:	1023883a 	mov	r17,r2
40005dc8:	00051a40 	call	400051a4 <__umodsi3>
40005dcc:	1004943a 	slli	r2,r2,16
40005dd0:	9808d43a 	srli	r4,r19,16
40005dd4:	8f2d383a 	mul	r22,r17,fp
40005dd8:	d9800317 	ldw	r6,12(sp)
40005ddc:	1106b03a 	or	r3,r2,r4
40005de0:	1d80062e 	bgeu	r3,r22,40005dfc <__divdf3+0x3b4>
40005de4:	1c07883a 	add	r3,r3,r16
40005de8:	88bfffc4 	addi	r2,r17,-1
40005dec:	1c00dc36 	bltu	r3,r16,40006160 <__divdf3+0x718>
40005df0:	1d80db2e 	bgeu	r3,r22,40006160 <__divdf3+0x718>
40005df4:	8c7fff84 	addi	r17,r17,-2
40005df8:	1c07883a 	add	r3,r3,r16
40005dfc:	1dadc83a 	sub	r22,r3,r22
40005e00:	b009883a 	mov	r4,r22
40005e04:	b80b883a 	mov	r5,r23
40005e08:	d9800315 	stw	r6,12(sp)
40005e0c:	000519c0 	call	4000519c <__udivsi3>
40005e10:	b009883a 	mov	r4,r22
40005e14:	b80b883a 	mov	r5,r23
40005e18:	d8800015 	stw	r2,0(sp)
40005e1c:	00051a40 	call	400051a4 <__umodsi3>
40005e20:	da400017 	ldw	r9,0(sp)
40005e24:	1004943a 	slli	r2,r2,16
40005e28:	9cffffcc 	andi	r19,r19,65535
40005e2c:	4f07383a 	mul	r3,r9,fp
40005e30:	14c8b03a 	or	r4,r2,r19
40005e34:	d9800317 	ldw	r6,12(sp)
40005e38:	20c0062e 	bgeu	r4,r3,40005e54 <__divdf3+0x40c>
40005e3c:	2409883a 	add	r4,r4,r16
40005e40:	48bfffc4 	addi	r2,r9,-1
40005e44:	2400c436 	bltu	r4,r16,40006158 <__divdf3+0x710>
40005e48:	20c0c32e 	bgeu	r4,r3,40006158 <__divdf3+0x710>
40005e4c:	4a7fff84 	addi	r9,r9,-2
40005e50:	2409883a 	add	r4,r4,r16
40005e54:	8822943a 	slli	r17,r17,16
40005e58:	a80ed43a 	srli	r7,r21,16
40005e5c:	aa3fffcc 	andi	r8,r21,65535
40005e60:	4c62b03a 	or	r17,r9,r17
40005e64:	8816d43a 	srli	r11,r17,16
40005e68:	897fffcc 	andi	r5,r17,65535
40005e6c:	2a15383a 	mul	r10,r5,r8
40005e70:	5a19383a 	mul	r12,r11,r8
40005e74:	29cb383a 	mul	r5,r5,r7
40005e78:	5012d43a 	srli	r9,r10,16
40005e7c:	20c5c83a 	sub	r2,r4,r3
40005e80:	614b883a 	add	r5,r12,r5
40005e84:	2a4b883a 	add	r5,r5,r9
40005e88:	59c7383a 	mul	r3,r11,r7
40005e8c:	2b00022e 	bgeu	r5,r12,40005e98 <__divdf3+0x450>
40005e90:	01000074 	movhi	r4,1
40005e94:	1907883a 	add	r3,r3,r4
40005e98:	2808d43a 	srli	r4,r5,16
40005e9c:	280a943a 	slli	r5,r5,16
40005ea0:	54ffffcc 	andi	r19,r10,65535
40005ea4:	1907883a 	add	r3,r3,r4
40005ea8:	2ccb883a 	add	r5,r5,r19
40005eac:	10c09336 	bltu	r2,r3,400060fc <__divdf3+0x6b4>
40005eb0:	10c0ad26 	beq	r2,r3,40006168 <__divdf3+0x720>
40005eb4:	10c7c83a 	sub	r3,r2,r3
40005eb8:	3167c83a 	sub	r19,r6,r5
40005ebc:	34ed803a 	cmpltu	r22,r6,r19
40005ec0:	1dadc83a 	sub	r22,r3,r22
40005ec4:	b400b226 	beq	r22,r16,40006190 <__divdf3+0x748>
40005ec8:	b009883a 	mov	r4,r22
40005ecc:	b80b883a 	mov	r5,r23
40005ed0:	d9c00115 	stw	r7,4(sp)
40005ed4:	da000215 	stw	r8,8(sp)
40005ed8:	000519c0 	call	4000519c <__udivsi3>
40005edc:	b009883a 	mov	r4,r22
40005ee0:	b80b883a 	mov	r5,r23
40005ee4:	d8800315 	stw	r2,12(sp)
40005ee8:	00051a40 	call	400051a4 <__umodsi3>
40005eec:	d9800317 	ldw	r6,12(sp)
40005ef0:	1004943a 	slli	r2,r2,16
40005ef4:	9808d43a 	srli	r4,r19,16
40005ef8:	372d383a 	mul	r22,r6,fp
40005efc:	d9c00117 	ldw	r7,4(sp)
40005f00:	1106b03a 	or	r3,r2,r4
40005f04:	da000217 	ldw	r8,8(sp)
40005f08:	1d80062e 	bgeu	r3,r22,40005f24 <__divdf3+0x4dc>
40005f0c:	1c07883a 	add	r3,r3,r16
40005f10:	30bfffc4 	addi	r2,r6,-1
40005f14:	1c00a036 	bltu	r3,r16,40006198 <__divdf3+0x750>
40005f18:	1d809f2e 	bgeu	r3,r22,40006198 <__divdf3+0x750>
40005f1c:	31bfff84 	addi	r6,r6,-2
40005f20:	1c07883a 	add	r3,r3,r16
40005f24:	1dadc83a 	sub	r22,r3,r22
40005f28:	b009883a 	mov	r4,r22
40005f2c:	b80b883a 	mov	r5,r23
40005f30:	d9800315 	stw	r6,12(sp)
40005f34:	d9c00115 	stw	r7,4(sp)
40005f38:	da000215 	stw	r8,8(sp)
40005f3c:	000519c0 	call	4000519c <__udivsi3>
40005f40:	b009883a 	mov	r4,r22
40005f44:	b80b883a 	mov	r5,r23
40005f48:	d8800015 	stw	r2,0(sp)
40005f4c:	00051a40 	call	400051a4 <__umodsi3>
40005f50:	da400017 	ldw	r9,0(sp)
40005f54:	1004943a 	slli	r2,r2,16
40005f58:	993fffcc 	andi	r4,r19,65535
40005f5c:	4f39383a 	mul	fp,r9,fp
40005f60:	1106b03a 	or	r3,r2,r4
40005f64:	d9800317 	ldw	r6,12(sp)
40005f68:	d9c00117 	ldw	r7,4(sp)
40005f6c:	da000217 	ldw	r8,8(sp)
40005f70:	1f00062e 	bgeu	r3,fp,40005f8c <__divdf3+0x544>
40005f74:	1c07883a 	add	r3,r3,r16
40005f78:	48bfffc4 	addi	r2,r9,-1
40005f7c:	1c008836 	bltu	r3,r16,400061a0 <__divdf3+0x758>
40005f80:	1f00872e 	bgeu	r3,fp,400061a0 <__divdf3+0x758>
40005f84:	4a7fff84 	addi	r9,r9,-2
40005f88:	1c07883a 	add	r3,r3,r16
40005f8c:	3008943a 	slli	r4,r6,16
40005f90:	1f07c83a 	sub	r3,r3,fp
40005f94:	4926b03a 	or	r19,r9,r4
40005f98:	993fffcc 	andi	r4,r19,65535
40005f9c:	980cd43a 	srli	r6,r19,16
40005fa0:	220b383a 	mul	r5,r4,r8
40005fa4:	21c5383a 	mul	r2,r4,r7
40005fa8:	3211383a 	mul	r8,r6,r8
40005fac:	2808d43a 	srli	r4,r5,16
40005fb0:	31cf383a 	mul	r7,r6,r7
40005fb4:	4085883a 	add	r2,r8,r2
40005fb8:	1105883a 	add	r2,r2,r4
40005fbc:	1200022e 	bgeu	r2,r8,40005fc8 <__divdf3+0x580>
40005fc0:	01000074 	movhi	r4,1
40005fc4:	390f883a 	add	r7,r7,r4
40005fc8:	1008d43a 	srli	r4,r2,16
40005fcc:	1004943a 	slli	r2,r2,16
40005fd0:	297fffcc 	andi	r5,r5,65535
40005fd4:	390f883a 	add	r7,r7,r4
40005fd8:	1145883a 	add	r2,r2,r5
40005fdc:	19c06536 	bltu	r3,r7,40006174 <__divdf3+0x72c>
40005fe0:	19c09f26 	beq	r3,r7,40006260 <__divdf3+0x818>
40005fe4:	9cc00054 	ori	r19,r19,1
40005fe8:	a100ffc4 	addi	r4,r20,1023
40005fec:	013f500e 	bge	zero,r4,40005d30 <__alt_data_end+0xc0005d30>
40005ff0:	988001cc 	andi	r2,r19,7
40005ff4:	10000726 	beq	r2,zero,40006014 <__divdf3+0x5cc>
40005ff8:	98c003cc 	andi	r3,r19,15
40005ffc:	00800104 	movi	r2,4
40006000:	18800426 	beq	r3,r2,40006014 <__divdf3+0x5cc>
40006004:	9885883a 	add	r2,r19,r2
40006008:	14e1803a 	cmpltu	r16,r2,r19
4000600c:	8c23883a 	add	r17,r17,r16
40006010:	1027883a 	mov	r19,r2
40006014:	8880402c 	andhi	r2,r17,256
40006018:	10000426 	beq	r2,zero,4000602c <__divdf3+0x5e4>
4000601c:	00bfc034 	movhi	r2,65280
40006020:	10bfffc4 	addi	r2,r2,-1
40006024:	a1010004 	addi	r4,r20,1024
40006028:	88a2703a 	and	r17,r17,r2
4000602c:	0081ff84 	movi	r2,2046
40006030:	113edf16 	blt	r2,r4,40005bb0 <__alt_data_end+0xc0005bb0>
40006034:	9826d0fa 	srli	r19,r19,3
40006038:	8804977a 	slli	r2,r17,29
4000603c:	8820927a 	slli	r16,r17,9
40006040:	2101ffcc 	andi	r4,r4,2047
40006044:	14e6b03a 	or	r19,r2,r19
40006048:	800ad33a 	srli	r5,r16,12
4000604c:	9180004c 	andi	r6,r18,1
40006050:	003edb06 	br	40005bc0 <__alt_data_end+0xc0005bc0>
40006054:	008000c4 	movi	r2,3
40006058:	4080a826 	beq	r8,r2,400062fc <__divdf3+0x8b4>
4000605c:	00800044 	movi	r2,1
40006060:	4080551e 	bne	r8,r2,400061b8 <__divdf3+0x770>
40006064:	e00d883a 	mov	r6,fp
40006068:	0009883a 	mov	r4,zero
4000606c:	000b883a 	mov	r5,zero
40006070:	0027883a 	mov	r19,zero
40006074:	003ed206 	br	40005bc0 <__alt_data_end+0xc0005bc0>
40006078:	00800434 	movhi	r2,16
4000607c:	89400234 	orhi	r5,r17,8
40006080:	10bfffc4 	addi	r2,r2,-1
40006084:	b00d883a 	mov	r6,r22
40006088:	288a703a 	and	r5,r5,r2
4000608c:	003f2606 	br	40005d28 <__alt_data_end+0xc0005d28>
40006090:	d9800315 	stw	r6,12(sp)
40006094:	d9c00115 	stw	r7,4(sp)
40006098:	0007e6c0 	call	40007e6c <__clzsi2>
4000609c:	10c00804 	addi	r3,r2,32
400060a0:	010009c4 	movi	r4,39
400060a4:	d9800317 	ldw	r6,12(sp)
400060a8:	d9c00117 	ldw	r7,4(sp)
400060ac:	20fee30e 	bge	r4,r3,40005c3c <__alt_data_end+0xc0005c3c>
400060b0:	117ffe04 	addi	r5,r2,-8
400060b4:	9162983a 	sll	r17,r18,r5
400060b8:	0027883a 	mov	r19,zero
400060bc:	003ee606 	br	40005c58 <__alt_data_end+0xc0005c58>
400060c0:	3009883a 	mov	r4,r6
400060c4:	d9800315 	stw	r6,12(sp)
400060c8:	da000215 	stw	r8,8(sp)
400060cc:	da400015 	stw	r9,0(sp)
400060d0:	0007e6c0 	call	40007e6c <__clzsi2>
400060d4:	10c00804 	addi	r3,r2,32
400060d8:	010009c4 	movi	r4,39
400060dc:	d9800317 	ldw	r6,12(sp)
400060e0:	da000217 	ldw	r8,8(sp)
400060e4:	da400017 	ldw	r9,0(sp)
400060e8:	20fef20e 	bge	r4,r3,40005cb4 <__alt_data_end+0xc0005cb4>
400060ec:	10bffe04 	addi	r2,r2,-8
400060f0:	a8a0983a 	sll	r16,r21,r2
400060f4:	002b883a 	mov	r21,zero
400060f8:	003ef506 	br	40005cd0 <__alt_data_end+0xc0005cd0>
400060fc:	354d883a 	add	r6,r6,r21
40006100:	3549803a 	cmpltu	r4,r6,r21
40006104:	2409883a 	add	r4,r4,r16
40006108:	2089883a 	add	r4,r4,r2
4000610c:	88bfffc4 	addi	r2,r17,-1
40006110:	81000c2e 	bgeu	r16,r4,40006144 <__divdf3+0x6fc>
40006114:	20c04436 	bltu	r4,r3,40006228 <__divdf3+0x7e0>
40006118:	19006f26 	beq	r3,r4,400062d8 <__divdf3+0x890>
4000611c:	20c7c83a 	sub	r3,r4,r3
40006120:	1023883a 	mov	r17,r2
40006124:	003f6406 	br	40005eb8 <__alt_data_end+0xc0005eb8>
40006128:	9d7f1736 	bltu	r19,r21,40005d88 <__alt_data_end+0xc0005d88>
4000612c:	9806d07a 	srli	r3,r19,1
40006130:	880497fa 	slli	r2,r17,31
40006134:	980c97fa 	slli	r6,r19,31
40006138:	882cd07a 	srli	r22,r17,1
4000613c:	18a6b03a 	or	r19,r3,r2
40006140:	003f1406 	br	40005d94 <__alt_data_end+0xc0005d94>
40006144:	243ff51e 	bne	r4,r16,4000611c <__alt_data_end+0xc000611c>
40006148:	357ff22e 	bgeu	r6,r21,40006114 <__alt_data_end+0xc0006114>
4000614c:	80c7c83a 	sub	r3,r16,r3
40006150:	1023883a 	mov	r17,r2
40006154:	003f5806 	br	40005eb8 <__alt_data_end+0xc0005eb8>
40006158:	1013883a 	mov	r9,r2
4000615c:	003f3d06 	br	40005e54 <__alt_data_end+0xc0005e54>
40006160:	1023883a 	mov	r17,r2
40006164:	003f2506 	br	40005dfc <__alt_data_end+0xc0005dfc>
40006168:	317fe436 	bltu	r6,r5,400060fc <__alt_data_end+0xc00060fc>
4000616c:	0007883a 	mov	r3,zero
40006170:	003f5106 	br	40005eb8 <__alt_data_end+0xc0005eb8>
40006174:	1c07883a 	add	r3,r3,r16
40006178:	993fffc4 	addi	r4,r19,-1
4000617c:	1c000a2e 	bgeu	r3,r16,400061a8 <__divdf3+0x760>
40006180:	2027883a 	mov	r19,r4
40006184:	19ff971e 	bne	r3,r7,40005fe4 <__alt_data_end+0xc0005fe4>
40006188:	a8bf961e 	bne	r21,r2,40005fe4 <__alt_data_end+0xc0005fe4>
4000618c:	003f9606 	br	40005fe8 <__alt_data_end+0xc0005fe8>
40006190:	04ffffc4 	movi	r19,-1
40006194:	003f9406 	br	40005fe8 <__alt_data_end+0xc0005fe8>
40006198:	100d883a 	mov	r6,r2
4000619c:	003f6106 	br	40005f24 <__alt_data_end+0xc0005f24>
400061a0:	1013883a 	mov	r9,r2
400061a4:	003f7906 	br	40005f8c <__alt_data_end+0xc0005f8c>
400061a8:	19c02636 	bltu	r3,r7,40006244 <__divdf3+0x7fc>
400061ac:	38c04d26 	beq	r7,r3,400062e4 <__divdf3+0x89c>
400061b0:	2027883a 	mov	r19,r4
400061b4:	003f8b06 	br	40005fe4 <__alt_data_end+0xc0005fe4>
400061b8:	e025883a 	mov	r18,fp
400061bc:	003f8a06 	br	40005fe8 <__alt_data_end+0xc0005fe8>
400061c0:	008007c4 	movi	r2,31
400061c4:	14002a16 	blt	r2,r16,40006270 <__divdf3+0x828>
400061c8:	a5010784 	addi	r20,r20,1054
400061cc:	8d04983a 	sll	r2,r17,r20
400061d0:	9c06d83a 	srl	r3,r19,r16
400061d4:	9d28983a 	sll	r20,r19,r20
400061d8:	8c20d83a 	srl	r16,r17,r16
400061dc:	1886b03a 	or	r3,r3,r2
400061e0:	a004c03a 	cmpne	r2,r20,zero
400061e4:	1884b03a 	or	r2,r3,r2
400061e8:	10c001cc 	andi	r3,r2,7
400061ec:	18000726 	beq	r3,zero,4000620c <__divdf3+0x7c4>
400061f0:	110003cc 	andi	r4,r2,15
400061f4:	00c00104 	movi	r3,4
400061f8:	20c00426 	beq	r4,r3,4000620c <__divdf3+0x7c4>
400061fc:	10c00104 	addi	r3,r2,4
40006200:	1885803a 	cmpltu	r2,r3,r2
40006204:	80a1883a 	add	r16,r16,r2
40006208:	1805883a 	mov	r2,r3
4000620c:	80c0202c 	andhi	r3,r16,128
40006210:	18002d26 	beq	r3,zero,400062c8 <__divdf3+0x880>
40006214:	9180004c 	andi	r6,r18,1
40006218:	01000044 	movi	r4,1
4000621c:	000b883a 	mov	r5,zero
40006220:	0027883a 	mov	r19,zero
40006224:	003e6606 	br	40005bc0 <__alt_data_end+0xc0005bc0>
40006228:	354d883a 	add	r6,r6,r21
4000622c:	356d803a 	cmpltu	r22,r6,r21
40006230:	b42d883a 	add	r22,r22,r16
40006234:	b12d883a 	add	r22,r22,r4
40006238:	8c7fff84 	addi	r17,r17,-2
4000623c:	b0c7c83a 	sub	r3,r22,r3
40006240:	003f1d06 	br	40005eb8 <__alt_data_end+0xc0005eb8>
40006244:	ad4b883a 	add	r5,r21,r21
40006248:	2d6b803a 	cmpltu	r21,r5,r21
4000624c:	ac2b883a 	add	r21,r21,r16
40006250:	1d47883a 	add	r3,r3,r21
40006254:	993fff84 	addi	r4,r19,-2
40006258:	282b883a 	mov	r21,r5
4000625c:	003fc806 	br	40006180 <__alt_data_end+0xc0006180>
40006260:	103fc41e 	bne	r2,zero,40006174 <__alt_data_end+0xc0006174>
40006264:	002b883a 	mov	r21,zero
40006268:	a8bf5e1e 	bne	r21,r2,40005fe4 <__alt_data_end+0xc0005fe4>
4000626c:	003f5e06 	br	40005fe8 <__alt_data_end+0xc0005fe8>
40006270:	00bef884 	movi	r2,-1054
40006274:	1505c83a 	sub	r2,r2,r20
40006278:	00c00804 	movi	r3,32
4000627c:	8884d83a 	srl	r2,r17,r2
40006280:	80c01c26 	beq	r16,r3,400062f4 <__divdf3+0x8ac>
40006284:	a0c10f84 	addi	r3,r20,1086
40006288:	88c6983a 	sll	r3,r17,r3
4000628c:	1cc6b03a 	or	r3,r3,r19
40006290:	1806c03a 	cmpne	r3,r3,zero
40006294:	1884b03a 	or	r2,r3,r2
40006298:	140001cc 	andi	r16,r2,7
4000629c:	8000061e 	bne	r16,zero,400062b8 <__divdf3+0x870>
400062a0:	000b883a 	mov	r5,zero
400062a4:	1004d0fa 	srli	r2,r2,3
400062a8:	9180004c 	andi	r6,r18,1
400062ac:	0009883a 	mov	r4,zero
400062b0:	1426b03a 	or	r19,r2,r16
400062b4:	003e4206 	br	40005bc0 <__alt_data_end+0xc0005bc0>
400062b8:	110003cc 	andi	r4,r2,15
400062bc:	00c00104 	movi	r3,4
400062c0:	0021883a 	mov	r16,zero
400062c4:	20ffcd1e 	bne	r4,r3,400061fc <__alt_data_end+0xc00061fc>
400062c8:	800a927a 	slli	r5,r16,9
400062cc:	8020977a 	slli	r16,r16,29
400062d0:	280ad33a 	srli	r5,r5,12
400062d4:	003ff306 	br	400062a4 <__alt_data_end+0xc00062a4>
400062d8:	317fd336 	bltu	r6,r5,40006228 <__alt_data_end+0xc0006228>
400062dc:	1023883a 	mov	r17,r2
400062e0:	003fa206 	br	4000616c <__alt_data_end+0xc000616c>
400062e4:	a8bfd736 	bltu	r21,r2,40006244 <__alt_data_end+0xc0006244>
400062e8:	2027883a 	mov	r19,r4
400062ec:	a8bf3d1e 	bne	r21,r2,40005fe4 <__alt_data_end+0xc0005fe4>
400062f0:	003f3d06 	br	40005fe8 <__alt_data_end+0xc0005fe8>
400062f4:	0007883a 	mov	r3,zero
400062f8:	003fe406 	br	4000628c <__alt_data_end+0xc000628c>
400062fc:	00800434 	movhi	r2,16
40006300:	89400234 	orhi	r5,r17,8
40006304:	10bfffc4 	addi	r2,r2,-1
40006308:	e00d883a 	mov	r6,fp
4000630c:	288a703a 	and	r5,r5,r2
40006310:	003e8506 	br	40005d28 <__alt_data_end+0xc0005d28>

40006314 <__eqdf2>:
40006314:	2804d53a 	srli	r2,r5,20
40006318:	3806d53a 	srli	r3,r7,20
4000631c:	02000434 	movhi	r8,16
40006320:	423fffc4 	addi	r8,r8,-1
40006324:	1081ffcc 	andi	r2,r2,2047
40006328:	0241ffc4 	movi	r9,2047
4000632c:	2a14703a 	and	r10,r5,r8
40006330:	18c1ffcc 	andi	r3,r3,2047
40006334:	3a10703a 	and	r8,r7,r8
40006338:	280ad7fa 	srli	r5,r5,31
4000633c:	380ed7fa 	srli	r7,r7,31
40006340:	12400f26 	beq	r2,r9,40006380 <__eqdf2+0x6c>
40006344:	0241ffc4 	movi	r9,2047
40006348:	1a400326 	beq	r3,r9,40006358 <__eqdf2+0x44>
4000634c:	10c00526 	beq	r2,r3,40006364 <__eqdf2+0x50>
40006350:	00800044 	movi	r2,1
40006354:	f800283a 	ret
40006358:	4192b03a 	or	r9,r8,r6
4000635c:	483ffc1e 	bne	r9,zero,40006350 <__alt_data_end+0xc0006350>
40006360:	10fffb1e 	bne	r2,r3,40006350 <__alt_data_end+0xc0006350>
40006364:	523ffa1e 	bne	r10,r8,40006350 <__alt_data_end+0xc0006350>
40006368:	21bff91e 	bne	r4,r6,40006350 <__alt_data_end+0xc0006350>
4000636c:	29c00826 	beq	r5,r7,40006390 <__eqdf2+0x7c>
40006370:	103ff71e 	bne	r2,zero,40006350 <__alt_data_end+0xc0006350>
40006374:	5104b03a 	or	r2,r10,r4
40006378:	1004c03a 	cmpne	r2,r2,zero
4000637c:	f800283a 	ret
40006380:	5112b03a 	or	r9,r10,r4
40006384:	483fef26 	beq	r9,zero,40006344 <__alt_data_end+0xc0006344>
40006388:	00800044 	movi	r2,1
4000638c:	f800283a 	ret
40006390:	0005883a 	mov	r2,zero
40006394:	f800283a 	ret

40006398 <__gedf2>:
40006398:	2804d53a 	srli	r2,r5,20
4000639c:	3806d53a 	srli	r3,r7,20
400063a0:	02000434 	movhi	r8,16
400063a4:	423fffc4 	addi	r8,r8,-1
400063a8:	0241ffc4 	movi	r9,2047
400063ac:	1081ffcc 	andi	r2,r2,2047
400063b0:	2a14703a 	and	r10,r5,r8
400063b4:	1a46703a 	and	r3,r3,r9
400063b8:	3a10703a 	and	r8,r7,r8
400063bc:	280ad7fa 	srli	r5,r5,31
400063c0:	380ed7fa 	srli	r7,r7,31
400063c4:	12400b26 	beq	r2,r9,400063f4 <__gedf2+0x5c>
400063c8:	1a401626 	beq	r3,r9,40006424 <__gedf2+0x8c>
400063cc:	10000c1e 	bne	r2,zero,40006400 <__gedf2+0x68>
400063d0:	5112b03a 	or	r9,r10,r4
400063d4:	4813003a 	cmpeq	r9,r9,zero
400063d8:	4817883a 	mov	r11,r9
400063dc:	18000c1e 	bne	r3,zero,40006410 <__gedf2+0x78>
400063e0:	4198b03a 	or	r12,r8,r6
400063e4:	60000a1e 	bne	r12,zero,40006410 <__gedf2+0x78>
400063e8:	48001326 	beq	r9,zero,40006438 <__gedf2+0xa0>
400063ec:	0005883a 	mov	r2,zero
400063f0:	f800283a 	ret
400063f4:	5112b03a 	or	r9,r10,r4
400063f8:	4800191e 	bne	r9,zero,40006460 <__gedf2+0xc8>
400063fc:	18800926 	beq	r3,r2,40006424 <__gedf2+0x8c>
40006400:	18000b1e 	bne	r3,zero,40006430 <__gedf2+0x98>
40006404:	4192b03a 	or	r9,r8,r6
40006408:	0017883a 	mov	r11,zero
4000640c:	48000a26 	beq	r9,zero,40006438 <__gedf2+0xa0>
40006410:	39c03fcc 	andi	r7,r7,255
40006414:	58000726 	beq	r11,zero,40006434 <__gedf2+0x9c>
40006418:	3800081e 	bne	r7,zero,4000643c <__gedf2+0xa4>
4000641c:	00bfffc4 	movi	r2,-1
40006420:	f800283a 	ret
40006424:	4192b03a 	or	r9,r8,r6
40006428:	48000d1e 	bne	r9,zero,40006460 <__gedf2+0xc8>
4000642c:	103fe826 	beq	r2,zero,400063d0 <__alt_data_end+0xc00063d0>
40006430:	39c03fcc 	andi	r7,r7,255
40006434:	29c00326 	beq	r5,r7,40006444 <__gedf2+0xac>
40006438:	283ff81e 	bne	r5,zero,4000641c <__alt_data_end+0xc000641c>
4000643c:	00800044 	movi	r2,1
40006440:	f800283a 	ret
40006444:	18bffc16 	blt	r3,r2,40006438 <__alt_data_end+0xc0006438>
40006448:	10c00316 	blt	r2,r3,40006458 <__gedf2+0xc0>
4000644c:	42bffa36 	bltu	r8,r10,40006438 <__alt_data_end+0xc0006438>
40006450:	52000526 	beq	r10,r8,40006468 <__gedf2+0xd0>
40006454:	523fe52e 	bgeu	r10,r8,400063ec <__alt_data_end+0xc00063ec>
40006458:	283ff026 	beq	r5,zero,4000641c <__alt_data_end+0xc000641c>
4000645c:	003ff706 	br	4000643c <__alt_data_end+0xc000643c>
40006460:	00bfff84 	movi	r2,-2
40006464:	f800283a 	ret
40006468:	313ff336 	bltu	r6,r4,40006438 <__alt_data_end+0xc0006438>
4000646c:	21bfdf2e 	bgeu	r4,r6,400063ec <__alt_data_end+0xc00063ec>
40006470:	283fea26 	beq	r5,zero,4000641c <__alt_data_end+0xc000641c>
40006474:	003ff106 	br	4000643c <__alt_data_end+0xc000643c>

40006478 <__ledf2>:
40006478:	2804d53a 	srli	r2,r5,20
4000647c:	3810d53a 	srli	r8,r7,20
40006480:	00c00434 	movhi	r3,16
40006484:	18ffffc4 	addi	r3,r3,-1
40006488:	0241ffc4 	movi	r9,2047
4000648c:	1081ffcc 	andi	r2,r2,2047
40006490:	28d4703a 	and	r10,r5,r3
40006494:	4250703a 	and	r8,r8,r9
40006498:	38c6703a 	and	r3,r7,r3
4000649c:	280ad7fa 	srli	r5,r5,31
400064a0:	380ed7fa 	srli	r7,r7,31
400064a4:	12400b26 	beq	r2,r9,400064d4 <__ledf2+0x5c>
400064a8:	42401926 	beq	r8,r9,40006510 <__ledf2+0x98>
400064ac:	10000c1e 	bne	r2,zero,400064e0 <__ledf2+0x68>
400064b0:	5112b03a 	or	r9,r10,r4
400064b4:	4813003a 	cmpeq	r9,r9,zero
400064b8:	4817883a 	mov	r11,r9
400064bc:	40000f26 	beq	r8,zero,400064fc <__ledf2+0x84>
400064c0:	39c03fcc 	andi	r7,r7,255
400064c4:	58001826 	beq	r11,zero,40006528 <__ledf2+0xb0>
400064c8:	38000a1e 	bne	r7,zero,400064f4 <__ledf2+0x7c>
400064cc:	00bfffc4 	movi	r2,-1
400064d0:	f800283a 	ret
400064d4:	5112b03a 	or	r9,r10,r4
400064d8:	48000f1e 	bne	r9,zero,40006518 <__ledf2+0xa0>
400064dc:	40800c26 	beq	r8,r2,40006510 <__ledf2+0x98>
400064e0:	4000101e 	bne	r8,zero,40006524 <__ledf2+0xac>
400064e4:	1992b03a 	or	r9,r3,r6
400064e8:	0017883a 	mov	r11,zero
400064ec:	483ff41e 	bne	r9,zero,400064c0 <__alt_data_end+0xc00064c0>
400064f0:	283ff61e 	bne	r5,zero,400064cc <__alt_data_end+0xc00064cc>
400064f4:	00800044 	movi	r2,1
400064f8:	f800283a 	ret
400064fc:	1998b03a 	or	r12,r3,r6
40006500:	603fef1e 	bne	r12,zero,400064c0 <__alt_data_end+0xc00064c0>
40006504:	483ffa26 	beq	r9,zero,400064f0 <__alt_data_end+0xc00064f0>
40006508:	0005883a 	mov	r2,zero
4000650c:	f800283a 	ret
40006510:	1992b03a 	or	r9,r3,r6
40006514:	48000226 	beq	r9,zero,40006520 <__ledf2+0xa8>
40006518:	00800084 	movi	r2,2
4000651c:	f800283a 	ret
40006520:	103fe326 	beq	r2,zero,400064b0 <__alt_data_end+0xc00064b0>
40006524:	39c03fcc 	andi	r7,r7,255
40006528:	29fff11e 	bne	r5,r7,400064f0 <__alt_data_end+0xc00064f0>
4000652c:	40bff016 	blt	r8,r2,400064f0 <__alt_data_end+0xc00064f0>
40006530:	12000316 	blt	r2,r8,40006540 <__ledf2+0xc8>
40006534:	1abfee36 	bltu	r3,r10,400064f0 <__alt_data_end+0xc00064f0>
40006538:	50c00326 	beq	r10,r3,40006548 <__ledf2+0xd0>
4000653c:	50fff22e 	bgeu	r10,r3,40006508 <__alt_data_end+0xc0006508>
40006540:	283fe226 	beq	r5,zero,400064cc <__alt_data_end+0xc00064cc>
40006544:	003feb06 	br	400064f4 <__alt_data_end+0xc00064f4>
40006548:	313fe936 	bltu	r6,r4,400064f0 <__alt_data_end+0xc00064f0>
4000654c:	21bfee2e 	bgeu	r4,r6,40006508 <__alt_data_end+0xc0006508>
40006550:	283fde26 	beq	r5,zero,400064cc <__alt_data_end+0xc00064cc>
40006554:	003fe706 	br	400064f4 <__alt_data_end+0xc00064f4>

40006558 <__muldf3>:
40006558:	defff204 	addi	sp,sp,-56
4000655c:	2804d53a 	srli	r2,r5,20
40006560:	dd800a15 	stw	r22,40(sp)
40006564:	282cd7fa 	srli	r22,r5,31
40006568:	dc000415 	stw	r16,16(sp)
4000656c:	04000434 	movhi	r16,16
40006570:	df000c15 	stw	fp,48(sp)
40006574:	dd000815 	stw	r20,32(sp)
40006578:	dcc00715 	stw	r19,28(sp)
4000657c:	dc800615 	stw	r18,24(sp)
40006580:	dc400515 	stw	r17,20(sp)
40006584:	843fffc4 	addi	r16,r16,-1
40006588:	dfc00d15 	stw	ra,52(sp)
4000658c:	ddc00b15 	stw	r23,44(sp)
40006590:	dd400915 	stw	r21,36(sp)
40006594:	1501ffcc 	andi	r20,r2,2047
40006598:	2023883a 	mov	r17,r4
4000659c:	2025883a 	mov	r18,r4
400065a0:	2c20703a 	and	r16,r5,r16
400065a4:	b027883a 	mov	r19,r22
400065a8:	b7003fcc 	andi	fp,r22,255
400065ac:	a0005926 	beq	r20,zero,40006714 <__muldf3+0x1bc>
400065b0:	0081ffc4 	movi	r2,2047
400065b4:	a0803426 	beq	r20,r2,40006688 <__muldf3+0x130>
400065b8:	84000434 	orhi	r16,r16,16
400065bc:	2004d77a 	srli	r2,r4,29
400065c0:	802090fa 	slli	r16,r16,3
400065c4:	202490fa 	slli	r18,r4,3
400065c8:	a53f0044 	addi	r20,r20,-1023
400065cc:	80a0b03a 	or	r16,r16,r2
400065d0:	002b883a 	mov	r21,zero
400065d4:	0015883a 	mov	r10,zero
400065d8:	3812d53a 	srli	r9,r7,20
400065dc:	3806d7fa 	srli	r3,r7,31
400065e0:	02000434 	movhi	r8,16
400065e4:	423fffc4 	addi	r8,r8,-1
400065e8:	4941ffcc 	andi	r5,r9,2047
400065ec:	302f883a 	mov	r23,r6
400065f0:	3a22703a 	and	r17,r7,r8
400065f4:	1ac03fcc 	andi	r11,r3,255
400065f8:	28006226 	beq	r5,zero,40006784 <__muldf3+0x22c>
400065fc:	0081ffc4 	movi	r2,2047
40006600:	28805a26 	beq	r5,r2,4000676c <__muldf3+0x214>
40006604:	8a000434 	orhi	r8,r17,16
40006608:	3004d77a 	srli	r2,r6,29
4000660c:	401090fa 	slli	r8,r8,3
40006610:	302e90fa 	slli	r23,r6,3
40006614:	297f0044 	addi	r5,r5,-1023
40006618:	40a2b03a 	or	r17,r8,r2
4000661c:	0013883a 	mov	r9,zero
40006620:	4d4cb03a 	or	r6,r9,r21
40006624:	300c90ba 	slli	r6,r6,2
40006628:	02100034 	movhi	r8,16384
4000662c:	42199204 	addi	r8,r8,26184
40006630:	320d883a 	add	r6,r6,r8
40006634:	31800017 	ldw	r6,0(r6)
40006638:	a14b883a 	add	r5,r20,r5
4000663c:	1dacf03a 	xor	r22,r3,r22
40006640:	2b000044 	addi	r12,r5,1
40006644:	3000683a 	jmp	r6
40006648:	40006884 	addi	zero,r8,418
4000664c:	40006870 	cmpltui	zero,r8,417
40006650:	40006870 	cmpltui	zero,r8,417
40006654:	4000685c 	xori	zero,r8,417
40006658:	400066a4 	muli	zero,r8,410
4000665c:	400066a4 	muli	zero,r8,410
40006660:	40006844 	addi	zero,r8,417
40006664:	4000685c 	xori	zero,r8,417
40006668:	400066a4 	muli	zero,r8,410
4000666c:	40006844 	addi	zero,r8,417
40006670:	400066a4 	muli	zero,r8,410
40006674:	4000685c 	xori	zero,r8,417
40006678:	400066a8 	cmpgeui	zero,r8,410
4000667c:	400066a8 	cmpgeui	zero,r8,410
40006680:	400066a8 	cmpgeui	zero,r8,410
40006684:	40006a80 	call	440006a8 <__alt_heap_start+0x3f9c3dc>
40006688:	8104b03a 	or	r2,r16,r4
4000668c:	10006a1e 	bne	r2,zero,40006838 <__muldf3+0x2e0>
40006690:	05400204 	movi	r21,8
40006694:	0021883a 	mov	r16,zero
40006698:	0025883a 	mov	r18,zero
4000669c:	02800084 	movi	r10,2
400066a0:	003fcd06 	br	400065d8 <__alt_data_end+0xc00065d8>
400066a4:	b039883a 	mov	fp,r22
400066a8:	00800084 	movi	r2,2
400066ac:	50804e1e 	bne	r10,r2,400067e8 <__muldf3+0x290>
400066b0:	e4c0004c 	andi	r19,fp,1
400066b4:	0101ffc4 	movi	r4,2047
400066b8:	0021883a 	mov	r16,zero
400066bc:	0025883a 	mov	r18,zero
400066c0:	2008953a 	slli	r4,r4,20
400066c4:	98c03fcc 	andi	r3,r19,255
400066c8:	01400434 	movhi	r5,16
400066cc:	297fffc4 	addi	r5,r5,-1
400066d0:	180697fa 	slli	r3,r3,31
400066d4:	8160703a 	and	r16,r16,r5
400066d8:	8120b03a 	or	r16,r16,r4
400066dc:	80c6b03a 	or	r3,r16,r3
400066e0:	9005883a 	mov	r2,r18
400066e4:	dfc00d17 	ldw	ra,52(sp)
400066e8:	df000c17 	ldw	fp,48(sp)
400066ec:	ddc00b17 	ldw	r23,44(sp)
400066f0:	dd800a17 	ldw	r22,40(sp)
400066f4:	dd400917 	ldw	r21,36(sp)
400066f8:	dd000817 	ldw	r20,32(sp)
400066fc:	dcc00717 	ldw	r19,28(sp)
40006700:	dc800617 	ldw	r18,24(sp)
40006704:	dc400517 	ldw	r17,20(sp)
40006708:	dc000417 	ldw	r16,16(sp)
4000670c:	dec00e04 	addi	sp,sp,56
40006710:	f800283a 	ret
40006714:	8104b03a 	or	r2,r16,r4
40006718:	10004226 	beq	r2,zero,40006824 <__muldf3+0x2cc>
4000671c:	8000f926 	beq	r16,zero,40006b04 <__muldf3+0x5ac>
40006720:	8009883a 	mov	r4,r16
40006724:	d9800315 	stw	r6,12(sp)
40006728:	d9c00015 	stw	r7,0(sp)
4000672c:	0007e6c0 	call	40007e6c <__clzsi2>
40006730:	d9800317 	ldw	r6,12(sp)
40006734:	d9c00017 	ldw	r7,0(sp)
40006738:	1007883a 	mov	r3,r2
4000673c:	01000a04 	movi	r4,40
40006740:	18bffe04 	addi	r2,r3,-8
40006744:	20c9c83a 	sub	r4,r4,r3
40006748:	80a0983a 	sll	r16,r16,r2
4000674c:	8908d83a 	srl	r4,r17,r4
40006750:	88a4983a 	sll	r18,r17,r2
40006754:	2420b03a 	or	r16,r4,r16
40006758:	017f0344 	movi	r5,-1011
4000675c:	28e9c83a 	sub	r20,r5,r3
40006760:	002b883a 	mov	r21,zero
40006764:	0015883a 	mov	r10,zero
40006768:	003f9b06 	br	400065d8 <__alt_data_end+0xc00065d8>
4000676c:	8984b03a 	or	r2,r17,r6
40006770:	10002a1e 	bne	r2,zero,4000681c <__muldf3+0x2c4>
40006774:	0023883a 	mov	r17,zero
40006778:	002f883a 	mov	r23,zero
4000677c:	02400084 	movi	r9,2
40006780:	003fa706 	br	40006620 <__alt_data_end+0xc0006620>
40006784:	8984b03a 	or	r2,r17,r6
40006788:	10002026 	beq	r2,zero,4000680c <__muldf3+0x2b4>
4000678c:	8800cc26 	beq	r17,zero,40006ac0 <__muldf3+0x568>
40006790:	8809883a 	mov	r4,r17
40006794:	d8c00215 	stw	r3,8(sp)
40006798:	d9800315 	stw	r6,12(sp)
4000679c:	da800015 	stw	r10,0(sp)
400067a0:	dac00115 	stw	r11,4(sp)
400067a4:	0007e6c0 	call	40007e6c <__clzsi2>
400067a8:	d8c00217 	ldw	r3,8(sp)
400067ac:	d9800317 	ldw	r6,12(sp)
400067b0:	da800017 	ldw	r10,0(sp)
400067b4:	dac00117 	ldw	r11,4(sp)
400067b8:	1009883a 	mov	r4,r2
400067bc:	01400a04 	movi	r5,40
400067c0:	25fffe04 	addi	r23,r4,-8
400067c4:	290bc83a 	sub	r5,r5,r4
400067c8:	8dd0983a 	sll	r8,r17,r23
400067cc:	314ad83a 	srl	r5,r6,r5
400067d0:	35ee983a 	sll	r23,r6,r23
400067d4:	2a22b03a 	or	r17,r5,r8
400067d8:	017f0344 	movi	r5,-1011
400067dc:	290bc83a 	sub	r5,r5,r4
400067e0:	0013883a 	mov	r9,zero
400067e4:	003f8e06 	br	40006620 <__alt_data_end+0xc0006620>
400067e8:	008000c4 	movi	r2,3
400067ec:	50811d26 	beq	r10,r2,40006c64 <__muldf3+0x70c>
400067f0:	00800044 	movi	r2,1
400067f4:	5080e01e 	bne	r10,r2,40006b78 <__muldf3+0x620>
400067f8:	e0a6703a 	and	r19,fp,r2
400067fc:	0009883a 	mov	r4,zero
40006800:	0021883a 	mov	r16,zero
40006804:	0025883a 	mov	r18,zero
40006808:	003fad06 	br	400066c0 <__alt_data_end+0xc00066c0>
4000680c:	0023883a 	mov	r17,zero
40006810:	002f883a 	mov	r23,zero
40006814:	02400044 	movi	r9,1
40006818:	003f8106 	br	40006620 <__alt_data_end+0xc0006620>
4000681c:	024000c4 	movi	r9,3
40006820:	003f7f06 	br	40006620 <__alt_data_end+0xc0006620>
40006824:	05400104 	movi	r21,4
40006828:	0021883a 	mov	r16,zero
4000682c:	0025883a 	mov	r18,zero
40006830:	02800044 	movi	r10,1
40006834:	003f6806 	br	400065d8 <__alt_data_end+0xc00065d8>
40006838:	05400304 	movi	r21,12
4000683c:	028000c4 	movi	r10,3
40006840:	003f6506 	br	400065d8 <__alt_data_end+0xc00065d8>
40006844:	04000434 	movhi	r16,16
40006848:	0027883a 	mov	r19,zero
4000684c:	843fffc4 	addi	r16,r16,-1
40006850:	04bfffc4 	movi	r18,-1
40006854:	0101ffc4 	movi	r4,2047
40006858:	003f9906 	br	400066c0 <__alt_data_end+0xc00066c0>
4000685c:	8821883a 	mov	r16,r17
40006860:	b825883a 	mov	r18,r23
40006864:	5839883a 	mov	fp,r11
40006868:	4815883a 	mov	r10,r9
4000686c:	003f8e06 	br	400066a8 <__alt_data_end+0xc00066a8>
40006870:	8821883a 	mov	r16,r17
40006874:	b825883a 	mov	r18,r23
40006878:	b039883a 	mov	fp,r22
4000687c:	4815883a 	mov	r10,r9
40006880:	003f8906 	br	400066a8 <__alt_data_end+0xc00066a8>
40006884:	b80cd43a 	srli	r6,r23,16
40006888:	9006d43a 	srli	r3,r18,16
4000688c:	90bfffcc 	andi	r2,r18,65535
40006890:	bdffffcc 	andi	r23,r23,65535
40006894:	b891383a 	mul	r8,r23,r2
40006898:	b8c9383a 	mul	r4,r23,r3
4000689c:	309b383a 	mul	r13,r6,r2
400068a0:	400ed43a 	srli	r7,r8,16
400068a4:	30df383a 	mul	r15,r6,r3
400068a8:	235b883a 	add	r13,r4,r13
400068ac:	69db883a 	add	r13,r13,r7
400068b0:	6900022e 	bgeu	r13,r4,400068bc <__muldf3+0x364>
400068b4:	01000074 	movhi	r4,1
400068b8:	791f883a 	add	r15,r15,r4
400068bc:	8828d43a 	srli	r20,r17,16
400068c0:	8c7fffcc 	andi	r17,r17,65535
400068c4:	888f383a 	mul	r7,r17,r2
400068c8:	88d3383a 	mul	r9,r17,r3
400068cc:	a0a5383a 	mul	r18,r20,r2
400068d0:	3816d43a 	srli	r11,r7,16
400068d4:	6814943a 	slli	r10,r13,16
400068d8:	4ca5883a 	add	r18,r9,r18
400068dc:	423fffcc 	andi	r8,r8,65535
400068e0:	92e5883a 	add	r18,r18,r11
400068e4:	6808d43a 	srli	r4,r13,16
400068e8:	5215883a 	add	r10,r10,r8
400068ec:	a0c7383a 	mul	r3,r20,r3
400068f0:	9240022e 	bgeu	r18,r9,400068fc <__muldf3+0x3a4>
400068f4:	00800074 	movhi	r2,1
400068f8:	1887883a 	add	r3,r3,r2
400068fc:	802ad43a 	srli	r21,r16,16
40006900:	80bfffcc 	andi	r2,r16,65535
40006904:	b893383a 	mul	r9,r23,r2
40006908:	3091383a 	mul	r8,r6,r2
4000690c:	bd6f383a 	mul	r23,r23,r21
40006910:	9026943a 	slli	r19,r18,16
40006914:	481ad43a 	srli	r13,r9,16
40006918:	9024d43a 	srli	r18,r18,16
4000691c:	39ffffcc 	andi	r7,r7,65535
40006920:	ba11883a 	add	r8,r23,r8
40006924:	99e7883a 	add	r19,r19,r7
40006928:	4351883a 	add	r8,r8,r13
4000692c:	1c97883a 	add	r11,r3,r18
40006930:	354d383a 	mul	r6,r6,r21
40006934:	9925883a 	add	r18,r19,r4
40006938:	45c0022e 	bgeu	r8,r23,40006944 <__muldf3+0x3ec>
4000693c:	00c00074 	movhi	r3,1
40006940:	30cd883a 	add	r6,r6,r3
40006944:	8889383a 	mul	r4,r17,r2
40006948:	8d63383a 	mul	r17,r17,r21
4000694c:	a085383a 	mul	r2,r20,r2
40006950:	200ed43a 	srli	r7,r4,16
40006954:	401cd43a 	srli	r14,r8,16
40006958:	401a943a 	slli	r13,r8,16
4000695c:	8885883a 	add	r2,r17,r2
40006960:	4a3fffcc 	andi	r8,r9,65535
40006964:	11c5883a 	add	r2,r2,r7
40006968:	339d883a 	add	r14,r6,r14
4000696c:	6a11883a 	add	r8,r13,r8
40006970:	a561383a 	mul	r16,r20,r21
40006974:	1440022e 	bgeu	r2,r17,40006980 <__muldf3+0x428>
40006978:	00c00074 	movhi	r3,1
4000697c:	80e1883a 	add	r16,r16,r3
40006980:	1006943a 	slli	r3,r2,16
40006984:	213fffcc 	andi	r4,r4,65535
40006988:	93db883a 	add	r13,r18,r15
4000698c:	1909883a 	add	r4,r3,r4
40006990:	22c7883a 	add	r3,r4,r11
40006994:	6cd3803a 	cmpltu	r9,r13,r19
40006998:	6a09883a 	add	r4,r13,r8
4000699c:	1a5b883a 	add	r13,r3,r9
400069a0:	2211803a 	cmpltu	r8,r4,r8
400069a4:	734d883a 	add	r6,r14,r13
400069a8:	100ed43a 	srli	r7,r2,16
400069ac:	6a53803a 	cmpltu	r9,r13,r9
400069b0:	3205883a 	add	r2,r6,r8
400069b4:	1ac7803a 	cmpltu	r3,r3,r11
400069b8:	1211803a 	cmpltu	r8,r2,r8
400069bc:	48c6b03a 	or	r3,r9,r3
400069c0:	338d803a 	cmpltu	r6,r6,r14
400069c4:	19c7883a 	add	r3,r3,r7
400069c8:	418cb03a 	or	r6,r8,r6
400069cc:	1987883a 	add	r3,r3,r6
400069d0:	2024927a 	slli	r18,r4,9
400069d4:	1c07883a 	add	r3,r3,r16
400069d8:	1806927a 	slli	r3,r3,9
400069dc:	1020d5fa 	srli	r16,r2,23
400069e0:	2008d5fa 	srli	r4,r4,23
400069e4:	9294b03a 	or	r10,r18,r10
400069e8:	1004927a 	slli	r2,r2,9
400069ec:	5024c03a 	cmpne	r18,r10,zero
400069f0:	1c20b03a 	or	r16,r3,r16
400069f4:	9108b03a 	or	r4,r18,r4
400069f8:	80c0402c 	andhi	r3,r16,256
400069fc:	20a4b03a 	or	r18,r4,r2
40006a00:	18000726 	beq	r3,zero,40006a20 <__muldf3+0x4c8>
40006a04:	9006d07a 	srli	r3,r18,1
40006a08:	800897fa 	slli	r4,r16,31
40006a0c:	9080004c 	andi	r2,r18,1
40006a10:	8020d07a 	srli	r16,r16,1
40006a14:	10c4b03a 	or	r2,r2,r3
40006a18:	1124b03a 	or	r18,r2,r4
40006a1c:	600b883a 	mov	r5,r12
40006a20:	2900ffc4 	addi	r4,r5,1023
40006a24:	01004b0e 	bge	zero,r4,40006b54 <__muldf3+0x5fc>
40006a28:	908001cc 	andi	r2,r18,7
40006a2c:	10000726 	beq	r2,zero,40006a4c <__muldf3+0x4f4>
40006a30:	90c003cc 	andi	r3,r18,15
40006a34:	00800104 	movi	r2,4
40006a38:	18800426 	beq	r3,r2,40006a4c <__muldf3+0x4f4>
40006a3c:	9087883a 	add	r3,r18,r2
40006a40:	1c85803a 	cmpltu	r2,r3,r18
40006a44:	80a1883a 	add	r16,r16,r2
40006a48:	1825883a 	mov	r18,r3
40006a4c:	8080402c 	andhi	r2,r16,256
40006a50:	10000426 	beq	r2,zero,40006a64 <__muldf3+0x50c>
40006a54:	00bfc034 	movhi	r2,65280
40006a58:	10bfffc4 	addi	r2,r2,-1
40006a5c:	29010004 	addi	r4,r5,1024
40006a60:	80a0703a 	and	r16,r16,r2
40006a64:	0081ff84 	movi	r2,2046
40006a68:	1100320e 	bge	r2,r4,40006b34 <__muldf3+0x5dc>
40006a6c:	b4c0004c 	andi	r19,r22,1
40006a70:	0101ffc4 	movi	r4,2047
40006a74:	0021883a 	mov	r16,zero
40006a78:	0025883a 	mov	r18,zero
40006a7c:	003f1006 	br	400066c0 <__alt_data_end+0xc00066c0>
40006a80:	8080022c 	andhi	r2,r16,8
40006a84:	10000926 	beq	r2,zero,40006aac <__muldf3+0x554>
40006a88:	8880022c 	andhi	r2,r17,8
40006a8c:	1000071e 	bne	r2,zero,40006aac <__muldf3+0x554>
40006a90:	00800434 	movhi	r2,16
40006a94:	8c000234 	orhi	r16,r17,8
40006a98:	10bfffc4 	addi	r2,r2,-1
40006a9c:	1827883a 	mov	r19,r3
40006aa0:	80a0703a 	and	r16,r16,r2
40006aa4:	b825883a 	mov	r18,r23
40006aa8:	003f6a06 	br	40006854 <__alt_data_end+0xc0006854>
40006aac:	00800434 	movhi	r2,16
40006ab0:	84000234 	orhi	r16,r16,8
40006ab4:	10bfffc4 	addi	r2,r2,-1
40006ab8:	80a0703a 	and	r16,r16,r2
40006abc:	003f6506 	br	40006854 <__alt_data_end+0xc0006854>
40006ac0:	3009883a 	mov	r4,r6
40006ac4:	d8c00215 	stw	r3,8(sp)
40006ac8:	d9800315 	stw	r6,12(sp)
40006acc:	da800015 	stw	r10,0(sp)
40006ad0:	dac00115 	stw	r11,4(sp)
40006ad4:	0007e6c0 	call	40007e6c <__clzsi2>
40006ad8:	11000804 	addi	r4,r2,32
40006adc:	014009c4 	movi	r5,39
40006ae0:	d8c00217 	ldw	r3,8(sp)
40006ae4:	d9800317 	ldw	r6,12(sp)
40006ae8:	da800017 	ldw	r10,0(sp)
40006aec:	dac00117 	ldw	r11,4(sp)
40006af0:	293f320e 	bge	r5,r4,400067bc <__alt_data_end+0xc00067bc>
40006af4:	10bffe04 	addi	r2,r2,-8
40006af8:	b8a2983a 	sll	r17,r23,r2
40006afc:	002f883a 	mov	r23,zero
40006b00:	003f3506 	br	400067d8 <__alt_data_end+0xc00067d8>
40006b04:	d9800315 	stw	r6,12(sp)
40006b08:	d9c00015 	stw	r7,0(sp)
40006b0c:	0007e6c0 	call	40007e6c <__clzsi2>
40006b10:	10c00804 	addi	r3,r2,32
40006b14:	010009c4 	movi	r4,39
40006b18:	d9800317 	ldw	r6,12(sp)
40006b1c:	d9c00017 	ldw	r7,0(sp)
40006b20:	20ff060e 	bge	r4,r3,4000673c <__alt_data_end+0xc000673c>
40006b24:	10bffe04 	addi	r2,r2,-8
40006b28:	88a0983a 	sll	r16,r17,r2
40006b2c:	0025883a 	mov	r18,zero
40006b30:	003f0906 	br	40006758 <__alt_data_end+0xc0006758>
40006b34:	9004d0fa 	srli	r2,r18,3
40006b38:	8024977a 	slli	r18,r16,29
40006b3c:	8020927a 	slli	r16,r16,9
40006b40:	2101ffcc 	andi	r4,r4,2047
40006b44:	90a4b03a 	or	r18,r18,r2
40006b48:	8020d33a 	srli	r16,r16,12
40006b4c:	b4c0004c 	andi	r19,r22,1
40006b50:	003edb06 	br	400066c0 <__alt_data_end+0xc00066c0>
40006b54:	00ff0084 	movi	r3,-1022
40006b58:	1947c83a 	sub	r3,r3,r5
40006b5c:	00800e04 	movi	r2,56
40006b60:	10c0080e 	bge	r2,r3,40006b84 <__muldf3+0x62c>
40006b64:	b4c0004c 	andi	r19,r22,1
40006b68:	0009883a 	mov	r4,zero
40006b6c:	0021883a 	mov	r16,zero
40006b70:	0025883a 	mov	r18,zero
40006b74:	003ed206 	br	400066c0 <__alt_data_end+0xc00066c0>
40006b78:	600b883a 	mov	r5,r12
40006b7c:	e02d883a 	mov	r22,fp
40006b80:	003fa706 	br	40006a20 <__alt_data_end+0xc0006a20>
40006b84:	008007c4 	movi	r2,31
40006b88:	10c01816 	blt	r2,r3,40006bec <__muldf3+0x694>
40006b8c:	29410784 	addi	r5,r5,1054
40006b90:	8144983a 	sll	r2,r16,r5
40006b94:	90c8d83a 	srl	r4,r18,r3
40006b98:	914a983a 	sll	r5,r18,r5
40006b9c:	80c6d83a 	srl	r3,r16,r3
40006ba0:	2088b03a 	or	r4,r4,r2
40006ba4:	2804c03a 	cmpne	r2,r5,zero
40006ba8:	2084b03a 	or	r2,r4,r2
40006bac:	110001cc 	andi	r4,r2,7
40006bb0:	20000726 	beq	r4,zero,40006bd0 <__muldf3+0x678>
40006bb4:	114003cc 	andi	r5,r2,15
40006bb8:	01000104 	movi	r4,4
40006bbc:	29000426 	beq	r5,r4,40006bd0 <__muldf3+0x678>
40006bc0:	11000104 	addi	r4,r2,4
40006bc4:	2085803a 	cmpltu	r2,r4,r2
40006bc8:	1887883a 	add	r3,r3,r2
40006bcc:	2005883a 	mov	r2,r4
40006bd0:	1900202c 	andhi	r4,r3,128
40006bd4:	20001826 	beq	r4,zero,40006c38 <__muldf3+0x6e0>
40006bd8:	b4c0004c 	andi	r19,r22,1
40006bdc:	01000044 	movi	r4,1
40006be0:	0021883a 	mov	r16,zero
40006be4:	0025883a 	mov	r18,zero
40006be8:	003eb506 	br	400066c0 <__alt_data_end+0xc00066c0>
40006bec:	00bef884 	movi	r2,-1054
40006bf0:	1145c83a 	sub	r2,r2,r5
40006bf4:	8088d83a 	srl	r4,r16,r2
40006bf8:	00800804 	movi	r2,32
40006bfc:	18801726 	beq	r3,r2,40006c5c <__muldf3+0x704>
40006c00:	28810f84 	addi	r2,r5,1086
40006c04:	8084983a 	sll	r2,r16,r2
40006c08:	1484b03a 	or	r2,r2,r18
40006c0c:	1004c03a 	cmpne	r2,r2,zero
40006c10:	1104b03a 	or	r2,r2,r4
40006c14:	10c001cc 	andi	r3,r2,7
40006c18:	18000b1e 	bne	r3,zero,40006c48 <__muldf3+0x6f0>
40006c1c:	0021883a 	mov	r16,zero
40006c20:	1004d0fa 	srli	r2,r2,3
40006c24:	b4c0004c 	andi	r19,r22,1
40006c28:	0009883a 	mov	r4,zero
40006c2c:	10e4b03a 	or	r18,r2,r3
40006c30:	003ea306 	br	400066c0 <__alt_data_end+0xc00066c0>
40006c34:	0007883a 	mov	r3,zero
40006c38:	1820927a 	slli	r16,r3,9
40006c3c:	1806977a 	slli	r3,r3,29
40006c40:	8020d33a 	srli	r16,r16,12
40006c44:	003ff606 	br	40006c20 <__alt_data_end+0xc0006c20>
40006c48:	110003cc 	andi	r4,r2,15
40006c4c:	00c00104 	movi	r3,4
40006c50:	20fff826 	beq	r4,r3,40006c34 <__alt_data_end+0xc0006c34>
40006c54:	0007883a 	mov	r3,zero
40006c58:	003fd906 	br	40006bc0 <__alt_data_end+0xc0006bc0>
40006c5c:	0005883a 	mov	r2,zero
40006c60:	003fe906 	br	40006c08 <__alt_data_end+0xc0006c08>
40006c64:	00800434 	movhi	r2,16
40006c68:	84000234 	orhi	r16,r16,8
40006c6c:	10bfffc4 	addi	r2,r2,-1
40006c70:	e4c0004c 	andi	r19,fp,1
40006c74:	80a0703a 	and	r16,r16,r2
40006c78:	003ef606 	br	40006854 <__alt_data_end+0xc0006854>

40006c7c <__subdf3>:
40006c7c:	00c00434 	movhi	r3,16
40006c80:	18ffffc4 	addi	r3,r3,-1
40006c84:	defffb04 	addi	sp,sp,-20
40006c88:	28d2703a 	and	r9,r5,r3
40006c8c:	3814d53a 	srli	r10,r7,20
40006c90:	38c6703a 	and	r3,r7,r3
40006c94:	3004d77a 	srli	r2,r6,29
40006c98:	dc800215 	stw	r18,8(sp)
40006c9c:	dc000015 	stw	r16,0(sp)
40006ca0:	2824d7fa 	srli	r18,r5,31
40006ca4:	2820d53a 	srli	r16,r5,20
40006ca8:	481290fa 	slli	r9,r9,3
40006cac:	200ad77a 	srli	r5,r4,29
40006cb0:	180690fa 	slli	r3,r3,3
40006cb4:	dc400115 	stw	r17,4(sp)
40006cb8:	dfc00415 	stw	ra,16(sp)
40006cbc:	202290fa 	slli	r17,r4,3
40006cc0:	dcc00315 	stw	r19,12(sp)
40006cc4:	5281ffcc 	andi	r10,r10,2047
40006cc8:	0101ffc4 	movi	r4,2047
40006ccc:	9011883a 	mov	r8,r18
40006cd0:	8401ffcc 	andi	r16,r16,2047
40006cd4:	94803fcc 	andi	r18,r18,255
40006cd8:	494ab03a 	or	r5,r9,r5
40006cdc:	380ed7fa 	srli	r7,r7,31
40006ce0:	1886b03a 	or	r3,r3,r2
40006ce4:	300c90fa 	slli	r6,r6,3
40006ce8:	51009026 	beq	r10,r4,40006f2c <__subdf3+0x2b0>
40006cec:	39c0005c 	xori	r7,r7,1
40006cf0:	8285c83a 	sub	r2,r16,r10
40006cf4:	91c06f26 	beq	r18,r7,40006eb4 <__subdf3+0x238>
40006cf8:	0080b10e 	bge	zero,r2,40006fc0 <__subdf3+0x344>
40006cfc:	50002a1e 	bne	r10,zero,40006da8 <__subdf3+0x12c>
40006d00:	1988b03a 	or	r4,r3,r6
40006d04:	2000941e 	bne	r4,zero,40006f58 <__subdf3+0x2dc>
40006d08:	888001cc 	andi	r2,r17,7
40006d0c:	10005b26 	beq	r2,zero,40006e7c <__subdf3+0x200>
40006d10:	88c003cc 	andi	r3,r17,15
40006d14:	00800104 	movi	r2,4
40006d18:	18805826 	beq	r3,r2,40006e7c <__subdf3+0x200>
40006d1c:	88c00104 	addi	r3,r17,4
40006d20:	1c63803a 	cmpltu	r17,r3,r17
40006d24:	2c4b883a 	add	r5,r5,r17
40006d28:	2880202c 	andhi	r2,r5,128
40006d2c:	9200004c 	andi	r8,r18,1
40006d30:	1823883a 	mov	r17,r3
40006d34:	10005426 	beq	r2,zero,40006e88 <__subdf3+0x20c>
40006d38:	84000044 	addi	r16,r16,1
40006d3c:	0081ffc4 	movi	r2,2047
40006d40:	8080bf26 	beq	r16,r2,40007040 <__subdf3+0x3c4>
40006d44:	013fe034 	movhi	r4,65408
40006d48:	213fffc4 	addi	r4,r4,-1
40006d4c:	290a703a 	and	r5,r5,r4
40006d50:	2804977a 	slli	r2,r5,29
40006d54:	280a927a 	slli	r5,r5,9
40006d58:	8822d0fa 	srli	r17,r17,3
40006d5c:	8401ffcc 	andi	r16,r16,2047
40006d60:	2808d33a 	srli	r4,r5,12
40006d64:	1444b03a 	or	r2,r2,r17
40006d68:	8401ffcc 	andi	r16,r16,2047
40006d6c:	800a953a 	slli	r5,r16,20
40006d70:	40c03fcc 	andi	r3,r8,255
40006d74:	04000434 	movhi	r16,16
40006d78:	180697fa 	slli	r3,r3,31
40006d7c:	843fffc4 	addi	r16,r16,-1
40006d80:	2420703a 	and	r16,r4,r16
40006d84:	8160b03a 	or	r16,r16,r5
40006d88:	80c6b03a 	or	r3,r16,r3
40006d8c:	dfc00417 	ldw	ra,16(sp)
40006d90:	dcc00317 	ldw	r19,12(sp)
40006d94:	dc800217 	ldw	r18,8(sp)
40006d98:	dc400117 	ldw	r17,4(sp)
40006d9c:	dc000017 	ldw	r16,0(sp)
40006da0:	dec00504 	addi	sp,sp,20
40006da4:	f800283a 	ret
40006da8:	0101ffc4 	movi	r4,2047
40006dac:	813fd626 	beq	r16,r4,40006d08 <__alt_data_end+0xc0006d08>
40006db0:	18c02034 	orhi	r3,r3,128
40006db4:	01000e04 	movi	r4,56
40006db8:	2080a416 	blt	r4,r2,4000704c <__subdf3+0x3d0>
40006dbc:	010007c4 	movi	r4,31
40006dc0:	2080c716 	blt	r4,r2,400070e0 <__subdf3+0x464>
40006dc4:	01000804 	movi	r4,32
40006dc8:	2089c83a 	sub	r4,r4,r2
40006dcc:	1910983a 	sll	r8,r3,r4
40006dd0:	308ed83a 	srl	r7,r6,r2
40006dd4:	3108983a 	sll	r4,r6,r4
40006dd8:	1884d83a 	srl	r2,r3,r2
40006ddc:	41ccb03a 	or	r6,r8,r7
40006de0:	2008c03a 	cmpne	r4,r4,zero
40006de4:	310cb03a 	or	r6,r6,r4
40006de8:	898dc83a 	sub	r6,r17,r6
40006dec:	89a3803a 	cmpltu	r17,r17,r6
40006df0:	288bc83a 	sub	r5,r5,r2
40006df4:	2c4bc83a 	sub	r5,r5,r17
40006df8:	3023883a 	mov	r17,r6
40006dfc:	2880202c 	andhi	r2,r5,128
40006e00:	10006b26 	beq	r2,zero,40006fb0 <__subdf3+0x334>
40006e04:	04c02034 	movhi	r19,128
40006e08:	9cffffc4 	addi	r19,r19,-1
40006e0c:	2ce6703a 	and	r19,r5,r19
40006e10:	98007c26 	beq	r19,zero,40007004 <__subdf3+0x388>
40006e14:	9809883a 	mov	r4,r19
40006e18:	0007e6c0 	call	40007e6c <__clzsi2>
40006e1c:	10fffe04 	addi	r3,r2,-8
40006e20:	010007c4 	movi	r4,31
40006e24:	20c07d16 	blt	r4,r3,4000701c <__subdf3+0x3a0>
40006e28:	01400a04 	movi	r5,40
40006e2c:	2885c83a 	sub	r2,r5,r2
40006e30:	888ad83a 	srl	r5,r17,r2
40006e34:	98e6983a 	sll	r19,r19,r3
40006e38:	88e2983a 	sll	r17,r17,r3
40006e3c:	2ce6b03a 	or	r19,r5,r19
40006e40:	1c007a16 	blt	r3,r16,4000702c <__subdf3+0x3b0>
40006e44:	1c21c83a 	sub	r16,r3,r16
40006e48:	81400044 	addi	r5,r16,1
40006e4c:	00c007c4 	movi	r3,31
40006e50:	19409616 	blt	r3,r5,400070ac <__subdf3+0x430>
40006e54:	1c21c83a 	sub	r16,r3,r16
40006e58:	8c08983a 	sll	r4,r17,r16
40006e5c:	8946d83a 	srl	r3,r17,r5
40006e60:	9c20983a 	sll	r16,r19,r16
40006e64:	2008c03a 	cmpne	r4,r4,zero
40006e68:	994ad83a 	srl	r5,r19,r5
40006e6c:	1c06b03a 	or	r3,r3,r16
40006e70:	1922b03a 	or	r17,r3,r4
40006e74:	0021883a 	mov	r16,zero
40006e78:	003fa306 	br	40006d08 <__alt_data_end+0xc0006d08>
40006e7c:	2880202c 	andhi	r2,r5,128
40006e80:	9200004c 	andi	r8,r18,1
40006e84:	103fac1e 	bne	r2,zero,40006d38 <__alt_data_end+0xc0006d38>
40006e88:	2804977a 	slli	r2,r5,29
40006e8c:	8822d0fa 	srli	r17,r17,3
40006e90:	00c1ffc4 	movi	r3,2047
40006e94:	280ad0fa 	srli	r5,r5,3
40006e98:	1444b03a 	or	r2,r2,r17
40006e9c:	80c02726 	beq	r16,r3,40006f3c <__subdf3+0x2c0>
40006ea0:	01000434 	movhi	r4,16
40006ea4:	213fffc4 	addi	r4,r4,-1
40006ea8:	80e0703a 	and	r16,r16,r3
40006eac:	2908703a 	and	r4,r5,r4
40006eb0:	003fad06 	br	40006d68 <__alt_data_end+0xc0006d68>
40006eb4:	0080690e 	bge	zero,r2,4000705c <__subdf3+0x3e0>
40006eb8:	50002f26 	beq	r10,zero,40006f78 <__subdf3+0x2fc>
40006ebc:	0101ffc4 	movi	r4,2047
40006ec0:	813f9126 	beq	r16,r4,40006d08 <__alt_data_end+0xc0006d08>
40006ec4:	18c02034 	orhi	r3,r3,128
40006ec8:	01000e04 	movi	r4,56
40006ecc:	2080b00e 	bge	r4,r2,40007190 <__subdf3+0x514>
40006ed0:	198cb03a 	or	r6,r3,r6
40006ed4:	300ec03a 	cmpne	r7,r6,zero
40006ed8:	0005883a 	mov	r2,zero
40006edc:	3c4f883a 	add	r7,r7,r17
40006ee0:	3c63803a 	cmpltu	r17,r7,r17
40006ee4:	114b883a 	add	r5,r2,r5
40006ee8:	2c4b883a 	add	r5,r5,r17
40006eec:	3823883a 	mov	r17,r7
40006ef0:	2880202c 	andhi	r2,r5,128
40006ef4:	10002e26 	beq	r2,zero,40006fb0 <__subdf3+0x334>
40006ef8:	84000044 	addi	r16,r16,1
40006efc:	0081ffc4 	movi	r2,2047
40006f00:	8080de26 	beq	r16,r2,4000727c <__subdf3+0x600>
40006f04:	00bfe034 	movhi	r2,65408
40006f08:	10bfffc4 	addi	r2,r2,-1
40006f0c:	288a703a 	and	r5,r5,r2
40006f10:	880cd07a 	srli	r6,r17,1
40006f14:	280897fa 	slli	r4,r5,31
40006f18:	88c0004c 	andi	r3,r17,1
40006f1c:	30e2b03a 	or	r17,r6,r3
40006f20:	280ad07a 	srli	r5,r5,1
40006f24:	8922b03a 	or	r17,r17,r4
40006f28:	003f7706 	br	40006d08 <__alt_data_end+0xc0006d08>
40006f2c:	1984b03a 	or	r2,r3,r6
40006f30:	103f6e26 	beq	r2,zero,40006cec <__alt_data_end+0xc0006cec>
40006f34:	39c03fcc 	andi	r7,r7,255
40006f38:	003f6d06 	br	40006cf0 <__alt_data_end+0xc0006cf0>
40006f3c:	1146b03a 	or	r3,r2,r5
40006f40:	18003f26 	beq	r3,zero,40007040 <__subdf3+0x3c4>
40006f44:	00c00434 	movhi	r3,16
40006f48:	29000234 	orhi	r4,r5,8
40006f4c:	18ffffc4 	addi	r3,r3,-1
40006f50:	20c8703a 	and	r4,r4,r3
40006f54:	003f8406 	br	40006d68 <__alt_data_end+0xc0006d68>
40006f58:	10bfffc4 	addi	r2,r2,-1
40006f5c:	1000501e 	bne	r2,zero,400070a0 <__subdf3+0x424>
40006f60:	898fc83a 	sub	r7,r17,r6
40006f64:	89e3803a 	cmpltu	r17,r17,r7
40006f68:	28cbc83a 	sub	r5,r5,r3
40006f6c:	2c4bc83a 	sub	r5,r5,r17
40006f70:	3823883a 	mov	r17,r7
40006f74:	003fa106 	br	40006dfc <__alt_data_end+0xc0006dfc>
40006f78:	1988b03a 	or	r4,r3,r6
40006f7c:	203f6226 	beq	r4,zero,40006d08 <__alt_data_end+0xc0006d08>
40006f80:	10bfffc4 	addi	r2,r2,-1
40006f84:	10009b1e 	bne	r2,zero,400071f4 <__subdf3+0x578>
40006f88:	344d883a 	add	r6,r6,r17
40006f8c:	3463803a 	cmpltu	r17,r6,r17
40006f90:	194b883a 	add	r5,r3,r5
40006f94:	2c4b883a 	add	r5,r5,r17
40006f98:	3023883a 	mov	r17,r6
40006f9c:	003fd406 	br	40006ef0 <__alt_data_end+0xc0006ef0>
40006fa0:	1106b03a 	or	r3,r2,r4
40006fa4:	1800b426 	beq	r3,zero,40007278 <__subdf3+0x5fc>
40006fa8:	100b883a 	mov	r5,r2
40006fac:	2023883a 	mov	r17,r4
40006fb0:	888001cc 	andi	r2,r17,7
40006fb4:	103f561e 	bne	r2,zero,40006d10 <__alt_data_end+0xc0006d10>
40006fb8:	9200004c 	andi	r8,r18,1
40006fbc:	003fb206 	br	40006e88 <__alt_data_end+0xc0006e88>
40006fc0:	1000531e 	bne	r2,zero,40007110 <__subdf3+0x494>
40006fc4:	80800044 	addi	r2,r16,1
40006fc8:	1081ffcc 	andi	r2,r2,2047
40006fcc:	01000044 	movi	r4,1
40006fd0:	2080a00e 	bge	r4,r2,40007254 <__subdf3+0x5d8>
40006fd4:	8985c83a 	sub	r2,r17,r6
40006fd8:	8889803a 	cmpltu	r4,r17,r2
40006fdc:	28e7c83a 	sub	r19,r5,r3
40006fe0:	9927c83a 	sub	r19,r19,r4
40006fe4:	9900202c 	andhi	r4,r19,128
40006fe8:	20006226 	beq	r4,zero,40007174 <__subdf3+0x4f8>
40006fec:	3463c83a 	sub	r17,r6,r17
40006ff0:	194bc83a 	sub	r5,r3,r5
40006ff4:	344d803a 	cmpltu	r6,r6,r17
40006ff8:	29a7c83a 	sub	r19,r5,r6
40006ffc:	3825883a 	mov	r18,r7
40007000:	983f841e 	bne	r19,zero,40006e14 <__alt_data_end+0xc0006e14>
40007004:	8809883a 	mov	r4,r17
40007008:	0007e6c0 	call	40007e6c <__clzsi2>
4000700c:	10800804 	addi	r2,r2,32
40007010:	10fffe04 	addi	r3,r2,-8
40007014:	010007c4 	movi	r4,31
40007018:	20ff830e 	bge	r4,r3,40006e28 <__alt_data_end+0xc0006e28>
4000701c:	14fff604 	addi	r19,r2,-40
40007020:	8ce6983a 	sll	r19,r17,r19
40007024:	0023883a 	mov	r17,zero
40007028:	1c3f860e 	bge	r3,r16,40006e44 <__alt_data_end+0xc0006e44>
4000702c:	017fe034 	movhi	r5,65408
40007030:	297fffc4 	addi	r5,r5,-1
40007034:	80e1c83a 	sub	r16,r16,r3
40007038:	994a703a 	and	r5,r19,r5
4000703c:	003f3206 	br	40006d08 <__alt_data_end+0xc0006d08>
40007040:	0009883a 	mov	r4,zero
40007044:	0005883a 	mov	r2,zero
40007048:	003f4706 	br	40006d68 <__alt_data_end+0xc0006d68>
4000704c:	198cb03a 	or	r6,r3,r6
40007050:	300cc03a 	cmpne	r6,r6,zero
40007054:	0005883a 	mov	r2,zero
40007058:	003f6306 	br	40006de8 <__alt_data_end+0xc0006de8>
4000705c:	10009d1e 	bne	r2,zero,400072d4 <__subdf3+0x658>
40007060:	81c00044 	addi	r7,r16,1
40007064:	3881ffcc 	andi	r2,r7,2047
40007068:	02400044 	movi	r9,1
4000706c:	4880680e 	bge	r9,r2,40007210 <__subdf3+0x594>
40007070:	0081ffc4 	movi	r2,2047
40007074:	3880ae26 	beq	r7,r2,40007330 <__subdf3+0x6b4>
40007078:	344d883a 	add	r6,r6,r17
4000707c:	3463803a 	cmpltu	r17,r6,r17
40007080:	194b883a 	add	r5,r3,r5
40007084:	2c4b883a 	add	r5,r5,r17
40007088:	282297fa 	slli	r17,r5,31
4000708c:	300cd07a 	srli	r6,r6,1
40007090:	280ad07a 	srli	r5,r5,1
40007094:	3821883a 	mov	r16,r7
40007098:	89a2b03a 	or	r17,r17,r6
4000709c:	003f1a06 	br	40006d08 <__alt_data_end+0xc0006d08>
400070a0:	0101ffc4 	movi	r4,2047
400070a4:	813f431e 	bne	r16,r4,40006db4 <__alt_data_end+0xc0006db4>
400070a8:	003f1706 	br	40006d08 <__alt_data_end+0xc0006d08>
400070ac:	80bff844 	addi	r2,r16,-31
400070b0:	00c00804 	movi	r3,32
400070b4:	9884d83a 	srl	r2,r19,r2
400070b8:	28c05126 	beq	r5,r3,40007200 <__subdf3+0x584>
400070bc:	00c00fc4 	movi	r3,63
400070c0:	1c21c83a 	sub	r16,r3,r16
400070c4:	9c26983a 	sll	r19,r19,r16
400070c8:	9c62b03a 	or	r17,r19,r17
400070cc:	8822c03a 	cmpne	r17,r17,zero
400070d0:	88a2b03a 	or	r17,r17,r2
400070d4:	000b883a 	mov	r5,zero
400070d8:	0021883a 	mov	r16,zero
400070dc:	003fb406 	br	40006fb0 <__alt_data_end+0xc0006fb0>
400070e0:	113ff804 	addi	r4,r2,-32
400070e4:	01c00804 	movi	r7,32
400070e8:	1908d83a 	srl	r4,r3,r4
400070ec:	11c04626 	beq	r2,r7,40007208 <__subdf3+0x58c>
400070f0:	01c01004 	movi	r7,64
400070f4:	3885c83a 	sub	r2,r7,r2
400070f8:	1884983a 	sll	r2,r3,r2
400070fc:	118cb03a 	or	r6,r2,r6
40007100:	300cc03a 	cmpne	r6,r6,zero
40007104:	310cb03a 	or	r6,r6,r4
40007108:	0005883a 	mov	r2,zero
4000710c:	003f3606 	br	40006de8 <__alt_data_end+0xc0006de8>
40007110:	80002b26 	beq	r16,zero,400071c0 <__subdf3+0x544>
40007114:	0101ffc4 	movi	r4,2047
40007118:	51006926 	beq	r10,r4,400072c0 <__subdf3+0x644>
4000711c:	0085c83a 	sub	r2,zero,r2
40007120:	29402034 	orhi	r5,r5,128
40007124:	01000e04 	movi	r4,56
40007128:	20807d16 	blt	r4,r2,40007320 <__subdf3+0x6a4>
4000712c:	010007c4 	movi	r4,31
40007130:	2080d916 	blt	r4,r2,40007498 <__subdf3+0x81c>
40007134:	01000804 	movi	r4,32
40007138:	2089c83a 	sub	r4,r4,r2
4000713c:	2912983a 	sll	r9,r5,r4
40007140:	8890d83a 	srl	r8,r17,r2
40007144:	8908983a 	sll	r4,r17,r4
40007148:	2884d83a 	srl	r2,r5,r2
4000714c:	4a22b03a 	or	r17,r9,r8
40007150:	2008c03a 	cmpne	r4,r4,zero
40007154:	8922b03a 	or	r17,r17,r4
40007158:	3463c83a 	sub	r17,r6,r17
4000715c:	1885c83a 	sub	r2,r3,r2
40007160:	344d803a 	cmpltu	r6,r6,r17
40007164:	118bc83a 	sub	r5,r2,r6
40007168:	5021883a 	mov	r16,r10
4000716c:	3825883a 	mov	r18,r7
40007170:	003f2206 	br	40006dfc <__alt_data_end+0xc0006dfc>
40007174:	9886b03a 	or	r3,r19,r2
40007178:	18001c1e 	bne	r3,zero,400071ec <__subdf3+0x570>
4000717c:	0011883a 	mov	r8,zero
40007180:	000b883a 	mov	r5,zero
40007184:	0023883a 	mov	r17,zero
40007188:	0021883a 	mov	r16,zero
4000718c:	003f3e06 	br	40006e88 <__alt_data_end+0xc0006e88>
40007190:	010007c4 	movi	r4,31
40007194:	20803c16 	blt	r4,r2,40007288 <__subdf3+0x60c>
40007198:	01000804 	movi	r4,32
4000719c:	2089c83a 	sub	r4,r4,r2
400071a0:	1912983a 	sll	r9,r3,r4
400071a4:	308ed83a 	srl	r7,r6,r2
400071a8:	3108983a 	sll	r4,r6,r4
400071ac:	1884d83a 	srl	r2,r3,r2
400071b0:	49ceb03a 	or	r7,r9,r7
400071b4:	2008c03a 	cmpne	r4,r4,zero
400071b8:	390eb03a 	or	r7,r7,r4
400071bc:	003f4706 	br	40006edc <__alt_data_end+0xc0006edc>
400071c0:	2c48b03a 	or	r4,r5,r17
400071c4:	20003e26 	beq	r4,zero,400072c0 <__subdf3+0x644>
400071c8:	0084303a 	nor	r2,zero,r2
400071cc:	10003a1e 	bne	r2,zero,400072b8 <__subdf3+0x63c>
400071d0:	3463c83a 	sub	r17,r6,r17
400071d4:	194bc83a 	sub	r5,r3,r5
400071d8:	344d803a 	cmpltu	r6,r6,r17
400071dc:	298bc83a 	sub	r5,r5,r6
400071e0:	5021883a 	mov	r16,r10
400071e4:	3825883a 	mov	r18,r7
400071e8:	003f0406 	br	40006dfc <__alt_data_end+0xc0006dfc>
400071ec:	1023883a 	mov	r17,r2
400071f0:	003f0706 	br	40006e10 <__alt_data_end+0xc0006e10>
400071f4:	0101ffc4 	movi	r4,2047
400071f8:	813f331e 	bne	r16,r4,40006ec8 <__alt_data_end+0xc0006ec8>
400071fc:	003ec206 	br	40006d08 <__alt_data_end+0xc0006d08>
40007200:	0027883a 	mov	r19,zero
40007204:	003fb006 	br	400070c8 <__alt_data_end+0xc00070c8>
40007208:	0005883a 	mov	r2,zero
4000720c:	003fbb06 	br	400070fc <__alt_data_end+0xc00070fc>
40007210:	2c44b03a 	or	r2,r5,r17
40007214:	80008b1e 	bne	r16,zero,40007444 <__subdf3+0x7c8>
40007218:	1000b526 	beq	r2,zero,400074f0 <__subdf3+0x874>
4000721c:	1984b03a 	or	r2,r3,r6
40007220:	103eb926 	beq	r2,zero,40006d08 <__alt_data_end+0xc0006d08>
40007224:	3449883a 	add	r4,r6,r17
40007228:	2463803a 	cmpltu	r17,r4,r17
4000722c:	194b883a 	add	r5,r3,r5
40007230:	2c4b883a 	add	r5,r5,r17
40007234:	2880202c 	andhi	r2,r5,128
40007238:	2023883a 	mov	r17,r4
4000723c:	103f5c26 	beq	r2,zero,40006fb0 <__alt_data_end+0xc0006fb0>
40007240:	00bfe034 	movhi	r2,65408
40007244:	10bfffc4 	addi	r2,r2,-1
40007248:	4821883a 	mov	r16,r9
4000724c:	288a703a 	and	r5,r5,r2
40007250:	003ead06 	br	40006d08 <__alt_data_end+0xc0006d08>
40007254:	2c44b03a 	or	r2,r5,r17
40007258:	8000291e 	bne	r16,zero,40007300 <__subdf3+0x684>
4000725c:	10004f1e 	bne	r2,zero,4000739c <__subdf3+0x720>
40007260:	1984b03a 	or	r2,r3,r6
40007264:	10000426 	beq	r2,zero,40007278 <__subdf3+0x5fc>
40007268:	180b883a 	mov	r5,r3
4000726c:	3023883a 	mov	r17,r6
40007270:	3825883a 	mov	r18,r7
40007274:	003ea406 	br	40006d08 <__alt_data_end+0xc0006d08>
40007278:	0011883a 	mov	r8,zero
4000727c:	000b883a 	mov	r5,zero
40007280:	0023883a 	mov	r17,zero
40007284:	003f0006 	br	40006e88 <__alt_data_end+0xc0006e88>
40007288:	11fff804 	addi	r7,r2,-32
4000728c:	19c8d83a 	srl	r4,r3,r7
40007290:	01c00804 	movi	r7,32
40007294:	11c07e26 	beq	r2,r7,40007490 <__subdf3+0x814>
40007298:	01c01004 	movi	r7,64
4000729c:	3885c83a 	sub	r2,r7,r2
400072a0:	1884983a 	sll	r2,r3,r2
400072a4:	118cb03a 	or	r6,r2,r6
400072a8:	300ec03a 	cmpne	r7,r6,zero
400072ac:	390eb03a 	or	r7,r7,r4
400072b0:	0005883a 	mov	r2,zero
400072b4:	003f0906 	br	40006edc <__alt_data_end+0xc0006edc>
400072b8:	0101ffc4 	movi	r4,2047
400072bc:	513f991e 	bne	r10,r4,40007124 <__alt_data_end+0xc0007124>
400072c0:	180b883a 	mov	r5,r3
400072c4:	3023883a 	mov	r17,r6
400072c8:	5021883a 	mov	r16,r10
400072cc:	3825883a 	mov	r18,r7
400072d0:	003e8d06 	br	40006d08 <__alt_data_end+0xc0006d08>
400072d4:	80001a1e 	bne	r16,zero,40007340 <__subdf3+0x6c4>
400072d8:	2c48b03a 	or	r4,r5,r17
400072dc:	20005526 	beq	r4,zero,40007434 <__subdf3+0x7b8>
400072e0:	0084303a 	nor	r2,zero,r2
400072e4:	1000511e 	bne	r2,zero,4000742c <__subdf3+0x7b0>
400072e8:	89a3883a 	add	r17,r17,r6
400072ec:	194b883a 	add	r5,r3,r5
400072f0:	898d803a 	cmpltu	r6,r17,r6
400072f4:	298b883a 	add	r5,r5,r6
400072f8:	5021883a 	mov	r16,r10
400072fc:	003efc06 	br	40006ef0 <__alt_data_end+0xc0006ef0>
40007300:	1000341e 	bne	r2,zero,400073d4 <__subdf3+0x758>
40007304:	1984b03a 	or	r2,r3,r6
40007308:	10006f26 	beq	r2,zero,400074c8 <__subdf3+0x84c>
4000730c:	180b883a 	mov	r5,r3
40007310:	3023883a 	mov	r17,r6
40007314:	3825883a 	mov	r18,r7
40007318:	0401ffc4 	movi	r16,2047
4000731c:	003e7a06 	br	40006d08 <__alt_data_end+0xc0006d08>
40007320:	2c62b03a 	or	r17,r5,r17
40007324:	8822c03a 	cmpne	r17,r17,zero
40007328:	0005883a 	mov	r2,zero
4000732c:	003f8a06 	br	40007158 <__alt_data_end+0xc0007158>
40007330:	3821883a 	mov	r16,r7
40007334:	000b883a 	mov	r5,zero
40007338:	0023883a 	mov	r17,zero
4000733c:	003ed206 	br	40006e88 <__alt_data_end+0xc0006e88>
40007340:	0101ffc4 	movi	r4,2047
40007344:	51003b26 	beq	r10,r4,40007434 <__subdf3+0x7b8>
40007348:	0085c83a 	sub	r2,zero,r2
4000734c:	29402034 	orhi	r5,r5,128
40007350:	01000e04 	movi	r4,56
40007354:	20806216 	blt	r4,r2,400074e0 <__subdf3+0x864>
40007358:	010007c4 	movi	r4,31
4000735c:	20806b16 	blt	r4,r2,4000750c <__subdf3+0x890>
40007360:	01000804 	movi	r4,32
40007364:	2089c83a 	sub	r4,r4,r2
40007368:	2912983a 	sll	r9,r5,r4
4000736c:	888ed83a 	srl	r7,r17,r2
40007370:	8908983a 	sll	r4,r17,r4
40007374:	2884d83a 	srl	r2,r5,r2
40007378:	49e2b03a 	or	r17,r9,r7
4000737c:	2008c03a 	cmpne	r4,r4,zero
40007380:	8922b03a 	or	r17,r17,r4
40007384:	89a3883a 	add	r17,r17,r6
40007388:	10c5883a 	add	r2,r2,r3
4000738c:	898d803a 	cmpltu	r6,r17,r6
40007390:	118b883a 	add	r5,r2,r6
40007394:	5021883a 	mov	r16,r10
40007398:	003ed506 	br	40006ef0 <__alt_data_end+0xc0006ef0>
4000739c:	1984b03a 	or	r2,r3,r6
400073a0:	103e5926 	beq	r2,zero,40006d08 <__alt_data_end+0xc0006d08>
400073a4:	8989c83a 	sub	r4,r17,r6
400073a8:	8911803a 	cmpltu	r8,r17,r4
400073ac:	28c5c83a 	sub	r2,r5,r3
400073b0:	1205c83a 	sub	r2,r2,r8
400073b4:	1200202c 	andhi	r8,r2,128
400073b8:	403ef926 	beq	r8,zero,40006fa0 <__alt_data_end+0xc0006fa0>
400073bc:	3463c83a 	sub	r17,r6,r17
400073c0:	194bc83a 	sub	r5,r3,r5
400073c4:	344d803a 	cmpltu	r6,r6,r17
400073c8:	298bc83a 	sub	r5,r5,r6
400073cc:	3825883a 	mov	r18,r7
400073d0:	003e4d06 	br	40006d08 <__alt_data_end+0xc0006d08>
400073d4:	1984b03a 	or	r2,r3,r6
400073d8:	10002b26 	beq	r2,zero,40007488 <__subdf3+0x80c>
400073dc:	2808d0fa 	srli	r4,r5,3
400073e0:	8822d0fa 	srli	r17,r17,3
400073e4:	280a977a 	slli	r5,r5,29
400073e8:	2080022c 	andhi	r2,r4,8
400073ec:	2c62b03a 	or	r17,r5,r17
400073f0:	10000826 	beq	r2,zero,40007414 <__subdf3+0x798>
400073f4:	1810d0fa 	srli	r8,r3,3
400073f8:	4080022c 	andhi	r2,r8,8
400073fc:	1000051e 	bne	r2,zero,40007414 <__subdf3+0x798>
40007400:	300cd0fa 	srli	r6,r6,3
40007404:	1804977a 	slli	r2,r3,29
40007408:	4009883a 	mov	r4,r8
4000740c:	3825883a 	mov	r18,r7
40007410:	11a2b03a 	or	r17,r2,r6
40007414:	880ad77a 	srli	r5,r17,29
40007418:	200890fa 	slli	r4,r4,3
4000741c:	882290fa 	slli	r17,r17,3
40007420:	0401ffc4 	movi	r16,2047
40007424:	290ab03a 	or	r5,r5,r4
40007428:	003e3706 	br	40006d08 <__alt_data_end+0xc0006d08>
4000742c:	0101ffc4 	movi	r4,2047
40007430:	513fc71e 	bne	r10,r4,40007350 <__alt_data_end+0xc0007350>
40007434:	180b883a 	mov	r5,r3
40007438:	3023883a 	mov	r17,r6
4000743c:	5021883a 	mov	r16,r10
40007440:	003e3106 	br	40006d08 <__alt_data_end+0xc0006d08>
40007444:	10002d26 	beq	r2,zero,400074fc <__subdf3+0x880>
40007448:	1984b03a 	or	r2,r3,r6
4000744c:	10000e26 	beq	r2,zero,40007488 <__subdf3+0x80c>
40007450:	2808d0fa 	srli	r4,r5,3
40007454:	8822d0fa 	srli	r17,r17,3
40007458:	280a977a 	slli	r5,r5,29
4000745c:	2080022c 	andhi	r2,r4,8
40007460:	2c62b03a 	or	r17,r5,r17
40007464:	103feb26 	beq	r2,zero,40007414 <__alt_data_end+0xc0007414>
40007468:	180ed0fa 	srli	r7,r3,3
4000746c:	3880022c 	andhi	r2,r7,8
40007470:	103fe81e 	bne	r2,zero,40007414 <__alt_data_end+0xc0007414>
40007474:	300cd0fa 	srli	r6,r6,3
40007478:	1804977a 	slli	r2,r3,29
4000747c:	3809883a 	mov	r4,r7
40007480:	11a2b03a 	or	r17,r2,r6
40007484:	003fe306 	br	40007414 <__alt_data_end+0xc0007414>
40007488:	0401ffc4 	movi	r16,2047
4000748c:	003e1e06 	br	40006d08 <__alt_data_end+0xc0006d08>
40007490:	0005883a 	mov	r2,zero
40007494:	003f8306 	br	400072a4 <__alt_data_end+0xc00072a4>
40007498:	113ff804 	addi	r4,r2,-32
4000749c:	02000804 	movi	r8,32
400074a0:	2908d83a 	srl	r4,r5,r4
400074a4:	12002526 	beq	r2,r8,4000753c <__subdf3+0x8c0>
400074a8:	02001004 	movi	r8,64
400074ac:	4085c83a 	sub	r2,r8,r2
400074b0:	288a983a 	sll	r5,r5,r2
400074b4:	2c62b03a 	or	r17,r5,r17
400074b8:	8822c03a 	cmpne	r17,r17,zero
400074bc:	8922b03a 	or	r17,r17,r4
400074c0:	0005883a 	mov	r2,zero
400074c4:	003f2406 	br	40007158 <__alt_data_end+0xc0007158>
400074c8:	01402034 	movhi	r5,128
400074cc:	0011883a 	mov	r8,zero
400074d0:	297fffc4 	addi	r5,r5,-1
400074d4:	047ffe04 	movi	r17,-8
400074d8:	0401ffc4 	movi	r16,2047
400074dc:	003e6a06 	br	40006e88 <__alt_data_end+0xc0006e88>
400074e0:	2c62b03a 	or	r17,r5,r17
400074e4:	8822c03a 	cmpne	r17,r17,zero
400074e8:	0005883a 	mov	r2,zero
400074ec:	003fa506 	br	40007384 <__alt_data_end+0xc0007384>
400074f0:	180b883a 	mov	r5,r3
400074f4:	3023883a 	mov	r17,r6
400074f8:	003e0306 	br	40006d08 <__alt_data_end+0xc0006d08>
400074fc:	180b883a 	mov	r5,r3
40007500:	3023883a 	mov	r17,r6
40007504:	0401ffc4 	movi	r16,2047
40007508:	003dff06 	br	40006d08 <__alt_data_end+0xc0006d08>
4000750c:	113ff804 	addi	r4,r2,-32
40007510:	01c00804 	movi	r7,32
40007514:	2908d83a 	srl	r4,r5,r4
40007518:	11c00a26 	beq	r2,r7,40007544 <__subdf3+0x8c8>
4000751c:	01c01004 	movi	r7,64
40007520:	3885c83a 	sub	r2,r7,r2
40007524:	288a983a 	sll	r5,r5,r2
40007528:	2c62b03a 	or	r17,r5,r17
4000752c:	8822c03a 	cmpne	r17,r17,zero
40007530:	8922b03a 	or	r17,r17,r4
40007534:	0005883a 	mov	r2,zero
40007538:	003f9206 	br	40007384 <__alt_data_end+0xc0007384>
4000753c:	000b883a 	mov	r5,zero
40007540:	003fdc06 	br	400074b4 <__alt_data_end+0xc00074b4>
40007544:	000b883a 	mov	r5,zero
40007548:	003ff706 	br	40007528 <__alt_data_end+0xc0007528>

4000754c <__fixdfsi>:
4000754c:	2806d53a 	srli	r3,r5,20
40007550:	00800434 	movhi	r2,16
40007554:	10bfffc4 	addi	r2,r2,-1
40007558:	18c1ffcc 	andi	r3,r3,2047
4000755c:	0180ff84 	movi	r6,1022
40007560:	2884703a 	and	r2,r5,r2
40007564:	280ad7fa 	srli	r5,r5,31
40007568:	30c0130e 	bge	r6,r3,400075b8 <__fixdfsi+0x6c>
4000756c:	01810744 	movi	r6,1053
40007570:	30c00d16 	blt	r6,r3,400075a8 <__fixdfsi+0x5c>
40007574:	01810cc4 	movi	r6,1075
40007578:	30cdc83a 	sub	r6,r6,r3
4000757c:	01c007c4 	movi	r7,31
40007580:	10800434 	orhi	r2,r2,16
40007584:	39800e0e 	bge	r7,r6,400075c0 <__fixdfsi+0x74>
40007588:	010104c4 	movi	r4,1043
4000758c:	20c7c83a 	sub	r3,r4,r3
40007590:	10c6d83a 	srl	r3,r2,r3
40007594:	29403fcc 	andi	r5,r5,255
40007598:	0145c83a 	sub	r2,zero,r5
4000759c:	1884f03a 	xor	r2,r3,r2
400075a0:	1145883a 	add	r2,r2,r5
400075a4:	f800283a 	ret
400075a8:	00a00034 	movhi	r2,32768
400075ac:	10bfffc4 	addi	r2,r2,-1
400075b0:	2885883a 	add	r2,r5,r2
400075b4:	f800283a 	ret
400075b8:	0005883a 	mov	r2,zero
400075bc:	f800283a 	ret
400075c0:	18fefb44 	addi	r3,r3,-1043
400075c4:	2188d83a 	srl	r4,r4,r6
400075c8:	10c6983a 	sll	r3,r2,r3
400075cc:	20c6b03a 	or	r3,r4,r3
400075d0:	003ff006 	br	40007594 <__alt_data_end+0xc0007594>

400075d4 <__floatsidf>:
400075d4:	defffd04 	addi	sp,sp,-12
400075d8:	dc400115 	stw	r17,4(sp)
400075dc:	dfc00215 	stw	ra,8(sp)
400075e0:	dc000015 	stw	r16,0(sp)
400075e4:	2023883a 	mov	r17,r4
400075e8:	20001426 	beq	r4,zero,4000763c <__floatsidf+0x68>
400075ec:	2020d7fa 	srli	r16,r4,31
400075f0:	80000126 	beq	r16,zero,400075f8 <__floatsidf+0x24>
400075f4:	0123c83a 	sub	r17,zero,r4
400075f8:	8809883a 	mov	r4,r17
400075fc:	0007e6c0 	call	40007e6c <__clzsi2>
40007600:	01410784 	movi	r5,1054
40007604:	00c00284 	movi	r3,10
40007608:	288bc83a 	sub	r5,r5,r2
4000760c:	18801c16 	blt	r3,r2,40007680 <__floatsidf+0xac>
40007610:	00c002c4 	movi	r3,11
40007614:	1887c83a 	sub	r3,r3,r2
40007618:	88c8d83a 	srl	r4,r17,r3
4000761c:	00c00434 	movhi	r3,16
40007620:	18ffffc4 	addi	r3,r3,-1
40007624:	10800544 	addi	r2,r2,21
40007628:	20c8703a 	and	r4,r4,r3
4000762c:	8884983a 	sll	r2,r17,r2
40007630:	28c1ffcc 	andi	r3,r5,2047
40007634:	800d883a 	mov	r6,r16
40007638:	00000406 	br	4000764c <__floatsidf+0x78>
4000763c:	000d883a 	mov	r6,zero
40007640:	0007883a 	mov	r3,zero
40007644:	0009883a 	mov	r4,zero
40007648:	0005883a 	mov	r2,zero
4000764c:	180a953a 	slli	r5,r3,20
40007650:	31803fcc 	andi	r6,r6,255
40007654:	00c00434 	movhi	r3,16
40007658:	300c97fa 	slli	r6,r6,31
4000765c:	18ffffc4 	addi	r3,r3,-1
40007660:	20c6703a 	and	r3,r4,r3
40007664:	1946b03a 	or	r3,r3,r5
40007668:	1986b03a 	or	r3,r3,r6
4000766c:	dfc00217 	ldw	ra,8(sp)
40007670:	dc400117 	ldw	r17,4(sp)
40007674:	dc000017 	ldw	r16,0(sp)
40007678:	dec00304 	addi	sp,sp,12
4000767c:	f800283a 	ret
40007680:	10fffd44 	addi	r3,r2,-11
40007684:	88c8983a 	sll	r4,r17,r3
40007688:	00800434 	movhi	r2,16
4000768c:	10bfffc4 	addi	r2,r2,-1
40007690:	2088703a 	and	r4,r4,r2
40007694:	28c1ffcc 	andi	r3,r5,2047
40007698:	800d883a 	mov	r6,r16
4000769c:	0005883a 	mov	r2,zero
400076a0:	003fea06 	br	4000764c <__alt_data_end+0xc000764c>

400076a4 <__extendsfdf2>:
400076a4:	200ad5fa 	srli	r5,r4,23
400076a8:	defffd04 	addi	sp,sp,-12
400076ac:	dc400115 	stw	r17,4(sp)
400076b0:	29403fcc 	andi	r5,r5,255
400076b4:	29800044 	addi	r6,r5,1
400076b8:	04402034 	movhi	r17,128
400076bc:	dc000015 	stw	r16,0(sp)
400076c0:	8c7fffc4 	addi	r17,r17,-1
400076c4:	dfc00215 	stw	ra,8(sp)
400076c8:	31803fcc 	andi	r6,r6,255
400076cc:	00800044 	movi	r2,1
400076d0:	8922703a 	and	r17,r17,r4
400076d4:	2020d7fa 	srli	r16,r4,31
400076d8:	1180110e 	bge	r2,r6,40007720 <__extendsfdf2+0x7c>
400076dc:	880ed0fa 	srli	r7,r17,3
400076e0:	8822977a 	slli	r17,r17,29
400076e4:	2940e004 	addi	r5,r5,896
400076e8:	2941ffcc 	andi	r5,r5,2047
400076ec:	280c953a 	slli	r6,r5,20
400076f0:	01400434 	movhi	r5,16
400076f4:	800697fa 	slli	r3,r16,31
400076f8:	297fffc4 	addi	r5,r5,-1
400076fc:	394a703a 	and	r5,r7,r5
40007700:	298ab03a 	or	r5,r5,r6
40007704:	8805883a 	mov	r2,r17
40007708:	28c6b03a 	or	r3,r5,r3
4000770c:	dfc00217 	ldw	ra,8(sp)
40007710:	dc400117 	ldw	r17,4(sp)
40007714:	dc000017 	ldw	r16,0(sp)
40007718:	dec00304 	addi	sp,sp,12
4000771c:	f800283a 	ret
40007720:	2800111e 	bne	r5,zero,40007768 <__extendsfdf2+0xc4>
40007724:	88001c26 	beq	r17,zero,40007798 <__extendsfdf2+0xf4>
40007728:	8809883a 	mov	r4,r17
4000772c:	0007e6c0 	call	40007e6c <__clzsi2>
40007730:	00c00284 	movi	r3,10
40007734:	18801b16 	blt	r3,r2,400077a4 <__extendsfdf2+0x100>
40007738:	01c002c4 	movi	r7,11
4000773c:	388fc83a 	sub	r7,r7,r2
40007740:	10c00544 	addi	r3,r2,21
40007744:	89ced83a 	srl	r7,r17,r7
40007748:	88e2983a 	sll	r17,r17,r3
4000774c:	0180e244 	movi	r6,905
40007750:	308bc83a 	sub	r5,r6,r2
40007754:	01800434 	movhi	r6,16
40007758:	31bfffc4 	addi	r6,r6,-1
4000775c:	398e703a 	and	r7,r7,r6
40007760:	2941ffcc 	andi	r5,r5,2047
40007764:	003fe006 	br	400076e8 <__alt_data_end+0xc00076e8>
40007768:	88000826 	beq	r17,zero,4000778c <__extendsfdf2+0xe8>
4000776c:	880ed0fa 	srli	r7,r17,3
40007770:	00800434 	movhi	r2,16
40007774:	10bfffc4 	addi	r2,r2,-1
40007778:	39c00234 	orhi	r7,r7,8
4000777c:	8822977a 	slli	r17,r17,29
40007780:	388e703a 	and	r7,r7,r2
40007784:	0141ffc4 	movi	r5,2047
40007788:	003fd706 	br	400076e8 <__alt_data_end+0xc00076e8>
4000778c:	0141ffc4 	movi	r5,2047
40007790:	000f883a 	mov	r7,zero
40007794:	003fd406 	br	400076e8 <__alt_data_end+0xc00076e8>
40007798:	000b883a 	mov	r5,zero
4000779c:	000f883a 	mov	r7,zero
400077a0:	003fd106 	br	400076e8 <__alt_data_end+0xc00076e8>
400077a4:	11fffd44 	addi	r7,r2,-11
400077a8:	89ce983a 	sll	r7,r17,r7
400077ac:	0023883a 	mov	r17,zero
400077b0:	003fe606 	br	4000774c <__alt_data_end+0xc000774c>

400077b4 <__truncdfsf2>:
400077b4:	2810d53a 	srli	r8,r5,20
400077b8:	01c00434 	movhi	r7,16
400077bc:	39ffffc4 	addi	r7,r7,-1
400077c0:	29ce703a 	and	r7,r5,r7
400077c4:	380e90fa 	slli	r7,r7,3
400077c8:	4201ffcc 	andi	r8,r8,2047
400077cc:	200cd77a 	srli	r6,r4,29
400077d0:	42400044 	addi	r9,r8,1
400077d4:	4a41ffcc 	andi	r9,r9,2047
400077d8:	00800044 	movi	r2,1
400077dc:	398cb03a 	or	r6,r7,r6
400077e0:	280ad7fa 	srli	r5,r5,31
400077e4:	200e90fa 	slli	r7,r4,3
400077e8:	1240230e 	bge	r2,r9,40007878 <__truncdfsf2+0xc4>
400077ec:	40ff2004 	addi	r3,r8,-896
400077f0:	00803f84 	movi	r2,254
400077f4:	10c01516 	blt	r2,r3,4000784c <__truncdfsf2+0x98>
400077f8:	00c02d0e 	bge	zero,r3,400078b0 <__truncdfsf2+0xfc>
400077fc:	200891ba 	slli	r4,r4,6
40007800:	300c90fa 	slli	r6,r6,3
40007804:	380ed77a 	srli	r7,r7,29
40007808:	2008c03a 	cmpne	r4,r4,zero
4000780c:	310cb03a 	or	r6,r6,r4
40007810:	31ccb03a 	or	r6,r6,r7
40007814:	308001cc 	andi	r2,r6,7
40007818:	10000426 	beq	r2,zero,4000782c <__truncdfsf2+0x78>
4000781c:	310003cc 	andi	r4,r6,15
40007820:	00800104 	movi	r2,4
40007824:	20800126 	beq	r4,r2,4000782c <__truncdfsf2+0x78>
40007828:	31800104 	addi	r6,r6,4
4000782c:	3081002c 	andhi	r2,r6,1024
40007830:	10002326 	beq	r2,zero,400078c0 <__truncdfsf2+0x10c>
40007834:	18c00044 	addi	r3,r3,1
40007838:	00803fc4 	movi	r2,255
4000783c:	18800326 	beq	r3,r2,4000784c <__truncdfsf2+0x98>
40007840:	300c91ba 	slli	r6,r6,6
40007844:	300cd27a 	srli	r6,r6,9
40007848:	00000206 	br	40007854 <__truncdfsf2+0xa0>
4000784c:	00ffffc4 	movi	r3,-1
40007850:	000d883a 	mov	r6,zero
40007854:	18c03fcc 	andi	r3,r3,255
40007858:	180895fa 	slli	r4,r3,23
4000785c:	00c02034 	movhi	r3,128
40007860:	280a97fa 	slli	r5,r5,31
40007864:	18ffffc4 	addi	r3,r3,-1
40007868:	30c6703a 	and	r3,r6,r3
4000786c:	1906b03a 	or	r3,r3,r4
40007870:	1944b03a 	or	r2,r3,r5
40007874:	f800283a 	ret
40007878:	4000071e 	bne	r8,zero,40007898 <__truncdfsf2+0xe4>
4000787c:	31ccb03a 	or	r6,r6,r7
40007880:	30000d1e 	bne	r6,zero,400078b8 <__truncdfsf2+0x104>
40007884:	0007883a 	mov	r3,zero
40007888:	00802034 	movhi	r2,128
4000788c:	10bfffc4 	addi	r2,r2,-1
40007890:	308c703a 	and	r6,r6,r2
40007894:	003fef06 	br	40007854 <__alt_data_end+0xc0007854>
40007898:	31c8b03a 	or	r4,r6,r7
4000789c:	203feb26 	beq	r4,zero,4000784c <__alt_data_end+0xc000784c>
400078a0:	300c90fa 	slli	r6,r6,3
400078a4:	00c03fc4 	movi	r3,255
400078a8:	31808034 	orhi	r6,r6,512
400078ac:	003fd906 	br	40007814 <__alt_data_end+0xc0007814>
400078b0:	00bffa44 	movi	r2,-23
400078b4:	1880090e 	bge	r3,r2,400078dc <__truncdfsf2+0x128>
400078b8:	01800144 	movi	r6,5
400078bc:	0007883a 	mov	r3,zero
400078c0:	00803fc4 	movi	r2,255
400078c4:	300cd0fa 	srli	r6,r6,3
400078c8:	18bfef1e 	bne	r3,r2,40007888 <__alt_data_end+0xc0007888>
400078cc:	303fdf26 	beq	r6,zero,4000784c <__alt_data_end+0xc000784c>
400078d0:	31801034 	orhi	r6,r6,64
400078d4:	00ffffc4 	movi	r3,-1
400078d8:	003feb06 	br	40007888 <__alt_data_end+0xc0007888>
400078dc:	0080e784 	movi	r2,926
400078e0:	1205c83a 	sub	r2,r2,r8
400078e4:	00c007c4 	movi	r3,31
400078e8:	31802034 	orhi	r6,r6,128
400078ec:	18800916 	blt	r3,r2,40007914 <__truncdfsf2+0x160>
400078f0:	423f2084 	addi	r8,r8,-894
400078f4:	3a06983a 	sll	r3,r7,r8
400078f8:	3210983a 	sll	r8,r6,r8
400078fc:	388ed83a 	srl	r7,r7,r2
40007900:	180cc03a 	cmpne	r6,r3,zero
40007904:	418cb03a 	or	r6,r8,r6
40007908:	31ccb03a 	or	r6,r6,r7
4000790c:	0007883a 	mov	r3,zero
40007910:	003fc006 	br	40007814 <__alt_data_end+0xc0007814>
40007914:	00c0df84 	movi	r3,894
40007918:	1a07c83a 	sub	r3,r3,r8
4000791c:	01000804 	movi	r4,32
40007920:	30c6d83a 	srl	r3,r6,r3
40007924:	11000726 	beq	r2,r4,40007944 <__truncdfsf2+0x190>
40007928:	423f2884 	addi	r8,r8,-862
4000792c:	3210983a 	sll	r8,r6,r8
40007930:	41ceb03a 	or	r7,r8,r7
40007934:	380ec03a 	cmpne	r7,r7,zero
40007938:	38ccb03a 	or	r6,r7,r3
4000793c:	0007883a 	mov	r3,zero
40007940:	003fb406 	br	40007814 <__alt_data_end+0xc0007814>
40007944:	0011883a 	mov	r8,zero
40007948:	003ff906 	br	40007930 <__alt_data_end+0xc0007930>

4000794c <_Unwind_ForcedUnwind_Phase2>:
4000794c:	defff404 	addi	sp,sp,-48
40007950:	dd800915 	stw	r22,36(sp)
40007954:	059000b4 	movhi	r22,16386
40007958:	ddc00a15 	stw	r23,40(sp)
4000795c:	dd400815 	stw	r21,32(sp)
40007960:	dd000715 	stw	r20,28(sp)
40007964:	dcc00615 	stw	r19,24(sp)
40007968:	dc400415 	stw	r17,16(sp)
4000796c:	dc000315 	stw	r16,12(sp)
40007970:	dfc00b15 	stw	ra,44(sp)
40007974:	dc800515 	stw	r18,20(sp)
40007978:	2021883a 	mov	r16,r4
4000797c:	2823883a 	mov	r17,r5
40007980:	24c00317 	ldw	r19,12(r4)
40007984:	25000417 	ldw	r20,16(r4)
40007988:	28c00017 	ldw	r3,0(r5)
4000798c:	b5a21b04 	addi	r22,r22,-30612
40007990:	054001c4 	movi	r21,7
40007994:	05c00204 	movi	r23,8
40007998:	00001606 	br	400079f4 <_Unwind_ForcedUnwind_Phase2+0xa8>
4000799c:	81800017 	ldw	r6,0(r16)
400079a0:	81c00117 	ldw	r7,4(r16)
400079a4:	1c800617 	ldw	r18,24(r3)
400079a8:	dc000015 	stw	r16,0(sp)
400079ac:	dc400115 	stw	r17,4(sp)
400079b0:	dd000215 	stw	r20,8(sp)
400079b4:	983ee83a 	callr	r19
400079b8:	01000044 	movi	r4,1
400079bc:	01400284 	movi	r5,10
400079c0:	1000241e 	bne	r2,zero,40007a54 <_Unwind_ForcedUnwind_Phase2+0x108>
400079c4:	90000726 	beq	r18,zero,400079e4 <_Unwind_ForcedUnwind_Phase2+0x98>
400079c8:	81800017 	ldw	r6,0(r16)
400079cc:	81c00117 	ldw	r7,4(r16)
400079d0:	dc000015 	stw	r16,0(sp)
400079d4:	dc400115 	stw	r17,4(sp)
400079d8:	903ee83a 	callr	r18
400079dc:	15401f26 	beq	r2,r21,40007a5c <_Unwind_ForcedUnwind_Phase2+0x110>
400079e0:	15c01c1e 	bne	r2,r23,40007a54 <_Unwind_ForcedUnwind_Phase2+0x108>
400079e4:	88800017 	ldw	r2,0(r17)
400079e8:	10c00017 	ldw	r3,0(r2)
400079ec:	b0c00015 	stw	r3,0(r22)
400079f0:	88c00015 	stw	r3,0(r17)
400079f4:	01000044 	movi	r4,1
400079f8:	01400284 	movi	r5,10
400079fc:	183fe71e 	bne	r3,zero,4000799c <__alt_data_end+0xc000799c>
40007a00:	81800017 	ldw	r6,0(r16)
40007a04:	81c00117 	ldw	r7,4(r16)
40007a08:	01000044 	movi	r4,1
40007a0c:	dc000015 	stw	r16,0(sp)
40007a10:	dc400115 	stw	r17,4(sp)
40007a14:	dd000215 	stw	r20,8(sp)
40007a18:	01400684 	movi	r5,26
40007a1c:	983ee83a 	callr	r19
40007a20:	10000c1e 	bne	r2,zero,40007a54 <_Unwind_ForcedUnwind_Phase2+0x108>
40007a24:	00800144 	movi	r2,5
40007a28:	dfc00b17 	ldw	ra,44(sp)
40007a2c:	ddc00a17 	ldw	r23,40(sp)
40007a30:	dd800917 	ldw	r22,36(sp)
40007a34:	dd400817 	ldw	r21,32(sp)
40007a38:	dd000717 	ldw	r20,28(sp)
40007a3c:	dcc00617 	ldw	r19,24(sp)
40007a40:	dc800517 	ldw	r18,20(sp)
40007a44:	dc400417 	ldw	r17,16(sp)
40007a48:	dc000317 	ldw	r16,12(sp)
40007a4c:	dec00c04 	addi	sp,sp,48
40007a50:	f800283a 	ret
40007a54:	00800084 	movi	r2,2
40007a58:	003ff306 	br	40007a28 <__alt_data_end+0xc0007a28>
40007a5c:	a805883a 	mov	r2,r21
40007a60:	003ff106 	br	40007a28 <__alt_data_end+0xc0007a28>

40007a64 <_Unwind_RaiseException_Phase2>:
40007a64:	28c00017 	ldw	r3,0(r5)
40007a68:	defff804 	addi	sp,sp,-32
40007a6c:	dcc00515 	stw	r19,20(sp)
40007a70:	dc800415 	stw	r18,16(sp)
40007a74:	dc400315 	stw	r17,12(sp)
40007a78:	dc000215 	stw	r16,8(sp)
40007a7c:	dfc00715 	stw	ra,28(sp)
40007a80:	dd000615 	stw	r20,24(sp)
40007a84:	2823883a 	mov	r17,r5
40007a88:	2021883a 	mov	r16,r4
40007a8c:	048001c4 	movi	r18,7
40007a90:	04c00204 	movi	r19,8
40007a94:	18001326 	beq	r3,zero,40007ae4 <_Unwind_RaiseException_Phase2+0x80>
40007a98:	81000417 	ldw	r4,16(r16)
40007a9c:	1a000617 	ldw	r8,24(r3)
40007aa0:	19001c26 	beq	r3,r4,40007b14 <_Unwind_RaiseException_Phase2+0xb0>
40007aa4:	40000b26 	beq	r8,zero,40007ad4 <_Unwind_RaiseException_Phase2+0x70>
40007aa8:	01400084 	movi	r5,2
40007aac:	0029883a 	mov	r20,zero
40007ab0:	81800017 	ldw	r6,0(r16)
40007ab4:	81c00117 	ldw	r7,4(r16)
40007ab8:	01000044 	movi	r4,1
40007abc:	dc000015 	stw	r16,0(sp)
40007ac0:	dc400115 	stw	r17,4(sp)
40007ac4:	403ee83a 	callr	r8
40007ac8:	14800f26 	beq	r2,r18,40007b08 <_Unwind_RaiseException_Phase2+0xa4>
40007acc:	14c0051e 	bne	r2,r19,40007ae4 <_Unwind_RaiseException_Phase2+0x80>
40007ad0:	a0000f1e 	bne	r20,zero,40007b10 <_Unwind_RaiseException_Phase2+0xac>
40007ad4:	88c00017 	ldw	r3,0(r17)
40007ad8:	18c00017 	ldw	r3,0(r3)
40007adc:	88c00015 	stw	r3,0(r17)
40007ae0:	183fed1e 	bne	r3,zero,40007a98 <__alt_data_end+0xc0007a98>
40007ae4:	00800084 	movi	r2,2
40007ae8:	dfc00717 	ldw	ra,28(sp)
40007aec:	dd000617 	ldw	r20,24(sp)
40007af0:	dcc00517 	ldw	r19,20(sp)
40007af4:	dc800417 	ldw	r18,16(sp)
40007af8:	dc400317 	ldw	r17,12(sp)
40007afc:	dc000217 	ldw	r16,8(sp)
40007b00:	dec00804 	addi	sp,sp,32
40007b04:	f800283a 	ret
40007b08:	9005883a 	mov	r2,r18
40007b0c:	003ff606 	br	40007ae8 <__alt_data_end+0xc0007ae8>
40007b10:	0007ed00 	call	40007ed0 <abort>
40007b14:	403ffe26 	beq	r8,zero,40007b10 <__alt_data_end+0xc0007b10>
40007b18:	01400184 	movi	r5,6
40007b1c:	05000104 	movi	r20,4
40007b20:	003fe306 	br	40007ab0 <__alt_data_end+0xc0007ab0>

40007b24 <uw_install_context.isra.1>:
40007b24:	20c00017 	ldw	r3,0(r4)
40007b28:	deffff04 	addi	sp,sp,-4
40007b2c:	015000b4 	movhi	r5,16386
40007b30:	19000917 	ldw	r4,36(r3)
40007b34:	df000015 	stw	fp,0(sp)
40007b38:	18800804 	addi	r2,r3,32
40007b3c:	d839883a 	mov	fp,sp
40007b40:	29621b04 	addi	r5,r5,-30612
40007b44:	28c00015 	stw	r3,0(r5)
40007b48:	17000017 	ldw	fp,0(r2)
40007b4c:	1ec00a17 	ldw	sp,40(r3)
40007b50:	2000683a 	jmp	r4

40007b54 <_Unwind_SjLj_Register>:
40007b54:	009000b4 	movhi	r2,16386
40007b58:	10a21b04 	addi	r2,r2,-30612
40007b5c:	10c00017 	ldw	r3,0(r2)
40007b60:	11000015 	stw	r4,0(r2)
40007b64:	20c00015 	stw	r3,0(r4)
40007b68:	f800283a 	ret

40007b6c <_Unwind_SjLj_Unregister>:
40007b6c:	20c00017 	ldw	r3,0(r4)
40007b70:	009000b4 	movhi	r2,16386
40007b74:	10a21b04 	addi	r2,r2,-30612
40007b78:	10c00015 	stw	r3,0(r2)
40007b7c:	f800283a 	ret

40007b80 <_Unwind_GetGR>:
40007b80:	20800017 	ldw	r2,0(r4)
40007b84:	29400084 	addi	r5,r5,2
40007b88:	294b883a 	add	r5,r5,r5
40007b8c:	294b883a 	add	r5,r5,r5
40007b90:	114b883a 	add	r5,r2,r5
40007b94:	28800017 	ldw	r2,0(r5)
40007b98:	f800283a 	ret

40007b9c <_Unwind_GetCFA>:
40007b9c:	20800017 	ldw	r2,0(r4)
40007ba0:	10000226 	beq	r2,zero,40007bac <_Unwind_GetCFA+0x10>
40007ba4:	10800a17 	ldw	r2,40(r2)
40007ba8:	f800283a 	ret
40007bac:	0005883a 	mov	r2,zero
40007bb0:	f800283a 	ret

40007bb4 <_Unwind_SetGR>:
40007bb4:	20800017 	ldw	r2,0(r4)
40007bb8:	29400084 	addi	r5,r5,2
40007bbc:	294b883a 	add	r5,r5,r5
40007bc0:	294b883a 	add	r5,r5,r5
40007bc4:	114b883a 	add	r5,r2,r5
40007bc8:	29800015 	stw	r6,0(r5)
40007bcc:	f800283a 	ret

40007bd0 <_Unwind_GetIP>:
40007bd0:	20800017 	ldw	r2,0(r4)
40007bd4:	10800117 	ldw	r2,4(r2)
40007bd8:	10800044 	addi	r2,r2,1
40007bdc:	f800283a 	ret

40007be0 <_Unwind_GetIPInfo>:
40007be0:	20800017 	ldw	r2,0(r4)
40007be4:	28000015 	stw	zero,0(r5)
40007be8:	10000326 	beq	r2,zero,40007bf8 <_Unwind_GetIPInfo+0x18>
40007bec:	10800117 	ldw	r2,4(r2)
40007bf0:	10800044 	addi	r2,r2,1
40007bf4:	f800283a 	ret
40007bf8:	0005883a 	mov	r2,zero
40007bfc:	f800283a 	ret

40007c00 <_Unwind_SetIP>:
40007c00:	20800017 	ldw	r2,0(r4)
40007c04:	297fffc4 	addi	r5,r5,-1
40007c08:	11400115 	stw	r5,4(r2)
40007c0c:	f800283a 	ret

40007c10 <_Unwind_GetLanguageSpecificData>:
40007c10:	20800017 	ldw	r2,0(r4)
40007c14:	10800717 	ldw	r2,28(r2)
40007c18:	f800283a 	ret

40007c1c <_Unwind_GetRegionStart>:
40007c1c:	0005883a 	mov	r2,zero
40007c20:	f800283a 	ret

40007c24 <_Unwind_FindEnclosingFunction>:
40007c24:	0005883a 	mov	r2,zero
40007c28:	f800283a 	ret

40007c2c <_Unwind_GetDataRelBase>:
40007c2c:	0005883a 	mov	r2,zero
40007c30:	f800283a 	ret

40007c34 <_Unwind_GetTextRelBase>:
40007c34:	0005883a 	mov	r2,zero
40007c38:	f800283a 	ret

40007c3c <_Unwind_SjLj_RaiseException>:
40007c3c:	009000b4 	movhi	r2,16386
40007c40:	defff804 	addi	sp,sp,-32
40007c44:	10a21b04 	addi	r2,r2,-30612
40007c48:	dc800515 	stw	r18,20(sp)
40007c4c:	14800017 	ldw	r18,0(r2)
40007c50:	dfc00715 	stw	ra,28(sp)
40007c54:	dcc00615 	stw	r19,24(sp)
40007c58:	dc400415 	stw	r17,16(sp)
40007c5c:	dc000315 	stw	r16,12(sp)
40007c60:	dc800215 	stw	r18,8(sp)
40007c64:	90001426 	beq	r18,zero,40007cb8 <_Unwind_SjLj_RaiseException+0x7c>
40007c68:	2021883a 	mov	r16,r4
40007c6c:	9005883a 	mov	r2,r18
40007c70:	04400184 	movi	r17,6
40007c74:	04c00204 	movi	r19,8
40007c78:	10800617 	ldw	r2,24(r2)
40007c7c:	10000a26 	beq	r2,zero,40007ca8 <_Unwind_SjLj_RaiseException+0x6c>
40007c80:	81800017 	ldw	r6,0(r16)
40007c84:	81c00117 	ldw	r7,4(r16)
40007c88:	01000044 	movi	r4,1
40007c8c:	d8c00204 	addi	r3,sp,8
40007c90:	dc000015 	stw	r16,0(sp)
40007c94:	d8c00115 	stw	r3,4(sp)
40007c98:	200b883a 	mov	r5,r4
40007c9c:	103ee83a 	callr	r2
40007ca0:	14400d26 	beq	r2,r17,40007cd8 <_Unwind_SjLj_RaiseException+0x9c>
40007ca4:	14c0171e 	bne	r2,r19,40007d04 <_Unwind_SjLj_RaiseException+0xc8>
40007ca8:	d8800217 	ldw	r2,8(sp)
40007cac:	10800017 	ldw	r2,0(r2)
40007cb0:	d8800215 	stw	r2,8(sp)
40007cb4:	103ff01e 	bne	r2,zero,40007c78 <__alt_data_end+0xc0007c78>
40007cb8:	00800144 	movi	r2,5
40007cbc:	dfc00717 	ldw	ra,28(sp)
40007cc0:	dcc00617 	ldw	r19,24(sp)
40007cc4:	dc800517 	ldw	r18,20(sp)
40007cc8:	dc400417 	ldw	r17,16(sp)
40007ccc:	dc000317 	ldw	r16,12(sp)
40007cd0:	dec00804 	addi	sp,sp,32
40007cd4:	f800283a 	ret
40007cd8:	d8800217 	ldw	r2,8(sp)
40007cdc:	80000315 	stw	zero,12(r16)
40007ce0:	8009883a 	mov	r4,r16
40007ce4:	80800415 	stw	r2,16(r16)
40007ce8:	d9400204 	addi	r5,sp,8
40007cec:	dc800215 	stw	r18,8(sp)
40007cf0:	0007a640 	call	40007a64 <_Unwind_RaiseException_Phase2>
40007cf4:	00c001c4 	movi	r3,7
40007cf8:	10fff01e 	bne	r2,r3,40007cbc <__alt_data_end+0xc0007cbc>
40007cfc:	d9000204 	addi	r4,sp,8
40007d00:	0007b240 	call	40007b24 <uw_install_context.isra.1>
40007d04:	008000c4 	movi	r2,3
40007d08:	003fec06 	br	40007cbc <__alt_data_end+0xc0007cbc>

40007d0c <_Unwind_SjLj_ForcedUnwind>:
40007d0c:	00d000b4 	movhi	r3,16386
40007d10:	18e21b04 	addi	r3,r3,-30612
40007d14:	defffe04 	addi	sp,sp,-8
40007d18:	18c00017 	ldw	r3,0(r3)
40007d1c:	dfc00115 	stw	ra,4(sp)
40007d20:	21400315 	stw	r5,12(r4)
40007d24:	21800415 	stw	r6,16(r4)
40007d28:	d80b883a 	mov	r5,sp
40007d2c:	d8c00015 	stw	r3,0(sp)
40007d30:	000794c0 	call	4000794c <_Unwind_ForcedUnwind_Phase2>
40007d34:	00c001c4 	movi	r3,7
40007d38:	10c00326 	beq	r2,r3,40007d48 <_Unwind_SjLj_ForcedUnwind+0x3c>
40007d3c:	dfc00117 	ldw	ra,4(sp)
40007d40:	dec00204 	addi	sp,sp,8
40007d44:	f800283a 	ret
40007d48:	d809883a 	mov	r4,sp
40007d4c:	0007b240 	call	40007b24 <uw_install_context.isra.1>

40007d50 <_Unwind_SjLj_Resume>:
40007d50:	00d000b4 	movhi	r3,16386
40007d54:	18e21b04 	addi	r3,r3,-30612
40007d58:	18c00017 	ldw	r3,0(r3)
40007d5c:	20800317 	ldw	r2,12(r4)
40007d60:	defffe04 	addi	sp,sp,-8
40007d64:	dfc00115 	stw	ra,4(sp)
40007d68:	d8c00015 	stw	r3,0(sp)
40007d6c:	d80b883a 	mov	r5,sp
40007d70:	1000041e 	bne	r2,zero,40007d84 <_Unwind_SjLj_Resume+0x34>
40007d74:	0007a640 	call	40007a64 <_Unwind_RaiseException_Phase2>
40007d78:	00c001c4 	movi	r3,7
40007d7c:	10c00326 	beq	r2,r3,40007d8c <_Unwind_SjLj_Resume+0x3c>
40007d80:	0007ed00 	call	40007ed0 <abort>
40007d84:	000794c0 	call	4000794c <_Unwind_ForcedUnwind_Phase2>
40007d88:	003ffb06 	br	40007d78 <__alt_data_end+0xc0007d78>
40007d8c:	d809883a 	mov	r4,sp
40007d90:	0007b240 	call	40007b24 <uw_install_context.isra.1>

40007d94 <_Unwind_SjLj_Resume_or_Rethrow>:
40007d94:	20800317 	ldw	r2,12(r4)
40007d98:	defffe04 	addi	sp,sp,-8
40007d9c:	dfc00115 	stw	ra,4(sp)
40007da0:	1000041e 	bne	r2,zero,40007db4 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
40007da4:	0007c3c0 	call	40007c3c <_Unwind_SjLj_RaiseException>
40007da8:	dfc00117 	ldw	ra,4(sp)
40007dac:	dec00204 	addi	sp,sp,8
40007db0:	f800283a 	ret
40007db4:	009000b4 	movhi	r2,16386
40007db8:	10a21b04 	addi	r2,r2,-30612
40007dbc:	10800017 	ldw	r2,0(r2)
40007dc0:	d80b883a 	mov	r5,sp
40007dc4:	d8800015 	stw	r2,0(sp)
40007dc8:	000794c0 	call	4000794c <_Unwind_ForcedUnwind_Phase2>
40007dcc:	00c001c4 	movi	r3,7
40007dd0:	10c00126 	beq	r2,r3,40007dd8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
40007dd4:	0007ed00 	call	40007ed0 <abort>
40007dd8:	d809883a 	mov	r4,sp
40007ddc:	0007b240 	call	40007b24 <uw_install_context.isra.1>

40007de0 <_Unwind_DeleteException>:
40007de0:	20800217 	ldw	r2,8(r4)
40007de4:	200b883a 	mov	r5,r4
40007de8:	10000226 	beq	r2,zero,40007df4 <_Unwind_DeleteException+0x14>
40007dec:	01000044 	movi	r4,1
40007df0:	1000683a 	jmp	r2
40007df4:	f800283a 	ret

40007df8 <_Unwind_Backtrace>:
40007df8:	009000b4 	movhi	r2,16386
40007dfc:	10a21b04 	addi	r2,r2,-30612
40007e00:	10800017 	ldw	r2,0(r2)
40007e04:	defffc04 	addi	sp,sp,-16
40007e08:	dc400215 	stw	r17,8(sp)
40007e0c:	dc000115 	stw	r16,4(sp)
40007e10:	dfc00315 	stw	ra,12(sp)
40007e14:	2023883a 	mov	r17,r4
40007e18:	2821883a 	mov	r16,r5
40007e1c:	d8800015 	stw	r2,0(sp)
40007e20:	00000506 	br	40007e38 <_Unwind_Backtrace+0x40>
40007e24:	883ee83a 	callr	r17
40007e28:	10000e1e 	bne	r2,zero,40007e64 <_Unwind_Backtrace+0x6c>
40007e2c:	d8800017 	ldw	r2,0(sp)
40007e30:	10800017 	ldw	r2,0(r2)
40007e34:	d8800015 	stw	r2,0(sp)
40007e38:	d809883a 	mov	r4,sp
40007e3c:	800b883a 	mov	r5,r16
40007e40:	103ff81e 	bne	r2,zero,40007e24 <__alt_data_end+0xc0007e24>
40007e44:	883ee83a 	callr	r17
40007e48:	1000061e 	bne	r2,zero,40007e64 <_Unwind_Backtrace+0x6c>
40007e4c:	00800144 	movi	r2,5
40007e50:	dfc00317 	ldw	ra,12(sp)
40007e54:	dc400217 	ldw	r17,8(sp)
40007e58:	dc000117 	ldw	r16,4(sp)
40007e5c:	dec00404 	addi	sp,sp,16
40007e60:	f800283a 	ret
40007e64:	008000c4 	movi	r2,3
40007e68:	003ff906 	br	40007e50 <__alt_data_end+0xc0007e50>

40007e6c <__clzsi2>:
40007e6c:	00bfffd4 	movui	r2,65535
40007e70:	11000b36 	bltu	r2,r4,40007ea0 <__clzsi2+0x34>
40007e74:	00803fc4 	movi	r2,255
40007e78:	1100122e 	bgeu	r2,r4,40007ec4 <__clzsi2+0x58>
40007e7c:	00c00204 	movi	r3,8
40007e80:	01400604 	movi	r5,24
40007e84:	20c8d83a 	srl	r4,r4,r3
40007e88:	00900074 	movhi	r2,16385
40007e8c:	10938f04 	addi	r2,r2,20028
40007e90:	1109883a 	add	r4,r2,r4
40007e94:	20800003 	ldbu	r2,0(r4)
40007e98:	2885c83a 	sub	r2,r5,r2
40007e9c:	f800283a 	ret
40007ea0:	00804034 	movhi	r2,256
40007ea4:	10bfffc4 	addi	r2,r2,-1
40007ea8:	11000336 	bltu	r2,r4,40007eb8 <__clzsi2+0x4c>
40007eac:	00c00404 	movi	r3,16
40007eb0:	180b883a 	mov	r5,r3
40007eb4:	003ff306 	br	40007e84 <__alt_data_end+0xc0007e84>
40007eb8:	00c00604 	movi	r3,24
40007ebc:	01400204 	movi	r5,8
40007ec0:	003ff006 	br	40007e84 <__alt_data_end+0xc0007e84>
40007ec4:	0007883a 	mov	r3,zero
40007ec8:	01400804 	movi	r5,32
40007ecc:	003fed06 	br	40007e84 <__alt_data_end+0xc0007e84>

40007ed0 <abort>:
40007ed0:	deffff04 	addi	sp,sp,-4
40007ed4:	01000184 	movi	r4,6
40007ed8:	dfc00015 	stw	ra,0(sp)
40007edc:	0008c980 	call	40008c98 <raise>
40007ee0:	01000044 	movi	r4,1
40007ee4:	00124000 	call	40012400 <_exit>

40007ee8 <__errno>:
40007ee8:	00900074 	movhi	r2,16385
40007eec:	109b2304 	addi	r2,r2,27788
40007ef0:	10800017 	ldw	r2,0(r2)
40007ef4:	f800283a 	ret

40007ef8 <exit>:
40007ef8:	defffe04 	addi	sp,sp,-8
40007efc:	000b883a 	mov	r5,zero
40007f00:	dc000015 	stw	r16,0(sp)
40007f04:	dfc00115 	stw	ra,4(sp)
40007f08:	2021883a 	mov	r16,r4
40007f0c:	000afd40 	call	4000afd4 <__call_exitprocs>
40007f10:	00900074 	movhi	r2,16385
40007f14:	109b2204 	addi	r2,r2,27784
40007f18:	11000017 	ldw	r4,0(r2)
40007f1c:	20800f17 	ldw	r2,60(r4)
40007f20:	10000126 	beq	r2,zero,40007f28 <exit+0x30>
40007f24:	103ee83a 	callr	r2
40007f28:	8009883a 	mov	r4,r16
40007f2c:	00124000 	call	40012400 <_exit>

40007f30 <malloc>:
40007f30:	00900074 	movhi	r2,16385
40007f34:	109b2304 	addi	r2,r2,27788
40007f38:	200b883a 	mov	r5,r4
40007f3c:	11000017 	ldw	r4,0(r2)
40007f40:	0007f581 	jmpi	40007f58 <_malloc_r>

40007f44 <free>:
40007f44:	00900074 	movhi	r2,16385
40007f48:	109b2304 	addi	r2,r2,27788
40007f4c:	200b883a 	mov	r5,r4
40007f50:	11000017 	ldw	r4,0(r2)
40007f54:	000d1ac1 	jmpi	4000d1ac <_free_r>

40007f58 <_malloc_r>:
40007f58:	defff504 	addi	sp,sp,-44
40007f5c:	dc800315 	stw	r18,12(sp)
40007f60:	dfc00a15 	stw	ra,40(sp)
40007f64:	df000915 	stw	fp,36(sp)
40007f68:	ddc00815 	stw	r23,32(sp)
40007f6c:	dd800715 	stw	r22,28(sp)
40007f70:	dd400615 	stw	r21,24(sp)
40007f74:	dd000515 	stw	r20,20(sp)
40007f78:	dcc00415 	stw	r19,16(sp)
40007f7c:	dc400215 	stw	r17,8(sp)
40007f80:	dc000115 	stw	r16,4(sp)
40007f84:	288002c4 	addi	r2,r5,11
40007f88:	00c00584 	movi	r3,22
40007f8c:	2025883a 	mov	r18,r4
40007f90:	18802a2e 	bgeu	r3,r2,4000803c <_malloc_r+0xe4>
40007f94:	047ffe04 	movi	r17,-8
40007f98:	1462703a 	and	r17,r2,r17
40007f9c:	88009e16 	blt	r17,zero,40008218 <_malloc_r+0x2c0>
40007fa0:	89409d36 	bltu	r17,r5,40008218 <_malloc_r+0x2c0>
40007fa4:	0012a480 	call	40012a48 <__malloc_lock>
40007fa8:	00807dc4 	movi	r2,503
40007fac:	14402736 	bltu	r2,r17,4000804c <_malloc_r+0xf4>
40007fb0:	8806d0fa 	srli	r3,r17,3
40007fb4:	04d00074 	movhi	r19,16385
40007fb8:	9cd55804 	addi	r19,r19,21856
40007fbc:	18c5883a 	add	r2,r3,r3
40007fc0:	1085883a 	add	r2,r2,r2
40007fc4:	1085883a 	add	r2,r2,r2
40007fc8:	9885883a 	add	r2,r19,r2
40007fcc:	14000317 	ldw	r16,12(r2)
40007fd0:	80814a26 	beq	r16,r2,400084fc <_malloc_r+0x5a4>
40007fd4:	80c00117 	ldw	r3,4(r16)
40007fd8:	81000317 	ldw	r4,12(r16)
40007fdc:	00bfff04 	movi	r2,-4
40007fe0:	1884703a 	and	r2,r3,r2
40007fe4:	81400217 	ldw	r5,8(r16)
40007fe8:	8085883a 	add	r2,r16,r2
40007fec:	10c00117 	ldw	r3,4(r2)
40007ff0:	29000315 	stw	r4,12(r5)
40007ff4:	21400215 	stw	r5,8(r4)
40007ff8:	18c00054 	ori	r3,r3,1
40007ffc:	10c00115 	stw	r3,4(r2)
40008000:	9009883a 	mov	r4,r18
40008004:	0012a680 	call	40012a68 <__malloc_unlock>
40008008:	80800204 	addi	r2,r16,8
4000800c:	dfc00a17 	ldw	ra,40(sp)
40008010:	df000917 	ldw	fp,36(sp)
40008014:	ddc00817 	ldw	r23,32(sp)
40008018:	dd800717 	ldw	r22,28(sp)
4000801c:	dd400617 	ldw	r21,24(sp)
40008020:	dd000517 	ldw	r20,20(sp)
40008024:	dcc00417 	ldw	r19,16(sp)
40008028:	dc800317 	ldw	r18,12(sp)
4000802c:	dc400217 	ldw	r17,8(sp)
40008030:	dc000117 	ldw	r16,4(sp)
40008034:	dec00b04 	addi	sp,sp,44
40008038:	f800283a 	ret
4000803c:	04400404 	movi	r17,16
40008040:	89407536 	bltu	r17,r5,40008218 <_malloc_r+0x2c0>
40008044:	0012a480 	call	40012a48 <__malloc_lock>
40008048:	003fd906 	br	40007fb0 <__alt_data_end+0xc0007fb0>
4000804c:	8806d27a 	srli	r3,r17,9
40008050:	18007526 	beq	r3,zero,40008228 <_malloc_r+0x2d0>
40008054:	00800104 	movi	r2,4
40008058:	10c0ef36 	bltu	r2,r3,40008418 <_malloc_r+0x4c0>
4000805c:	8806d1ba 	srli	r3,r17,6
40008060:	19c00e04 	addi	r7,r3,56
40008064:	39cb883a 	add	r5,r7,r7
40008068:	04d00074 	movhi	r19,16385
4000806c:	294b883a 	add	r5,r5,r5
40008070:	9cd55804 	addi	r19,r19,21856
40008074:	294b883a 	add	r5,r5,r5
40008078:	994b883a 	add	r5,r19,r5
4000807c:	2c000317 	ldw	r16,12(r5)
40008080:	2c000e26 	beq	r5,r16,400080bc <_malloc_r+0x164>
40008084:	80800117 	ldw	r2,4(r16)
40008088:	01bfff04 	movi	r6,-4
4000808c:	010003c4 	movi	r4,15
40008090:	1184703a 	and	r2,r2,r6
40008094:	1447c83a 	sub	r3,r2,r17
40008098:	20c00716 	blt	r4,r3,400080b8 <_malloc_r+0x160>
4000809c:	1800650e 	bge	r3,zero,40008234 <_malloc_r+0x2dc>
400080a0:	84000317 	ldw	r16,12(r16)
400080a4:	2c000526 	beq	r5,r16,400080bc <_malloc_r+0x164>
400080a8:	80800117 	ldw	r2,4(r16)
400080ac:	1184703a 	and	r2,r2,r6
400080b0:	1447c83a 	sub	r3,r2,r17
400080b4:	20fff90e 	bge	r4,r3,4000809c <__alt_data_end+0xc000809c>
400080b8:	39ffffc4 	addi	r7,r7,-1
400080bc:	38c00044 	addi	r3,r7,1
400080c0:	01900074 	movhi	r6,16385
400080c4:	9c000417 	ldw	r16,16(r19)
400080c8:	31955804 	addi	r6,r6,21856
400080cc:	32400204 	addi	r9,r6,8
400080d0:	82410326 	beq	r16,r9,400084e0 <_malloc_r+0x588>
400080d4:	81000117 	ldw	r4,4(r16)
400080d8:	00bfff04 	movi	r2,-4
400080dc:	208e703a 	and	r7,r4,r2
400080e0:	3c45c83a 	sub	r2,r7,r17
400080e4:	010003c4 	movi	r4,15
400080e8:	2080ee16 	blt	r4,r2,400084a4 <_malloc_r+0x54c>
400080ec:	32400515 	stw	r9,20(r6)
400080f0:	32400415 	stw	r9,16(r6)
400080f4:	1000510e 	bge	r2,zero,4000823c <_malloc_r+0x2e4>
400080f8:	00807fc4 	movi	r2,511
400080fc:	11c0ce36 	bltu	r2,r7,40008438 <_malloc_r+0x4e0>
40008100:	3808d0fa 	srli	r4,r7,3
40008104:	01c00044 	movi	r7,1
40008108:	30800117 	ldw	r2,4(r6)
4000810c:	210b883a 	add	r5,r4,r4
40008110:	294b883a 	add	r5,r5,r5
40008114:	2009d0ba 	srai	r4,r4,2
40008118:	294b883a 	add	r5,r5,r5
4000811c:	298b883a 	add	r5,r5,r6
40008120:	2a000217 	ldw	r8,8(r5)
40008124:	3908983a 	sll	r4,r7,r4
40008128:	81400315 	stw	r5,12(r16)
4000812c:	82000215 	stw	r8,8(r16)
40008130:	2088b03a 	or	r4,r4,r2
40008134:	2c000215 	stw	r16,8(r5)
40008138:	31000115 	stw	r4,4(r6)
4000813c:	44000315 	stw	r16,12(r8)
40008140:	1805d0ba 	srai	r2,r3,2
40008144:	01400044 	movi	r5,1
40008148:	288a983a 	sll	r5,r5,r2
4000814c:	21404336 	bltu	r4,r5,4000825c <_malloc_r+0x304>
40008150:	2144703a 	and	r2,r4,r5
40008154:	10000a1e 	bne	r2,zero,40008180 <_malloc_r+0x228>
40008158:	00bfff04 	movi	r2,-4
4000815c:	294b883a 	add	r5,r5,r5
40008160:	1886703a 	and	r3,r3,r2
40008164:	2144703a 	and	r2,r4,r5
40008168:	18c00104 	addi	r3,r3,4
4000816c:	1000041e 	bne	r2,zero,40008180 <_malloc_r+0x228>
40008170:	294b883a 	add	r5,r5,r5
40008174:	2144703a 	and	r2,r4,r5
40008178:	18c00104 	addi	r3,r3,4
4000817c:	103ffc26 	beq	r2,zero,40008170 <__alt_data_end+0xc0008170>
40008180:	023fff04 	movi	r8,-4
40008184:	01c003c4 	movi	r7,15
40008188:	18c5883a 	add	r2,r3,r3
4000818c:	1085883a 	add	r2,r2,r2
40008190:	1085883a 	add	r2,r2,r2
40008194:	9895883a 	add	r10,r19,r2
40008198:	52c00304 	addi	r11,r10,12
4000819c:	1819883a 	mov	r12,r3
400081a0:	5c000017 	ldw	r16,0(r11)
400081a4:	59bffd04 	addi	r6,r11,-12
400081a8:	8180041e 	bne	r16,r6,400081bc <_malloc_r+0x264>
400081ac:	0000ce06 	br	400084e8 <_malloc_r+0x590>
400081b0:	2000d70e 	bge	r4,zero,40008510 <_malloc_r+0x5b8>
400081b4:	84000317 	ldw	r16,12(r16)
400081b8:	8180cb26 	beq	r16,r6,400084e8 <_malloc_r+0x590>
400081bc:	80800117 	ldw	r2,4(r16)
400081c0:	1204703a 	and	r2,r2,r8
400081c4:	1449c83a 	sub	r4,r2,r17
400081c8:	393ff90e 	bge	r7,r4,400081b0 <__alt_data_end+0xc00081b0>
400081cc:	80800317 	ldw	r2,12(r16)
400081d0:	80c00217 	ldw	r3,8(r16)
400081d4:	89400054 	ori	r5,r17,1
400081d8:	81400115 	stw	r5,4(r16)
400081dc:	18800315 	stw	r2,12(r3)
400081e0:	10c00215 	stw	r3,8(r2)
400081e4:	8463883a 	add	r17,r16,r17
400081e8:	9c400515 	stw	r17,20(r19)
400081ec:	9c400415 	stw	r17,16(r19)
400081f0:	20800054 	ori	r2,r4,1
400081f4:	88800115 	stw	r2,4(r17)
400081f8:	8a400315 	stw	r9,12(r17)
400081fc:	8a400215 	stw	r9,8(r17)
40008200:	8923883a 	add	r17,r17,r4
40008204:	89000015 	stw	r4,0(r17)
40008208:	9009883a 	mov	r4,r18
4000820c:	0012a680 	call	40012a68 <__malloc_unlock>
40008210:	80800204 	addi	r2,r16,8
40008214:	003f7d06 	br	4000800c <__alt_data_end+0xc000800c>
40008218:	00800304 	movi	r2,12
4000821c:	90800015 	stw	r2,0(r18)
40008220:	0005883a 	mov	r2,zero
40008224:	003f7906 	br	4000800c <__alt_data_end+0xc000800c>
40008228:	01401f84 	movi	r5,126
4000822c:	01c00fc4 	movi	r7,63
40008230:	003f8d06 	br	40008068 <__alt_data_end+0xc0008068>
40008234:	81000317 	ldw	r4,12(r16)
40008238:	003f6a06 	br	40007fe4 <__alt_data_end+0xc0007fe4>
4000823c:	81c5883a 	add	r2,r16,r7
40008240:	10c00117 	ldw	r3,4(r2)
40008244:	9009883a 	mov	r4,r18
40008248:	18c00054 	ori	r3,r3,1
4000824c:	10c00115 	stw	r3,4(r2)
40008250:	0012a680 	call	40012a68 <__malloc_unlock>
40008254:	80800204 	addi	r2,r16,8
40008258:	003f6c06 	br	4000800c <__alt_data_end+0xc000800c>
4000825c:	9c000217 	ldw	r16,8(r19)
40008260:	00bfff04 	movi	r2,-4
40008264:	85800117 	ldw	r22,4(r16)
40008268:	b0ac703a 	and	r22,r22,r2
4000826c:	b4400336 	bltu	r22,r17,4000827c <_malloc_r+0x324>
40008270:	b445c83a 	sub	r2,r22,r17
40008274:	00c003c4 	movi	r3,15
40008278:	18805d16 	blt	r3,r2,400083f0 <_malloc_r+0x498>
4000827c:	05d00074 	movhi	r23,16385
40008280:	009000b4 	movhi	r2,16386
40008284:	bddb2404 	addi	r23,r23,27792
40008288:	10a21e04 	addi	r2,r2,-30600
4000828c:	15400017 	ldw	r21,0(r2)
40008290:	b9000017 	ldw	r4,0(r23)
40008294:	00ffffc4 	movi	r3,-1
40008298:	858d883a 	add	r6,r16,r22
4000829c:	8d6b883a 	add	r21,r17,r21
400082a0:	20c0e426 	beq	r4,r3,40008634 <_malloc_r+0x6dc>
400082a4:	ad4403c4 	addi	r21,r21,4111
400082a8:	00fc0004 	movi	r3,-4096
400082ac:	a8ea703a 	and	r21,r21,r3
400082b0:	9009883a 	mov	r4,r18
400082b4:	a80b883a 	mov	r5,r21
400082b8:	d9800015 	stw	r6,0(sp)
400082bc:	00089f40 	call	400089f4 <_sbrk_r>
400082c0:	00ffffc4 	movi	r3,-1
400082c4:	1029883a 	mov	r20,r2
400082c8:	d9800017 	ldw	r6,0(sp)
400082cc:	10c0a426 	beq	r2,r3,40008560 <_malloc_r+0x608>
400082d0:	1180a236 	bltu	r2,r6,4000855c <_malloc_r+0x604>
400082d4:	071001b4 	movhi	fp,16390
400082d8:	e7106904 	addi	fp,fp,16804
400082dc:	e0c00017 	ldw	r3,0(fp)
400082e0:	a8c7883a 	add	r3,r21,r3
400082e4:	e0c00015 	stw	r3,0(fp)
400082e8:	3500da26 	beq	r6,r20,40008654 <_malloc_r+0x6fc>
400082ec:	b9000017 	ldw	r4,0(r23)
400082f0:	00bfffc4 	movi	r2,-1
400082f4:	2080e426 	beq	r4,r2,40008688 <_malloc_r+0x730>
400082f8:	a185c83a 	sub	r2,r20,r6
400082fc:	1885883a 	add	r2,r3,r2
40008300:	e0800015 	stw	r2,0(fp)
40008304:	a0c001cc 	andi	r3,r20,7
40008308:	1800b526 	beq	r3,zero,400085e0 <_malloc_r+0x688>
4000830c:	a0e9c83a 	sub	r20,r20,r3
40008310:	00840204 	movi	r2,4104
40008314:	a5000204 	addi	r20,r20,8
40008318:	10c7c83a 	sub	r3,r2,r3
4000831c:	a545883a 	add	r2,r20,r21
40008320:	1083ffcc 	andi	r2,r2,4095
40008324:	18abc83a 	sub	r21,r3,r2
40008328:	9009883a 	mov	r4,r18
4000832c:	a80b883a 	mov	r5,r21
40008330:	00089f40 	call	400089f4 <_sbrk_r>
40008334:	00ffffc4 	movi	r3,-1
40008338:	10c0d026 	beq	r2,r3,4000867c <_malloc_r+0x724>
4000833c:	1507c83a 	sub	r3,r2,r20
40008340:	a8c7883a 	add	r3,r21,r3
40008344:	18c00054 	ori	r3,r3,1
40008348:	e0800017 	ldw	r2,0(fp)
4000834c:	9d000215 	stw	r20,8(r19)
40008350:	a0c00115 	stw	r3,4(r20)
40008354:	a887883a 	add	r3,r21,r2
40008358:	e0c00015 	stw	r3,0(fp)
4000835c:	84c00e26 	beq	r16,r19,40008398 <_malloc_r+0x440>
40008360:	018003c4 	movi	r6,15
40008364:	3580a02e 	bgeu	r6,r22,400085e8 <_malloc_r+0x690>
40008368:	81400117 	ldw	r5,4(r16)
4000836c:	013ffe04 	movi	r4,-8
40008370:	b0bffd04 	addi	r2,r22,-12
40008374:	1104703a 	and	r2,r2,r4
40008378:	2900004c 	andi	r4,r5,1
4000837c:	1108b03a 	or	r4,r2,r4
40008380:	81000115 	stw	r4,4(r16)
40008384:	01400144 	movi	r5,5
40008388:	8089883a 	add	r4,r16,r2
4000838c:	21400115 	stw	r5,4(r4)
40008390:	21400215 	stw	r5,8(r4)
40008394:	3080c036 	bltu	r6,r2,40008698 <_malloc_r+0x740>
40008398:	009000b4 	movhi	r2,16386
4000839c:	10a21d04 	addi	r2,r2,-30604
400083a0:	11000017 	ldw	r4,0(r2)
400083a4:	20c0012e 	bgeu	r4,r3,400083ac <_malloc_r+0x454>
400083a8:	10c00015 	stw	r3,0(r2)
400083ac:	009000b4 	movhi	r2,16386
400083b0:	10a21c04 	addi	r2,r2,-30608
400083b4:	11000017 	ldw	r4,0(r2)
400083b8:	9c000217 	ldw	r16,8(r19)
400083bc:	20c0012e 	bgeu	r4,r3,400083c4 <_malloc_r+0x46c>
400083c0:	10c00015 	stw	r3,0(r2)
400083c4:	80c00117 	ldw	r3,4(r16)
400083c8:	00bfff04 	movi	r2,-4
400083cc:	1886703a 	and	r3,r3,r2
400083d0:	1c45c83a 	sub	r2,r3,r17
400083d4:	1c400236 	bltu	r3,r17,400083e0 <_malloc_r+0x488>
400083d8:	00c003c4 	movi	r3,15
400083dc:	18800416 	blt	r3,r2,400083f0 <_malloc_r+0x498>
400083e0:	9009883a 	mov	r4,r18
400083e4:	0012a680 	call	40012a68 <__malloc_unlock>
400083e8:	0005883a 	mov	r2,zero
400083ec:	003f0706 	br	4000800c <__alt_data_end+0xc000800c>
400083f0:	88c00054 	ori	r3,r17,1
400083f4:	80c00115 	stw	r3,4(r16)
400083f8:	8463883a 	add	r17,r16,r17
400083fc:	10800054 	ori	r2,r2,1
40008400:	9c400215 	stw	r17,8(r19)
40008404:	88800115 	stw	r2,4(r17)
40008408:	9009883a 	mov	r4,r18
4000840c:	0012a680 	call	40012a68 <__malloc_unlock>
40008410:	80800204 	addi	r2,r16,8
40008414:	003efd06 	br	4000800c <__alt_data_end+0xc000800c>
40008418:	00800504 	movi	r2,20
4000841c:	10c0482e 	bgeu	r2,r3,40008540 <_malloc_r+0x5e8>
40008420:	00801504 	movi	r2,84
40008424:	10c06836 	bltu	r2,r3,400085c8 <_malloc_r+0x670>
40008428:	8806d33a 	srli	r3,r17,12
4000842c:	19c01b84 	addi	r7,r3,110
40008430:	39cb883a 	add	r5,r7,r7
40008434:	003f0c06 	br	40008068 <__alt_data_end+0xc0008068>
40008438:	3804d27a 	srli	r2,r7,9
4000843c:	01000104 	movi	r4,4
40008440:	2080422e 	bgeu	r4,r2,4000854c <_malloc_r+0x5f4>
40008444:	01000504 	movi	r4,20
40008448:	20807c36 	bltu	r4,r2,4000863c <_malloc_r+0x6e4>
4000844c:	110016c4 	addi	r4,r2,91
40008450:	210b883a 	add	r5,r4,r4
40008454:	294b883a 	add	r5,r5,r5
40008458:	294b883a 	add	r5,r5,r5
4000845c:	994b883a 	add	r5,r19,r5
40008460:	28800217 	ldw	r2,8(r5)
40008464:	02100074 	movhi	r8,16385
40008468:	42155804 	addi	r8,r8,21856
4000846c:	11406326 	beq	r2,r5,400085fc <_malloc_r+0x6a4>
40008470:	01bfff04 	movi	r6,-4
40008474:	11000117 	ldw	r4,4(r2)
40008478:	2188703a 	and	r4,r4,r6
4000847c:	3900022e 	bgeu	r7,r4,40008488 <_malloc_r+0x530>
40008480:	10800217 	ldw	r2,8(r2)
40008484:	28bffb1e 	bne	r5,r2,40008474 <__alt_data_end+0xc0008474>
40008488:	11800317 	ldw	r6,12(r2)
4000848c:	99000117 	ldw	r4,4(r19)
40008490:	81800315 	stw	r6,12(r16)
40008494:	80800215 	stw	r2,8(r16)
40008498:	34000215 	stw	r16,8(r6)
4000849c:	14000315 	stw	r16,12(r2)
400084a0:	003f2706 	br	40008140 <__alt_data_end+0xc0008140>
400084a4:	88c00054 	ori	r3,r17,1
400084a8:	80c00115 	stw	r3,4(r16)
400084ac:	8463883a 	add	r17,r16,r17
400084b0:	34400515 	stw	r17,20(r6)
400084b4:	34400415 	stw	r17,16(r6)
400084b8:	10c00054 	ori	r3,r2,1
400084bc:	8a400315 	stw	r9,12(r17)
400084c0:	8a400215 	stw	r9,8(r17)
400084c4:	88c00115 	stw	r3,4(r17)
400084c8:	88a3883a 	add	r17,r17,r2
400084cc:	88800015 	stw	r2,0(r17)
400084d0:	9009883a 	mov	r4,r18
400084d4:	0012a680 	call	40012a68 <__malloc_unlock>
400084d8:	80800204 	addi	r2,r16,8
400084dc:	003ecb06 	br	4000800c <__alt_data_end+0xc000800c>
400084e0:	31000117 	ldw	r4,4(r6)
400084e4:	003f1606 	br	40008140 <__alt_data_end+0xc0008140>
400084e8:	63000044 	addi	r12,r12,1
400084ec:	608000cc 	andi	r2,r12,3
400084f0:	5ac00204 	addi	r11,r11,8
400084f4:	103f2a1e 	bne	r2,zero,400081a0 <__alt_data_end+0xc00081a0>
400084f8:	00002106 	br	40008580 <_malloc_r+0x628>
400084fc:	80800204 	addi	r2,r16,8
40008500:	84000517 	ldw	r16,20(r16)
40008504:	143eb31e 	bne	r2,r16,40007fd4 <__alt_data_end+0xc0007fd4>
40008508:	18c00084 	addi	r3,r3,2
4000850c:	003eec06 	br	400080c0 <__alt_data_end+0xc00080c0>
40008510:	8085883a 	add	r2,r16,r2
40008514:	10c00117 	ldw	r3,4(r2)
40008518:	81000317 	ldw	r4,12(r16)
4000851c:	81400217 	ldw	r5,8(r16)
40008520:	18c00054 	ori	r3,r3,1
40008524:	10c00115 	stw	r3,4(r2)
40008528:	29000315 	stw	r4,12(r5)
4000852c:	21400215 	stw	r5,8(r4)
40008530:	9009883a 	mov	r4,r18
40008534:	0012a680 	call	40012a68 <__malloc_unlock>
40008538:	80800204 	addi	r2,r16,8
4000853c:	003eb306 	br	4000800c <__alt_data_end+0xc000800c>
40008540:	19c016c4 	addi	r7,r3,91
40008544:	39cb883a 	add	r5,r7,r7
40008548:	003ec706 	br	40008068 <__alt_data_end+0xc0008068>
4000854c:	3804d1ba 	srli	r2,r7,6
40008550:	11000e04 	addi	r4,r2,56
40008554:	210b883a 	add	r5,r4,r4
40008558:	003fbe06 	br	40008454 <__alt_data_end+0xc0008454>
4000855c:	84ff5d26 	beq	r16,r19,400082d4 <__alt_data_end+0xc00082d4>
40008560:	9c000217 	ldw	r16,8(r19)
40008564:	00bfff04 	movi	r2,-4
40008568:	80c00117 	ldw	r3,4(r16)
4000856c:	1886703a 	and	r3,r3,r2
40008570:	003f9706 	br	400083d0 <__alt_data_end+0xc00083d0>
40008574:	52800017 	ldw	r10,0(r10)
40008578:	18ffffc4 	addi	r3,r3,-1
4000857c:	50805c1e 	bne	r10,r2,400086f0 <_malloc_r+0x798>
40008580:	190000cc 	andi	r4,r3,3
40008584:	50bffe04 	addi	r2,r10,-8
40008588:	203ffa1e 	bne	r4,zero,40008574 <__alt_data_end+0xc0008574>
4000858c:	98800117 	ldw	r2,4(r19)
40008590:	0146303a 	nor	r3,zero,r5
40008594:	1884703a 	and	r2,r3,r2
40008598:	98800115 	stw	r2,4(r19)
4000859c:	294b883a 	add	r5,r5,r5
400085a0:	117f2e36 	bltu	r2,r5,4000825c <__alt_data_end+0xc000825c>
400085a4:	283f2d26 	beq	r5,zero,4000825c <__alt_data_end+0xc000825c>
400085a8:	1146703a 	and	r3,r2,r5
400085ac:	1800521e 	bne	r3,zero,400086f8 <_malloc_r+0x7a0>
400085b0:	6007883a 	mov	r3,r12
400085b4:	294b883a 	add	r5,r5,r5
400085b8:	1148703a 	and	r4,r2,r5
400085bc:	18c00104 	addi	r3,r3,4
400085c0:	203ffc26 	beq	r4,zero,400085b4 <__alt_data_end+0xc00085b4>
400085c4:	003ef006 	br	40008188 <__alt_data_end+0xc0008188>
400085c8:	00805504 	movi	r2,340
400085cc:	10c01336 	bltu	r2,r3,4000861c <_malloc_r+0x6c4>
400085d0:	8806d3fa 	srli	r3,r17,15
400085d4:	19c01dc4 	addi	r7,r3,119
400085d8:	39cb883a 	add	r5,r7,r7
400085dc:	003ea206 	br	40008068 <__alt_data_end+0xc0008068>
400085e0:	00c40004 	movi	r3,4096
400085e4:	003f4d06 	br	4000831c <__alt_data_end+0xc000831c>
400085e8:	00800044 	movi	r2,1
400085ec:	a0800115 	stw	r2,4(r20)
400085f0:	a021883a 	mov	r16,r20
400085f4:	0007883a 	mov	r3,zero
400085f8:	003f7506 	br	400083d0 <__alt_data_end+0xc00083d0>
400085fc:	200bd0ba 	srai	r5,r4,2
40008600:	01800044 	movi	r6,1
40008604:	41000117 	ldw	r4,4(r8)
40008608:	314a983a 	sll	r5,r6,r5
4000860c:	100d883a 	mov	r6,r2
40008610:	2908b03a 	or	r4,r5,r4
40008614:	41000115 	stw	r4,4(r8)
40008618:	003f9d06 	br	40008490 <__alt_data_end+0xc0008490>
4000861c:	00815504 	movi	r2,1364
40008620:	10c01336 	bltu	r2,r3,40008670 <_malloc_r+0x718>
40008624:	8806d4ba 	srli	r3,r17,18
40008628:	19c01f04 	addi	r7,r3,124
4000862c:	39cb883a 	add	r5,r7,r7
40008630:	003e8d06 	br	40008068 <__alt_data_end+0xc0008068>
40008634:	ad400404 	addi	r21,r21,16
40008638:	003f1d06 	br	400082b0 <__alt_data_end+0xc00082b0>
4000863c:	01001504 	movi	r4,84
40008640:	20801c36 	bltu	r4,r2,400086b4 <_malloc_r+0x75c>
40008644:	3804d33a 	srli	r2,r7,12
40008648:	11001b84 	addi	r4,r2,110
4000864c:	210b883a 	add	r5,r4,r4
40008650:	003f8006 	br	40008454 <__alt_data_end+0xc0008454>
40008654:	3083ffcc 	andi	r2,r6,4095
40008658:	103f241e 	bne	r2,zero,400082ec <__alt_data_end+0xc00082ec>
4000865c:	99000217 	ldw	r4,8(r19)
40008660:	ad85883a 	add	r2,r21,r22
40008664:	10800054 	ori	r2,r2,1
40008668:	20800115 	stw	r2,4(r4)
4000866c:	003f4a06 	br	40008398 <__alt_data_end+0xc0008398>
40008670:	01403f04 	movi	r5,252
40008674:	01c01f84 	movi	r7,126
40008678:	003e7b06 	br	40008068 <__alt_data_end+0xc0008068>
4000867c:	00c00044 	movi	r3,1
40008680:	002b883a 	mov	r21,zero
40008684:	003f3006 	br	40008348 <__alt_data_end+0xc0008348>
40008688:	00900074 	movhi	r2,16385
4000868c:	109b2404 	addi	r2,r2,27792
40008690:	15000015 	stw	r20,0(r2)
40008694:	003f1b06 	br	40008304 <__alt_data_end+0xc0008304>
40008698:	9009883a 	mov	r4,r18
4000869c:	81400204 	addi	r5,r16,8
400086a0:	000d1ac0 	call	4000d1ac <_free_r>
400086a4:	009001b4 	movhi	r2,16390
400086a8:	10906904 	addi	r2,r2,16804
400086ac:	10c00017 	ldw	r3,0(r2)
400086b0:	003f3906 	br	40008398 <__alt_data_end+0xc0008398>
400086b4:	01005504 	movi	r4,340
400086b8:	20800436 	bltu	r4,r2,400086cc <_malloc_r+0x774>
400086bc:	3804d3fa 	srli	r2,r7,15
400086c0:	11001dc4 	addi	r4,r2,119
400086c4:	210b883a 	add	r5,r4,r4
400086c8:	003f6206 	br	40008454 <__alt_data_end+0xc0008454>
400086cc:	01015504 	movi	r4,1364
400086d0:	20800436 	bltu	r4,r2,400086e4 <_malloc_r+0x78c>
400086d4:	3804d4ba 	srli	r2,r7,18
400086d8:	11001f04 	addi	r4,r2,124
400086dc:	210b883a 	add	r5,r4,r4
400086e0:	003f5c06 	br	40008454 <__alt_data_end+0xc0008454>
400086e4:	01403f04 	movi	r5,252
400086e8:	01001f84 	movi	r4,126
400086ec:	003f5906 	br	40008454 <__alt_data_end+0xc0008454>
400086f0:	98800117 	ldw	r2,4(r19)
400086f4:	003fa906 	br	4000859c <__alt_data_end+0xc000859c>
400086f8:	6007883a 	mov	r3,r12
400086fc:	003ea206 	br	40008188 <__alt_data_end+0xc0008188>

40008700 <memset>:
40008700:	20c000cc 	andi	r3,r4,3
40008704:	2005883a 	mov	r2,r4
40008708:	18004326 	beq	r3,zero,40008818 <memset+0x118>
4000870c:	31ffffc4 	addi	r7,r6,-1
40008710:	30004026 	beq	r6,zero,40008814 <memset+0x114>
40008714:	2813883a 	mov	r9,r5
40008718:	200d883a 	mov	r6,r4
4000871c:	2007883a 	mov	r3,r4
40008720:	00000406 	br	40008734 <memset+0x34>
40008724:	3a3fffc4 	addi	r8,r7,-1
40008728:	31800044 	addi	r6,r6,1
4000872c:	38003926 	beq	r7,zero,40008814 <memset+0x114>
40008730:	400f883a 	mov	r7,r8
40008734:	18c00044 	addi	r3,r3,1
40008738:	32400005 	stb	r9,0(r6)
4000873c:	1a0000cc 	andi	r8,r3,3
40008740:	403ff81e 	bne	r8,zero,40008724 <__alt_data_end+0xc0008724>
40008744:	010000c4 	movi	r4,3
40008748:	21c02d2e 	bgeu	r4,r7,40008800 <memset+0x100>
4000874c:	29803fcc 	andi	r6,r5,255
40008750:	3008923a 	slli	r4,r6,8
40008754:	218cb03a 	or	r6,r4,r6
40008758:	3008943a 	slli	r4,r6,16
4000875c:	218cb03a 	or	r6,r4,r6
40008760:	010003c4 	movi	r4,15
40008764:	21c0182e 	bgeu	r4,r7,400087c8 <memset+0xc8>
40008768:	3b3ffc04 	addi	r12,r7,-16
4000876c:	6018d13a 	srli	r12,r12,4
40008770:	1a000104 	addi	r8,r3,4
40008774:	1ac00204 	addi	r11,r3,8
40008778:	6008913a 	slli	r4,r12,4
4000877c:	1a800304 	addi	r10,r3,12
40008780:	1813883a 	mov	r9,r3
40008784:	21000504 	addi	r4,r4,20
40008788:	1909883a 	add	r4,r3,r4
4000878c:	49800015 	stw	r6,0(r9)
40008790:	41800015 	stw	r6,0(r8)
40008794:	59800015 	stw	r6,0(r11)
40008798:	51800015 	stw	r6,0(r10)
4000879c:	42000404 	addi	r8,r8,16
400087a0:	4a400404 	addi	r9,r9,16
400087a4:	5ac00404 	addi	r11,r11,16
400087a8:	52800404 	addi	r10,r10,16
400087ac:	413ff71e 	bne	r8,r4,4000878c <__alt_data_end+0xc000878c>
400087b0:	63000044 	addi	r12,r12,1
400087b4:	6018913a 	slli	r12,r12,4
400087b8:	39c003cc 	andi	r7,r7,15
400087bc:	010000c4 	movi	r4,3
400087c0:	1b07883a 	add	r3,r3,r12
400087c4:	21c00e2e 	bgeu	r4,r7,40008800 <memset+0x100>
400087c8:	1813883a 	mov	r9,r3
400087cc:	3811883a 	mov	r8,r7
400087d0:	010000c4 	movi	r4,3
400087d4:	49800015 	stw	r6,0(r9)
400087d8:	423fff04 	addi	r8,r8,-4
400087dc:	4a400104 	addi	r9,r9,4
400087e0:	223ffc36 	bltu	r4,r8,400087d4 <__alt_data_end+0xc00087d4>
400087e4:	393fff04 	addi	r4,r7,-4
400087e8:	2008d0ba 	srli	r4,r4,2
400087ec:	39c000cc 	andi	r7,r7,3
400087f0:	21000044 	addi	r4,r4,1
400087f4:	2109883a 	add	r4,r4,r4
400087f8:	2109883a 	add	r4,r4,r4
400087fc:	1907883a 	add	r3,r3,r4
40008800:	38000426 	beq	r7,zero,40008814 <memset+0x114>
40008804:	19cf883a 	add	r7,r3,r7
40008808:	19400005 	stb	r5,0(r3)
4000880c:	18c00044 	addi	r3,r3,1
40008810:	19fffd1e 	bne	r3,r7,40008808 <__alt_data_end+0xc0008808>
40008814:	f800283a 	ret
40008818:	2007883a 	mov	r3,r4
4000881c:	300f883a 	mov	r7,r6
40008820:	003fc806 	br	40008744 <__alt_data_end+0xc0008744>

40008824 <_printf_r>:
40008824:	defffd04 	addi	sp,sp,-12
40008828:	dfc00015 	stw	ra,0(sp)
4000882c:	d9800115 	stw	r6,4(sp)
40008830:	d9c00215 	stw	r7,8(sp)
40008834:	280d883a 	mov	r6,r5
40008838:	21400217 	ldw	r5,8(r4)
4000883c:	d9c00104 	addi	r7,sp,4
40008840:	0008e840 	call	40008e84 <___vfprintf_internal_r>
40008844:	dfc00017 	ldw	ra,0(sp)
40008848:	dec00304 	addi	sp,sp,12
4000884c:	f800283a 	ret

40008850 <printf>:
40008850:	defffc04 	addi	sp,sp,-16
40008854:	dfc00015 	stw	ra,0(sp)
40008858:	d9400115 	stw	r5,4(sp)
4000885c:	d9800215 	stw	r6,8(sp)
40008860:	d9c00315 	stw	r7,12(sp)
40008864:	00900074 	movhi	r2,16385
40008868:	109b2304 	addi	r2,r2,27788
4000886c:	10800017 	ldw	r2,0(r2)
40008870:	200b883a 	mov	r5,r4
40008874:	d9800104 	addi	r6,sp,4
40008878:	11000217 	ldw	r4,8(r2)
4000887c:	000ae800 	call	4000ae80 <__vfprintf_internal>
40008880:	dfc00017 	ldw	ra,0(sp)
40008884:	dec00404 	addi	sp,sp,16
40008888:	f800283a 	ret

4000888c <_putchar_r>:
4000888c:	21800217 	ldw	r6,8(r4)
40008890:	000f0501 	jmpi	4000f050 <_putc_r>

40008894 <putchar>:
40008894:	00900074 	movhi	r2,16385
40008898:	109b2304 	addi	r2,r2,27788
4000889c:	200b883a 	mov	r5,r4
400088a0:	11000017 	ldw	r4,0(r2)
400088a4:	21800217 	ldw	r6,8(r4)
400088a8:	000f0501 	jmpi	4000f050 <_putc_r>

400088ac <_puts_r>:
400088ac:	defff604 	addi	sp,sp,-40
400088b0:	dc000715 	stw	r16,28(sp)
400088b4:	2021883a 	mov	r16,r4
400088b8:	2809883a 	mov	r4,r5
400088bc:	dc400815 	stw	r17,32(sp)
400088c0:	dfc00915 	stw	ra,36(sp)
400088c4:	2823883a 	mov	r17,r5
400088c8:	0008dec0 	call	40008dec <strlen>
400088cc:	00d00074 	movhi	r3,16385
400088d0:	18db2304 	addi	r3,r3,27788
400088d4:	18c00017 	ldw	r3,0(r3)
400088d8:	11000044 	addi	r4,r2,1
400088dc:	d8800115 	stw	r2,4(sp)
400088e0:	18c00217 	ldw	r3,8(r3)
400088e4:	01500074 	movhi	r5,16385
400088e8:	2953d004 	addi	r5,r5,20288
400088ec:	1880030b 	ldhu	r2,12(r3)
400088f0:	d9400215 	stw	r5,8(sp)
400088f4:	d9000615 	stw	r4,24(sp)
400088f8:	01400044 	movi	r5,1
400088fc:	01000084 	movi	r4,2
40008900:	d9000515 	stw	r4,20(sp)
40008904:	dc400015 	stw	r17,0(sp)
40008908:	d9400315 	stw	r5,12(sp)
4000890c:	dec00415 	stw	sp,16(sp)
40008910:	1108000c 	andi	r4,r2,8192
40008914:	2000061e 	bne	r4,zero,40008930 <_puts_r+0x84>
40008918:	19401917 	ldw	r5,100(r3)
4000891c:	0137ffc4 	movi	r4,-8193
40008920:	10880014 	ori	r2,r2,8192
40008924:	2908703a 	and	r4,r5,r4
40008928:	1880030d 	sth	r2,12(r3)
4000892c:	19001915 	stw	r4,100(r3)
40008930:	81400217 	ldw	r5,8(r16)
40008934:	8009883a 	mov	r4,r16
40008938:	d9800404 	addi	r6,sp,16
4000893c:	000d49c0 	call	4000d49c <__sfvwrite_r>
40008940:	1000061e 	bne	r2,zero,4000895c <_puts_r+0xb0>
40008944:	00800284 	movi	r2,10
40008948:	dfc00917 	ldw	ra,36(sp)
4000894c:	dc400817 	ldw	r17,32(sp)
40008950:	dc000717 	ldw	r16,28(sp)
40008954:	dec00a04 	addi	sp,sp,40
40008958:	f800283a 	ret
4000895c:	00bfffc4 	movi	r2,-1
40008960:	003ff906 	br	40008948 <__alt_data_end+0xc0008948>

40008964 <puts>:
40008964:	00900074 	movhi	r2,16385
40008968:	109b2304 	addi	r2,r2,27788
4000896c:	200b883a 	mov	r5,r4
40008970:	11000017 	ldw	r4,0(r2)
40008974:	00088ac1 	jmpi	400088ac <_puts_r>

40008978 <srand>:
40008978:	00900074 	movhi	r2,16385
4000897c:	109b2304 	addi	r2,r2,27788
40008980:	10800017 	ldw	r2,0(r2)
40008984:	11002915 	stw	r4,164(r2)
40008988:	10002a15 	stw	zero,168(r2)
4000898c:	f800283a 	ret

40008990 <rand>:
40008990:	00900074 	movhi	r2,16385
40008994:	defffe04 	addi	sp,sp,-8
40008998:	109b2304 	addi	r2,r2,27788
4000899c:	dc000015 	stw	r16,0(sp)
400089a0:	14000017 	ldw	r16,0(r2)
400089a4:	dfc00115 	stw	ra,4(sp)
400089a8:	01932574 	movhi	r6,19605
400089ac:	81002917 	ldw	r4,164(r16)
400089b0:	81402a17 	ldw	r5,168(r16)
400089b4:	01d614b4 	movhi	r7,22610
400089b8:	319fcb44 	addi	r6,r6,32557
400089bc:	39fd0b44 	addi	r7,r7,-3027
400089c0:	00116600 	call	40011660 <__muldi3>
400089c4:	11000044 	addi	r4,r2,1
400089c8:	2085803a 	cmpltu	r2,r4,r2
400089cc:	10c7883a 	add	r3,r2,r3
400089d0:	00a00034 	movhi	r2,32768
400089d4:	10bfffc4 	addi	r2,r2,-1
400089d8:	1884703a 	and	r2,r3,r2
400089dc:	81002915 	stw	r4,164(r16)
400089e0:	80c02a15 	stw	r3,168(r16)
400089e4:	dfc00117 	ldw	ra,4(sp)
400089e8:	dc000017 	ldw	r16,0(sp)
400089ec:	dec00204 	addi	sp,sp,8
400089f0:	f800283a 	ret

400089f4 <_sbrk_r>:
400089f4:	defffd04 	addi	sp,sp,-12
400089f8:	dc000015 	stw	r16,0(sp)
400089fc:	041000b4 	movhi	r16,16386
40008a00:	dc400115 	stw	r17,4(sp)
40008a04:	84221f04 	addi	r16,r16,-30596
40008a08:	2023883a 	mov	r17,r4
40008a0c:	2809883a 	mov	r4,r5
40008a10:	dfc00215 	stw	ra,8(sp)
40008a14:	80000015 	stw	zero,0(r16)
40008a18:	0012c340 	call	40012c34 <sbrk>
40008a1c:	00ffffc4 	movi	r3,-1
40008a20:	10c00526 	beq	r2,r3,40008a38 <_sbrk_r+0x44>
40008a24:	dfc00217 	ldw	ra,8(sp)
40008a28:	dc400117 	ldw	r17,4(sp)
40008a2c:	dc000017 	ldw	r16,0(sp)
40008a30:	dec00304 	addi	sp,sp,12
40008a34:	f800283a 	ret
40008a38:	80c00017 	ldw	r3,0(r16)
40008a3c:	183ff926 	beq	r3,zero,40008a24 <__alt_data_end+0xc0008a24>
40008a40:	88c00015 	stw	r3,0(r17)
40008a44:	003ff706 	br	40008a24 <__alt_data_end+0xc0008a24>

40008a48 <_init_signal_r>:
40008a48:	2080b717 	ldw	r2,732(r4)
40008a4c:	defffe04 	addi	sp,sp,-8
40008a50:	dc000015 	stw	r16,0(sp)
40008a54:	dfc00115 	stw	ra,4(sp)
40008a58:	2021883a 	mov	r16,r4
40008a5c:	10000526 	beq	r2,zero,40008a74 <_init_signal_r+0x2c>
40008a60:	0005883a 	mov	r2,zero
40008a64:	dfc00117 	ldw	ra,4(sp)
40008a68:	dc000017 	ldw	r16,0(sp)
40008a6c:	dec00204 	addi	sp,sp,8
40008a70:	f800283a 	ret
40008a74:	01402004 	movi	r5,128
40008a78:	0007f580 	call	40007f58 <_malloc_r>
40008a7c:	8080b715 	stw	r2,732(r16)
40008a80:	10000926 	beq	r2,zero,40008aa8 <_init_signal_r+0x60>
40008a84:	0007883a 	mov	r3,zero
40008a88:	01002004 	movi	r4,128
40008a8c:	00000106 	br	40008a94 <_init_signal_r+0x4c>
40008a90:	8080b717 	ldw	r2,732(r16)
40008a94:	10c5883a 	add	r2,r2,r3
40008a98:	10000015 	stw	zero,0(r2)
40008a9c:	18c00104 	addi	r3,r3,4
40008aa0:	193ffb1e 	bne	r3,r4,40008a90 <__alt_data_end+0xc0008a90>
40008aa4:	003fee06 	br	40008a60 <__alt_data_end+0xc0008a60>
40008aa8:	00bfffc4 	movi	r2,-1
40008aac:	003fed06 	br	40008a64 <__alt_data_end+0xc0008a64>

40008ab0 <_signal_r>:
40008ab0:	00c007c4 	movi	r3,31
40008ab4:	19401536 	bltu	r3,r5,40008b0c <_signal_r+0x5c>
40008ab8:	2080b717 	ldw	r2,732(r4)
40008abc:	defffc04 	addi	sp,sp,-16
40008ac0:	dc800215 	stw	r18,8(sp)
40008ac4:	dc400115 	stw	r17,4(sp)
40008ac8:	dc000015 	stw	r16,0(sp)
40008acc:	dfc00315 	stw	ra,12(sp)
40008ad0:	3023883a 	mov	r17,r6
40008ad4:	2021883a 	mov	r16,r4
40008ad8:	2825883a 	mov	r18,r5
40008adc:	10000f26 	beq	r2,zero,40008b1c <_signal_r+0x6c>
40008ae0:	948b883a 	add	r5,r18,r18
40008ae4:	294b883a 	add	r5,r5,r5
40008ae8:	114b883a 	add	r5,r2,r5
40008aec:	28800017 	ldw	r2,0(r5)
40008af0:	2c400015 	stw	r17,0(r5)
40008af4:	dfc00317 	ldw	ra,12(sp)
40008af8:	dc800217 	ldw	r18,8(sp)
40008afc:	dc400117 	ldw	r17,4(sp)
40008b00:	dc000017 	ldw	r16,0(sp)
40008b04:	dec00404 	addi	sp,sp,16
40008b08:	f800283a 	ret
40008b0c:	00c00584 	movi	r3,22
40008b10:	20c00015 	stw	r3,0(r4)
40008b14:	00bfffc4 	movi	r2,-1
40008b18:	f800283a 	ret
40008b1c:	0008a480 	call	40008a48 <_init_signal_r>
40008b20:	1000021e 	bne	r2,zero,40008b2c <_signal_r+0x7c>
40008b24:	8080b717 	ldw	r2,732(r16)
40008b28:	003fed06 	br	40008ae0 <__alt_data_end+0xc0008ae0>
40008b2c:	00bfffc4 	movi	r2,-1
40008b30:	003ff006 	br	40008af4 <__alt_data_end+0xc0008af4>

40008b34 <_raise_r>:
40008b34:	008007c4 	movi	r2,31
40008b38:	11402936 	bltu	r2,r5,40008be0 <_raise_r+0xac>
40008b3c:	20c0b717 	ldw	r3,732(r4)
40008b40:	defffd04 	addi	sp,sp,-12
40008b44:	dc400115 	stw	r17,4(sp)
40008b48:	dc000015 	stw	r16,0(sp)
40008b4c:	dfc00215 	stw	ra,8(sp)
40008b50:	2023883a 	mov	r17,r4
40008b54:	2821883a 	mov	r16,r5
40008b58:	18001726 	beq	r3,zero,40008bb8 <_raise_r+0x84>
40008b5c:	2945883a 	add	r2,r5,r5
40008b60:	1085883a 	add	r2,r2,r2
40008b64:	1887883a 	add	r3,r3,r2
40008b68:	19400017 	ldw	r5,0(r3)
40008b6c:	28001226 	beq	r5,zero,40008bb8 <_raise_r+0x84>
40008b70:	00800044 	movi	r2,1
40008b74:	28800e26 	beq	r5,r2,40008bb0 <_raise_r+0x7c>
40008b78:	013fffc4 	movi	r4,-1
40008b7c:	29000926 	beq	r5,r4,40008ba4 <_raise_r+0x70>
40008b80:	18000015 	stw	zero,0(r3)
40008b84:	8009883a 	mov	r4,r16
40008b88:	283ee83a 	callr	r5
40008b8c:	0005883a 	mov	r2,zero
40008b90:	dfc00217 	ldw	ra,8(sp)
40008b94:	dc400117 	ldw	r17,4(sp)
40008b98:	dc000017 	ldw	r16,0(sp)
40008b9c:	dec00304 	addi	sp,sp,12
40008ba0:	f800283a 	ret
40008ba4:	00c00584 	movi	r3,22
40008ba8:	88c00015 	stw	r3,0(r17)
40008bac:	003ff806 	br	40008b90 <__alt_data_end+0xc0008b90>
40008bb0:	0005883a 	mov	r2,zero
40008bb4:	003ff606 	br	40008b90 <__alt_data_end+0xc0008b90>
40008bb8:	8809883a 	mov	r4,r17
40008bbc:	0008d440 	call	40008d44 <_getpid_r>
40008bc0:	8809883a 	mov	r4,r17
40008bc4:	100b883a 	mov	r5,r2
40008bc8:	800d883a 	mov	r6,r16
40008bcc:	dfc00217 	ldw	ra,8(sp)
40008bd0:	dc400117 	ldw	r17,4(sp)
40008bd4:	dc000017 	ldw	r16,0(sp)
40008bd8:	dec00304 	addi	sp,sp,12
40008bdc:	0008cec1 	jmpi	40008cec <_kill_r>
40008be0:	00800584 	movi	r2,22
40008be4:	20800015 	stw	r2,0(r4)
40008be8:	00bfffc4 	movi	r2,-1
40008bec:	f800283a 	ret

40008bf0 <__sigtramp_r>:
40008bf0:	008007c4 	movi	r2,31
40008bf4:	11402436 	bltu	r2,r5,40008c88 <__sigtramp_r+0x98>
40008bf8:	20c0b717 	ldw	r3,732(r4)
40008bfc:	defffd04 	addi	sp,sp,-12
40008c00:	dc400115 	stw	r17,4(sp)
40008c04:	dc000015 	stw	r16,0(sp)
40008c08:	dfc00215 	stw	ra,8(sp)
40008c0c:	2021883a 	mov	r16,r4
40008c10:	2823883a 	mov	r17,r5
40008c14:	18001826 	beq	r3,zero,40008c78 <__sigtramp_r+0x88>
40008c18:	8c45883a 	add	r2,r17,r17
40008c1c:	1085883a 	add	r2,r2,r2
40008c20:	1885883a 	add	r2,r3,r2
40008c24:	10c00017 	ldw	r3,0(r2)
40008c28:	18001126 	beq	r3,zero,40008c70 <__sigtramp_r+0x80>
40008c2c:	013fffc4 	movi	r4,-1
40008c30:	19000d26 	beq	r3,r4,40008c68 <__sigtramp_r+0x78>
40008c34:	01000044 	movi	r4,1
40008c38:	19000926 	beq	r3,r4,40008c60 <__sigtramp_r+0x70>
40008c3c:	10000015 	stw	zero,0(r2)
40008c40:	8809883a 	mov	r4,r17
40008c44:	183ee83a 	callr	r3
40008c48:	0005883a 	mov	r2,zero
40008c4c:	dfc00217 	ldw	ra,8(sp)
40008c50:	dc400117 	ldw	r17,4(sp)
40008c54:	dc000017 	ldw	r16,0(sp)
40008c58:	dec00304 	addi	sp,sp,12
40008c5c:	f800283a 	ret
40008c60:	008000c4 	movi	r2,3
40008c64:	003ff906 	br	40008c4c <__alt_data_end+0xc0008c4c>
40008c68:	00800084 	movi	r2,2
40008c6c:	003ff706 	br	40008c4c <__alt_data_end+0xc0008c4c>
40008c70:	00800044 	movi	r2,1
40008c74:	003ff506 	br	40008c4c <__alt_data_end+0xc0008c4c>
40008c78:	0008a480 	call	40008a48 <_init_signal_r>
40008c7c:	1000041e 	bne	r2,zero,40008c90 <__sigtramp_r+0xa0>
40008c80:	80c0b717 	ldw	r3,732(r16)
40008c84:	003fe406 	br	40008c18 <__alt_data_end+0xc0008c18>
40008c88:	00bfffc4 	movi	r2,-1
40008c8c:	f800283a 	ret
40008c90:	00bfffc4 	movi	r2,-1
40008c94:	003fed06 	br	40008c4c <__alt_data_end+0xc0008c4c>

40008c98 <raise>:
40008c98:	00900074 	movhi	r2,16385
40008c9c:	109b2304 	addi	r2,r2,27788
40008ca0:	200b883a 	mov	r5,r4
40008ca4:	11000017 	ldw	r4,0(r2)
40008ca8:	0008b341 	jmpi	40008b34 <_raise_r>

40008cac <signal>:
40008cac:	00d00074 	movhi	r3,16385
40008cb0:	18db2304 	addi	r3,r3,27788
40008cb4:	2005883a 	mov	r2,r4
40008cb8:	19000017 	ldw	r4,0(r3)
40008cbc:	280d883a 	mov	r6,r5
40008cc0:	100b883a 	mov	r5,r2
40008cc4:	0008ab01 	jmpi	40008ab0 <_signal_r>

40008cc8 <_init_signal>:
40008cc8:	00900074 	movhi	r2,16385
40008ccc:	109b2304 	addi	r2,r2,27788
40008cd0:	11000017 	ldw	r4,0(r2)
40008cd4:	0008a481 	jmpi	40008a48 <_init_signal_r>

40008cd8 <__sigtramp>:
40008cd8:	00900074 	movhi	r2,16385
40008cdc:	109b2304 	addi	r2,r2,27788
40008ce0:	200b883a 	mov	r5,r4
40008ce4:	11000017 	ldw	r4,0(r2)
40008ce8:	0008bf01 	jmpi	40008bf0 <__sigtramp_r>

40008cec <_kill_r>:
40008cec:	defffd04 	addi	sp,sp,-12
40008cf0:	dc000015 	stw	r16,0(sp)
40008cf4:	041000b4 	movhi	r16,16386
40008cf8:	dc400115 	stw	r17,4(sp)
40008cfc:	84221f04 	addi	r16,r16,-30596
40008d00:	2023883a 	mov	r17,r4
40008d04:	2809883a 	mov	r4,r5
40008d08:	300b883a 	mov	r5,r6
40008d0c:	dfc00215 	stw	ra,8(sp)
40008d10:	80000015 	stw	zero,0(r16)
40008d14:	00126980 	call	40012698 <kill>
40008d18:	00ffffc4 	movi	r3,-1
40008d1c:	10c00526 	beq	r2,r3,40008d34 <_kill_r+0x48>
40008d20:	dfc00217 	ldw	ra,8(sp)
40008d24:	dc400117 	ldw	r17,4(sp)
40008d28:	dc000017 	ldw	r16,0(sp)
40008d2c:	dec00304 	addi	sp,sp,12
40008d30:	f800283a 	ret
40008d34:	80c00017 	ldw	r3,0(r16)
40008d38:	183ff926 	beq	r3,zero,40008d20 <__alt_data_end+0xc0008d20>
40008d3c:	88c00015 	stw	r3,0(r17)
40008d40:	003ff706 	br	40008d20 <__alt_data_end+0xc0008d20>

40008d44 <_getpid_r>:
40008d44:	00125341 	jmpi	40012534 <getpid>

40008d48 <strcmp>:
40008d48:	2144b03a 	or	r2,r4,r5
40008d4c:	108000cc 	andi	r2,r2,3
40008d50:	1000171e 	bne	r2,zero,40008db0 <strcmp+0x68>
40008d54:	20800017 	ldw	r2,0(r4)
40008d58:	28c00017 	ldw	r3,0(r5)
40008d5c:	10c0141e 	bne	r2,r3,40008db0 <strcmp+0x68>
40008d60:	027fbff4 	movhi	r9,65279
40008d64:	4a7fbfc4 	addi	r9,r9,-257
40008d68:	0086303a 	nor	r3,zero,r2
40008d6c:	02202074 	movhi	r8,32897
40008d70:	1245883a 	add	r2,r2,r9
40008d74:	42202004 	addi	r8,r8,-32640
40008d78:	10c4703a 	and	r2,r2,r3
40008d7c:	1204703a 	and	r2,r2,r8
40008d80:	10000226 	beq	r2,zero,40008d8c <strcmp+0x44>
40008d84:	00001706 	br	40008de4 <strcmp+0x9c>
40008d88:	1000161e 	bne	r2,zero,40008de4 <strcmp+0x9c>
40008d8c:	21000104 	addi	r4,r4,4
40008d90:	20c00017 	ldw	r3,0(r4)
40008d94:	29400104 	addi	r5,r5,4
40008d98:	29800017 	ldw	r6,0(r5)
40008d9c:	1a4f883a 	add	r7,r3,r9
40008da0:	00c4303a 	nor	r2,zero,r3
40008da4:	3884703a 	and	r2,r7,r2
40008da8:	1204703a 	and	r2,r2,r8
40008dac:	19bff626 	beq	r3,r6,40008d88 <__alt_data_end+0xc0008d88>
40008db0:	20800007 	ldb	r2,0(r4)
40008db4:	1000051e 	bne	r2,zero,40008dcc <strcmp+0x84>
40008db8:	00000606 	br	40008dd4 <strcmp+0x8c>
40008dbc:	21000044 	addi	r4,r4,1
40008dc0:	20800007 	ldb	r2,0(r4)
40008dc4:	29400044 	addi	r5,r5,1
40008dc8:	10000226 	beq	r2,zero,40008dd4 <strcmp+0x8c>
40008dcc:	28c00007 	ldb	r3,0(r5)
40008dd0:	10fffa26 	beq	r2,r3,40008dbc <__alt_data_end+0xc0008dbc>
40008dd4:	20800003 	ldbu	r2,0(r4)
40008dd8:	28c00003 	ldbu	r3,0(r5)
40008ddc:	10c5c83a 	sub	r2,r2,r3
40008de0:	f800283a 	ret
40008de4:	0005883a 	mov	r2,zero
40008de8:	f800283a 	ret

40008dec <strlen>:
40008dec:	208000cc 	andi	r2,r4,3
40008df0:	10002026 	beq	r2,zero,40008e74 <strlen+0x88>
40008df4:	20800007 	ldb	r2,0(r4)
40008df8:	10002026 	beq	r2,zero,40008e7c <strlen+0x90>
40008dfc:	2005883a 	mov	r2,r4
40008e00:	00000206 	br	40008e0c <strlen+0x20>
40008e04:	10c00007 	ldb	r3,0(r2)
40008e08:	18001826 	beq	r3,zero,40008e6c <strlen+0x80>
40008e0c:	10800044 	addi	r2,r2,1
40008e10:	10c000cc 	andi	r3,r2,3
40008e14:	183ffb1e 	bne	r3,zero,40008e04 <__alt_data_end+0xc0008e04>
40008e18:	10c00017 	ldw	r3,0(r2)
40008e1c:	01ffbff4 	movhi	r7,65279
40008e20:	39ffbfc4 	addi	r7,r7,-257
40008e24:	00ca303a 	nor	r5,zero,r3
40008e28:	01a02074 	movhi	r6,32897
40008e2c:	19c7883a 	add	r3,r3,r7
40008e30:	31a02004 	addi	r6,r6,-32640
40008e34:	1946703a 	and	r3,r3,r5
40008e38:	1986703a 	and	r3,r3,r6
40008e3c:	1800091e 	bne	r3,zero,40008e64 <strlen+0x78>
40008e40:	10800104 	addi	r2,r2,4
40008e44:	10c00017 	ldw	r3,0(r2)
40008e48:	19cb883a 	add	r5,r3,r7
40008e4c:	00c6303a 	nor	r3,zero,r3
40008e50:	28c6703a 	and	r3,r5,r3
40008e54:	1986703a 	and	r3,r3,r6
40008e58:	183ff926 	beq	r3,zero,40008e40 <__alt_data_end+0xc0008e40>
40008e5c:	00000106 	br	40008e64 <strlen+0x78>
40008e60:	10800044 	addi	r2,r2,1
40008e64:	10c00007 	ldb	r3,0(r2)
40008e68:	183ffd1e 	bne	r3,zero,40008e60 <__alt_data_end+0xc0008e60>
40008e6c:	1105c83a 	sub	r2,r2,r4
40008e70:	f800283a 	ret
40008e74:	2005883a 	mov	r2,r4
40008e78:	003fe706 	br	40008e18 <__alt_data_end+0xc0008e18>
40008e7c:	0005883a 	mov	r2,zero
40008e80:	f800283a 	ret

40008e84 <___vfprintf_internal_r>:
40008e84:	defeb604 	addi	sp,sp,-1320
40008e88:	dfc14915 	stw	ra,1316(sp)
40008e8c:	ddc14715 	stw	r23,1308(sp)
40008e90:	dd814615 	stw	r22,1304(sp)
40008e94:	282f883a 	mov	r23,r5
40008e98:	202d883a 	mov	r22,r4
40008e9c:	d9812a15 	stw	r6,1192(sp)
40008ea0:	d9c12d15 	stw	r7,1204(sp)
40008ea4:	df014815 	stw	fp,1312(sp)
40008ea8:	dd414515 	stw	r21,1300(sp)
40008eac:	dd014415 	stw	r20,1296(sp)
40008eb0:	dcc14315 	stw	r19,1292(sp)
40008eb4:	dc814215 	stw	r18,1288(sp)
40008eb8:	dc414115 	stw	r17,1284(sp)
40008ebc:	dc014015 	stw	r16,1280(sp)
40008ec0:	000db5c0 	call	4000db5c <_localeconv_r>
40008ec4:	10800017 	ldw	r2,0(r2)
40008ec8:	1009883a 	mov	r4,r2
40008ecc:	d8813515 	stw	r2,1236(sp)
40008ed0:	0008dec0 	call	40008dec <strlen>
40008ed4:	d8813815 	stw	r2,1248(sp)
40008ed8:	b0000226 	beq	r22,zero,40008ee4 <___vfprintf_internal_r+0x60>
40008edc:	b0800e17 	ldw	r2,56(r22)
40008ee0:	10010426 	beq	r2,zero,400092f4 <___vfprintf_internal_r+0x470>
40008ee4:	b8c0030b 	ldhu	r3,12(r23)
40008ee8:	1908000c 	andi	r4,r3,8192
40008eec:	1805883a 	mov	r2,r3
40008ef0:	2000071e 	bne	r4,zero,40008f10 <___vfprintf_internal_r+0x8c>
40008ef4:	b9001917 	ldw	r4,100(r23)
40008ef8:	18880014 	ori	r2,r3,8192
40008efc:	00f7ffc4 	movi	r3,-8193
40008f00:	20c8703a 	and	r4,r4,r3
40008f04:	b880030d 	sth	r2,12(r23)
40008f08:	1007883a 	mov	r3,r2
40008f0c:	b9001915 	stw	r4,100(r23)
40008f10:	1100020c 	andi	r4,r2,8
40008f14:	2000a726 	beq	r4,zero,400091b4 <___vfprintf_internal_r+0x330>
40008f18:	b9000417 	ldw	r4,16(r23)
40008f1c:	2000a526 	beq	r4,zero,400091b4 <___vfprintf_internal_r+0x330>
40008f20:	1080068c 	andi	r2,r2,26
40008f24:	01000284 	movi	r4,10
40008f28:	1100ab26 	beq	r2,r4,400091d8 <___vfprintf_internal_r+0x354>
40008f2c:	dac10e04 	addi	r11,sp,1080
40008f30:	db010dc4 	addi	r12,sp,1079
40008f34:	d8800404 	addi	r2,sp,16
40008f38:	05100074 	movhi	r20,16385
40008f3c:	dac12815 	stw	r11,1184(sp)
40008f40:	5b17c83a 	sub	r11,r11,r12
40008f44:	a513e184 	addi	r20,r20,20358
40008f48:	db012915 	stw	r12,1188(sp)
40008f4c:	d8811e15 	stw	r2,1144(sp)
40008f50:	d8012015 	stw	zero,1152(sp)
40008f54:	d8011f15 	stw	zero,1148(sp)
40008f58:	d8013315 	stw	zero,1228(sp)
40008f5c:	d8013715 	stw	zero,1244(sp)
40008f60:	d8013915 	stw	zero,1252(sp)
40008f64:	d8013b15 	stw	zero,1260(sp)
40008f68:	d8013a15 	stw	zero,1256(sp)
40008f6c:	d8012f15 	stw	zero,1212(sp)
40008f70:	1011883a 	mov	r8,r2
40008f74:	dac13c15 	stw	r11,1264(sp)
40008f78:	db012a17 	ldw	r12,1192(sp)
40008f7c:	60800007 	ldb	r2,0(r12)
40008f80:	1000df26 	beq	r2,zero,40009300 <___vfprintf_internal_r+0x47c>
40008f84:	00c00944 	movi	r3,37
40008f88:	10c0dd26 	beq	r2,r3,40009300 <___vfprintf_internal_r+0x47c>
40008f8c:	6021883a 	mov	r16,r12
40008f90:	00000106 	br	40008f98 <___vfprintf_internal_r+0x114>
40008f94:	10c08426 	beq	r2,r3,400091a8 <___vfprintf_internal_r+0x324>
40008f98:	84000044 	addi	r16,r16,1
40008f9c:	80800007 	ldb	r2,0(r16)
40008fa0:	103ffc1e 	bne	r2,zero,40008f94 <__alt_data_end+0xc0008f94>
40008fa4:	dac12a17 	ldw	r11,1192(sp)
40008fa8:	82e3c83a 	sub	r17,r16,r11
40008fac:	88000f26 	beq	r17,zero,40008fec <___vfprintf_internal_r+0x168>
40008fb0:	d8c12017 	ldw	r3,1152(sp)
40008fb4:	d8811f17 	ldw	r2,1148(sp)
40008fb8:	dac12a17 	ldw	r11,1192(sp)
40008fbc:	1c47883a 	add	r3,r3,r17
40008fc0:	10800044 	addi	r2,r2,1
40008fc4:	d8c12015 	stw	r3,1152(sp)
40008fc8:	42c00015 	stw	r11,0(r8)
40008fcc:	44400115 	stw	r17,4(r8)
40008fd0:	d8811f15 	stw	r2,1148(sp)
40008fd4:	00c001c4 	movi	r3,7
40008fd8:	1880b416 	blt	r3,r2,400092ac <___vfprintf_internal_r+0x428>
40008fdc:	42000204 	addi	r8,r8,8
40008fe0:	db012f17 	ldw	r12,1212(sp)
40008fe4:	6459883a 	add	r12,r12,r17
40008fe8:	db012f15 	stw	r12,1212(sp)
40008fec:	80800007 	ldb	r2,0(r16)
40008ff0:	1000b526 	beq	r2,zero,400092c8 <___vfprintf_internal_r+0x444>
40008ff4:	80800044 	addi	r2,r16,1
40008ff8:	84000047 	ldb	r16,1(r16)
40008ffc:	d8012785 	stb	zero,1182(sp)
40009000:	000d883a 	mov	r6,zero
40009004:	027fffc4 	movi	r9,-1
40009008:	d8012e15 	stw	zero,1208(sp)
4000900c:	0023883a 	mov	r17,zero
40009010:	01001604 	movi	r4,88
40009014:	01400244 	movi	r5,9
40009018:	02800a84 	movi	r10,42
4000901c:	01c01b04 	movi	r7,108
40009020:	10c00044 	addi	r3,r2,1
40009024:	80bff804 	addi	r2,r16,-32
40009028:	2082f236 	bltu	r4,r2,40009bf4 <___vfprintf_internal_r+0xd70>
4000902c:	100490ba 	slli	r2,r2,2
40009030:	02d00074 	movhi	r11,16385
40009034:	5ae41104 	addi	r11,r11,-28604
40009038:	12c5883a 	add	r2,r2,r11
4000903c:	10800017 	ldw	r2,0(r2)
40009040:	1000683a 	jmp	r2
40009044:	40009a3c 	xorhi	zero,r8,616
40009048:	40009bf4 	orhi	zero,r8,623
4000904c:	40009bf4 	orhi	zero,r8,623
40009050:	40009a5c 	xori	zero,r8,617
40009054:	40009bf4 	orhi	zero,r8,623
40009058:	40009bf4 	orhi	zero,r8,623
4000905c:	40009bf4 	orhi	zero,r8,623
40009060:	40009bf4 	orhi	zero,r8,623
40009064:	40009bf4 	orhi	zero,r8,623
40009068:	40009bf4 	orhi	zero,r8,623
4000906c:	40009bb8 	rdprs	zero,r8,622
40009070:	40009be4 	muli	zero,r8,623
40009074:	40009bf4 	orhi	zero,r8,623
40009078:	40009308 	cmpgei	zero,r8,588
4000907c:	40009318 	cmpnei	zero,r8,588
40009080:	40009bf4 	orhi	zero,r8,623
40009084:	40009358 	cmpnei	zero,r8,589
40009088:	4000984c 	andi	zero,r8,609
4000908c:	4000984c 	andi	zero,r8,609
40009090:	4000984c 	andi	zero,r8,609
40009094:	4000984c 	andi	zero,r8,609
40009098:	4000984c 	andi	zero,r8,609
4000909c:	4000984c 	andi	zero,r8,609
400090a0:	4000984c 	andi	zero,r8,609
400090a4:	4000984c 	andi	zero,r8,609
400090a8:	4000984c 	andi	zero,r8,609
400090ac:	40009bf4 	orhi	zero,r8,623
400090b0:	40009bf4 	orhi	zero,r8,623
400090b4:	40009bf4 	orhi	zero,r8,623
400090b8:	40009bf4 	orhi	zero,r8,623
400090bc:	40009bf4 	orhi	zero,r8,623
400090c0:	40009bf4 	orhi	zero,r8,623
400090c4:	40009bf4 	orhi	zero,r8,623
400090c8:	40009bf4 	orhi	zero,r8,623
400090cc:	40009bf4 	orhi	zero,r8,623
400090d0:	40009bf4 	orhi	zero,r8,623
400090d4:	40009880 	call	44000988 <__alt_heap_start+0x3f9c6bc>
400090d8:	40009368 	cmpgeui	zero,r8,589
400090dc:	40009bf4 	orhi	zero,r8,623
400090e0:	40009368 	cmpgeui	zero,r8,589
400090e4:	40009bf4 	orhi	zero,r8,623
400090e8:	40009bf4 	orhi	zero,r8,623
400090ec:	40009bf4 	orhi	zero,r8,623
400090f0:	40009bf4 	orhi	zero,r8,623
400090f4:	4000940c 	andi	zero,r8,592
400090f8:	40009bf4 	orhi	zero,r8,623
400090fc:	40009bf4 	orhi	zero,r8,623
40009100:	4000941c 	xori	zero,r8,592
40009104:	40009bf4 	orhi	zero,r8,623
40009108:	40009bf4 	orhi	zero,r8,623
4000910c:	40009bf4 	orhi	zero,r8,623
40009110:	40009bf4 	orhi	zero,r8,623
40009114:	40009bf4 	orhi	zero,r8,623
40009118:	40009818 	cmpnei	zero,r8,608
4000911c:	40009bf4 	orhi	zero,r8,623
40009120:	40009bf4 	orhi	zero,r8,623
40009124:	400098c8 	cmpgei	zero,r8,611
40009128:	40009bf4 	orhi	zero,r8,623
4000912c:	40009bf4 	orhi	zero,r8,623
40009130:	40009bf4 	orhi	zero,r8,623
40009134:	40009bf4 	orhi	zero,r8,623
40009138:	40009bf4 	orhi	zero,r8,623
4000913c:	40009bf4 	orhi	zero,r8,623
40009140:	40009bf4 	orhi	zero,r8,623
40009144:	40009bf4 	orhi	zero,r8,623
40009148:	40009bf4 	orhi	zero,r8,623
4000914c:	40009bf4 	orhi	zero,r8,623
40009150:	40009abc 	xorhi	zero,r8,618
40009154:	40009a6c 	andhi	zero,r8,617
40009158:	40009368 	cmpgeui	zero,r8,589
4000915c:	40009368 	cmpgeui	zero,r8,589
40009160:	40009368 	cmpgeui	zero,r8,589
40009164:	40009aac 	andhi	zero,r8,618
40009168:	40009a6c 	andhi	zero,r8,617
4000916c:	40009bf4 	orhi	zero,r8,623
40009170:	40009bf4 	orhi	zero,r8,623
40009174:	400099b4 	orhi	zero,r8,614
40009178:	40009bf4 	orhi	zero,r8,623
4000917c:	400099c8 	cmpgei	zero,r8,615
40009180:	400099fc 	xorhi	zero,r8,615
40009184:	40009afc 	xorhi	zero,r8,619
40009188:	40009924 	muli	zero,r8,612
4000918c:	40009bf4 	orhi	zero,r8,623
40009190:	40009b44 	addi	zero,r8,621
40009194:	40009bf4 	orhi	zero,r8,623
40009198:	40009934 	orhi	zero,r8,612
4000919c:	40009bf4 	orhi	zero,r8,623
400091a0:	40009bf4 	orhi	zero,r8,623
400091a4:	40009974 	orhi	zero,r8,613
400091a8:	db012a17 	ldw	r12,1192(sp)
400091ac:	8323c83a 	sub	r17,r16,r12
400091b0:	003f7e06 	br	40008fac <__alt_data_end+0xc0008fac>
400091b4:	b009883a 	mov	r4,r22
400091b8:	b80b883a 	mov	r5,r23
400091bc:	000aea40 	call	4000aea4 <__swsetup_r>
400091c0:	10002d1e 	bne	r2,zero,40009278 <___vfprintf_internal_r+0x3f4>
400091c4:	b8c0030b 	ldhu	r3,12(r23)
400091c8:	01000284 	movi	r4,10
400091cc:	1805883a 	mov	r2,r3
400091d0:	1080068c 	andi	r2,r2,26
400091d4:	113f551e 	bne	r2,r4,40008f2c <__alt_data_end+0xc0008f2c>
400091d8:	b880038b 	ldhu	r2,14(r23)
400091dc:	113fffcc 	andi	r4,r2,65535
400091e0:	2120001c 	xori	r4,r4,32768
400091e4:	21200004 	addi	r4,r4,-32768
400091e8:	203f5016 	blt	r4,zero,40008f2c <__alt_data_end+0xc0008f2c>
400091ec:	bac01917 	ldw	r11,100(r23)
400091f0:	ba800717 	ldw	r10,28(r23)
400091f4:	ba400917 	ldw	r9,36(r23)
400091f8:	d9812a17 	ldw	r6,1192(sp)
400091fc:	d9c12d17 	ldw	r7,1204(sp)
40009200:	02010004 	movi	r8,1024
40009204:	18ffff4c 	andi	r3,r3,65533
40009208:	d881078d 	sth	r2,1054(sp)
4000920c:	b009883a 	mov	r4,r22
40009210:	d8800404 	addi	r2,sp,16
40009214:	d9410404 	addi	r5,sp,1040
40009218:	d8c1070d 	sth	r3,1052(sp)
4000921c:	dac11d15 	stw	r11,1140(sp)
40009220:	da810b15 	stw	r10,1068(sp)
40009224:	da410d15 	stw	r9,1076(sp)
40009228:	d8810415 	stw	r2,1040(sp)
4000922c:	d8810815 	stw	r2,1056(sp)
40009230:	da010615 	stw	r8,1048(sp)
40009234:	da010915 	stw	r8,1060(sp)
40009238:	d8010a15 	stw	zero,1064(sp)
4000923c:	0008e840 	call	40008e84 <___vfprintf_internal_r>
40009240:	1021883a 	mov	r16,r2
40009244:	10000416 	blt	r2,zero,40009258 <___vfprintf_internal_r+0x3d4>
40009248:	b009883a 	mov	r4,r22
4000924c:	d9410404 	addi	r5,sp,1040
40009250:	000ca900 	call	4000ca90 <_fflush_r>
40009254:	1006ee1e 	bne	r2,zero,4000ae10 <___vfprintf_internal_r+0x1f8c>
40009258:	d881070b 	ldhu	r2,1052(sp)
4000925c:	1080100c 	andi	r2,r2,64
40009260:	10000326 	beq	r2,zero,40009270 <___vfprintf_internal_r+0x3ec>
40009264:	b880030b 	ldhu	r2,12(r23)
40009268:	10801014 	ori	r2,r2,64
4000926c:	b880030d 	sth	r2,12(r23)
40009270:	8005883a 	mov	r2,r16
40009274:	00000106 	br	4000927c <___vfprintf_internal_r+0x3f8>
40009278:	00bfffc4 	movi	r2,-1
4000927c:	dfc14917 	ldw	ra,1316(sp)
40009280:	df014817 	ldw	fp,1312(sp)
40009284:	ddc14717 	ldw	r23,1308(sp)
40009288:	dd814617 	ldw	r22,1304(sp)
4000928c:	dd414517 	ldw	r21,1300(sp)
40009290:	dd014417 	ldw	r20,1296(sp)
40009294:	dcc14317 	ldw	r19,1292(sp)
40009298:	dc814217 	ldw	r18,1288(sp)
4000929c:	dc414117 	ldw	r17,1284(sp)
400092a0:	dc014017 	ldw	r16,1280(sp)
400092a4:	dec14a04 	addi	sp,sp,1320
400092a8:	f800283a 	ret
400092ac:	b009883a 	mov	r4,r22
400092b0:	b80b883a 	mov	r5,r23
400092b4:	d9811e04 	addi	r6,sp,1144
400092b8:	000f9900 	call	4000f990 <__sprint_r>
400092bc:	1000081e 	bne	r2,zero,400092e0 <___vfprintf_internal_r+0x45c>
400092c0:	da000404 	addi	r8,sp,16
400092c4:	003f4606 	br	40008fe0 <__alt_data_end+0xc0008fe0>
400092c8:	d8812017 	ldw	r2,1152(sp)
400092cc:	10000426 	beq	r2,zero,400092e0 <___vfprintf_internal_r+0x45c>
400092d0:	b009883a 	mov	r4,r22
400092d4:	b80b883a 	mov	r5,r23
400092d8:	d9811e04 	addi	r6,sp,1144
400092dc:	000f9900 	call	4000f990 <__sprint_r>
400092e0:	b880030b 	ldhu	r2,12(r23)
400092e4:	1080100c 	andi	r2,r2,64
400092e8:	103fe31e 	bne	r2,zero,40009278 <__alt_data_end+0xc0009278>
400092ec:	d8812f17 	ldw	r2,1212(sp)
400092f0:	003fe206 	br	4000927c <__alt_data_end+0xc000927c>
400092f4:	b009883a 	mov	r4,r22
400092f8:	000d0380 	call	4000d038 <__sinit>
400092fc:	003ef906 	br	40008ee4 <__alt_data_end+0xc0008ee4>
40009300:	dc012a17 	ldw	r16,1192(sp)
40009304:	003f3906 	br	40008fec <__alt_data_end+0xc0008fec>
40009308:	1805883a 	mov	r2,r3
4000930c:	8c400114 	ori	r17,r17,4
40009310:	1c000007 	ldb	r16,0(r3)
40009314:	003f4206 	br	40009020 <__alt_data_end+0xc0009020>
40009318:	1c000007 	ldb	r16,0(r3)
4000931c:	18800044 	addi	r2,r3,1
40009320:	8286b326 	beq	r16,r10,4000adf0 <___vfprintf_internal_r+0x1f6c>
40009324:	82fff404 	addi	r11,r16,-48
40009328:	1007883a 	mov	r3,r2
4000932c:	0013883a 	mov	r9,zero
40009330:	2aff3c36 	bltu	r5,r11,40009024 <__alt_data_end+0xc0009024>
40009334:	1c000007 	ldb	r16,0(r3)
40009338:	4a4002a4 	muli	r9,r9,10
4000933c:	18c00044 	addi	r3,r3,1
40009340:	5a53883a 	add	r9,r11,r9
40009344:	82fff404 	addi	r11,r16,-48
40009348:	2afffa2e 	bgeu	r5,r11,40009334 <__alt_data_end+0xc0009334>
4000934c:	483f350e 	bge	r9,zero,40009024 <__alt_data_end+0xc0009024>
40009350:	027fffc4 	movi	r9,-1
40009354:	003f3306 	br	40009024 <__alt_data_end+0xc0009024>
40009358:	8c402014 	ori	r17,r17,128
4000935c:	1805883a 	mov	r2,r3
40009360:	1c000007 	ldb	r16,0(r3)
40009364:	003f2e06 	br	40009020 <__alt_data_end+0xc0009020>
40009368:	db012d17 	ldw	r12,1204(sp)
4000936c:	dac12d17 	ldw	r11,1204(sp)
40009370:	d8c12a15 	stw	r3,1192(sp)
40009374:	63000017 	ldw	r12,0(r12)
40009378:	5ac00117 	ldw	r11,4(r11)
4000937c:	d9812785 	stb	r6,1182(sp)
40009380:	6009883a 	mov	r4,r12
40009384:	580b883a 	mov	r5,r11
40009388:	db013715 	stw	r12,1244(sp)
4000938c:	da013f15 	stw	r8,1276(sp)
40009390:	da413e15 	stw	r9,1272(sp)
40009394:	dac13915 	stw	r11,1252(sp)
40009398:	0004ec00 	call	40004ec0 <__fpclassifyd>
4000939c:	db012d17 	ldw	r12,1204(sp)
400093a0:	04800044 	movi	r18,1
400093a4:	da013f17 	ldw	r8,1276(sp)
400093a8:	64c00204 	addi	r19,r12,8
400093ac:	da413e17 	ldw	r9,1272(sp)
400093b0:	d9013717 	ldw	r4,1244(sp)
400093b4:	d9413917 	ldw	r5,1252(sp)
400093b8:	1484581e 	bne	r2,r18,4000a51c <___vfprintf_internal_r+0x1698>
400093bc:	000d883a 	mov	r6,zero
400093c0:	000f883a 	mov	r7,zero
400093c4:	00064780 	call	40006478 <__ledf2>
400093c8:	da013f17 	ldw	r8,1276(sp)
400093cc:	1005ef16 	blt	r2,zero,4000ab8c <___vfprintf_internal_r+0x1d08>
400093d0:	dd412783 	ldbu	r21,1182(sp)
400093d4:	008011c4 	movi	r2,71
400093d8:	14053b0e 	bge	r2,r16,4000a8c8 <___vfprintf_internal_r+0x1a44>
400093dc:	00d00074 	movhi	r3,16385
400093e0:	18d3d204 	addi	r3,r3,20296
400093e4:	d8c13115 	stw	r3,1220(sp)
400093e8:	02c000c4 	movi	r11,3
400093ec:	00bfdfc4 	movi	r2,-129
400093f0:	dac12b15 	stw	r11,1196(sp)
400093f4:	88a2703a 	and	r17,r17,r2
400093f8:	dcc12d15 	stw	r19,1204(sp)
400093fc:	5825883a 	mov	r18,r11
40009400:	d8013215 	stw	zero,1224(sp)
40009404:	d8013415 	stw	zero,1232(sp)
40009408:	00003206 	br	400094d4 <___vfprintf_internal_r+0x650>
4000940c:	8c400214 	ori	r17,r17,8
40009410:	1805883a 	mov	r2,r3
40009414:	1c000007 	ldb	r16,0(r3)
40009418:	003f0106 	br	40009020 <__alt_data_end+0xc0009020>
4000941c:	8c400414 	ori	r17,r17,16
40009420:	d8c12a15 	stw	r3,1192(sp)
40009424:	88c0080c 	andi	r3,r17,32
40009428:	d8812d17 	ldw	r2,1204(sp)
4000942c:	18017726 	beq	r3,zero,40009a0c <___vfprintf_internal_r+0xb88>
40009430:	db012d17 	ldw	r12,1204(sp)
40009434:	14c00017 	ldw	r19,0(r2)
40009438:	17000117 	ldw	fp,4(r2)
4000943c:	63000204 	addi	r12,r12,8
40009440:	db012d15 	stw	r12,1204(sp)
40009444:	0005883a 	mov	r2,zero
40009448:	9f06b03a 	or	r3,r19,fp
4000944c:	d8012785 	stb	zero,1182(sp)
40009450:	da413215 	stw	r9,1224(sp)
40009454:	002b883a 	mov	r21,zero
40009458:	48000216 	blt	r9,zero,40009464 <___vfprintf_internal_r+0x5e0>
4000945c:	013fdfc4 	movi	r4,-129
40009460:	8922703a 	and	r17,r17,r4
40009464:	1801ed1e 	bne	r3,zero,40009c1c <___vfprintf_internal_r+0xd98>
40009468:	4802e026 	beq	r9,zero,40009fec <___vfprintf_internal_r+0x1168>
4000946c:	10803fcc 	andi	r2,r2,255
40009470:	00c00044 	movi	r3,1
40009474:	10c20f26 	beq	r2,r3,40009cb4 <___vfprintf_internal_r+0xe30>
40009478:	00c00084 	movi	r3,2
4000947c:	10c2fd26 	beq	r2,r3,4000a074 <___vfprintf_internal_r+0x11f0>
40009480:	d8c10e04 	addi	r3,sp,1080
40009484:	9808d0fa 	srli	r4,r19,3
40009488:	e00a977a 	slli	r5,fp,29
4000948c:	e038d0fa 	srli	fp,fp,3
40009490:	9cc001cc 	andi	r19,r19,7
40009494:	98800c04 	addi	r2,r19,48
40009498:	18ffffc4 	addi	r3,r3,-1
4000949c:	2926b03a 	or	r19,r5,r4
400094a0:	18800005 	stb	r2,0(r3)
400094a4:	9f08b03a 	or	r4,r19,fp
400094a8:	203ff61e 	bne	r4,zero,40009484 <__alt_data_end+0xc0009484>
400094ac:	8900004c 	andi	r4,r17,1
400094b0:	d8c13115 	stw	r3,1220(sp)
400094b4:	2003791e 	bne	r4,zero,4000a29c <___vfprintf_internal_r+0x1418>
400094b8:	dac12817 	ldw	r11,1184(sp)
400094bc:	58e5c83a 	sub	r18,r11,r3
400094c0:	9005883a 	mov	r2,r18
400094c4:	9240010e 	bge	r18,r9,400094cc <___vfprintf_internal_r+0x648>
400094c8:	4805883a 	mov	r2,r9
400094cc:	d8812b15 	stw	r2,1196(sp)
400094d0:	d8013415 	stw	zero,1232(sp)
400094d4:	a8803fcc 	andi	r2,r21,255
400094d8:	1080201c 	xori	r2,r2,128
400094dc:	10bfe004 	addi	r2,r2,-128
400094e0:	10000326 	beq	r2,zero,400094f0 <___vfprintf_internal_r+0x66c>
400094e4:	db012b17 	ldw	r12,1196(sp)
400094e8:	63000044 	addi	r12,r12,1
400094ec:	db012b15 	stw	r12,1196(sp)
400094f0:	88c0008c 	andi	r3,r17,2
400094f4:	d8c12c15 	stw	r3,1200(sp)
400094f8:	18000326 	beq	r3,zero,40009508 <___vfprintf_internal_r+0x684>
400094fc:	dac12b17 	ldw	r11,1196(sp)
40009500:	5ac00084 	addi	r11,r11,2
40009504:	dac12b15 	stw	r11,1196(sp)
40009508:	8b00210c 	andi	r12,r17,132
4000950c:	db013015 	stw	r12,1216(sp)
40009510:	6001c01e 	bne	r12,zero,40009c14 <___vfprintf_internal_r+0xd90>
40009514:	dac12e17 	ldw	r11,1208(sp)
40009518:	db012b17 	ldw	r12,1196(sp)
4000951c:	5b39c83a 	sub	fp,r11,r12
40009520:	0701bc0e 	bge	zero,fp,40009c14 <___vfprintf_internal_r+0xd90>
40009524:	02400404 	movi	r9,16
40009528:	d8c12017 	ldw	r3,1152(sp)
4000952c:	d8811f17 	ldw	r2,1148(sp)
40009530:	4f05220e 	bge	r9,fp,4000a9bc <___vfprintf_internal_r+0x1b38>
40009534:	01500074 	movhi	r5,16385
40009538:	2953e584 	addi	r5,r5,20374
4000953c:	d9413615 	stw	r5,1240(sp)
40009540:	482b883a 	mov	r21,r9
40009544:	04c001c4 	movi	r19,7
40009548:	00000306 	br	40009558 <___vfprintf_internal_r+0x6d4>
4000954c:	e73ffc04 	addi	fp,fp,-16
40009550:	42000204 	addi	r8,r8,8
40009554:	af00130e 	bge	r21,fp,400095a4 <___vfprintf_internal_r+0x720>
40009558:	02d00074 	movhi	r11,16385
4000955c:	18c00404 	addi	r3,r3,16
40009560:	10800044 	addi	r2,r2,1
40009564:	5ad3e584 	addi	r11,r11,20374
40009568:	42c00015 	stw	r11,0(r8)
4000956c:	45400115 	stw	r21,4(r8)
40009570:	d8c12015 	stw	r3,1152(sp)
40009574:	d8811f15 	stw	r2,1148(sp)
40009578:	98bff40e 	bge	r19,r2,4000954c <__alt_data_end+0xc000954c>
4000957c:	b009883a 	mov	r4,r22
40009580:	b80b883a 	mov	r5,r23
40009584:	d9811e04 	addi	r6,sp,1144
40009588:	000f9900 	call	4000f990 <__sprint_r>
4000958c:	103f541e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
40009590:	e73ffc04 	addi	fp,fp,-16
40009594:	d8c12017 	ldw	r3,1152(sp)
40009598:	d8811f17 	ldw	r2,1148(sp)
4000959c:	da000404 	addi	r8,sp,16
400095a0:	af3fed16 	blt	r21,fp,40009558 <__alt_data_end+0xc0009558>
400095a4:	db013617 	ldw	r12,1240(sp)
400095a8:	e0c7883a 	add	r3,fp,r3
400095ac:	10800044 	addi	r2,r2,1
400095b0:	43000015 	stw	r12,0(r8)
400095b4:	47000115 	stw	fp,4(r8)
400095b8:	d8c12015 	stw	r3,1152(sp)
400095bc:	d8811f15 	stw	r2,1148(sp)
400095c0:	010001c4 	movi	r4,7
400095c4:	2082f416 	blt	r4,r2,4000a198 <___vfprintf_internal_r+0x1314>
400095c8:	d8812787 	ldb	r2,1182(sp)
400095cc:	42000204 	addi	r8,r8,8
400095d0:	10000c26 	beq	r2,zero,40009604 <___vfprintf_internal_r+0x780>
400095d4:	d8811f17 	ldw	r2,1148(sp)
400095d8:	d9012784 	addi	r4,sp,1182
400095dc:	18c00044 	addi	r3,r3,1
400095e0:	10800044 	addi	r2,r2,1
400095e4:	41000015 	stw	r4,0(r8)
400095e8:	01000044 	movi	r4,1
400095ec:	41000115 	stw	r4,4(r8)
400095f0:	d8c12015 	stw	r3,1152(sp)
400095f4:	d8811f15 	stw	r2,1148(sp)
400095f8:	010001c4 	movi	r4,7
400095fc:	20828d16 	blt	r4,r2,4000a034 <___vfprintf_internal_r+0x11b0>
40009600:	42000204 	addi	r8,r8,8
40009604:	dac12c17 	ldw	r11,1200(sp)
40009608:	58000c26 	beq	r11,zero,4000963c <___vfprintf_internal_r+0x7b8>
4000960c:	d8811f17 	ldw	r2,1148(sp)
40009610:	d9012704 	addi	r4,sp,1180
40009614:	18c00084 	addi	r3,r3,2
40009618:	10800044 	addi	r2,r2,1
4000961c:	41000015 	stw	r4,0(r8)
40009620:	01000084 	movi	r4,2
40009624:	41000115 	stw	r4,4(r8)
40009628:	d8c12015 	stw	r3,1152(sp)
4000962c:	d8811f15 	stw	r2,1148(sp)
40009630:	010001c4 	movi	r4,7
40009634:	20828716 	blt	r4,r2,4000a054 <___vfprintf_internal_r+0x11d0>
40009638:	42000204 	addi	r8,r8,8
4000963c:	db013017 	ldw	r12,1216(sp)
40009640:	00802004 	movi	r2,128
40009644:	6081e926 	beq	r12,r2,40009dec <___vfprintf_internal_r+0xf68>
40009648:	db013217 	ldw	r12,1224(sp)
4000964c:	64abc83a 	sub	r21,r12,r18
40009650:	0540260e 	bge	zero,r21,400096ec <___vfprintf_internal_r+0x868>
40009654:	07000404 	movi	fp,16
40009658:	d8811f17 	ldw	r2,1148(sp)
4000965c:	e5443d0e 	bge	fp,r21,4000a754 <___vfprintf_internal_r+0x18d0>
40009660:	01500074 	movhi	r5,16385
40009664:	2953e184 	addi	r5,r5,20358
40009668:	d9412c15 	stw	r5,1200(sp)
4000966c:	04c001c4 	movi	r19,7
40009670:	00000306 	br	40009680 <___vfprintf_internal_r+0x7fc>
40009674:	ad7ffc04 	addi	r21,r21,-16
40009678:	42000204 	addi	r8,r8,8
4000967c:	e540110e 	bge	fp,r21,400096c4 <___vfprintf_internal_r+0x840>
40009680:	18c00404 	addi	r3,r3,16
40009684:	10800044 	addi	r2,r2,1
40009688:	45000015 	stw	r20,0(r8)
4000968c:	47000115 	stw	fp,4(r8)
40009690:	d8c12015 	stw	r3,1152(sp)
40009694:	d8811f15 	stw	r2,1148(sp)
40009698:	98bff60e 	bge	r19,r2,40009674 <__alt_data_end+0xc0009674>
4000969c:	b009883a 	mov	r4,r22
400096a0:	b80b883a 	mov	r5,r23
400096a4:	d9811e04 	addi	r6,sp,1144
400096a8:	000f9900 	call	4000f990 <__sprint_r>
400096ac:	103f0c1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
400096b0:	ad7ffc04 	addi	r21,r21,-16
400096b4:	d8c12017 	ldw	r3,1152(sp)
400096b8:	d8811f17 	ldw	r2,1148(sp)
400096bc:	da000404 	addi	r8,sp,16
400096c0:	e57fef16 	blt	fp,r21,40009680 <__alt_data_end+0xc0009680>
400096c4:	dac12c17 	ldw	r11,1200(sp)
400096c8:	1d47883a 	add	r3,r3,r21
400096cc:	10800044 	addi	r2,r2,1
400096d0:	42c00015 	stw	r11,0(r8)
400096d4:	45400115 	stw	r21,4(r8)
400096d8:	d8c12015 	stw	r3,1152(sp)
400096dc:	d8811f15 	stw	r2,1148(sp)
400096e0:	010001c4 	movi	r4,7
400096e4:	20824b16 	blt	r4,r2,4000a014 <___vfprintf_internal_r+0x1190>
400096e8:	42000204 	addi	r8,r8,8
400096ec:	8880400c 	andi	r2,r17,256
400096f0:	1001761e 	bne	r2,zero,40009ccc <___vfprintf_internal_r+0xe48>
400096f4:	d8811f17 	ldw	r2,1148(sp)
400096f8:	db013117 	ldw	r12,1220(sp)
400096fc:	1c87883a 	add	r3,r3,r18
40009700:	10800044 	addi	r2,r2,1
40009704:	43000015 	stw	r12,0(r8)
40009708:	44800115 	stw	r18,4(r8)
4000970c:	d8c12015 	stw	r3,1152(sp)
40009710:	d8811f15 	stw	r2,1148(sp)
40009714:	010001c4 	movi	r4,7
40009718:	20822616 	blt	r4,r2,40009fb4 <___vfprintf_internal_r+0x1130>
4000971c:	42000204 	addi	r8,r8,8
40009720:	8c40010c 	andi	r17,r17,4
40009724:	88003126 	beq	r17,zero,400097ec <___vfprintf_internal_r+0x968>
40009728:	db012e17 	ldw	r12,1208(sp)
4000972c:	dac12b17 	ldw	r11,1196(sp)
40009730:	62e1c83a 	sub	r16,r12,r11
40009734:	04002d0e 	bge	zero,r16,400097ec <___vfprintf_internal_r+0x968>
40009738:	04400404 	movi	r17,16
4000973c:	d8811f17 	ldw	r2,1148(sp)
40009740:	8c04df0e 	bge	r17,r16,4000aac0 <___vfprintf_internal_r+0x1c3c>
40009744:	01100074 	movhi	r4,16385
40009748:	2113e584 	addi	r4,r4,20374
4000974c:	d9013615 	stw	r4,1240(sp)
40009750:	048001c4 	movi	r18,7
40009754:	00000306 	br	40009764 <___vfprintf_internal_r+0x8e0>
40009758:	843ffc04 	addi	r16,r16,-16
4000975c:	42000204 	addi	r8,r8,8
40009760:	8c00130e 	bge	r17,r16,400097b0 <___vfprintf_internal_r+0x92c>
40009764:	01500074 	movhi	r5,16385
40009768:	18c00404 	addi	r3,r3,16
4000976c:	10800044 	addi	r2,r2,1
40009770:	2953e584 	addi	r5,r5,20374
40009774:	41400015 	stw	r5,0(r8)
40009778:	44400115 	stw	r17,4(r8)
4000977c:	d8c12015 	stw	r3,1152(sp)
40009780:	d8811f15 	stw	r2,1148(sp)
40009784:	90bff40e 	bge	r18,r2,40009758 <__alt_data_end+0xc0009758>
40009788:	b009883a 	mov	r4,r22
4000978c:	b80b883a 	mov	r5,r23
40009790:	d9811e04 	addi	r6,sp,1144
40009794:	000f9900 	call	4000f990 <__sprint_r>
40009798:	103ed11e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000979c:	843ffc04 	addi	r16,r16,-16
400097a0:	d8c12017 	ldw	r3,1152(sp)
400097a4:	d8811f17 	ldw	r2,1148(sp)
400097a8:	da000404 	addi	r8,sp,16
400097ac:	8c3fed16 	blt	r17,r16,40009764 <__alt_data_end+0xc0009764>
400097b0:	dac13617 	ldw	r11,1240(sp)
400097b4:	1c07883a 	add	r3,r3,r16
400097b8:	10800044 	addi	r2,r2,1
400097bc:	42c00015 	stw	r11,0(r8)
400097c0:	44000115 	stw	r16,4(r8)
400097c4:	d8c12015 	stw	r3,1152(sp)
400097c8:	d8811f15 	stw	r2,1148(sp)
400097cc:	010001c4 	movi	r4,7
400097d0:	2080060e 	bge	r4,r2,400097ec <___vfprintf_internal_r+0x968>
400097d4:	b009883a 	mov	r4,r22
400097d8:	b80b883a 	mov	r5,r23
400097dc:	d9811e04 	addi	r6,sp,1144
400097e0:	000f9900 	call	4000f990 <__sprint_r>
400097e4:	103ebe1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
400097e8:	d8c12017 	ldw	r3,1152(sp)
400097ec:	d8812b17 	ldw	r2,1196(sp)
400097f0:	db012e17 	ldw	r12,1208(sp)
400097f4:	1300010e 	bge	r2,r12,400097fc <___vfprintf_internal_r+0x978>
400097f8:	6005883a 	mov	r2,r12
400097fc:	dac12f17 	ldw	r11,1212(sp)
40009800:	5897883a 	add	r11,r11,r2
40009804:	dac12f15 	stw	r11,1212(sp)
40009808:	1801f21e 	bne	r3,zero,40009fd4 <___vfprintf_internal_r+0x1150>
4000980c:	d8011f15 	stw	zero,1148(sp)
40009810:	da000404 	addi	r8,sp,16
40009814:	003dd806 	br	40008f78 <__alt_data_end+0xc0008f78>
40009818:	8c400414 	ori	r17,r17,16
4000981c:	d8c12a15 	stw	r3,1192(sp)
40009820:	88c0080c 	andi	r3,r17,32
40009824:	d8812d17 	ldw	r2,1204(sp)
40009828:	18004626 	beq	r3,zero,40009944 <___vfprintf_internal_r+0xac0>
4000982c:	dac12d17 	ldw	r11,1204(sp)
40009830:	14c00017 	ldw	r19,0(r2)
40009834:	17000117 	ldw	fp,4(r2)
40009838:	5ac00204 	addi	r11,r11,8
4000983c:	dac12d15 	stw	r11,1204(sp)
40009840:	00800044 	movi	r2,1
40009844:	9f06b03a 	or	r3,r19,fp
40009848:	003f0006 	br	4000944c <__alt_data_end+0xc000944c>
4000984c:	1805883a 	mov	r2,r3
40009850:	d8012e15 	stw	zero,1208(sp)
40009854:	82fff404 	addi	r11,r16,-48
40009858:	0019883a 	mov	r12,zero
4000985c:	14000007 	ldb	r16,0(r2)
40009860:	630002a4 	muli	r12,r12,10
40009864:	18c00044 	addi	r3,r3,1
40009868:	1805883a 	mov	r2,r3
4000986c:	62d9883a 	add	r12,r12,r11
40009870:	82fff404 	addi	r11,r16,-48
40009874:	2afff92e 	bgeu	r5,r11,4000985c <__alt_data_end+0xc000985c>
40009878:	db012e15 	stw	r12,1208(sp)
4000987c:	003de906 	br	40009024 <__alt_data_end+0xc0009024>
40009880:	8c400414 	ori	r17,r17,16
40009884:	d8c12a15 	stw	r3,1192(sp)
40009888:	d9812785 	stb	r6,1182(sp)
4000988c:	8880080c 	andi	r2,r17,32
40009890:	d8c12d17 	ldw	r3,1204(sp)
40009894:	10007a26 	beq	r2,zero,40009a80 <___vfprintf_internal_r+0xbfc>
40009898:	db012d17 	ldw	r12,1204(sp)
4000989c:	18800117 	ldw	r2,4(r3)
400098a0:	1cc00017 	ldw	r19,0(r3)
400098a4:	63000204 	addi	r12,r12,8
400098a8:	db012d15 	stw	r12,1204(sp)
400098ac:	1039883a 	mov	fp,r2
400098b0:	10031016 	blt	r2,zero,4000a4f4 <___vfprintf_internal_r+0x1670>
400098b4:	dd412783 	ldbu	r21,1182(sp)
400098b8:	da413215 	stw	r9,1224(sp)
400098bc:	00800044 	movi	r2,1
400098c0:	9f06b03a 	or	r3,r19,fp
400098c4:	003ee406 	br	40009458 <__alt_data_end+0xc0009458>
400098c8:	03100074 	movhi	r12,16385
400098cc:	6313d504 	addi	r12,r12,20308
400098d0:	d8c12a15 	stw	r3,1192(sp)
400098d4:	d9812785 	stb	r6,1182(sp)
400098d8:	db013b15 	stw	r12,1260(sp)
400098dc:	88c0080c 	andi	r3,r17,32
400098e0:	d8812d17 	ldw	r2,1204(sp)
400098e4:	18002b26 	beq	r3,zero,40009994 <___vfprintf_internal_r+0xb10>
400098e8:	dac12d17 	ldw	r11,1204(sp)
400098ec:	14c00017 	ldw	r19,0(r2)
400098f0:	17000117 	ldw	fp,4(r2)
400098f4:	5ac00204 	addi	r11,r11,8
400098f8:	dac12d15 	stw	r11,1204(sp)
400098fc:	8880004c 	andi	r2,r17,1
40009900:	10025b26 	beq	r2,zero,4000a270 <___vfprintf_internal_r+0x13ec>
40009904:	9f06b03a 	or	r3,r19,fp
40009908:	18037026 	beq	r3,zero,4000a6cc <___vfprintf_internal_r+0x1848>
4000990c:	00800c04 	movi	r2,48
40009910:	d8812705 	stb	r2,1180(sp)
40009914:	dc012745 	stb	r16,1181(sp)
40009918:	8c400094 	ori	r17,r17,2
4000991c:	00800084 	movi	r2,2
40009920:	003eca06 	br	4000944c <__alt_data_end+0xc000944c>
40009924:	8c400814 	ori	r17,r17,32
40009928:	1805883a 	mov	r2,r3
4000992c:	1c000007 	ldb	r16,0(r3)
40009930:	003dbb06 	br	40009020 <__alt_data_end+0xc0009020>
40009934:	d8c12a15 	stw	r3,1192(sp)
40009938:	88c0080c 	andi	r3,r17,32
4000993c:	d8812d17 	ldw	r2,1204(sp)
40009940:	183fba1e 	bne	r3,zero,4000982c <__alt_data_end+0xc000982c>
40009944:	88c0040c 	andi	r3,r17,16
40009948:	18024c1e 	bne	r3,zero,4000a27c <___vfprintf_internal_r+0x13f8>
4000994c:	88c0100c 	andi	r3,r17,64
40009950:	18024a26 	beq	r3,zero,4000a27c <___vfprintf_internal_r+0x13f8>
40009954:	dac12d17 	ldw	r11,1204(sp)
40009958:	14c0000b 	ldhu	r19,0(r2)
4000995c:	0039883a 	mov	fp,zero
40009960:	5ac00104 	addi	r11,r11,4
40009964:	dac12d15 	stw	r11,1204(sp)
40009968:	00800044 	movi	r2,1
4000996c:	9807883a 	mov	r3,r19
40009970:	003eb606 	br	4000944c <__alt_data_end+0xc000944c>
40009974:	00900074 	movhi	r2,16385
40009978:	1093da04 	addi	r2,r2,20328
4000997c:	d8c12a15 	stw	r3,1192(sp)
40009980:	d8813b15 	stw	r2,1260(sp)
40009984:	d9812785 	stb	r6,1182(sp)
40009988:	88c0080c 	andi	r3,r17,32
4000998c:	d8812d17 	ldw	r2,1204(sp)
40009990:	183fd51e 	bne	r3,zero,400098e8 <__alt_data_end+0xc00098e8>
40009994:	88c0040c 	andi	r3,r17,16
40009998:	18034126 	beq	r3,zero,4000a6a0 <___vfprintf_internal_r+0x181c>
4000999c:	db012d17 	ldw	r12,1204(sp)
400099a0:	14c00017 	ldw	r19,0(r2)
400099a4:	0039883a 	mov	fp,zero
400099a8:	63000104 	addi	r12,r12,4
400099ac:	db012d15 	stw	r12,1204(sp)
400099b0:	003fd206 	br	400098fc <__alt_data_end+0xc00098fc>
400099b4:	1c000007 	ldb	r16,0(r3)
400099b8:	81c3d626 	beq	r16,r7,4000a914 <___vfprintf_internal_r+0x1a90>
400099bc:	8c400414 	ori	r17,r17,16
400099c0:	1805883a 	mov	r2,r3
400099c4:	003d9606 	br	40009020 <__alt_data_end+0xc0009020>
400099c8:	d8c12a15 	stw	r3,1192(sp)
400099cc:	d9812785 	stb	r6,1182(sp)
400099d0:	8880080c 	andi	r2,r17,32
400099d4:	10033f26 	beq	r2,zero,4000a6d4 <___vfprintf_internal_r+0x1850>
400099d8:	db012d17 	ldw	r12,1204(sp)
400099dc:	dac12f17 	ldw	r11,1212(sp)
400099e0:	60800017 	ldw	r2,0(r12)
400099e4:	5807d7fa 	srai	r3,r11,31
400099e8:	63000104 	addi	r12,r12,4
400099ec:	db012d15 	stw	r12,1204(sp)
400099f0:	12c00015 	stw	r11,0(r2)
400099f4:	10c00115 	stw	r3,4(r2)
400099f8:	003d5f06 	br	40008f78 <__alt_data_end+0xc0008f78>
400099fc:	d8c12a15 	stw	r3,1192(sp)
40009a00:	88c0080c 	andi	r3,r17,32
40009a04:	d8812d17 	ldw	r2,1204(sp)
40009a08:	183e891e 	bne	r3,zero,40009430 <__alt_data_end+0xc0009430>
40009a0c:	88c0040c 	andi	r3,r17,16
40009a10:	1801ea1e 	bne	r3,zero,4000a1bc <___vfprintf_internal_r+0x1338>
40009a14:	88c0100c 	andi	r3,r17,64
40009a18:	1801e826 	beq	r3,zero,4000a1bc <___vfprintf_internal_r+0x1338>
40009a1c:	db012d17 	ldw	r12,1204(sp)
40009a20:	14c0000b 	ldhu	r19,0(r2)
40009a24:	0039883a 	mov	fp,zero
40009a28:	63000104 	addi	r12,r12,4
40009a2c:	db012d15 	stw	r12,1204(sp)
40009a30:	0005883a 	mov	r2,zero
40009a34:	9807883a 	mov	r3,r19
40009a38:	003e8406 	br	4000944c <__alt_data_end+0xc000944c>
40009a3c:	30803fcc 	andi	r2,r6,255
40009a40:	1080201c 	xori	r2,r2,128
40009a44:	10bfe004 	addi	r2,r2,-128
40009a48:	10031d1e 	bne	r2,zero,4000a6c0 <___vfprintf_internal_r+0x183c>
40009a4c:	1805883a 	mov	r2,r3
40009a50:	01800804 	movi	r6,32
40009a54:	1c000007 	ldb	r16,0(r3)
40009a58:	003d7106 	br	40009020 <__alt_data_end+0xc0009020>
40009a5c:	8c400054 	ori	r17,r17,1
40009a60:	1805883a 	mov	r2,r3
40009a64:	1c000007 	ldb	r16,0(r3)
40009a68:	003d6d06 	br	40009020 <__alt_data_end+0xc0009020>
40009a6c:	d8c12a15 	stw	r3,1192(sp)
40009a70:	d9812785 	stb	r6,1182(sp)
40009a74:	8880080c 	andi	r2,r17,32
40009a78:	d8c12d17 	ldw	r3,1204(sp)
40009a7c:	103f861e 	bne	r2,zero,40009898 <__alt_data_end+0xc0009898>
40009a80:	8880040c 	andi	r2,r17,16
40009a84:	1001f31e 	bne	r2,zero,4000a254 <___vfprintf_internal_r+0x13d0>
40009a88:	8880100c 	andi	r2,r17,64
40009a8c:	1001f126 	beq	r2,zero,4000a254 <___vfprintf_internal_r+0x13d0>
40009a90:	1cc0000f 	ldh	r19,0(r3)
40009a94:	db012d17 	ldw	r12,1204(sp)
40009a98:	9839d7fa 	srai	fp,r19,31
40009a9c:	63000104 	addi	r12,r12,4
40009aa0:	db012d15 	stw	r12,1204(sp)
40009aa4:	e005883a 	mov	r2,fp
40009aa8:	003f8106 	br	400098b0 <__alt_data_end+0xc00098b0>
40009aac:	8c401014 	ori	r17,r17,64
40009ab0:	1805883a 	mov	r2,r3
40009ab4:	1c000007 	ldb	r16,0(r3)
40009ab8:	003d5906 	br	40009020 <__alt_data_end+0xc0009020>
40009abc:	db012d17 	ldw	r12,1204(sp)
40009ac0:	d8c12a15 	stw	r3,1192(sp)
40009ac4:	00c00044 	movi	r3,1
40009ac8:	60800017 	ldw	r2,0(r12)
40009acc:	63000104 	addi	r12,r12,4
40009ad0:	d8c12b15 	stw	r3,1196(sp)
40009ad4:	d8012785 	stb	zero,1182(sp)
40009ad8:	d8810405 	stb	r2,1040(sp)
40009adc:	db012d15 	stw	r12,1204(sp)
40009ae0:	dac10404 	addi	r11,sp,1040
40009ae4:	1825883a 	mov	r18,r3
40009ae8:	d8013215 	stw	zero,1224(sp)
40009aec:	d8013415 	stw	zero,1232(sp)
40009af0:	dac13115 	stw	r11,1220(sp)
40009af4:	0005883a 	mov	r2,zero
40009af8:	003e7d06 	br	400094f0 <__alt_data_end+0xc00094f0>
40009afc:	db012d17 	ldw	r12,1204(sp)
40009b00:	00800c04 	movi	r2,48
40009b04:	d8812705 	stb	r2,1180(sp)
40009b08:	64c00017 	ldw	r19,0(r12)
40009b0c:	00801e04 	movi	r2,120
40009b10:	d8812745 	stb	r2,1181(sp)
40009b14:	00900074 	movhi	r2,16385
40009b18:	1093da04 	addi	r2,r2,20328
40009b1c:	63000104 	addi	r12,r12,4
40009b20:	d8c12a15 	stw	r3,1192(sp)
40009b24:	d8813b15 	stw	r2,1260(sp)
40009b28:	0039883a 	mov	fp,zero
40009b2c:	8c400094 	ori	r17,r17,2
40009b30:	db012d15 	stw	r12,1204(sp)
40009b34:	00800084 	movi	r2,2
40009b38:	04001e04 	movi	r16,120
40009b3c:	9807883a 	mov	r3,r19
40009b40:	003e4206 	br	4000944c <__alt_data_end+0xc000944c>
40009b44:	dac12d17 	ldw	r11,1204(sp)
40009b48:	db012d17 	ldw	r12,1204(sp)
40009b4c:	d8c12a15 	stw	r3,1192(sp)
40009b50:	5ac00017 	ldw	r11,0(r11)
40009b54:	d8012785 	stb	zero,1182(sp)
40009b58:	64c00104 	addi	r19,r12,4
40009b5c:	dac13115 	stw	r11,1220(sp)
40009b60:	5803e826 	beq	r11,zero,4000ab04 <___vfprintf_internal_r+0x1c80>
40009b64:	d9013117 	ldw	r4,1220(sp)
40009b68:	48037a16 	blt	r9,zero,4000a954 <___vfprintf_internal_r+0x1ad0>
40009b6c:	480d883a 	mov	r6,r9
40009b70:	000b883a 	mov	r5,zero
40009b74:	da013f15 	stw	r8,1276(sp)
40009b78:	da413e15 	stw	r9,1272(sp)
40009b7c:	000dd480 	call	4000dd48 <memchr>
40009b80:	da013f17 	ldw	r8,1276(sp)
40009b84:	da413e17 	ldw	r9,1272(sp)
40009b88:	10044426 	beq	r2,zero,4000ac9c <___vfprintf_internal_r+0x1e18>
40009b8c:	d8c13117 	ldw	r3,1220(sp)
40009b90:	10e5c83a 	sub	r18,r2,r3
40009b94:	4c834416 	blt	r9,r18,4000a8a8 <___vfprintf_internal_r+0x1a24>
40009b98:	9005883a 	mov	r2,r18
40009b9c:	90037216 	blt	r18,zero,4000a968 <___vfprintf_internal_r+0x1ae4>
40009ba0:	dd412783 	ldbu	r21,1182(sp)
40009ba4:	d8812b15 	stw	r2,1196(sp)
40009ba8:	dcc12d15 	stw	r19,1204(sp)
40009bac:	d8013215 	stw	zero,1224(sp)
40009bb0:	d8013415 	stw	zero,1232(sp)
40009bb4:	003e4706 	br	400094d4 <__alt_data_end+0xc00094d4>
40009bb8:	dac12d17 	ldw	r11,1204(sp)
40009bbc:	db012d17 	ldw	r12,1204(sp)
40009bc0:	5ac00017 	ldw	r11,0(r11)
40009bc4:	dac12e15 	stw	r11,1208(sp)
40009bc8:	62c00104 	addi	r11,r12,4
40009bcc:	db012e17 	ldw	r12,1208(sp)
40009bd0:	60034a16 	blt	r12,zero,4000a8fc <___vfprintf_internal_r+0x1a78>
40009bd4:	dac12d15 	stw	r11,1204(sp)
40009bd8:	1805883a 	mov	r2,r3
40009bdc:	1c000007 	ldb	r16,0(r3)
40009be0:	003d0f06 	br	40009020 <__alt_data_end+0xc0009020>
40009be4:	1805883a 	mov	r2,r3
40009be8:	01800ac4 	movi	r6,43
40009bec:	1c000007 	ldb	r16,0(r3)
40009bf0:	003d0b06 	br	40009020 <__alt_data_end+0xc0009020>
40009bf4:	d8c12a15 	stw	r3,1192(sp)
40009bf8:	d9812785 	stb	r6,1182(sp)
40009bfc:	803db226 	beq	r16,zero,400092c8 <__alt_data_end+0xc00092c8>
40009c00:	00c00044 	movi	r3,1
40009c04:	d8c12b15 	stw	r3,1196(sp)
40009c08:	dc010405 	stb	r16,1040(sp)
40009c0c:	d8012785 	stb	zero,1182(sp)
40009c10:	003fb306 	br	40009ae0 <__alt_data_end+0xc0009ae0>
40009c14:	d8c12017 	ldw	r3,1152(sp)
40009c18:	003e6d06 	br	400095d0 <__alt_data_end+0xc00095d0>
40009c1c:	10803fcc 	andi	r2,r2,255
40009c20:	00c00044 	movi	r3,1
40009c24:	10fe141e 	bne	r2,r3,40009478 <__alt_data_end+0xc0009478>
40009c28:	e000021e 	bne	fp,zero,40009c34 <___vfprintf_internal_r+0xdb0>
40009c2c:	00800244 	movi	r2,9
40009c30:	14c0202e 	bgeu	r2,r19,40009cb4 <___vfprintf_internal_r+0xe30>
40009c34:	dc012b15 	stw	r16,1196(sp)
40009c38:	dc412c15 	stw	r17,1200(sp)
40009c3c:	9821883a 	mov	r16,r19
40009c40:	e023883a 	mov	r17,fp
40009c44:	dc810e04 	addi	r18,sp,1080
40009c48:	4027883a 	mov	r19,r8
40009c4c:	4839883a 	mov	fp,r9
40009c50:	8009883a 	mov	r4,r16
40009c54:	880b883a 	mov	r5,r17
40009c58:	01800284 	movi	r6,10
40009c5c:	000f883a 	mov	r7,zero
40009c60:	0011c800 	call	40011c80 <__umoddi3>
40009c64:	10800c04 	addi	r2,r2,48
40009c68:	94bfffc4 	addi	r18,r18,-1
40009c6c:	8009883a 	mov	r4,r16
40009c70:	880b883a 	mov	r5,r17
40009c74:	01800284 	movi	r6,10
40009c78:	000f883a 	mov	r7,zero
40009c7c:	90800005 	stb	r2,0(r18)
40009c80:	00116c00 	call	400116c0 <__udivdi3>
40009c84:	1021883a 	mov	r16,r2
40009c88:	10c4b03a 	or	r2,r2,r3
40009c8c:	1823883a 	mov	r17,r3
40009c90:	103fef1e 	bne	r2,zero,40009c50 <__alt_data_end+0xc0009c50>
40009c94:	dac12817 	ldw	r11,1184(sp)
40009c98:	dc813115 	stw	r18,1220(sp)
40009c9c:	dc012b17 	ldw	r16,1196(sp)
40009ca0:	9811883a 	mov	r8,r19
40009ca4:	dc412c17 	ldw	r17,1200(sp)
40009ca8:	e013883a 	mov	r9,fp
40009cac:	5ca5c83a 	sub	r18,r11,r18
40009cb0:	003e0306 	br	400094c0 <__alt_data_end+0xc00094c0>
40009cb4:	9cc00c04 	addi	r19,r19,48
40009cb8:	d8c10dc4 	addi	r3,sp,1079
40009cbc:	dcc10dc5 	stb	r19,1079(sp)
40009cc0:	dc813c17 	ldw	r18,1264(sp)
40009cc4:	d8c13115 	stw	r3,1220(sp)
40009cc8:	003dfd06 	br	400094c0 <__alt_data_end+0xc00094c0>
40009ccc:	00801944 	movi	r2,101
40009cd0:	1400710e 	bge	r2,r16,40009e98 <___vfprintf_internal_r+0x1014>
40009cd4:	d9013717 	ldw	r4,1244(sp)
40009cd8:	d9413917 	ldw	r5,1252(sp)
40009cdc:	000d883a 	mov	r6,zero
40009ce0:	000f883a 	mov	r7,zero
40009ce4:	d8c13d15 	stw	r3,1268(sp)
40009ce8:	da013f15 	stw	r8,1276(sp)
40009cec:	00063140 	call	40006314 <__eqdf2>
40009cf0:	d8c13d17 	ldw	r3,1268(sp)
40009cf4:	da013f17 	ldw	r8,1276(sp)
40009cf8:	1000ef1e 	bne	r2,zero,4000a0b8 <___vfprintf_internal_r+0x1234>
40009cfc:	d8811f17 	ldw	r2,1148(sp)
40009d00:	01100074 	movhi	r4,16385
40009d04:	2113e104 	addi	r4,r4,20356
40009d08:	18c00044 	addi	r3,r3,1
40009d0c:	10800044 	addi	r2,r2,1
40009d10:	41000015 	stw	r4,0(r8)
40009d14:	01000044 	movi	r4,1
40009d18:	41000115 	stw	r4,4(r8)
40009d1c:	d8c12015 	stw	r3,1152(sp)
40009d20:	d8811f15 	stw	r2,1148(sp)
40009d24:	010001c4 	movi	r4,7
40009d28:	20828e16 	blt	r4,r2,4000a764 <___vfprintf_internal_r+0x18e0>
40009d2c:	42000204 	addi	r8,r8,8
40009d30:	d8812617 	ldw	r2,1176(sp)
40009d34:	dac13317 	ldw	r11,1228(sp)
40009d38:	12c00216 	blt	r2,r11,40009d44 <___vfprintf_internal_r+0xec0>
40009d3c:	8880004c 	andi	r2,r17,1
40009d40:	103e7726 	beq	r2,zero,40009720 <__alt_data_end+0xc0009720>
40009d44:	db013817 	ldw	r12,1248(sp)
40009d48:	d8811f17 	ldw	r2,1148(sp)
40009d4c:	dac13517 	ldw	r11,1236(sp)
40009d50:	1b07883a 	add	r3,r3,r12
40009d54:	10800044 	addi	r2,r2,1
40009d58:	42c00015 	stw	r11,0(r8)
40009d5c:	43000115 	stw	r12,4(r8)
40009d60:	d8c12015 	stw	r3,1152(sp)
40009d64:	d8811f15 	stw	r2,1148(sp)
40009d68:	010001c4 	movi	r4,7
40009d6c:	2082ed16 	blt	r4,r2,4000a924 <___vfprintf_internal_r+0x1aa0>
40009d70:	42000204 	addi	r8,r8,8
40009d74:	db013317 	ldw	r12,1228(sp)
40009d78:	643fffc4 	addi	r16,r12,-1
40009d7c:	043e680e 	bge	zero,r16,40009720 <__alt_data_end+0xc0009720>
40009d80:	04800404 	movi	r18,16
40009d84:	d8811f17 	ldw	r2,1148(sp)
40009d88:	94007e0e 	bge	r18,r16,40009f84 <___vfprintf_internal_r+0x1100>
40009d8c:	01500074 	movhi	r5,16385
40009d90:	2953e184 	addi	r5,r5,20358
40009d94:	d9412c15 	stw	r5,1200(sp)
40009d98:	054001c4 	movi	r21,7
40009d9c:	00000306 	br	40009dac <___vfprintf_internal_r+0xf28>
40009da0:	42000204 	addi	r8,r8,8
40009da4:	843ffc04 	addi	r16,r16,-16
40009da8:	9400790e 	bge	r18,r16,40009f90 <___vfprintf_internal_r+0x110c>
40009dac:	18c00404 	addi	r3,r3,16
40009db0:	10800044 	addi	r2,r2,1
40009db4:	45000015 	stw	r20,0(r8)
40009db8:	44800115 	stw	r18,4(r8)
40009dbc:	d8c12015 	stw	r3,1152(sp)
40009dc0:	d8811f15 	stw	r2,1148(sp)
40009dc4:	a8bff60e 	bge	r21,r2,40009da0 <__alt_data_end+0xc0009da0>
40009dc8:	b009883a 	mov	r4,r22
40009dcc:	b80b883a 	mov	r5,r23
40009dd0:	d9811e04 	addi	r6,sp,1144
40009dd4:	000f9900 	call	4000f990 <__sprint_r>
40009dd8:	103d411e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
40009ddc:	d8c12017 	ldw	r3,1152(sp)
40009de0:	d8811f17 	ldw	r2,1148(sp)
40009de4:	da000404 	addi	r8,sp,16
40009de8:	003fee06 	br	40009da4 <__alt_data_end+0xc0009da4>
40009dec:	dac12e17 	ldw	r11,1208(sp)
40009df0:	db012b17 	ldw	r12,1196(sp)
40009df4:	5b2bc83a 	sub	r21,r11,r12
40009df8:	057e130e 	bge	zero,r21,40009648 <__alt_data_end+0xc0009648>
40009dfc:	07000404 	movi	fp,16
40009e00:	d8811f17 	ldw	r2,1148(sp)
40009e04:	e543640e 	bge	fp,r21,4000ab98 <___vfprintf_internal_r+0x1d14>
40009e08:	01500074 	movhi	r5,16385
40009e0c:	2953e184 	addi	r5,r5,20358
40009e10:	d9412c15 	stw	r5,1200(sp)
40009e14:	04c001c4 	movi	r19,7
40009e18:	00000306 	br	40009e28 <___vfprintf_internal_r+0xfa4>
40009e1c:	ad7ffc04 	addi	r21,r21,-16
40009e20:	42000204 	addi	r8,r8,8
40009e24:	e540110e 	bge	fp,r21,40009e6c <___vfprintf_internal_r+0xfe8>
40009e28:	18c00404 	addi	r3,r3,16
40009e2c:	10800044 	addi	r2,r2,1
40009e30:	45000015 	stw	r20,0(r8)
40009e34:	47000115 	stw	fp,4(r8)
40009e38:	d8c12015 	stw	r3,1152(sp)
40009e3c:	d8811f15 	stw	r2,1148(sp)
40009e40:	98bff60e 	bge	r19,r2,40009e1c <__alt_data_end+0xc0009e1c>
40009e44:	b009883a 	mov	r4,r22
40009e48:	b80b883a 	mov	r5,r23
40009e4c:	d9811e04 	addi	r6,sp,1144
40009e50:	000f9900 	call	4000f990 <__sprint_r>
40009e54:	103d221e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
40009e58:	ad7ffc04 	addi	r21,r21,-16
40009e5c:	d8c12017 	ldw	r3,1152(sp)
40009e60:	d8811f17 	ldw	r2,1148(sp)
40009e64:	da000404 	addi	r8,sp,16
40009e68:	e57fef16 	blt	fp,r21,40009e28 <__alt_data_end+0xc0009e28>
40009e6c:	dac12c17 	ldw	r11,1200(sp)
40009e70:	1d47883a 	add	r3,r3,r21
40009e74:	10800044 	addi	r2,r2,1
40009e78:	42c00015 	stw	r11,0(r8)
40009e7c:	45400115 	stw	r21,4(r8)
40009e80:	d8c12015 	stw	r3,1152(sp)
40009e84:	d8811f15 	stw	r2,1148(sp)
40009e88:	010001c4 	movi	r4,7
40009e8c:	20819116 	blt	r4,r2,4000a4d4 <___vfprintf_internal_r+0x1650>
40009e90:	42000204 	addi	r8,r8,8
40009e94:	003dec06 	br	40009648 <__alt_data_end+0xc0009648>
40009e98:	db013317 	ldw	r12,1228(sp)
40009e9c:	00800044 	movi	r2,1
40009ea0:	18c00044 	addi	r3,r3,1
40009ea4:	1301530e 	bge	r2,r12,4000a3f4 <___vfprintf_internal_r+0x1570>
40009ea8:	dc011f17 	ldw	r16,1148(sp)
40009eac:	dac13117 	ldw	r11,1220(sp)
40009eb0:	00800044 	movi	r2,1
40009eb4:	84000044 	addi	r16,r16,1
40009eb8:	40800115 	stw	r2,4(r8)
40009ebc:	42c00015 	stw	r11,0(r8)
40009ec0:	d8c12015 	stw	r3,1152(sp)
40009ec4:	dc011f15 	stw	r16,1148(sp)
40009ec8:	008001c4 	movi	r2,7
40009ecc:	14016b16 	blt	r2,r16,4000a47c <___vfprintf_internal_r+0x15f8>
40009ed0:	42000204 	addi	r8,r8,8
40009ed4:	db013817 	ldw	r12,1248(sp)
40009ed8:	dac13517 	ldw	r11,1236(sp)
40009edc:	84000044 	addi	r16,r16,1
40009ee0:	1b07883a 	add	r3,r3,r12
40009ee4:	42c00015 	stw	r11,0(r8)
40009ee8:	43000115 	stw	r12,4(r8)
40009eec:	d8c12015 	stw	r3,1152(sp)
40009ef0:	dc011f15 	stw	r16,1148(sp)
40009ef4:	008001c4 	movi	r2,7
40009ef8:	14016916 	blt	r2,r16,4000a4a0 <___vfprintf_internal_r+0x161c>
40009efc:	44800204 	addi	r18,r8,8
40009f00:	d9013717 	ldw	r4,1244(sp)
40009f04:	d9413917 	ldw	r5,1252(sp)
40009f08:	000d883a 	mov	r6,zero
40009f0c:	000f883a 	mov	r7,zero
40009f10:	d8c13d15 	stw	r3,1268(sp)
40009f14:	00063140 	call	40006314 <__eqdf2>
40009f18:	d8c13d17 	ldw	r3,1268(sp)
40009f1c:	db013317 	ldw	r12,1228(sp)
40009f20:	1000ae26 	beq	r2,zero,4000a1dc <___vfprintf_internal_r+0x1358>
40009f24:	dac13117 	ldw	r11,1220(sp)
40009f28:	60bfffc4 	addi	r2,r12,-1
40009f2c:	1887883a 	add	r3,r3,r2
40009f30:	59000044 	addi	r4,r11,1
40009f34:	84000044 	addi	r16,r16,1
40009f38:	90800115 	stw	r2,4(r18)
40009f3c:	91000015 	stw	r4,0(r18)
40009f40:	d8c12015 	stw	r3,1152(sp)
40009f44:	dc011f15 	stw	r16,1148(sp)
40009f48:	008001c4 	movi	r2,7
40009f4c:	14014216 	blt	r2,r16,4000a458 <___vfprintf_internal_r+0x15d4>
40009f50:	94800204 	addi	r18,r18,8
40009f54:	dac13a17 	ldw	r11,1256(sp)
40009f58:	dd4122c4 	addi	r21,sp,1163
40009f5c:	84000044 	addi	r16,r16,1
40009f60:	58c7883a 	add	r3,r11,r3
40009f64:	95400015 	stw	r21,0(r18)
40009f68:	92c00115 	stw	r11,4(r18)
40009f6c:	d8c12015 	stw	r3,1152(sp)
40009f70:	dc011f15 	stw	r16,1148(sp)
40009f74:	008001c4 	movi	r2,7
40009f78:	14000e16 	blt	r2,r16,40009fb4 <___vfprintf_internal_r+0x1130>
40009f7c:	92000204 	addi	r8,r18,8
40009f80:	003de706 	br	40009720 <__alt_data_end+0xc0009720>
40009f84:	01100074 	movhi	r4,16385
40009f88:	2113e184 	addi	r4,r4,20358
40009f8c:	d9012c15 	stw	r4,1200(sp)
40009f90:	dac12c17 	ldw	r11,1200(sp)
40009f94:	1c07883a 	add	r3,r3,r16
40009f98:	44000115 	stw	r16,4(r8)
40009f9c:	42c00015 	stw	r11,0(r8)
40009fa0:	10800044 	addi	r2,r2,1
40009fa4:	d8c12015 	stw	r3,1152(sp)
40009fa8:	d8811f15 	stw	r2,1148(sp)
40009fac:	010001c4 	movi	r4,7
40009fb0:	20bdda0e 	bge	r4,r2,4000971c <__alt_data_end+0xc000971c>
40009fb4:	b009883a 	mov	r4,r22
40009fb8:	b80b883a 	mov	r5,r23
40009fbc:	d9811e04 	addi	r6,sp,1144
40009fc0:	000f9900 	call	4000f990 <__sprint_r>
40009fc4:	103cc61e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
40009fc8:	d8c12017 	ldw	r3,1152(sp)
40009fcc:	da000404 	addi	r8,sp,16
40009fd0:	003dd306 	br	40009720 <__alt_data_end+0xc0009720>
40009fd4:	b009883a 	mov	r4,r22
40009fd8:	b80b883a 	mov	r5,r23
40009fdc:	d9811e04 	addi	r6,sp,1144
40009fe0:	000f9900 	call	4000f990 <__sprint_r>
40009fe4:	103e0926 	beq	r2,zero,4000980c <__alt_data_end+0xc000980c>
40009fe8:	003cbd06 	br	400092e0 <__alt_data_end+0xc00092e0>
40009fec:	10803fcc 	andi	r2,r2,255
40009ff0:	1000651e 	bne	r2,zero,4000a188 <___vfprintf_internal_r+0x1304>
40009ff4:	8880004c 	andi	r2,r17,1
40009ff8:	10013226 	beq	r2,zero,4000a4c4 <___vfprintf_internal_r+0x1640>
40009ffc:	00800c04 	movi	r2,48
4000a000:	d8c10dc4 	addi	r3,sp,1079
4000a004:	d8810dc5 	stb	r2,1079(sp)
4000a008:	dc813c17 	ldw	r18,1264(sp)
4000a00c:	d8c13115 	stw	r3,1220(sp)
4000a010:	003d2b06 	br	400094c0 <__alt_data_end+0xc00094c0>
4000a014:	b009883a 	mov	r4,r22
4000a018:	b80b883a 	mov	r5,r23
4000a01c:	d9811e04 	addi	r6,sp,1144
4000a020:	000f9900 	call	4000f990 <__sprint_r>
4000a024:	103cae1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a028:	d8c12017 	ldw	r3,1152(sp)
4000a02c:	da000404 	addi	r8,sp,16
4000a030:	003dae06 	br	400096ec <__alt_data_end+0xc00096ec>
4000a034:	b009883a 	mov	r4,r22
4000a038:	b80b883a 	mov	r5,r23
4000a03c:	d9811e04 	addi	r6,sp,1144
4000a040:	000f9900 	call	4000f990 <__sprint_r>
4000a044:	103ca61e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a048:	d8c12017 	ldw	r3,1152(sp)
4000a04c:	da000404 	addi	r8,sp,16
4000a050:	003d6c06 	br	40009604 <__alt_data_end+0xc0009604>
4000a054:	b009883a 	mov	r4,r22
4000a058:	b80b883a 	mov	r5,r23
4000a05c:	d9811e04 	addi	r6,sp,1144
4000a060:	000f9900 	call	4000f990 <__sprint_r>
4000a064:	103c9e1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a068:	d8c12017 	ldw	r3,1152(sp)
4000a06c:	da000404 	addi	r8,sp,16
4000a070:	003d7206 	br	4000963c <__alt_data_end+0xc000963c>
4000a074:	d9413b17 	ldw	r5,1260(sp)
4000a078:	d8c10e04 	addi	r3,sp,1080
4000a07c:	988003cc 	andi	r2,r19,15
4000a080:	e008973a 	slli	r4,fp,28
4000a084:	2885883a 	add	r2,r5,r2
4000a088:	9826d13a 	srli	r19,r19,4
4000a08c:	10800003 	ldbu	r2,0(r2)
4000a090:	e038d13a 	srli	fp,fp,4
4000a094:	18ffffc4 	addi	r3,r3,-1
4000a098:	24e6b03a 	or	r19,r4,r19
4000a09c:	18800005 	stb	r2,0(r3)
4000a0a0:	9f04b03a 	or	r2,r19,fp
4000a0a4:	103ff51e 	bne	r2,zero,4000a07c <__alt_data_end+0xc000a07c>
4000a0a8:	db012817 	ldw	r12,1184(sp)
4000a0ac:	d8c13115 	stw	r3,1220(sp)
4000a0b0:	60e5c83a 	sub	r18,r12,r3
4000a0b4:	003d0206 	br	400094c0 <__alt_data_end+0xc00094c0>
4000a0b8:	dc012617 	ldw	r16,1176(sp)
4000a0bc:	0401b10e 	bge	zero,r16,4000a784 <___vfprintf_internal_r+0x1900>
4000a0c0:	db013117 	ldw	r12,1220(sp)
4000a0c4:	dac13317 	ldw	r11,1228(sp)
4000a0c8:	62e1883a 	add	r16,r12,r11
4000a0cc:	db013417 	ldw	r12,1232(sp)
4000a0d0:	5825883a 	mov	r18,r11
4000a0d4:	62c0010e 	bge	r12,r11,4000a0dc <___vfprintf_internal_r+0x1258>
4000a0d8:	6025883a 	mov	r18,r12
4000a0dc:	04800b0e 	bge	zero,r18,4000a10c <___vfprintf_internal_r+0x1288>
4000a0e0:	d8811f17 	ldw	r2,1148(sp)
4000a0e4:	dac13117 	ldw	r11,1220(sp)
4000a0e8:	1c87883a 	add	r3,r3,r18
4000a0ec:	10800044 	addi	r2,r2,1
4000a0f0:	42c00015 	stw	r11,0(r8)
4000a0f4:	44800115 	stw	r18,4(r8)
4000a0f8:	d8c12015 	stw	r3,1152(sp)
4000a0fc:	d8811f15 	stw	r2,1148(sp)
4000a100:	010001c4 	movi	r4,7
4000a104:	20824f16 	blt	r4,r2,4000aa44 <___vfprintf_internal_r+0x1bc0>
4000a108:	42000204 	addi	r8,r8,8
4000a10c:	90024b16 	blt	r18,zero,4000aa3c <___vfprintf_internal_r+0x1bb8>
4000a110:	db013417 	ldw	r12,1232(sp)
4000a114:	64a5c83a 	sub	r18,r12,r18
4000a118:	0480730e 	bge	zero,r18,4000a2e8 <___vfprintf_internal_r+0x1464>
4000a11c:	05400404 	movi	r21,16
4000a120:	d8811f17 	ldw	r2,1148(sp)
4000a124:	ac817d0e 	bge	r21,r18,4000a71c <___vfprintf_internal_r+0x1898>
4000a128:	01500074 	movhi	r5,16385
4000a12c:	2953e184 	addi	r5,r5,20358
4000a130:	d9412c15 	stw	r5,1200(sp)
4000a134:	070001c4 	movi	fp,7
4000a138:	00000306 	br	4000a148 <___vfprintf_internal_r+0x12c4>
4000a13c:	42000204 	addi	r8,r8,8
4000a140:	94bffc04 	addi	r18,r18,-16
4000a144:	ac81780e 	bge	r21,r18,4000a728 <___vfprintf_internal_r+0x18a4>
4000a148:	18c00404 	addi	r3,r3,16
4000a14c:	10800044 	addi	r2,r2,1
4000a150:	45000015 	stw	r20,0(r8)
4000a154:	45400115 	stw	r21,4(r8)
4000a158:	d8c12015 	stw	r3,1152(sp)
4000a15c:	d8811f15 	stw	r2,1148(sp)
4000a160:	e0bff60e 	bge	fp,r2,4000a13c <__alt_data_end+0xc000a13c>
4000a164:	b009883a 	mov	r4,r22
4000a168:	b80b883a 	mov	r5,r23
4000a16c:	d9811e04 	addi	r6,sp,1144
4000a170:	000f9900 	call	4000f990 <__sprint_r>
4000a174:	103c5a1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a178:	d8c12017 	ldw	r3,1152(sp)
4000a17c:	d8811f17 	ldw	r2,1148(sp)
4000a180:	da000404 	addi	r8,sp,16
4000a184:	003fee06 	br	4000a140 <__alt_data_end+0xc000a140>
4000a188:	dac10e04 	addi	r11,sp,1080
4000a18c:	0025883a 	mov	r18,zero
4000a190:	dac13115 	stw	r11,1220(sp)
4000a194:	003cca06 	br	400094c0 <__alt_data_end+0xc00094c0>
4000a198:	b009883a 	mov	r4,r22
4000a19c:	b80b883a 	mov	r5,r23
4000a1a0:	d9811e04 	addi	r6,sp,1144
4000a1a4:	000f9900 	call	4000f990 <__sprint_r>
4000a1a8:	103c4d1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a1ac:	d8c12017 	ldw	r3,1152(sp)
4000a1b0:	d8812787 	ldb	r2,1182(sp)
4000a1b4:	da000404 	addi	r8,sp,16
4000a1b8:	003d0506 	br	400095d0 <__alt_data_end+0xc00095d0>
4000a1bc:	dac12d17 	ldw	r11,1204(sp)
4000a1c0:	14c00017 	ldw	r19,0(r2)
4000a1c4:	0039883a 	mov	fp,zero
4000a1c8:	5ac00104 	addi	r11,r11,4
4000a1cc:	dac12d15 	stw	r11,1204(sp)
4000a1d0:	0005883a 	mov	r2,zero
4000a1d4:	9807883a 	mov	r3,r19
4000a1d8:	003c9c06 	br	4000944c <__alt_data_end+0xc000944c>
4000a1dc:	657fffc4 	addi	r21,r12,-1
4000a1e0:	057f5c0e 	bge	zero,r21,40009f54 <__alt_data_end+0xc0009f54>
4000a1e4:	07000404 	movi	fp,16
4000a1e8:	e5408f0e 	bge	fp,r21,4000a428 <___vfprintf_internal_r+0x15a4>
4000a1ec:	01100074 	movhi	r4,16385
4000a1f0:	2113e184 	addi	r4,r4,20358
4000a1f4:	d9012c15 	stw	r4,1200(sp)
4000a1f8:	01c001c4 	movi	r7,7
4000a1fc:	00000306 	br	4000a20c <___vfprintf_internal_r+0x1388>
4000a200:	94800204 	addi	r18,r18,8
4000a204:	ad7ffc04 	addi	r21,r21,-16
4000a208:	e5408a0e 	bge	fp,r21,4000a434 <___vfprintf_internal_r+0x15b0>
4000a20c:	18c00404 	addi	r3,r3,16
4000a210:	84000044 	addi	r16,r16,1
4000a214:	95000015 	stw	r20,0(r18)
4000a218:	97000115 	stw	fp,4(r18)
4000a21c:	d8c12015 	stw	r3,1152(sp)
4000a220:	dc011f15 	stw	r16,1148(sp)
4000a224:	3c3ff60e 	bge	r7,r16,4000a200 <__alt_data_end+0xc000a200>
4000a228:	b009883a 	mov	r4,r22
4000a22c:	b80b883a 	mov	r5,r23
4000a230:	d9811e04 	addi	r6,sp,1144
4000a234:	d9c13d15 	stw	r7,1268(sp)
4000a238:	000f9900 	call	4000f990 <__sprint_r>
4000a23c:	d9c13d17 	ldw	r7,1268(sp)
4000a240:	103c271e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a244:	d8c12017 	ldw	r3,1152(sp)
4000a248:	dc011f17 	ldw	r16,1148(sp)
4000a24c:	dc800404 	addi	r18,sp,16
4000a250:	003fec06 	br	4000a204 <__alt_data_end+0xc000a204>
4000a254:	1cc00017 	ldw	r19,0(r3)
4000a258:	dac12d17 	ldw	r11,1204(sp)
4000a25c:	9839d7fa 	srai	fp,r19,31
4000a260:	5ac00104 	addi	r11,r11,4
4000a264:	dac12d15 	stw	r11,1204(sp)
4000a268:	e005883a 	mov	r2,fp
4000a26c:	003d9006 	br	400098b0 <__alt_data_end+0xc00098b0>
4000a270:	00800084 	movi	r2,2
4000a274:	9f06b03a 	or	r3,r19,fp
4000a278:	003c7406 	br	4000944c <__alt_data_end+0xc000944c>
4000a27c:	db012d17 	ldw	r12,1204(sp)
4000a280:	14c00017 	ldw	r19,0(r2)
4000a284:	0039883a 	mov	fp,zero
4000a288:	63000104 	addi	r12,r12,4
4000a28c:	db012d15 	stw	r12,1204(sp)
4000a290:	00800044 	movi	r2,1
4000a294:	9807883a 	mov	r3,r19
4000a298:	003c6c06 	br	4000944c <__alt_data_end+0xc000944c>
4000a29c:	10803fcc 	andi	r2,r2,255
4000a2a0:	1080201c 	xori	r2,r2,128
4000a2a4:	10bfe004 	addi	r2,r2,-128
4000a2a8:	01000c04 	movi	r4,48
4000a2ac:	1101a526 	beq	r2,r4,4000a944 <___vfprintf_internal_r+0x1ac0>
4000a2b0:	dac13117 	ldw	r11,1220(sp)
4000a2b4:	db012817 	ldw	r12,1184(sp)
4000a2b8:	193fffc5 	stb	r4,-1(r3)
4000a2bc:	5affffc4 	addi	r11,r11,-1
4000a2c0:	dac13115 	stw	r11,1220(sp)
4000a2c4:	62e5c83a 	sub	r18,r12,r11
4000a2c8:	003c7d06 	br	400094c0 <__alt_data_end+0xc00094c0>
4000a2cc:	b009883a 	mov	r4,r22
4000a2d0:	b80b883a 	mov	r5,r23
4000a2d4:	d9811e04 	addi	r6,sp,1144
4000a2d8:	000f9900 	call	4000f990 <__sprint_r>
4000a2dc:	103c001e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a2e0:	d8c12017 	ldw	r3,1152(sp)
4000a2e4:	da000404 	addi	r8,sp,16
4000a2e8:	db013117 	ldw	r12,1220(sp)
4000a2ec:	dac13417 	ldw	r11,1232(sp)
4000a2f0:	d8812617 	ldw	r2,1176(sp)
4000a2f4:	62e5883a 	add	r18,r12,r11
4000a2f8:	db013317 	ldw	r12,1228(sp)
4000a2fc:	13000216 	blt	r2,r12,4000a308 <___vfprintf_internal_r+0x1484>
4000a300:	8900004c 	andi	r4,r17,1
4000a304:	20000c26 	beq	r4,zero,4000a338 <___vfprintf_internal_r+0x14b4>
4000a308:	dac13817 	ldw	r11,1248(sp)
4000a30c:	d9011f17 	ldw	r4,1148(sp)
4000a310:	db013517 	ldw	r12,1236(sp)
4000a314:	1ac7883a 	add	r3,r3,r11
4000a318:	21000044 	addi	r4,r4,1
4000a31c:	43000015 	stw	r12,0(r8)
4000a320:	42c00115 	stw	r11,4(r8)
4000a324:	d8c12015 	stw	r3,1152(sp)
4000a328:	d9011f15 	stw	r4,1148(sp)
4000a32c:	014001c4 	movi	r5,7
4000a330:	2901cc16 	blt	r5,r4,4000aa64 <___vfprintf_internal_r+0x1be0>
4000a334:	42000204 	addi	r8,r8,8
4000a338:	dac13317 	ldw	r11,1228(sp)
4000a33c:	8489c83a 	sub	r4,r16,r18
4000a340:	5885c83a 	sub	r2,r11,r2
4000a344:	1021883a 	mov	r16,r2
4000a348:	2080010e 	bge	r4,r2,4000a350 <___vfprintf_internal_r+0x14cc>
4000a34c:	2021883a 	mov	r16,r4
4000a350:	04000a0e 	bge	zero,r16,4000a37c <___vfprintf_internal_r+0x14f8>
4000a354:	d9011f17 	ldw	r4,1148(sp)
4000a358:	1c07883a 	add	r3,r3,r16
4000a35c:	44800015 	stw	r18,0(r8)
4000a360:	21000044 	addi	r4,r4,1
4000a364:	44000115 	stw	r16,4(r8)
4000a368:	d8c12015 	stw	r3,1152(sp)
4000a36c:	d9011f15 	stw	r4,1148(sp)
4000a370:	014001c4 	movi	r5,7
4000a374:	2901d616 	blt	r5,r4,4000aad0 <___vfprintf_internal_r+0x1c4c>
4000a378:	42000204 	addi	r8,r8,8
4000a37c:	8001df16 	blt	r16,zero,4000aafc <___vfprintf_internal_r+0x1c78>
4000a380:	1421c83a 	sub	r16,r2,r16
4000a384:	043ce60e 	bge	zero,r16,40009720 <__alt_data_end+0xc0009720>
4000a388:	04800404 	movi	r18,16
4000a38c:	d8811f17 	ldw	r2,1148(sp)
4000a390:	943efc0e 	bge	r18,r16,40009f84 <__alt_data_end+0xc0009f84>
4000a394:	01500074 	movhi	r5,16385
4000a398:	2953e184 	addi	r5,r5,20358
4000a39c:	d9412c15 	stw	r5,1200(sp)
4000a3a0:	054001c4 	movi	r21,7
4000a3a4:	00000306 	br	4000a3b4 <___vfprintf_internal_r+0x1530>
4000a3a8:	42000204 	addi	r8,r8,8
4000a3ac:	843ffc04 	addi	r16,r16,-16
4000a3b0:	943ef70e 	bge	r18,r16,40009f90 <__alt_data_end+0xc0009f90>
4000a3b4:	18c00404 	addi	r3,r3,16
4000a3b8:	10800044 	addi	r2,r2,1
4000a3bc:	45000015 	stw	r20,0(r8)
4000a3c0:	44800115 	stw	r18,4(r8)
4000a3c4:	d8c12015 	stw	r3,1152(sp)
4000a3c8:	d8811f15 	stw	r2,1148(sp)
4000a3cc:	a8bff60e 	bge	r21,r2,4000a3a8 <__alt_data_end+0xc000a3a8>
4000a3d0:	b009883a 	mov	r4,r22
4000a3d4:	b80b883a 	mov	r5,r23
4000a3d8:	d9811e04 	addi	r6,sp,1144
4000a3dc:	000f9900 	call	4000f990 <__sprint_r>
4000a3e0:	103bbf1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a3e4:	d8c12017 	ldw	r3,1152(sp)
4000a3e8:	d8811f17 	ldw	r2,1148(sp)
4000a3ec:	da000404 	addi	r8,sp,16
4000a3f0:	003fee06 	br	4000a3ac <__alt_data_end+0xc000a3ac>
4000a3f4:	8888703a 	and	r4,r17,r2
4000a3f8:	203eab1e 	bne	r4,zero,40009ea8 <__alt_data_end+0xc0009ea8>
4000a3fc:	dc011f17 	ldw	r16,1148(sp)
4000a400:	db013117 	ldw	r12,1220(sp)
4000a404:	40800115 	stw	r2,4(r8)
4000a408:	84000044 	addi	r16,r16,1
4000a40c:	43000015 	stw	r12,0(r8)
4000a410:	d8c12015 	stw	r3,1152(sp)
4000a414:	dc011f15 	stw	r16,1148(sp)
4000a418:	008001c4 	movi	r2,7
4000a41c:	14000e16 	blt	r2,r16,4000a458 <___vfprintf_internal_r+0x15d4>
4000a420:	44800204 	addi	r18,r8,8
4000a424:	003ecb06 	br	40009f54 <__alt_data_end+0xc0009f54>
4000a428:	00900074 	movhi	r2,16385
4000a42c:	1093e184 	addi	r2,r2,20358
4000a430:	d8812c15 	stw	r2,1200(sp)
4000a434:	dac12c17 	ldw	r11,1200(sp)
4000a438:	1d47883a 	add	r3,r3,r21
4000a43c:	84000044 	addi	r16,r16,1
4000a440:	92c00015 	stw	r11,0(r18)
4000a444:	95400115 	stw	r21,4(r18)
4000a448:	d8c12015 	stw	r3,1152(sp)
4000a44c:	dc011f15 	stw	r16,1148(sp)
4000a450:	008001c4 	movi	r2,7
4000a454:	143ebe0e 	bge	r2,r16,40009f50 <__alt_data_end+0xc0009f50>
4000a458:	b009883a 	mov	r4,r22
4000a45c:	b80b883a 	mov	r5,r23
4000a460:	d9811e04 	addi	r6,sp,1144
4000a464:	000f9900 	call	4000f990 <__sprint_r>
4000a468:	103b9d1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a46c:	d8c12017 	ldw	r3,1152(sp)
4000a470:	dc011f17 	ldw	r16,1148(sp)
4000a474:	dc800404 	addi	r18,sp,16
4000a478:	003eb606 	br	40009f54 <__alt_data_end+0xc0009f54>
4000a47c:	b009883a 	mov	r4,r22
4000a480:	b80b883a 	mov	r5,r23
4000a484:	d9811e04 	addi	r6,sp,1144
4000a488:	000f9900 	call	4000f990 <__sprint_r>
4000a48c:	103b941e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a490:	d8c12017 	ldw	r3,1152(sp)
4000a494:	dc011f17 	ldw	r16,1148(sp)
4000a498:	da000404 	addi	r8,sp,16
4000a49c:	003e8d06 	br	40009ed4 <__alt_data_end+0xc0009ed4>
4000a4a0:	b009883a 	mov	r4,r22
4000a4a4:	b80b883a 	mov	r5,r23
4000a4a8:	d9811e04 	addi	r6,sp,1144
4000a4ac:	000f9900 	call	4000f990 <__sprint_r>
4000a4b0:	103b8b1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a4b4:	d8c12017 	ldw	r3,1152(sp)
4000a4b8:	dc011f17 	ldw	r16,1148(sp)
4000a4bc:	dc800404 	addi	r18,sp,16
4000a4c0:	003e8f06 	br	40009f00 <__alt_data_end+0xc0009f00>
4000a4c4:	db010e04 	addi	r12,sp,1080
4000a4c8:	0025883a 	mov	r18,zero
4000a4cc:	db013115 	stw	r12,1220(sp)
4000a4d0:	003bfb06 	br	400094c0 <__alt_data_end+0xc00094c0>
4000a4d4:	b009883a 	mov	r4,r22
4000a4d8:	b80b883a 	mov	r5,r23
4000a4dc:	d9811e04 	addi	r6,sp,1144
4000a4e0:	000f9900 	call	4000f990 <__sprint_r>
4000a4e4:	103b7e1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a4e8:	d8c12017 	ldw	r3,1152(sp)
4000a4ec:	da000404 	addi	r8,sp,16
4000a4f0:	003c5506 	br	40009648 <__alt_data_end+0xc0009648>
4000a4f4:	04e7c83a 	sub	r19,zero,r19
4000a4f8:	9804c03a 	cmpne	r2,r19,zero
4000a4fc:	0739c83a 	sub	fp,zero,fp
4000a500:	e0b9c83a 	sub	fp,fp,r2
4000a504:	05400b44 	movi	r21,45
4000a508:	dd412785 	stb	r21,1182(sp)
4000a50c:	da413215 	stw	r9,1224(sp)
4000a510:	00800044 	movi	r2,1
4000a514:	9f06b03a 	or	r3,r19,fp
4000a518:	003bcf06 	br	40009458 <__alt_data_end+0xc0009458>
4000a51c:	da013f15 	stw	r8,1276(sp)
4000a520:	da413e15 	stw	r9,1272(sp)
4000a524:	0004ec00 	call	40004ec0 <__fpclassifyd>
4000a528:	da013f17 	ldw	r8,1276(sp)
4000a52c:	da413e17 	ldw	r9,1272(sp)
4000a530:	1000ce26 	beq	r2,zero,4000a86c <___vfprintf_internal_r+0x19e8>
4000a534:	057ff7c4 	movi	r21,-33
4000a538:	00bfffc4 	movi	r2,-1
4000a53c:	856a703a 	and	r21,r16,r21
4000a540:	4881f026 	beq	r9,r2,4000ad04 <___vfprintf_internal_r+0x1e80>
4000a544:	008011c4 	movi	r2,71
4000a548:	a881e526 	beq	r21,r2,4000ace0 <___vfprintf_internal_r+0x1e5c>
4000a54c:	db013917 	ldw	r12,1252(sp)
4000a550:	8ac04014 	ori	r11,r17,256
4000a554:	dac12d15 	stw	r11,1204(sp)
4000a558:	6001e416 	blt	r12,zero,4000acec <___vfprintf_internal_r+0x1e68>
4000a55c:	dc813917 	ldw	r18,1252(sp)
4000a560:	d8012b05 	stb	zero,1196(sp)
4000a564:	00801984 	movi	r2,102
4000a568:	80811826 	beq	r16,r2,4000a9cc <___vfprintf_internal_r+0x1b48>
4000a56c:	00801184 	movi	r2,70
4000a570:	80811626 	beq	r16,r2,4000a9cc <___vfprintf_internal_r+0x1b48>
4000a574:	00801144 	movi	r2,69
4000a578:	a881e026 	beq	r21,r2,4000acfc <___vfprintf_internal_r+0x1e78>
4000a57c:	4839883a 	mov	fp,r9
4000a580:	d8812604 	addi	r2,sp,1176
4000a584:	d8800115 	stw	r2,4(sp)
4000a588:	d9413717 	ldw	r5,1244(sp)
4000a58c:	d8812504 	addi	r2,sp,1172
4000a590:	d8800215 	stw	r2,8(sp)
4000a594:	d8812104 	addi	r2,sp,1156
4000a598:	df000015 	stw	fp,0(sp)
4000a59c:	d8800315 	stw	r2,12(sp)
4000a5a0:	b009883a 	mov	r4,r22
4000a5a4:	900d883a 	mov	r6,r18
4000a5a8:	01c00084 	movi	r7,2
4000a5ac:	da013f15 	stw	r8,1276(sp)
4000a5b0:	da413e15 	stw	r9,1272(sp)
4000a5b4:	000b3680 	call	4000b368 <_dtoa_r>
4000a5b8:	d8813115 	stw	r2,1220(sp)
4000a5bc:	008019c4 	movi	r2,103
4000a5c0:	da013f17 	ldw	r8,1276(sp)
4000a5c4:	da413e17 	ldw	r9,1272(sp)
4000a5c8:	80800226 	beq	r16,r2,4000a5d4 <___vfprintf_internal_r+0x1750>
4000a5cc:	008011c4 	movi	r2,71
4000a5d0:	8081101e 	bne	r16,r2,4000aa14 <___vfprintf_internal_r+0x1b90>
4000a5d4:	8880004c 	andi	r2,r17,1
4000a5d8:	1001df26 	beq	r2,zero,4000ad58 <___vfprintf_internal_r+0x1ed4>
4000a5dc:	db013117 	ldw	r12,1220(sp)
4000a5e0:	6715883a 	add	r10,r12,fp
4000a5e4:	d9013717 	ldw	r4,1244(sp)
4000a5e8:	900b883a 	mov	r5,r18
4000a5ec:	000d883a 	mov	r6,zero
4000a5f0:	000f883a 	mov	r7,zero
4000a5f4:	da013f15 	stw	r8,1276(sp)
4000a5f8:	da413e15 	stw	r9,1272(sp)
4000a5fc:	da813d15 	stw	r10,1268(sp)
4000a600:	00063140 	call	40006314 <__eqdf2>
4000a604:	da013f17 	ldw	r8,1276(sp)
4000a608:	da413e17 	ldw	r9,1272(sp)
4000a60c:	da813d17 	ldw	r10,1268(sp)
4000a610:	10016526 	beq	r2,zero,4000aba8 <___vfprintf_internal_r+0x1d24>
4000a614:	d8812117 	ldw	r2,1156(sp)
4000a618:	1280062e 	bgeu	r2,r10,4000a634 <___vfprintf_internal_r+0x17b0>
4000a61c:	01000c04 	movi	r4,48
4000a620:	10c00044 	addi	r3,r2,1
4000a624:	d8c12115 	stw	r3,1156(sp)
4000a628:	11000005 	stb	r4,0(r2)
4000a62c:	d8812117 	ldw	r2,1156(sp)
4000a630:	12bffb36 	bltu	r2,r10,4000a620 <__alt_data_end+0xc000a620>
4000a634:	db013117 	ldw	r12,1220(sp)
4000a638:	1305c83a 	sub	r2,r2,r12
4000a63c:	d8813315 	stw	r2,1228(sp)
4000a640:	008011c4 	movi	r2,71
4000a644:	a8814a26 	beq	r21,r2,4000ab70 <___vfprintf_internal_r+0x1cec>
4000a648:	00801944 	movi	r2,101
4000a64c:	14020a0e 	bge	r2,r16,4000ae78 <___vfprintf_internal_r+0x1ff4>
4000a650:	00801984 	movi	r2,102
4000a654:	8081b626 	beq	r16,r2,4000ad30 <___vfprintf_internal_r+0x1eac>
4000a658:	db012617 	ldw	r12,1176(sp)
4000a65c:	db013415 	stw	r12,1232(sp)
4000a660:	db013417 	ldw	r12,1232(sp)
4000a664:	dac13317 	ldw	r11,1228(sp)
4000a668:	62c1a816 	blt	r12,r11,4000ad0c <___vfprintf_internal_r+0x1e88>
4000a66c:	8c40004c 	andi	r17,r17,1
4000a670:	8801ca1e 	bne	r17,zero,4000ad9c <___vfprintf_internal_r+0x1f18>
4000a674:	6005883a 	mov	r2,r12
4000a678:	6001b516 	blt	r12,zero,4000ad50 <___vfprintf_internal_r+0x1ecc>
4000a67c:	dc813417 	ldw	r18,1232(sp)
4000a680:	df012b07 	ldb	fp,1196(sp)
4000a684:	e001321e 	bne	fp,zero,4000ab50 <___vfprintf_internal_r+0x1ccc>
4000a688:	dc412d17 	ldw	r17,1204(sp)
4000a68c:	dd412783 	ldbu	r21,1182(sp)
4000a690:	d8812b15 	stw	r2,1196(sp)
4000a694:	dcc12d15 	stw	r19,1204(sp)
4000a698:	d8013215 	stw	zero,1224(sp)
4000a69c:	003b8d06 	br	400094d4 <__alt_data_end+0xc00094d4>
4000a6a0:	88c0100c 	andi	r3,r17,64
4000a6a4:	18008226 	beq	r3,zero,4000a8b0 <___vfprintf_internal_r+0x1a2c>
4000a6a8:	dac12d17 	ldw	r11,1204(sp)
4000a6ac:	14c0000b 	ldhu	r19,0(r2)
4000a6b0:	0039883a 	mov	fp,zero
4000a6b4:	5ac00104 	addi	r11,r11,4
4000a6b8:	dac12d15 	stw	r11,1204(sp)
4000a6bc:	003c8f06 	br	400098fc <__alt_data_end+0xc00098fc>
4000a6c0:	1c000007 	ldb	r16,0(r3)
4000a6c4:	1805883a 	mov	r2,r3
4000a6c8:	003a5506 	br	40009020 <__alt_data_end+0xc0009020>
4000a6cc:	00800084 	movi	r2,2
4000a6d0:	003b5e06 	br	4000944c <__alt_data_end+0xc000944c>
4000a6d4:	8880040c 	andi	r2,r17,16
4000a6d8:	1000091e 	bne	r2,zero,4000a700 <___vfprintf_internal_r+0x187c>
4000a6dc:	8c40100c 	andi	r17,r17,64
4000a6e0:	88000726 	beq	r17,zero,4000a700 <___vfprintf_internal_r+0x187c>
4000a6e4:	db012d17 	ldw	r12,1204(sp)
4000a6e8:	dac12f17 	ldw	r11,1212(sp)
4000a6ec:	60800017 	ldw	r2,0(r12)
4000a6f0:	63000104 	addi	r12,r12,4
4000a6f4:	db012d15 	stw	r12,1204(sp)
4000a6f8:	12c0000d 	sth	r11,0(r2)
4000a6fc:	003a1e06 	br	40008f78 <__alt_data_end+0xc0008f78>
4000a700:	db012d17 	ldw	r12,1204(sp)
4000a704:	dac12f17 	ldw	r11,1212(sp)
4000a708:	60800017 	ldw	r2,0(r12)
4000a70c:	63000104 	addi	r12,r12,4
4000a710:	db012d15 	stw	r12,1204(sp)
4000a714:	12c00015 	stw	r11,0(r2)
4000a718:	003a1706 	br	40008f78 <__alt_data_end+0xc0008f78>
4000a71c:	01100074 	movhi	r4,16385
4000a720:	2113e184 	addi	r4,r4,20358
4000a724:	d9012c15 	stw	r4,1200(sp)
4000a728:	dac12c17 	ldw	r11,1200(sp)
4000a72c:	1c87883a 	add	r3,r3,r18
4000a730:	10800044 	addi	r2,r2,1
4000a734:	42c00015 	stw	r11,0(r8)
4000a738:	44800115 	stw	r18,4(r8)
4000a73c:	d8c12015 	stw	r3,1152(sp)
4000a740:	d8811f15 	stw	r2,1148(sp)
4000a744:	010001c4 	movi	r4,7
4000a748:	20bee016 	blt	r4,r2,4000a2cc <__alt_data_end+0xc000a2cc>
4000a74c:	42000204 	addi	r8,r8,8
4000a750:	003ee506 	br	4000a2e8 <__alt_data_end+0xc000a2e8>
4000a754:	01100074 	movhi	r4,16385
4000a758:	2113e184 	addi	r4,r4,20358
4000a75c:	d9012c15 	stw	r4,1200(sp)
4000a760:	003bd806 	br	400096c4 <__alt_data_end+0xc00096c4>
4000a764:	b009883a 	mov	r4,r22
4000a768:	b80b883a 	mov	r5,r23
4000a76c:	d9811e04 	addi	r6,sp,1144
4000a770:	000f9900 	call	4000f990 <__sprint_r>
4000a774:	103ada1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a778:	d8c12017 	ldw	r3,1152(sp)
4000a77c:	da000404 	addi	r8,sp,16
4000a780:	003d6b06 	br	40009d30 <__alt_data_end+0xc0009d30>
4000a784:	d8811f17 	ldw	r2,1148(sp)
4000a788:	03100074 	movhi	r12,16385
4000a78c:	01000044 	movi	r4,1
4000a790:	18c00044 	addi	r3,r3,1
4000a794:	10800044 	addi	r2,r2,1
4000a798:	6313e104 	addi	r12,r12,20356
4000a79c:	41000115 	stw	r4,4(r8)
4000a7a0:	43000015 	stw	r12,0(r8)
4000a7a4:	d8c12015 	stw	r3,1152(sp)
4000a7a8:	d8811f15 	stw	r2,1148(sp)
4000a7ac:	010001c4 	movi	r4,7
4000a7b0:	20804916 	blt	r4,r2,4000a8d8 <___vfprintf_internal_r+0x1a54>
4000a7b4:	42000204 	addi	r8,r8,8
4000a7b8:	8000041e 	bne	r16,zero,4000a7cc <___vfprintf_internal_r+0x1948>
4000a7bc:	dac13317 	ldw	r11,1228(sp)
4000a7c0:	5800021e 	bne	r11,zero,4000a7cc <___vfprintf_internal_r+0x1948>
4000a7c4:	8880004c 	andi	r2,r17,1
4000a7c8:	103bd526 	beq	r2,zero,40009720 <__alt_data_end+0xc0009720>
4000a7cc:	db013817 	ldw	r12,1248(sp)
4000a7d0:	d8811f17 	ldw	r2,1148(sp)
4000a7d4:	dac13517 	ldw	r11,1236(sp)
4000a7d8:	1b07883a 	add	r3,r3,r12
4000a7dc:	10800044 	addi	r2,r2,1
4000a7e0:	42c00015 	stw	r11,0(r8)
4000a7e4:	43000115 	stw	r12,4(r8)
4000a7e8:	d8c12015 	stw	r3,1152(sp)
4000a7ec:	d8811f15 	stw	r2,1148(sp)
4000a7f0:	010001c4 	movi	r4,7
4000a7f4:	20813016 	blt	r4,r2,4000acb8 <___vfprintf_internal_r+0x1e34>
4000a7f8:	42000204 	addi	r8,r8,8
4000a7fc:	0421c83a 	sub	r16,zero,r16
4000a800:	0400630e 	bge	zero,r16,4000a990 <___vfprintf_internal_r+0x1b0c>
4000a804:	04800404 	movi	r18,16
4000a808:	94009f0e 	bge	r18,r16,4000aa88 <___vfprintf_internal_r+0x1c04>
4000a80c:	01100074 	movhi	r4,16385
4000a810:	2113e184 	addi	r4,r4,20358
4000a814:	d9012c15 	stw	r4,1200(sp)
4000a818:	054001c4 	movi	r21,7
4000a81c:	00000306 	br	4000a82c <___vfprintf_internal_r+0x19a8>
4000a820:	42000204 	addi	r8,r8,8
4000a824:	843ffc04 	addi	r16,r16,-16
4000a828:	94009a0e 	bge	r18,r16,4000aa94 <___vfprintf_internal_r+0x1c10>
4000a82c:	18c00404 	addi	r3,r3,16
4000a830:	10800044 	addi	r2,r2,1
4000a834:	45000015 	stw	r20,0(r8)
4000a838:	44800115 	stw	r18,4(r8)
4000a83c:	d8c12015 	stw	r3,1152(sp)
4000a840:	d8811f15 	stw	r2,1148(sp)
4000a844:	a8bff60e 	bge	r21,r2,4000a820 <__alt_data_end+0xc000a820>
4000a848:	b009883a 	mov	r4,r22
4000a84c:	b80b883a 	mov	r5,r23
4000a850:	d9811e04 	addi	r6,sp,1144
4000a854:	000f9900 	call	4000f990 <__sprint_r>
4000a858:	103aa11e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a85c:	d8c12017 	ldw	r3,1152(sp)
4000a860:	d8811f17 	ldw	r2,1148(sp)
4000a864:	da000404 	addi	r8,sp,16
4000a868:	003fee06 	br	4000a824 <__alt_data_end+0xc000a824>
4000a86c:	008011c4 	movi	r2,71
4000a870:	1400b316 	blt	r2,r16,4000ab40 <___vfprintf_internal_r+0x1cbc>
4000a874:	03100074 	movhi	r12,16385
4000a878:	6313d304 	addi	r12,r12,20300
4000a87c:	db013115 	stw	r12,1220(sp)
4000a880:	00c000c4 	movi	r3,3
4000a884:	00bfdfc4 	movi	r2,-129
4000a888:	d8c12b15 	stw	r3,1196(sp)
4000a88c:	88a2703a 	and	r17,r17,r2
4000a890:	dd412783 	ldbu	r21,1182(sp)
4000a894:	dcc12d15 	stw	r19,1204(sp)
4000a898:	1825883a 	mov	r18,r3
4000a89c:	d8013215 	stw	zero,1224(sp)
4000a8a0:	d8013415 	stw	zero,1232(sp)
4000a8a4:	003b0b06 	br	400094d4 <__alt_data_end+0xc00094d4>
4000a8a8:	4825883a 	mov	r18,r9
4000a8ac:	003cba06 	br	40009b98 <__alt_data_end+0xc0009b98>
4000a8b0:	db012d17 	ldw	r12,1204(sp)
4000a8b4:	14c00017 	ldw	r19,0(r2)
4000a8b8:	0039883a 	mov	fp,zero
4000a8bc:	63000104 	addi	r12,r12,4
4000a8c0:	db012d15 	stw	r12,1204(sp)
4000a8c4:	003c0d06 	br	400098fc <__alt_data_end+0xc00098fc>
4000a8c8:	00900074 	movhi	r2,16385
4000a8cc:	1093d104 	addi	r2,r2,20292
4000a8d0:	d8813115 	stw	r2,1220(sp)
4000a8d4:	003ac406 	br	400093e8 <__alt_data_end+0xc00093e8>
4000a8d8:	b009883a 	mov	r4,r22
4000a8dc:	b80b883a 	mov	r5,r23
4000a8e0:	d9811e04 	addi	r6,sp,1144
4000a8e4:	000f9900 	call	4000f990 <__sprint_r>
4000a8e8:	103a7d1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a8ec:	dc012617 	ldw	r16,1176(sp)
4000a8f0:	d8c12017 	ldw	r3,1152(sp)
4000a8f4:	da000404 	addi	r8,sp,16
4000a8f8:	003faf06 	br	4000a7b8 <__alt_data_end+0xc000a7b8>
4000a8fc:	db012e17 	ldw	r12,1208(sp)
4000a900:	1805883a 	mov	r2,r3
4000a904:	dac12d15 	stw	r11,1204(sp)
4000a908:	0319c83a 	sub	r12,zero,r12
4000a90c:	db012e15 	stw	r12,1208(sp)
4000a910:	003a7e06 	br	4000930c <__alt_data_end+0xc000930c>
4000a914:	18800044 	addi	r2,r3,1
4000a918:	8c400814 	ori	r17,r17,32
4000a91c:	1c000047 	ldb	r16,1(r3)
4000a920:	0039bf06 	br	40009020 <__alt_data_end+0xc0009020>
4000a924:	b009883a 	mov	r4,r22
4000a928:	b80b883a 	mov	r5,r23
4000a92c:	d9811e04 	addi	r6,sp,1144
4000a930:	000f9900 	call	4000f990 <__sprint_r>
4000a934:	103a6a1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a938:	d8c12017 	ldw	r3,1152(sp)
4000a93c:	da000404 	addi	r8,sp,16
4000a940:	003d0c06 	br	40009d74 <__alt_data_end+0xc0009d74>
4000a944:	db012817 	ldw	r12,1184(sp)
4000a948:	d8c13117 	ldw	r3,1220(sp)
4000a94c:	60e5c83a 	sub	r18,r12,r3
4000a950:	003adb06 	br	400094c0 <__alt_data_end+0xc00094c0>
4000a954:	da013f15 	stw	r8,1276(sp)
4000a958:	0008dec0 	call	40008dec <strlen>
4000a95c:	1025883a 	mov	r18,r2
4000a960:	da013f17 	ldw	r8,1276(sp)
4000a964:	903c8e0e 	bge	r18,zero,40009ba0 <__alt_data_end+0xc0009ba0>
4000a968:	0005883a 	mov	r2,zero
4000a96c:	003c8c06 	br	40009ba0 <__alt_data_end+0xc0009ba0>
4000a970:	b009883a 	mov	r4,r22
4000a974:	b80b883a 	mov	r5,r23
4000a978:	d9811e04 	addi	r6,sp,1144
4000a97c:	000f9900 	call	4000f990 <__sprint_r>
4000a980:	103a571e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000a984:	d8c12017 	ldw	r3,1152(sp)
4000a988:	d8811f17 	ldw	r2,1148(sp)
4000a98c:	da000404 	addi	r8,sp,16
4000a990:	db013317 	ldw	r12,1228(sp)
4000a994:	dac13117 	ldw	r11,1220(sp)
4000a998:	10800044 	addi	r2,r2,1
4000a99c:	60c7883a 	add	r3,r12,r3
4000a9a0:	42c00015 	stw	r11,0(r8)
4000a9a4:	43000115 	stw	r12,4(r8)
4000a9a8:	d8c12015 	stw	r3,1152(sp)
4000a9ac:	d8811f15 	stw	r2,1148(sp)
4000a9b0:	010001c4 	movi	r4,7
4000a9b4:	20bb590e 	bge	r4,r2,4000971c <__alt_data_end+0xc000971c>
4000a9b8:	003d7e06 	br	40009fb4 <__alt_data_end+0xc0009fb4>
4000a9bc:	01100074 	movhi	r4,16385
4000a9c0:	2113e584 	addi	r4,r4,20374
4000a9c4:	d9013615 	stw	r4,1240(sp)
4000a9c8:	003af606 	br	400095a4 <__alt_data_end+0xc00095a4>
4000a9cc:	d8812604 	addi	r2,sp,1176
4000a9d0:	d8800115 	stw	r2,4(sp)
4000a9d4:	d9413717 	ldw	r5,1244(sp)
4000a9d8:	d8812504 	addi	r2,sp,1172
4000a9dc:	d8800215 	stw	r2,8(sp)
4000a9e0:	d8812104 	addi	r2,sp,1156
4000a9e4:	da400015 	stw	r9,0(sp)
4000a9e8:	d8800315 	stw	r2,12(sp)
4000a9ec:	b009883a 	mov	r4,r22
4000a9f0:	900d883a 	mov	r6,r18
4000a9f4:	01c000c4 	movi	r7,3
4000a9f8:	da013f15 	stw	r8,1276(sp)
4000a9fc:	da413e15 	stw	r9,1272(sp)
4000aa00:	000b3680 	call	4000b368 <_dtoa_r>
4000aa04:	da413e17 	ldw	r9,1272(sp)
4000aa08:	da013f17 	ldw	r8,1276(sp)
4000aa0c:	d8813115 	stw	r2,1220(sp)
4000aa10:	4839883a 	mov	fp,r9
4000aa14:	dac13117 	ldw	r11,1220(sp)
4000aa18:	00801184 	movi	r2,70
4000aa1c:	5f15883a 	add	r10,r11,fp
4000aa20:	a8bef01e 	bne	r21,r2,4000a5e4 <__alt_data_end+0xc000a5e4>
4000aa24:	59000007 	ldb	r4,0(r11)
4000aa28:	00800c04 	movi	r2,48
4000aa2c:	2080e026 	beq	r4,r2,4000adb0 <___vfprintf_internal_r+0x1f2c>
4000aa30:	d8c12617 	ldw	r3,1176(sp)
4000aa34:	50d5883a 	add	r10,r10,r3
4000aa38:	003eea06 	br	4000a5e4 <__alt_data_end+0xc000a5e4>
4000aa3c:	0025883a 	mov	r18,zero
4000aa40:	003db306 	br	4000a110 <__alt_data_end+0xc000a110>
4000aa44:	b009883a 	mov	r4,r22
4000aa48:	b80b883a 	mov	r5,r23
4000aa4c:	d9811e04 	addi	r6,sp,1144
4000aa50:	000f9900 	call	4000f990 <__sprint_r>
4000aa54:	103a221e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000aa58:	d8c12017 	ldw	r3,1152(sp)
4000aa5c:	da000404 	addi	r8,sp,16
4000aa60:	003daa06 	br	4000a10c <__alt_data_end+0xc000a10c>
4000aa64:	b009883a 	mov	r4,r22
4000aa68:	b80b883a 	mov	r5,r23
4000aa6c:	d9811e04 	addi	r6,sp,1144
4000aa70:	000f9900 	call	4000f990 <__sprint_r>
4000aa74:	103a1a1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000aa78:	d8812617 	ldw	r2,1176(sp)
4000aa7c:	d8c12017 	ldw	r3,1152(sp)
4000aa80:	da000404 	addi	r8,sp,16
4000aa84:	003e2c06 	br	4000a338 <__alt_data_end+0xc000a338>
4000aa88:	03100074 	movhi	r12,16385
4000aa8c:	6313e184 	addi	r12,r12,20358
4000aa90:	db012c15 	stw	r12,1200(sp)
4000aa94:	dac12c17 	ldw	r11,1200(sp)
4000aa98:	1c07883a 	add	r3,r3,r16
4000aa9c:	10800044 	addi	r2,r2,1
4000aaa0:	42c00015 	stw	r11,0(r8)
4000aaa4:	44000115 	stw	r16,4(r8)
4000aaa8:	d8c12015 	stw	r3,1152(sp)
4000aaac:	d8811f15 	stw	r2,1148(sp)
4000aab0:	010001c4 	movi	r4,7
4000aab4:	20bfae16 	blt	r4,r2,4000a970 <__alt_data_end+0xc000a970>
4000aab8:	42000204 	addi	r8,r8,8
4000aabc:	003fb406 	br	4000a990 <__alt_data_end+0xc000a990>
4000aac0:	03100074 	movhi	r12,16385
4000aac4:	6313e584 	addi	r12,r12,20374
4000aac8:	db013615 	stw	r12,1240(sp)
4000aacc:	003b3806 	br	400097b0 <__alt_data_end+0xc00097b0>
4000aad0:	b009883a 	mov	r4,r22
4000aad4:	b80b883a 	mov	r5,r23
4000aad8:	d9811e04 	addi	r6,sp,1144
4000aadc:	000f9900 	call	4000f990 <__sprint_r>
4000aae0:	1039ff1e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000aae4:	d8812617 	ldw	r2,1176(sp)
4000aae8:	db013317 	ldw	r12,1228(sp)
4000aaec:	d8c12017 	ldw	r3,1152(sp)
4000aaf0:	da000404 	addi	r8,sp,16
4000aaf4:	6085c83a 	sub	r2,r12,r2
4000aaf8:	003e2006 	br	4000a37c <__alt_data_end+0xc000a37c>
4000aafc:	0021883a 	mov	r16,zero
4000ab00:	003e1f06 	br	4000a380 <__alt_data_end+0xc000a380>
4000ab04:	00800184 	movi	r2,6
4000ab08:	1240012e 	bgeu	r2,r9,4000ab10 <___vfprintf_internal_r+0x1c8c>
4000ab0c:	1013883a 	mov	r9,r2
4000ab10:	4825883a 	mov	r18,r9
4000ab14:	4805883a 	mov	r2,r9
4000ab18:	48009e16 	blt	r9,zero,4000ad94 <___vfprintf_internal_r+0x1f10>
4000ab1c:	d8812b15 	stw	r2,1196(sp)
4000ab20:	00900074 	movhi	r2,16385
4000ab24:	1093df04 	addi	r2,r2,20348
4000ab28:	d8813115 	stw	r2,1220(sp)
4000ab2c:	dcc12d15 	stw	r19,1204(sp)
4000ab30:	d8013215 	stw	zero,1224(sp)
4000ab34:	d8013415 	stw	zero,1232(sp)
4000ab38:	0005883a 	mov	r2,zero
4000ab3c:	003a6c06 	br	400094f0 <__alt_data_end+0xc00094f0>
4000ab40:	00900074 	movhi	r2,16385
4000ab44:	1093d404 	addi	r2,r2,20304
4000ab48:	d8813115 	stw	r2,1220(sp)
4000ab4c:	003f4c06 	br	4000a880 <__alt_data_end+0xc000a880>
4000ab50:	00c00b44 	movi	r3,45
4000ab54:	d8812b15 	stw	r2,1196(sp)
4000ab58:	dc412d17 	ldw	r17,1204(sp)
4000ab5c:	d8c12785 	stb	r3,1182(sp)
4000ab60:	dcc12d15 	stw	r19,1204(sp)
4000ab64:	d8013215 	stw	zero,1224(sp)
4000ab68:	00800b44 	movi	r2,45
4000ab6c:	003a5d06 	br	400094e4 <__alt_data_end+0xc00094e4>
4000ab70:	d8c12617 	ldw	r3,1176(sp)
4000ab74:	00bfff44 	movi	r2,-3
4000ab78:	18800d16 	blt	r3,r2,4000abb0 <___vfprintf_internal_r+0x1d2c>
4000ab7c:	48c00c16 	blt	r9,r3,4000abb0 <___vfprintf_internal_r+0x1d2c>
4000ab80:	d8c13415 	stw	r3,1232(sp)
4000ab84:	040019c4 	movi	r16,103
4000ab88:	003eb506 	br	4000a660 <__alt_data_end+0xc000a660>
4000ab8c:	05400b44 	movi	r21,45
4000ab90:	dd412785 	stb	r21,1182(sp)
4000ab94:	003a0f06 	br	400093d4 <__alt_data_end+0xc00093d4>
4000ab98:	01100074 	movhi	r4,16385
4000ab9c:	2113e184 	addi	r4,r4,20358
4000aba0:	d9012c15 	stw	r4,1200(sp)
4000aba4:	003cb106 	br	40009e6c <__alt_data_end+0xc0009e6c>
4000aba8:	5005883a 	mov	r2,r10
4000abac:	003ea106 	br	4000a634 <__alt_data_end+0xc000a634>
4000abb0:	843fff84 	addi	r16,r16,-2
4000abb4:	1f3fffc4 	addi	fp,r3,-1
4000abb8:	df012615 	stw	fp,1176(sp)
4000abbc:	dc0122c5 	stb	r16,1163(sp)
4000abc0:	e0009516 	blt	fp,zero,4000ae18 <___vfprintf_internal_r+0x1f94>
4000abc4:	00800ac4 	movi	r2,43
4000abc8:	d8812305 	stb	r2,1164(sp)
4000abcc:	00800244 	movi	r2,9
4000abd0:	1700690e 	bge	r2,fp,4000ad78 <___vfprintf_internal_r+0x1ef4>
4000abd4:	dd4122c4 	addi	r21,sp,1163
4000abd8:	dc012c15 	stw	r16,1200(sp)
4000abdc:	8825883a 	mov	r18,r17
4000abe0:	a821883a 	mov	r16,r21
4000abe4:	4023883a 	mov	r17,r8
4000abe8:	e009883a 	mov	r4,fp
4000abec:	01400284 	movi	r5,10
4000abf0:	00051400 	call	40005140 <__modsi3>
4000abf4:	10800c04 	addi	r2,r2,48
4000abf8:	843fffc4 	addi	r16,r16,-1
4000abfc:	e009883a 	mov	r4,fp
4000ac00:	01400284 	movi	r5,10
4000ac04:	80800005 	stb	r2,0(r16)
4000ac08:	00050ec0 	call	400050ec <__divsi3>
4000ac0c:	1039883a 	mov	fp,r2
4000ac10:	00800244 	movi	r2,9
4000ac14:	173ff416 	blt	r2,fp,4000abe8 <__alt_data_end+0xc000abe8>
4000ac18:	8811883a 	mov	r8,r17
4000ac1c:	e0800c04 	addi	r2,fp,48
4000ac20:	9023883a 	mov	r17,r18
4000ac24:	8025883a 	mov	r18,r16
4000ac28:	913fffc4 	addi	r4,r18,-1
4000ac2c:	90bfffc5 	stb	r2,-1(r18)
4000ac30:	dc012c17 	ldw	r16,1200(sp)
4000ac34:	25408e2e 	bgeu	r4,r21,4000ae70 <___vfprintf_internal_r+0x1fec>
4000ac38:	d9412384 	addi	r5,sp,1166
4000ac3c:	2c8bc83a 	sub	r5,r5,r18
4000ac40:	d8c12344 	addi	r3,sp,1165
4000ac44:	a94b883a 	add	r5,r21,r5
4000ac48:	00000106 	br	4000ac50 <___vfprintf_internal_r+0x1dcc>
4000ac4c:	20800003 	ldbu	r2,0(r4)
4000ac50:	18800005 	stb	r2,0(r3)
4000ac54:	18c00044 	addi	r3,r3,1
4000ac58:	21000044 	addi	r4,r4,1
4000ac5c:	197ffb1e 	bne	r3,r5,4000ac4c <__alt_data_end+0xc000ac4c>
4000ac60:	d8812304 	addi	r2,sp,1164
4000ac64:	1485c83a 	sub	r2,r2,r18
4000ac68:	d8c12344 	addi	r3,sp,1165
4000ac6c:	1885883a 	add	r2,r3,r2
4000ac70:	dac13317 	ldw	r11,1228(sp)
4000ac74:	156bc83a 	sub	r21,r2,r21
4000ac78:	dd413a15 	stw	r21,1256(sp)
4000ac7c:	00800044 	movi	r2,1
4000ac80:	5d65883a 	add	r18,r11,r21
4000ac84:	12c0770e 	bge	r2,r11,4000ae64 <___vfprintf_internal_r+0x1fe0>
4000ac88:	94800044 	addi	r18,r18,1
4000ac8c:	9005883a 	mov	r2,r18
4000ac90:	90007216 	blt	r18,zero,4000ae5c <___vfprintf_internal_r+0x1fd8>
4000ac94:	d8013415 	stw	zero,1232(sp)
4000ac98:	003e7906 	br	4000a680 <__alt_data_end+0xc000a680>
4000ac9c:	da412b15 	stw	r9,1196(sp)
4000aca0:	dd412783 	ldbu	r21,1182(sp)
4000aca4:	4825883a 	mov	r18,r9
4000aca8:	dcc12d15 	stw	r19,1204(sp)
4000acac:	d8013215 	stw	zero,1224(sp)
4000acb0:	d8013415 	stw	zero,1232(sp)
4000acb4:	003a0706 	br	400094d4 <__alt_data_end+0xc00094d4>
4000acb8:	b009883a 	mov	r4,r22
4000acbc:	b80b883a 	mov	r5,r23
4000acc0:	d9811e04 	addi	r6,sp,1144
4000acc4:	000f9900 	call	4000f990 <__sprint_r>
4000acc8:	1039851e 	bne	r2,zero,400092e0 <__alt_data_end+0xc00092e0>
4000accc:	dc012617 	ldw	r16,1176(sp)
4000acd0:	d8c12017 	ldw	r3,1152(sp)
4000acd4:	d8811f17 	ldw	r2,1148(sp)
4000acd8:	da000404 	addi	r8,sp,16
4000acdc:	003ec706 	br	4000a7fc <__alt_data_end+0xc000a7fc>
4000ace0:	483e1a1e 	bne	r9,zero,4000a54c <__alt_data_end+0xc000a54c>
4000ace4:	9013883a 	mov	r9,r18
4000ace8:	003e1806 	br	4000a54c <__alt_data_end+0xc000a54c>
4000acec:	00c00b44 	movi	r3,45
4000acf0:	64a0003c 	xorhi	r18,r12,32768
4000acf4:	d8c12b05 	stb	r3,1196(sp)
4000acf8:	003e1a06 	br	4000a564 <__alt_data_end+0xc000a564>
4000acfc:	4f000044 	addi	fp,r9,1
4000ad00:	003e1f06 	br	4000a580 <__alt_data_end+0xc000a580>
4000ad04:	02400184 	movi	r9,6
4000ad08:	003e1006 	br	4000a54c <__alt_data_end+0xc000a54c>
4000ad0c:	d8c13417 	ldw	r3,1232(sp)
4000ad10:	00c04b0e 	bge	zero,r3,4000ae40 <___vfprintf_internal_r+0x1fbc>
4000ad14:	04800044 	movi	r18,1
4000ad18:	dac13317 	ldw	r11,1228(sp)
4000ad1c:	92e5883a 	add	r18,r18,r11
4000ad20:	9005883a 	mov	r2,r18
4000ad24:	903e560e 	bge	r18,zero,4000a680 <__alt_data_end+0xc000a680>
4000ad28:	0005883a 	mov	r2,zero
4000ad2c:	003e5406 	br	4000a680 <__alt_data_end+0xc000a680>
4000ad30:	d8c12617 	ldw	r3,1176(sp)
4000ad34:	d8c13415 	stw	r3,1232(sp)
4000ad38:	00c03b0e 	bge	zero,r3,4000ae28 <___vfprintf_internal_r+0x1fa4>
4000ad3c:	4800081e 	bne	r9,zero,4000ad60 <___vfprintf_internal_r+0x1edc>
4000ad40:	8c40004c 	andi	r17,r17,1
4000ad44:	8800061e 	bne	r17,zero,4000ad60 <___vfprintf_internal_r+0x1edc>
4000ad48:	1805883a 	mov	r2,r3
4000ad4c:	183e4b0e 	bge	r3,zero,4000a67c <__alt_data_end+0xc000a67c>
4000ad50:	0005883a 	mov	r2,zero
4000ad54:	003e4906 	br	4000a67c <__alt_data_end+0xc000a67c>
4000ad58:	d8812117 	ldw	r2,1156(sp)
4000ad5c:	003e3506 	br	4000a634 <__alt_data_end+0xc000a634>
4000ad60:	dac13417 	ldw	r11,1232(sp)
4000ad64:	4a400044 	addi	r9,r9,1
4000ad68:	5a65883a 	add	r18,r11,r9
4000ad6c:	9005883a 	mov	r2,r18
4000ad70:	903e430e 	bge	r18,zero,4000a680 <__alt_data_end+0xc000a680>
4000ad74:	003fec06 	br	4000ad28 <__alt_data_end+0xc000ad28>
4000ad78:	00800c04 	movi	r2,48
4000ad7c:	e0c00c04 	addi	r3,fp,48
4000ad80:	d8812345 	stb	r2,1165(sp)
4000ad84:	d8c12385 	stb	r3,1166(sp)
4000ad88:	d88123c4 	addi	r2,sp,1167
4000ad8c:	dd4122c4 	addi	r21,sp,1163
4000ad90:	003fb706 	br	4000ac70 <__alt_data_end+0xc000ac70>
4000ad94:	0005883a 	mov	r2,zero
4000ad98:	003f6006 	br	4000ab1c <__alt_data_end+0xc000ab1c>
4000ad9c:	db013417 	ldw	r12,1232(sp)
4000ada0:	64800044 	addi	r18,r12,1
4000ada4:	9005883a 	mov	r2,r18
4000ada8:	903e350e 	bge	r18,zero,4000a680 <__alt_data_end+0xc000a680>
4000adac:	003fde06 	br	4000ad28 <__alt_data_end+0xc000ad28>
4000adb0:	d9013717 	ldw	r4,1244(sp)
4000adb4:	900b883a 	mov	r5,r18
4000adb8:	000d883a 	mov	r6,zero
4000adbc:	000f883a 	mov	r7,zero
4000adc0:	da013f15 	stw	r8,1276(sp)
4000adc4:	da413e15 	stw	r9,1272(sp)
4000adc8:	da813d15 	stw	r10,1268(sp)
4000adcc:	00063140 	call	40006314 <__eqdf2>
4000add0:	da013f17 	ldw	r8,1276(sp)
4000add4:	da413e17 	ldw	r9,1272(sp)
4000add8:	da813d17 	ldw	r10,1268(sp)
4000addc:	103f1426 	beq	r2,zero,4000aa30 <__alt_data_end+0xc000aa30>
4000ade0:	00800044 	movi	r2,1
4000ade4:	1707c83a 	sub	r3,r2,fp
4000ade8:	d8c12615 	stw	r3,1176(sp)
4000adec:	003f1106 	br	4000aa34 <__alt_data_end+0xc000aa34>
4000adf0:	dac12d17 	ldw	r11,1204(sp)
4000adf4:	5a400017 	ldw	r9,0(r11)
4000adf8:	5ac00104 	addi	r11,r11,4
4000adfc:	dac12d15 	stw	r11,1204(sp)
4000ae00:	483ec60e 	bge	r9,zero,4000a91c <__alt_data_end+0xc000a91c>
4000ae04:	027fffc4 	movi	r9,-1
4000ae08:	1c000047 	ldb	r16,1(r3)
4000ae0c:	00388406 	br	40009020 <__alt_data_end+0xc0009020>
4000ae10:	043fffc4 	movi	r16,-1
4000ae14:	00391006 	br	40009258 <__alt_data_end+0xc0009258>
4000ae18:	00800b44 	movi	r2,45
4000ae1c:	0739c83a 	sub	fp,zero,fp
4000ae20:	d8812305 	stb	r2,1164(sp)
4000ae24:	003f6906 	br	4000abcc <__alt_data_end+0xc000abcc>
4000ae28:	4800081e 	bne	r9,zero,4000ae4c <___vfprintf_internal_r+0x1fc8>
4000ae2c:	8c40004c 	andi	r17,r17,1
4000ae30:	8800061e 	bne	r17,zero,4000ae4c <___vfprintf_internal_r+0x1fc8>
4000ae34:	00800044 	movi	r2,1
4000ae38:	1025883a 	mov	r18,r2
4000ae3c:	003e1006 	br	4000a680 <__alt_data_end+0xc000a680>
4000ae40:	04800084 	movi	r18,2
4000ae44:	90e5c83a 	sub	r18,r18,r3
4000ae48:	003fb306 	br	4000ad18 <__alt_data_end+0xc000ad18>
4000ae4c:	4c800084 	addi	r18,r9,2
4000ae50:	9005883a 	mov	r2,r18
4000ae54:	903e0a0e 	bge	r18,zero,4000a680 <__alt_data_end+0xc000a680>
4000ae58:	003fb306 	br	4000ad28 <__alt_data_end+0xc000ad28>
4000ae5c:	0005883a 	mov	r2,zero
4000ae60:	003f8c06 	br	4000ac94 <__alt_data_end+0xc000ac94>
4000ae64:	88a2703a 	and	r17,r17,r2
4000ae68:	883f8826 	beq	r17,zero,4000ac8c <__alt_data_end+0xc000ac8c>
4000ae6c:	003f8606 	br	4000ac88 <__alt_data_end+0xc000ac88>
4000ae70:	d8812344 	addi	r2,sp,1165
4000ae74:	003f7e06 	br	4000ac70 <__alt_data_end+0xc000ac70>
4000ae78:	d8c12617 	ldw	r3,1176(sp)
4000ae7c:	003f4d06 	br	4000abb4 <__alt_data_end+0xc000abb4>

4000ae80 <__vfprintf_internal>:
4000ae80:	2007883a 	mov	r3,r4
4000ae84:	01100074 	movhi	r4,16385
4000ae88:	211b2304 	addi	r4,r4,27788
4000ae8c:	21000017 	ldw	r4,0(r4)
4000ae90:	2805883a 	mov	r2,r5
4000ae94:	300f883a 	mov	r7,r6
4000ae98:	180b883a 	mov	r5,r3
4000ae9c:	100d883a 	mov	r6,r2
4000aea0:	0008e841 	jmpi	40008e84 <___vfprintf_internal_r>

4000aea4 <__swsetup_r>:
4000aea4:	00900074 	movhi	r2,16385
4000aea8:	defffd04 	addi	sp,sp,-12
4000aeac:	109b2304 	addi	r2,r2,27788
4000aeb0:	dc400115 	stw	r17,4(sp)
4000aeb4:	2023883a 	mov	r17,r4
4000aeb8:	11000017 	ldw	r4,0(r2)
4000aebc:	dc000015 	stw	r16,0(sp)
4000aec0:	dfc00215 	stw	ra,8(sp)
4000aec4:	2821883a 	mov	r16,r5
4000aec8:	20000226 	beq	r4,zero,4000aed4 <__swsetup_r+0x30>
4000aecc:	20c00e17 	ldw	r3,56(r4)
4000aed0:	18002e26 	beq	r3,zero,4000af8c <__swsetup_r+0xe8>
4000aed4:	8080030b 	ldhu	r2,12(r16)
4000aed8:	10c0020c 	andi	r3,r2,8
4000aedc:	100d883a 	mov	r6,r2
4000aee0:	18000f26 	beq	r3,zero,4000af20 <__swsetup_r+0x7c>
4000aee4:	80c00417 	ldw	r3,16(r16)
4000aee8:	18001526 	beq	r3,zero,4000af40 <__swsetup_r+0x9c>
4000aeec:	1100004c 	andi	r4,r2,1
4000aef0:	20001c1e 	bne	r4,zero,4000af64 <__swsetup_r+0xc0>
4000aef4:	1080008c 	andi	r2,r2,2
4000aef8:	1000261e 	bne	r2,zero,4000af94 <__swsetup_r+0xf0>
4000aefc:	80800517 	ldw	r2,20(r16)
4000af00:	80800215 	stw	r2,8(r16)
4000af04:	18001c26 	beq	r3,zero,4000af78 <__swsetup_r+0xd4>
4000af08:	0005883a 	mov	r2,zero
4000af0c:	dfc00217 	ldw	ra,8(sp)
4000af10:	dc400117 	ldw	r17,4(sp)
4000af14:	dc000017 	ldw	r16,0(sp)
4000af18:	dec00304 	addi	sp,sp,12
4000af1c:	f800283a 	ret
4000af20:	3080040c 	andi	r2,r6,16
4000af24:	10001726 	beq	r2,zero,4000af84 <__swsetup_r+0xe0>
4000af28:	3080010c 	andi	r2,r6,4
4000af2c:	10001b1e 	bne	r2,zero,4000af9c <__swsetup_r+0xf8>
4000af30:	80c00417 	ldw	r3,16(r16)
4000af34:	30800214 	ori	r2,r6,8
4000af38:	8080030d 	sth	r2,12(r16)
4000af3c:	183feb1e 	bne	r3,zero,4000aeec <__alt_data_end+0xc000aeec>
4000af40:	1140a00c 	andi	r5,r2,640
4000af44:	01008004 	movi	r4,512
4000af48:	293fe826 	beq	r5,r4,4000aeec <__alt_data_end+0xc000aeec>
4000af4c:	8809883a 	mov	r4,r17
4000af50:	800b883a 	mov	r5,r16
4000af54:	000db900 	call	4000db90 <__smakebuf_r>
4000af58:	8080030b 	ldhu	r2,12(r16)
4000af5c:	80c00417 	ldw	r3,16(r16)
4000af60:	003fe206 	br	4000aeec <__alt_data_end+0xc000aeec>
4000af64:	80800517 	ldw	r2,20(r16)
4000af68:	80000215 	stw	zero,8(r16)
4000af6c:	0085c83a 	sub	r2,zero,r2
4000af70:	80800615 	stw	r2,24(r16)
4000af74:	183fe41e 	bne	r3,zero,4000af08 <__alt_data_end+0xc000af08>
4000af78:	8080030b 	ldhu	r2,12(r16)
4000af7c:	1080200c 	andi	r2,r2,128
4000af80:	103fe226 	beq	r2,zero,4000af0c <__alt_data_end+0xc000af0c>
4000af84:	00bfffc4 	movi	r2,-1
4000af88:	003fe006 	br	4000af0c <__alt_data_end+0xc000af0c>
4000af8c:	000d0380 	call	4000d038 <__sinit>
4000af90:	003fd006 	br	4000aed4 <__alt_data_end+0xc000aed4>
4000af94:	0005883a 	mov	r2,zero
4000af98:	003fd906 	br	4000af00 <__alt_data_end+0xc000af00>
4000af9c:	81400c17 	ldw	r5,48(r16)
4000afa0:	28000626 	beq	r5,zero,4000afbc <__swsetup_r+0x118>
4000afa4:	80801004 	addi	r2,r16,64
4000afa8:	28800326 	beq	r5,r2,4000afb8 <__swsetup_r+0x114>
4000afac:	8809883a 	mov	r4,r17
4000afb0:	000d1ac0 	call	4000d1ac <_free_r>
4000afb4:	8180030b 	ldhu	r6,12(r16)
4000afb8:	80000c15 	stw	zero,48(r16)
4000afbc:	80c00417 	ldw	r3,16(r16)
4000afc0:	00bff6c4 	movi	r2,-37
4000afc4:	118c703a 	and	r6,r2,r6
4000afc8:	80000115 	stw	zero,4(r16)
4000afcc:	80c00015 	stw	r3,0(r16)
4000afd0:	003fd806 	br	4000af34 <__alt_data_end+0xc000af34>

4000afd4 <__call_exitprocs>:
4000afd4:	00900074 	movhi	r2,16385
4000afd8:	109b2204 	addi	r2,r2,27784
4000afdc:	10800017 	ldw	r2,0(r2)
4000afe0:	defff404 	addi	sp,sp,-48
4000afe4:	dd800815 	stw	r22,32(sp)
4000afe8:	d8800015 	stw	r2,0(sp)
4000afec:	10805204 	addi	r2,r2,328
4000aff0:	dd000615 	stw	r20,24(sp)
4000aff4:	dc800415 	stw	r18,16(sp)
4000aff8:	dfc00b15 	stw	ra,44(sp)
4000affc:	df000a15 	stw	fp,40(sp)
4000b000:	ddc00915 	stw	r23,36(sp)
4000b004:	dd400715 	stw	r21,28(sp)
4000b008:	dcc00515 	stw	r19,20(sp)
4000b00c:	dc400315 	stw	r17,12(sp)
4000b010:	dc000215 	stw	r16,8(sp)
4000b014:	2025883a 	mov	r18,r4
4000b018:	2829883a 	mov	r20,r5
4000b01c:	d8800115 	stw	r2,4(sp)
4000b020:	05bfffc4 	movi	r22,-1
4000b024:	d8800017 	ldw	r2,0(sp)
4000b028:	14c05217 	ldw	r19,328(r2)
4000b02c:	98001d26 	beq	r19,zero,4000b0a4 <__call_exitprocs+0xd0>
4000b030:	dd400117 	ldw	r21,4(sp)
4000b034:	98800117 	ldw	r2,4(r19)
4000b038:	173fffc4 	addi	fp,r2,-1
4000b03c:	e0000d16 	blt	fp,zero,4000b074 <__call_exitprocs+0xa0>
4000b040:	14000044 	addi	r16,r2,1
4000b044:	8421883a 	add	r16,r16,r16
4000b048:	8421883a 	add	r16,r16,r16
4000b04c:	84402004 	addi	r17,r16,128
4000b050:	9c63883a 	add	r17,r19,r17
4000b054:	9c21883a 	add	r16,r19,r16
4000b058:	a0001e26 	beq	r20,zero,4000b0d4 <__call_exitprocs+0x100>
4000b05c:	80804017 	ldw	r2,256(r16)
4000b060:	15001c26 	beq	r2,r20,4000b0d4 <__call_exitprocs+0x100>
4000b064:	e73fffc4 	addi	fp,fp,-1
4000b068:	843fff04 	addi	r16,r16,-4
4000b06c:	8c7fff04 	addi	r17,r17,-4
4000b070:	e5bff91e 	bne	fp,r22,4000b058 <__alt_data_end+0xc000b058>
4000b074:	00900034 	movhi	r2,16384
4000b078:	109fd104 	addi	r2,r2,32580
4000b07c:	10000926 	beq	r2,zero,4000b0a4 <__call_exitprocs+0xd0>
4000b080:	98800117 	ldw	r2,4(r19)
4000b084:	1000311e 	bne	r2,zero,4000b14c <__call_exitprocs+0x178>
4000b088:	98800017 	ldw	r2,0(r19)
4000b08c:	10003426 	beq	r2,zero,4000b160 <__call_exitprocs+0x18c>
4000b090:	9809883a 	mov	r4,r19
4000b094:	a8800015 	stw	r2,0(r21)
4000b098:	0007f440 	call	40007f44 <free>
4000b09c:	acc00017 	ldw	r19,0(r21)
4000b0a0:	983fe41e 	bne	r19,zero,4000b034 <__alt_data_end+0xc000b034>
4000b0a4:	dfc00b17 	ldw	ra,44(sp)
4000b0a8:	df000a17 	ldw	fp,40(sp)
4000b0ac:	ddc00917 	ldw	r23,36(sp)
4000b0b0:	dd800817 	ldw	r22,32(sp)
4000b0b4:	dd400717 	ldw	r21,28(sp)
4000b0b8:	dd000617 	ldw	r20,24(sp)
4000b0bc:	dcc00517 	ldw	r19,20(sp)
4000b0c0:	dc800417 	ldw	r18,16(sp)
4000b0c4:	dc400317 	ldw	r17,12(sp)
4000b0c8:	dc000217 	ldw	r16,8(sp)
4000b0cc:	dec00c04 	addi	sp,sp,48
4000b0d0:	f800283a 	ret
4000b0d4:	98800117 	ldw	r2,4(r19)
4000b0d8:	80c00017 	ldw	r3,0(r16)
4000b0dc:	10bfffc4 	addi	r2,r2,-1
4000b0e0:	17001526 	beq	r2,fp,4000b138 <__call_exitprocs+0x164>
4000b0e4:	80000015 	stw	zero,0(r16)
4000b0e8:	183fde26 	beq	r3,zero,4000b064 <__alt_data_end+0xc000b064>
4000b0ec:	00800044 	movi	r2,1
4000b0f0:	1708983a 	sll	r4,r2,fp
4000b0f4:	98806217 	ldw	r2,392(r19)
4000b0f8:	9dc00117 	ldw	r23,4(r19)
4000b0fc:	2084703a 	and	r2,r4,r2
4000b100:	1000061e 	bne	r2,zero,4000b11c <__call_exitprocs+0x148>
4000b104:	183ee83a 	callr	r3
4000b108:	98800117 	ldw	r2,4(r19)
4000b10c:	15ffc51e 	bne	r2,r23,4000b024 <__alt_data_end+0xc000b024>
4000b110:	a8800017 	ldw	r2,0(r21)
4000b114:	14ffd326 	beq	r2,r19,4000b064 <__alt_data_end+0xc000b064>
4000b118:	003fc206 	br	4000b024 <__alt_data_end+0xc000b024>
4000b11c:	98806317 	ldw	r2,396(r19)
4000b120:	2084703a 	and	r2,r4,r2
4000b124:	1000061e 	bne	r2,zero,4000b140 <__call_exitprocs+0x16c>
4000b128:	89400017 	ldw	r5,0(r17)
4000b12c:	9009883a 	mov	r4,r18
4000b130:	183ee83a 	callr	r3
4000b134:	003ff406 	br	4000b108 <__alt_data_end+0xc000b108>
4000b138:	9f000115 	stw	fp,4(r19)
4000b13c:	003fea06 	br	4000b0e8 <__alt_data_end+0xc000b0e8>
4000b140:	89000017 	ldw	r4,0(r17)
4000b144:	183ee83a 	callr	r3
4000b148:	003fef06 	br	4000b108 <__alt_data_end+0xc000b108>
4000b14c:	98800017 	ldw	r2,0(r19)
4000b150:	982b883a 	mov	r21,r19
4000b154:	1027883a 	mov	r19,r2
4000b158:	983fb61e 	bne	r19,zero,4000b034 <__alt_data_end+0xc000b034>
4000b15c:	003fd106 	br	4000b0a4 <__alt_data_end+0xc000b0a4>
4000b160:	0005883a 	mov	r2,zero
4000b164:	003ffa06 	br	4000b150 <__alt_data_end+0xc000b150>

4000b168 <quorem>:
4000b168:	defff704 	addi	sp,sp,-36
4000b16c:	dc800215 	stw	r18,8(sp)
4000b170:	20800417 	ldw	r2,16(r4)
4000b174:	2c800417 	ldw	r18,16(r5)
4000b178:	dfc00815 	stw	ra,32(sp)
4000b17c:	ddc00715 	stw	r23,28(sp)
4000b180:	dd800615 	stw	r22,24(sp)
4000b184:	dd400515 	stw	r21,20(sp)
4000b188:	dd000415 	stw	r20,16(sp)
4000b18c:	dcc00315 	stw	r19,12(sp)
4000b190:	dc400115 	stw	r17,4(sp)
4000b194:	dc000015 	stw	r16,0(sp)
4000b198:	14807116 	blt	r2,r18,4000b360 <quorem+0x1f8>
4000b19c:	94bfffc4 	addi	r18,r18,-1
4000b1a0:	94ad883a 	add	r22,r18,r18
4000b1a4:	b5ad883a 	add	r22,r22,r22
4000b1a8:	2c400504 	addi	r17,r5,20
4000b1ac:	8da9883a 	add	r20,r17,r22
4000b1b0:	25400504 	addi	r21,r4,20
4000b1b4:	282f883a 	mov	r23,r5
4000b1b8:	adad883a 	add	r22,r21,r22
4000b1bc:	a1400017 	ldw	r5,0(r20)
4000b1c0:	2021883a 	mov	r16,r4
4000b1c4:	b1000017 	ldw	r4,0(r22)
4000b1c8:	29400044 	addi	r5,r5,1
4000b1cc:	000519c0 	call	4000519c <__udivsi3>
4000b1d0:	1027883a 	mov	r19,r2
4000b1d4:	10002c26 	beq	r2,zero,4000b288 <quorem+0x120>
4000b1d8:	a813883a 	mov	r9,r21
4000b1dc:	8811883a 	mov	r8,r17
4000b1e0:	0009883a 	mov	r4,zero
4000b1e4:	000d883a 	mov	r6,zero
4000b1e8:	41c00017 	ldw	r7,0(r8)
4000b1ec:	49400017 	ldw	r5,0(r9)
4000b1f0:	42000104 	addi	r8,r8,4
4000b1f4:	38bfffcc 	andi	r2,r7,65535
4000b1f8:	14c5383a 	mul	r2,r2,r19
4000b1fc:	380ed43a 	srli	r7,r7,16
4000b200:	28ffffcc 	andi	r3,r5,65535
4000b204:	2085883a 	add	r2,r4,r2
4000b208:	1008d43a 	srli	r4,r2,16
4000b20c:	3ccf383a 	mul	r7,r7,r19
4000b210:	198d883a 	add	r6,r3,r6
4000b214:	10ffffcc 	andi	r3,r2,65535
4000b218:	30c7c83a 	sub	r3,r6,r3
4000b21c:	280ad43a 	srli	r5,r5,16
4000b220:	21c9883a 	add	r4,r4,r7
4000b224:	180dd43a 	srai	r6,r3,16
4000b228:	20bfffcc 	andi	r2,r4,65535
4000b22c:	288bc83a 	sub	r5,r5,r2
4000b230:	298b883a 	add	r5,r5,r6
4000b234:	280e943a 	slli	r7,r5,16
4000b238:	18ffffcc 	andi	r3,r3,65535
4000b23c:	2008d43a 	srli	r4,r4,16
4000b240:	38ceb03a 	or	r7,r7,r3
4000b244:	49c00015 	stw	r7,0(r9)
4000b248:	280dd43a 	srai	r6,r5,16
4000b24c:	4a400104 	addi	r9,r9,4
4000b250:	a23fe52e 	bgeu	r20,r8,4000b1e8 <__alt_data_end+0xc000b1e8>
4000b254:	b0800017 	ldw	r2,0(r22)
4000b258:	10000b1e 	bne	r2,zero,4000b288 <quorem+0x120>
4000b25c:	b0bfff04 	addi	r2,r22,-4
4000b260:	a880082e 	bgeu	r21,r2,4000b284 <quorem+0x11c>
4000b264:	b0ffff17 	ldw	r3,-4(r22)
4000b268:	18000326 	beq	r3,zero,4000b278 <quorem+0x110>
4000b26c:	00000506 	br	4000b284 <quorem+0x11c>
4000b270:	10c00017 	ldw	r3,0(r2)
4000b274:	1800031e 	bne	r3,zero,4000b284 <quorem+0x11c>
4000b278:	10bfff04 	addi	r2,r2,-4
4000b27c:	94bfffc4 	addi	r18,r18,-1
4000b280:	a8bffb36 	bltu	r21,r2,4000b270 <__alt_data_end+0xc000b270>
4000b284:	84800415 	stw	r18,16(r16)
4000b288:	8009883a 	mov	r4,r16
4000b28c:	b80b883a 	mov	r5,r23
4000b290:	000e9840 	call	4000e984 <__mcmp>
4000b294:	10002616 	blt	r2,zero,4000b330 <quorem+0x1c8>
4000b298:	9cc00044 	addi	r19,r19,1
4000b29c:	a80d883a 	mov	r6,r21
4000b2a0:	000b883a 	mov	r5,zero
4000b2a4:	31000017 	ldw	r4,0(r6)
4000b2a8:	88800017 	ldw	r2,0(r17)
4000b2ac:	31800104 	addi	r6,r6,4
4000b2b0:	20ffffcc 	andi	r3,r4,65535
4000b2b4:	194b883a 	add	r5,r3,r5
4000b2b8:	10ffffcc 	andi	r3,r2,65535
4000b2bc:	28c7c83a 	sub	r3,r5,r3
4000b2c0:	1004d43a 	srli	r2,r2,16
4000b2c4:	2008d43a 	srli	r4,r4,16
4000b2c8:	180bd43a 	srai	r5,r3,16
4000b2cc:	18ffffcc 	andi	r3,r3,65535
4000b2d0:	2089c83a 	sub	r4,r4,r2
4000b2d4:	2149883a 	add	r4,r4,r5
4000b2d8:	2004943a 	slli	r2,r4,16
4000b2dc:	8c400104 	addi	r17,r17,4
4000b2e0:	200bd43a 	srai	r5,r4,16
4000b2e4:	10c6b03a 	or	r3,r2,r3
4000b2e8:	30ffff15 	stw	r3,-4(r6)
4000b2ec:	a47fed2e 	bgeu	r20,r17,4000b2a4 <__alt_data_end+0xc000b2a4>
4000b2f0:	9485883a 	add	r2,r18,r18
4000b2f4:	1085883a 	add	r2,r2,r2
4000b2f8:	a887883a 	add	r3,r21,r2
4000b2fc:	18800017 	ldw	r2,0(r3)
4000b300:	10000b1e 	bne	r2,zero,4000b330 <quorem+0x1c8>
4000b304:	18bfff04 	addi	r2,r3,-4
4000b308:	a880082e 	bgeu	r21,r2,4000b32c <quorem+0x1c4>
4000b30c:	18ffff17 	ldw	r3,-4(r3)
4000b310:	18000326 	beq	r3,zero,4000b320 <quorem+0x1b8>
4000b314:	00000506 	br	4000b32c <quorem+0x1c4>
4000b318:	10c00017 	ldw	r3,0(r2)
4000b31c:	1800031e 	bne	r3,zero,4000b32c <quorem+0x1c4>
4000b320:	10bfff04 	addi	r2,r2,-4
4000b324:	94bfffc4 	addi	r18,r18,-1
4000b328:	a8bffb36 	bltu	r21,r2,4000b318 <__alt_data_end+0xc000b318>
4000b32c:	84800415 	stw	r18,16(r16)
4000b330:	9805883a 	mov	r2,r19
4000b334:	dfc00817 	ldw	ra,32(sp)
4000b338:	ddc00717 	ldw	r23,28(sp)
4000b33c:	dd800617 	ldw	r22,24(sp)
4000b340:	dd400517 	ldw	r21,20(sp)
4000b344:	dd000417 	ldw	r20,16(sp)
4000b348:	dcc00317 	ldw	r19,12(sp)
4000b34c:	dc800217 	ldw	r18,8(sp)
4000b350:	dc400117 	ldw	r17,4(sp)
4000b354:	dc000017 	ldw	r16,0(sp)
4000b358:	dec00904 	addi	sp,sp,36
4000b35c:	f800283a 	ret
4000b360:	0005883a 	mov	r2,zero
4000b364:	003ff306 	br	4000b334 <__alt_data_end+0xc000b334>

4000b368 <_dtoa_r>:
4000b368:	20801017 	ldw	r2,64(r4)
4000b36c:	deffde04 	addi	sp,sp,-136
4000b370:	dd401d15 	stw	r21,116(sp)
4000b374:	dcc01b15 	stw	r19,108(sp)
4000b378:	dc801a15 	stw	r18,104(sp)
4000b37c:	dc401915 	stw	r17,100(sp)
4000b380:	dc001815 	stw	r16,96(sp)
4000b384:	dfc02115 	stw	ra,132(sp)
4000b388:	df002015 	stw	fp,128(sp)
4000b38c:	ddc01f15 	stw	r23,124(sp)
4000b390:	dd801e15 	stw	r22,120(sp)
4000b394:	dd001c15 	stw	r20,112(sp)
4000b398:	d9c00315 	stw	r7,12(sp)
4000b39c:	2021883a 	mov	r16,r4
4000b3a0:	302b883a 	mov	r21,r6
4000b3a4:	2825883a 	mov	r18,r5
4000b3a8:	dc402417 	ldw	r17,144(sp)
4000b3ac:	3027883a 	mov	r19,r6
4000b3b0:	10000826 	beq	r2,zero,4000b3d4 <_dtoa_r+0x6c>
4000b3b4:	21801117 	ldw	r6,68(r4)
4000b3b8:	00c00044 	movi	r3,1
4000b3bc:	100b883a 	mov	r5,r2
4000b3c0:	1986983a 	sll	r3,r3,r6
4000b3c4:	11800115 	stw	r6,4(r2)
4000b3c8:	10c00215 	stw	r3,8(r2)
4000b3cc:	000e16c0 	call	4000e16c <_Bfree>
4000b3d0:	80001015 	stw	zero,64(r16)
4000b3d4:	a8002d16 	blt	r21,zero,4000b48c <_dtoa_r+0x124>
4000b3d8:	88000015 	stw	zero,0(r17)
4000b3dc:	a8dffc2c 	andhi	r3,r21,32752
4000b3e0:	009ffc34 	movhi	r2,32752
4000b3e4:	18801b26 	beq	r3,r2,4000b454 <_dtoa_r+0xec>
4000b3e8:	9009883a 	mov	r4,r18
4000b3ec:	980b883a 	mov	r5,r19
4000b3f0:	000d883a 	mov	r6,zero
4000b3f4:	000f883a 	mov	r7,zero
4000b3f8:	00063140 	call	40006314 <__eqdf2>
4000b3fc:	10002a1e 	bne	r2,zero,4000b4a8 <_dtoa_r+0x140>
4000b400:	d8c02317 	ldw	r3,140(sp)
4000b404:	d9002517 	ldw	r4,148(sp)
4000b408:	00800044 	movi	r2,1
4000b40c:	18800015 	stw	r2,0(r3)
4000b410:	2001a226 	beq	r4,zero,4000ba9c <_dtoa_r+0x734>
4000b414:	00900074 	movhi	r2,16385
4000b418:	1093e144 	addi	r2,r2,20357
4000b41c:	20800015 	stw	r2,0(r4)
4000b420:	10bfffc4 	addi	r2,r2,-1
4000b424:	dfc02117 	ldw	ra,132(sp)
4000b428:	df002017 	ldw	fp,128(sp)
4000b42c:	ddc01f17 	ldw	r23,124(sp)
4000b430:	dd801e17 	ldw	r22,120(sp)
4000b434:	dd401d17 	ldw	r21,116(sp)
4000b438:	dd001c17 	ldw	r20,112(sp)
4000b43c:	dcc01b17 	ldw	r19,108(sp)
4000b440:	dc801a17 	ldw	r18,104(sp)
4000b444:	dc401917 	ldw	r17,100(sp)
4000b448:	dc001817 	ldw	r16,96(sp)
4000b44c:	dec02204 	addi	sp,sp,136
4000b450:	f800283a 	ret
4000b454:	d8c02317 	ldw	r3,140(sp)
4000b458:	0089c3c4 	movi	r2,9999
4000b45c:	18800015 	stw	r2,0(r3)
4000b460:	90017c26 	beq	r18,zero,4000ba54 <_dtoa_r+0x6ec>
4000b464:	00900074 	movhi	r2,16385
4000b468:	1093ed04 	addi	r2,r2,20404
4000b46c:	d9002517 	ldw	r4,148(sp)
4000b470:	203fec26 	beq	r4,zero,4000b424 <__alt_data_end+0xc000b424>
4000b474:	10c000c7 	ldb	r3,3(r2)
4000b478:	18017d1e 	bne	r3,zero,4000ba70 <_dtoa_r+0x708>
4000b47c:	10c000c4 	addi	r3,r2,3
4000b480:	d9802517 	ldw	r6,148(sp)
4000b484:	30c00015 	stw	r3,0(r6)
4000b488:	003fe606 	br	4000b424 <__alt_data_end+0xc000b424>
4000b48c:	04e00034 	movhi	r19,32768
4000b490:	9cffffc4 	addi	r19,r19,-1
4000b494:	00800044 	movi	r2,1
4000b498:	ace6703a 	and	r19,r21,r19
4000b49c:	88800015 	stw	r2,0(r17)
4000b4a0:	982b883a 	mov	r21,r19
4000b4a4:	003fcd06 	br	4000b3dc <__alt_data_end+0xc000b3dc>
4000b4a8:	d8800204 	addi	r2,sp,8
4000b4ac:	a822d53a 	srli	r17,r21,20
4000b4b0:	d8800015 	stw	r2,0(sp)
4000b4b4:	8009883a 	mov	r4,r16
4000b4b8:	900b883a 	mov	r5,r18
4000b4bc:	980d883a 	mov	r6,r19
4000b4c0:	d9c00104 	addi	r7,sp,4
4000b4c4:	000ecf80 	call	4000ecf8 <__d2b>
4000b4c8:	1039883a 	mov	fp,r2
4000b4cc:	88016a1e 	bne	r17,zero,4000ba78 <_dtoa_r+0x710>
4000b4d0:	dd000217 	ldw	r20,8(sp)
4000b4d4:	dc400117 	ldw	r17,4(sp)
4000b4d8:	00befbc4 	movi	r2,-1041
4000b4dc:	a463883a 	add	r17,r20,r17
4000b4e0:	8882ea16 	blt	r17,r2,4000c08c <_dtoa_r+0xd24>
4000b4e4:	00bf0384 	movi	r2,-1010
4000b4e8:	1445c83a 	sub	r2,r2,r17
4000b4ec:	89010484 	addi	r4,r17,1042
4000b4f0:	a8aa983a 	sll	r21,r21,r2
4000b4f4:	9108d83a 	srl	r4,r18,r4
4000b4f8:	a908b03a 	or	r4,r21,r4
4000b4fc:	00122100 	call	40012210 <__floatunsidf>
4000b500:	017f8434 	movhi	r5,65040
4000b504:	01800044 	movi	r6,1
4000b508:	1009883a 	mov	r4,r2
4000b50c:	194b883a 	add	r5,r3,r5
4000b510:	8c7fffc4 	addi	r17,r17,-1
4000b514:	d9800f15 	stw	r6,60(sp)
4000b518:	000d883a 	mov	r6,zero
4000b51c:	01cffe34 	movhi	r7,16376
4000b520:	0006c7c0 	call	40006c7c <__subdf3>
4000b524:	0198dbf4 	movhi	r6,25455
4000b528:	01cff4f4 	movhi	r7,16339
4000b52c:	1009883a 	mov	r4,r2
4000b530:	180b883a 	mov	r5,r3
4000b534:	3190d844 	addi	r6,r6,17249
4000b538:	39e1e9c4 	addi	r7,r7,-30809
4000b53c:	00065580 	call	40006558 <__muldf3>
4000b540:	01a2d874 	movhi	r6,35681
4000b544:	01cff1f4 	movhi	r7,16327
4000b548:	180b883a 	mov	r5,r3
4000b54c:	31b22cc4 	addi	r6,r6,-14157
4000b550:	39e28a04 	addi	r7,r7,-30168
4000b554:	1009883a 	mov	r4,r2
4000b558:	00051ac0 	call	400051ac <__adddf3>
4000b55c:	8809883a 	mov	r4,r17
4000b560:	102d883a 	mov	r22,r2
4000b564:	182b883a 	mov	r21,r3
4000b568:	00075d40 	call	400075d4 <__floatsidf>
4000b56c:	019427f4 	movhi	r6,20639
4000b570:	01cff4f4 	movhi	r7,16339
4000b574:	1009883a 	mov	r4,r2
4000b578:	180b883a 	mov	r5,r3
4000b57c:	319e7ec4 	addi	r6,r6,31227
4000b580:	39d104c4 	addi	r7,r7,17427
4000b584:	00065580 	call	40006558 <__muldf3>
4000b588:	b009883a 	mov	r4,r22
4000b58c:	a80b883a 	mov	r5,r21
4000b590:	100d883a 	mov	r6,r2
4000b594:	180f883a 	mov	r7,r3
4000b598:	00051ac0 	call	400051ac <__adddf3>
4000b59c:	1009883a 	mov	r4,r2
4000b5a0:	180b883a 	mov	r5,r3
4000b5a4:	102d883a 	mov	r22,r2
4000b5a8:	182b883a 	mov	r21,r3
4000b5ac:	000754c0 	call	4000754c <__fixdfsi>
4000b5b0:	b009883a 	mov	r4,r22
4000b5b4:	a80b883a 	mov	r5,r21
4000b5b8:	000d883a 	mov	r6,zero
4000b5bc:	000f883a 	mov	r7,zero
4000b5c0:	d8800515 	stw	r2,20(sp)
4000b5c4:	00064780 	call	40006478 <__ledf2>
4000b5c8:	10023116 	blt	r2,zero,4000be90 <_dtoa_r+0xb28>
4000b5cc:	d8c00517 	ldw	r3,20(sp)
4000b5d0:	00800584 	movi	r2,22
4000b5d4:	10c21f36 	bltu	r2,r3,4000be54 <_dtoa_r+0xaec>
4000b5d8:	180490fa 	slli	r2,r3,3
4000b5dc:	00d00074 	movhi	r3,16385
4000b5e0:	18d40804 	addi	r3,r3,20512
4000b5e4:	1885883a 	add	r2,r3,r2
4000b5e8:	11000017 	ldw	r4,0(r2)
4000b5ec:	11400117 	ldw	r5,4(r2)
4000b5f0:	900d883a 	mov	r6,r18
4000b5f4:	980f883a 	mov	r7,r19
4000b5f8:	00063980 	call	40006398 <__gedf2>
4000b5fc:	0082a70e 	bge	zero,r2,4000c09c <_dtoa_r+0xd34>
4000b600:	d9000517 	ldw	r4,20(sp)
4000b604:	d8000c15 	stw	zero,48(sp)
4000b608:	213fffc4 	addi	r4,r4,-1
4000b60c:	d9000515 	stw	r4,20(sp)
4000b610:	a463c83a 	sub	r17,r20,r17
4000b614:	8dbfffc4 	addi	r22,r17,-1
4000b618:	b0021916 	blt	r22,zero,4000be80 <_dtoa_r+0xb18>
4000b61c:	d8000815 	stw	zero,32(sp)
4000b620:	d8800517 	ldw	r2,20(sp)
4000b624:	10020e16 	blt	r2,zero,4000be60 <_dtoa_r+0xaf8>
4000b628:	b0ad883a 	add	r22,r22,r2
4000b62c:	d8800a15 	stw	r2,40(sp)
4000b630:	d8000915 	stw	zero,36(sp)
4000b634:	d8c00317 	ldw	r3,12(sp)
4000b638:	00800244 	movi	r2,9
4000b63c:	10c11a36 	bltu	r2,r3,4000baa8 <_dtoa_r+0x740>
4000b640:	00800144 	movi	r2,5
4000b644:	10c4fc0e 	bge	r2,r3,4000ca38 <_dtoa_r+0x16d0>
4000b648:	18ffff04 	addi	r3,r3,-4
4000b64c:	d8c00315 	stw	r3,12(sp)
4000b650:	0029883a 	mov	r20,zero
4000b654:	d9800317 	ldw	r6,12(sp)
4000b658:	008000c4 	movi	r2,3
4000b65c:	3083bd26 	beq	r6,r2,4000c554 <_dtoa_r+0x11ec>
4000b660:	1183670e 	bge	r2,r6,4000c400 <_dtoa_r+0x1098>
4000b664:	d8c00317 	ldw	r3,12(sp)
4000b668:	00800104 	movi	r2,4
4000b66c:	1882e726 	beq	r3,r2,4000c20c <_dtoa_r+0xea4>
4000b670:	00800144 	movi	r2,5
4000b674:	1884f21e 	bne	r3,r2,4000ca40 <_dtoa_r+0x16d8>
4000b678:	00800044 	movi	r2,1
4000b67c:	d8800b15 	stw	r2,44(sp)
4000b680:	d8c02217 	ldw	r3,136(sp)
4000b684:	d9000517 	ldw	r4,20(sp)
4000b688:	1907883a 	add	r3,r3,r4
4000b68c:	19800044 	addi	r6,r3,1
4000b690:	d8c00d15 	stw	r3,52(sp)
4000b694:	d9800615 	stw	r6,24(sp)
4000b698:	0183c30e 	bge	zero,r6,4000c5a8 <_dtoa_r+0x1240>
4000b69c:	d9800617 	ldw	r6,24(sp)
4000b6a0:	3023883a 	mov	r17,r6
4000b6a4:	80001115 	stw	zero,68(r16)
4000b6a8:	008005c4 	movi	r2,23
4000b6ac:	1184f62e 	bgeu	r2,r6,4000ca88 <_dtoa_r+0x1720>
4000b6b0:	00c00044 	movi	r3,1
4000b6b4:	00800104 	movi	r2,4
4000b6b8:	1085883a 	add	r2,r2,r2
4000b6bc:	11000504 	addi	r4,r2,20
4000b6c0:	180b883a 	mov	r5,r3
4000b6c4:	18c00044 	addi	r3,r3,1
4000b6c8:	313ffb2e 	bgeu	r6,r4,4000b6b8 <__alt_data_end+0xc000b6b8>
4000b6cc:	81401115 	stw	r5,68(r16)
4000b6d0:	8009883a 	mov	r4,r16
4000b6d4:	000e0c40 	call	4000e0c4 <_Balloc>
4000b6d8:	d8800715 	stw	r2,28(sp)
4000b6dc:	80801015 	stw	r2,64(r16)
4000b6e0:	00800384 	movi	r2,14
4000b6e4:	1440fd36 	bltu	r2,r17,4000badc <_dtoa_r+0x774>
4000b6e8:	a000fc26 	beq	r20,zero,4000badc <_dtoa_r+0x774>
4000b6ec:	d8800517 	ldw	r2,20(sp)
4000b6f0:	0083b90e 	bge	zero,r2,4000c5d8 <_dtoa_r+0x1270>
4000b6f4:	d8c00517 	ldw	r3,20(sp)
4000b6f8:	108003cc 	andi	r2,r2,15
4000b6fc:	100490fa 	slli	r2,r2,3
4000b700:	182fd13a 	srai	r23,r3,4
4000b704:	00d00074 	movhi	r3,16385
4000b708:	18d40804 	addi	r3,r3,20512
4000b70c:	1885883a 	add	r2,r3,r2
4000b710:	b8c0040c 	andi	r3,r23,16
4000b714:	12c00017 	ldw	r11,0(r2)
4000b718:	12800117 	ldw	r10,4(r2)
4000b71c:	18039726 	beq	r3,zero,4000c57c <_dtoa_r+0x1214>
4000b720:	00900074 	movhi	r2,16385
4000b724:	1093fe04 	addi	r2,r2,20472
4000b728:	11800817 	ldw	r6,32(r2)
4000b72c:	11c00917 	ldw	r7,36(r2)
4000b730:	9009883a 	mov	r4,r18
4000b734:	980b883a 	mov	r5,r19
4000b738:	da801615 	stw	r10,88(sp)
4000b73c:	dac01515 	stw	r11,84(sp)
4000b740:	0005a480 	call	40005a48 <__divdf3>
4000b744:	da801617 	ldw	r10,88(sp)
4000b748:	dac01517 	ldw	r11,84(sp)
4000b74c:	bdc003cc 	andi	r23,r23,15
4000b750:	044000c4 	movi	r17,3
4000b754:	d8800e15 	stw	r2,56(sp)
4000b758:	182b883a 	mov	r21,r3
4000b75c:	b8001126 	beq	r23,zero,4000b7a4 <_dtoa_r+0x43c>
4000b760:	05100074 	movhi	r20,16385
4000b764:	a513fe04 	addi	r20,r20,20472
4000b768:	5805883a 	mov	r2,r11
4000b76c:	5007883a 	mov	r3,r10
4000b770:	b980004c 	andi	r6,r23,1
4000b774:	1009883a 	mov	r4,r2
4000b778:	b82fd07a 	srai	r23,r23,1
4000b77c:	180b883a 	mov	r5,r3
4000b780:	30000426 	beq	r6,zero,4000b794 <_dtoa_r+0x42c>
4000b784:	a1800017 	ldw	r6,0(r20)
4000b788:	a1c00117 	ldw	r7,4(r20)
4000b78c:	8c400044 	addi	r17,r17,1
4000b790:	00065580 	call	40006558 <__muldf3>
4000b794:	a5000204 	addi	r20,r20,8
4000b798:	b83ff51e 	bne	r23,zero,4000b770 <__alt_data_end+0xc000b770>
4000b79c:	1017883a 	mov	r11,r2
4000b7a0:	1815883a 	mov	r10,r3
4000b7a4:	d9000e17 	ldw	r4,56(sp)
4000b7a8:	a80b883a 	mov	r5,r21
4000b7ac:	580d883a 	mov	r6,r11
4000b7b0:	500f883a 	mov	r7,r10
4000b7b4:	0005a480 	call	40005a48 <__divdf3>
4000b7b8:	1029883a 	mov	r20,r2
4000b7bc:	182b883a 	mov	r21,r3
4000b7c0:	d9800c17 	ldw	r6,48(sp)
4000b7c4:	30000626 	beq	r6,zero,4000b7e0 <_dtoa_r+0x478>
4000b7c8:	a009883a 	mov	r4,r20
4000b7cc:	a80b883a 	mov	r5,r21
4000b7d0:	000d883a 	mov	r6,zero
4000b7d4:	01cffc34 	movhi	r7,16368
4000b7d8:	00064780 	call	40006478 <__ledf2>
4000b7dc:	10043216 	blt	r2,zero,4000c8a8 <_dtoa_r+0x1540>
4000b7e0:	8809883a 	mov	r4,r17
4000b7e4:	00075d40 	call	400075d4 <__floatsidf>
4000b7e8:	1009883a 	mov	r4,r2
4000b7ec:	180b883a 	mov	r5,r3
4000b7f0:	a00d883a 	mov	r6,r20
4000b7f4:	a80f883a 	mov	r7,r21
4000b7f8:	00065580 	call	40006558 <__muldf3>
4000b7fc:	000d883a 	mov	r6,zero
4000b800:	1009883a 	mov	r4,r2
4000b804:	180b883a 	mov	r5,r3
4000b808:	01d00734 	movhi	r7,16412
4000b80c:	00051ac0 	call	400051ac <__adddf3>
4000b810:	1023883a 	mov	r17,r2
4000b814:	d9800617 	ldw	r6,24(sp)
4000b818:	00bf3034 	movhi	r2,64704
4000b81c:	1885883a 	add	r2,r3,r2
4000b820:	d8800e15 	stw	r2,56(sp)
4000b824:	30032e26 	beq	r6,zero,4000c4e0 <_dtoa_r+0x1178>
4000b828:	d8c00517 	ldw	r3,20(sp)
4000b82c:	da800617 	ldw	r10,24(sp)
4000b830:	d8c01215 	stw	r3,72(sp)
4000b834:	d9000b17 	ldw	r4,44(sp)
4000b838:	2003b026 	beq	r4,zero,4000c6fc <_dtoa_r+0x1394>
4000b83c:	50bfffc4 	addi	r2,r10,-1
4000b840:	100490fa 	slli	r2,r2,3
4000b844:	00d00074 	movhi	r3,16385
4000b848:	18d40804 	addi	r3,r3,20512
4000b84c:	1885883a 	add	r2,r3,r2
4000b850:	11800017 	ldw	r6,0(r2)
4000b854:	11c00117 	ldw	r7,4(r2)
4000b858:	d8800717 	ldw	r2,28(sp)
4000b85c:	0009883a 	mov	r4,zero
4000b860:	014ff834 	movhi	r5,16352
4000b864:	da801615 	stw	r10,88(sp)
4000b868:	15c00044 	addi	r23,r2,1
4000b86c:	0005a480 	call	40005a48 <__divdf3>
4000b870:	d9c00e17 	ldw	r7,56(sp)
4000b874:	880d883a 	mov	r6,r17
4000b878:	1009883a 	mov	r4,r2
4000b87c:	180b883a 	mov	r5,r3
4000b880:	0006c7c0 	call	40006c7c <__subdf3>
4000b884:	a80b883a 	mov	r5,r21
4000b888:	a009883a 	mov	r4,r20
4000b88c:	d8c01015 	stw	r3,64(sp)
4000b890:	d8800e15 	stw	r2,56(sp)
4000b894:	000754c0 	call	4000754c <__fixdfsi>
4000b898:	1009883a 	mov	r4,r2
4000b89c:	d8801715 	stw	r2,92(sp)
4000b8a0:	00075d40 	call	400075d4 <__floatsidf>
4000b8a4:	a009883a 	mov	r4,r20
4000b8a8:	a80b883a 	mov	r5,r21
4000b8ac:	100d883a 	mov	r6,r2
4000b8b0:	180f883a 	mov	r7,r3
4000b8b4:	0006c7c0 	call	40006c7c <__subdf3>
4000b8b8:	da001717 	ldw	r8,92(sp)
4000b8bc:	1829883a 	mov	r20,r3
4000b8c0:	d8c00717 	ldw	r3,28(sp)
4000b8c4:	d9000e17 	ldw	r4,56(sp)
4000b8c8:	d9401017 	ldw	r5,64(sp)
4000b8cc:	42000c04 	addi	r8,r8,48
4000b8d0:	1023883a 	mov	r17,r2
4000b8d4:	1a000005 	stb	r8,0(r3)
4000b8d8:	880d883a 	mov	r6,r17
4000b8dc:	a00f883a 	mov	r7,r20
4000b8e0:	402b883a 	mov	r21,r8
4000b8e4:	00063980 	call	40006398 <__gedf2>
4000b8e8:	00844516 	blt	zero,r2,4000ca00 <_dtoa_r+0x1698>
4000b8ec:	0009883a 	mov	r4,zero
4000b8f0:	014ffc34 	movhi	r5,16368
4000b8f4:	880d883a 	mov	r6,r17
4000b8f8:	a00f883a 	mov	r7,r20
4000b8fc:	0006c7c0 	call	40006c7c <__subdf3>
4000b900:	d9000e17 	ldw	r4,56(sp)
4000b904:	d9401017 	ldw	r5,64(sp)
4000b908:	100d883a 	mov	r6,r2
4000b90c:	180f883a 	mov	r7,r3
4000b910:	00063980 	call	40006398 <__gedf2>
4000b914:	da801617 	ldw	r10,88(sp)
4000b918:	00843616 	blt	zero,r2,4000c9f4 <_dtoa_r+0x168c>
4000b91c:	00800044 	movi	r2,1
4000b920:	12806e0e 	bge	r2,r10,4000badc <_dtoa_r+0x774>
4000b924:	d9000717 	ldw	r4,28(sp)
4000b928:	dd801315 	stw	r22,76(sp)
4000b92c:	dc001115 	stw	r16,68(sp)
4000b930:	2295883a 	add	r10,r4,r10
4000b934:	dcc01415 	stw	r19,80(sp)
4000b938:	502d883a 	mov	r22,r10
4000b93c:	dcc01017 	ldw	r19,64(sp)
4000b940:	b821883a 	mov	r16,r23
4000b944:	dc801015 	stw	r18,64(sp)
4000b948:	dc800e17 	ldw	r18,56(sp)
4000b94c:	00000906 	br	4000b974 <_dtoa_r+0x60c>
4000b950:	0006c7c0 	call	40006c7c <__subdf3>
4000b954:	1009883a 	mov	r4,r2
4000b958:	180b883a 	mov	r5,r3
4000b95c:	900d883a 	mov	r6,r18
4000b960:	980f883a 	mov	r7,r19
4000b964:	00064780 	call	40006478 <__ledf2>
4000b968:	10040e16 	blt	r2,zero,4000c9a4 <_dtoa_r+0x163c>
4000b96c:	b821883a 	mov	r16,r23
4000b970:	bd841026 	beq	r23,r22,4000c9b4 <_dtoa_r+0x164c>
4000b974:	9009883a 	mov	r4,r18
4000b978:	980b883a 	mov	r5,r19
4000b97c:	000d883a 	mov	r6,zero
4000b980:	01d00934 	movhi	r7,16420
4000b984:	00065580 	call	40006558 <__muldf3>
4000b988:	000d883a 	mov	r6,zero
4000b98c:	01d00934 	movhi	r7,16420
4000b990:	8809883a 	mov	r4,r17
4000b994:	a00b883a 	mov	r5,r20
4000b998:	1025883a 	mov	r18,r2
4000b99c:	1827883a 	mov	r19,r3
4000b9a0:	00065580 	call	40006558 <__muldf3>
4000b9a4:	180b883a 	mov	r5,r3
4000b9a8:	1009883a 	mov	r4,r2
4000b9ac:	1823883a 	mov	r17,r3
4000b9b0:	1029883a 	mov	r20,r2
4000b9b4:	000754c0 	call	4000754c <__fixdfsi>
4000b9b8:	1009883a 	mov	r4,r2
4000b9bc:	102b883a 	mov	r21,r2
4000b9c0:	00075d40 	call	400075d4 <__floatsidf>
4000b9c4:	a009883a 	mov	r4,r20
4000b9c8:	880b883a 	mov	r5,r17
4000b9cc:	100d883a 	mov	r6,r2
4000b9d0:	180f883a 	mov	r7,r3
4000b9d4:	0006c7c0 	call	40006c7c <__subdf3>
4000b9d8:	ad400c04 	addi	r21,r21,48
4000b9dc:	1009883a 	mov	r4,r2
4000b9e0:	180b883a 	mov	r5,r3
4000b9e4:	900d883a 	mov	r6,r18
4000b9e8:	980f883a 	mov	r7,r19
4000b9ec:	85400005 	stb	r21,0(r16)
4000b9f0:	1023883a 	mov	r17,r2
4000b9f4:	1829883a 	mov	r20,r3
4000b9f8:	00064780 	call	40006478 <__ledf2>
4000b9fc:	bdc00044 	addi	r23,r23,1
4000ba00:	0009883a 	mov	r4,zero
4000ba04:	014ffc34 	movhi	r5,16368
4000ba08:	880d883a 	mov	r6,r17
4000ba0c:	a00f883a 	mov	r7,r20
4000ba10:	103fcf0e 	bge	r2,zero,4000b950 <__alt_data_end+0xc000b950>
4000ba14:	d9801217 	ldw	r6,72(sp)
4000ba18:	dc001117 	ldw	r16,68(sp)
4000ba1c:	d9800515 	stw	r6,20(sp)
4000ba20:	8009883a 	mov	r4,r16
4000ba24:	e00b883a 	mov	r5,fp
4000ba28:	000e16c0 	call	4000e16c <_Bfree>
4000ba2c:	d8c00517 	ldw	r3,20(sp)
4000ba30:	d9002317 	ldw	r4,140(sp)
4000ba34:	d9802517 	ldw	r6,148(sp)
4000ba38:	b8000005 	stb	zero,0(r23)
4000ba3c:	18800044 	addi	r2,r3,1
4000ba40:	20800015 	stw	r2,0(r4)
4000ba44:	30027226 	beq	r6,zero,4000c410 <_dtoa_r+0x10a8>
4000ba48:	35c00015 	stw	r23,0(r6)
4000ba4c:	d8800717 	ldw	r2,28(sp)
4000ba50:	003e7406 	br	4000b424 <__alt_data_end+0xc000b424>
4000ba54:	00800434 	movhi	r2,16
4000ba58:	10bfffc4 	addi	r2,r2,-1
4000ba5c:	a8aa703a 	and	r21,r21,r2
4000ba60:	a83e801e 	bne	r21,zero,4000b464 <__alt_data_end+0xc000b464>
4000ba64:	00900074 	movhi	r2,16385
4000ba68:	1093ea04 	addi	r2,r2,20392
4000ba6c:	003e7f06 	br	4000b46c <__alt_data_end+0xc000b46c>
4000ba70:	10c00204 	addi	r3,r2,8
4000ba74:	003e8206 	br	4000b480 <__alt_data_end+0xc000b480>
4000ba78:	01400434 	movhi	r5,16
4000ba7c:	297fffc4 	addi	r5,r5,-1
4000ba80:	994a703a 	and	r5,r19,r5
4000ba84:	9009883a 	mov	r4,r18
4000ba88:	8c7f0044 	addi	r17,r17,-1023
4000ba8c:	294ffc34 	orhi	r5,r5,16368
4000ba90:	dd000217 	ldw	r20,8(sp)
4000ba94:	d8000f15 	stw	zero,60(sp)
4000ba98:	003e9f06 	br	4000b518 <__alt_data_end+0xc000b518>
4000ba9c:	00900074 	movhi	r2,16385
4000baa0:	1093e104 	addi	r2,r2,20356
4000baa4:	003e5f06 	br	4000b424 <__alt_data_end+0xc000b424>
4000baa8:	80001115 	stw	zero,68(r16)
4000baac:	8009883a 	mov	r4,r16
4000bab0:	000b883a 	mov	r5,zero
4000bab4:	000e0c40 	call	4000e0c4 <_Balloc>
4000bab8:	01bfffc4 	movi	r6,-1
4000babc:	d8800715 	stw	r2,28(sp)
4000bac0:	80801015 	stw	r2,64(r16)
4000bac4:	00800044 	movi	r2,1
4000bac8:	d9800615 	stw	r6,24(sp)
4000bacc:	d8800b15 	stw	r2,44(sp)
4000bad0:	d8002215 	stw	zero,136(sp)
4000bad4:	d9800d15 	stw	r6,52(sp)
4000bad8:	d8000315 	stw	zero,12(sp)
4000badc:	d8800117 	ldw	r2,4(sp)
4000bae0:	10008e16 	blt	r2,zero,4000bd1c <_dtoa_r+0x9b4>
4000bae4:	d9000517 	ldw	r4,20(sp)
4000bae8:	00c00384 	movi	r3,14
4000baec:	19008b16 	blt	r3,r4,4000bd1c <_dtoa_r+0x9b4>
4000baf0:	200490fa 	slli	r2,r4,3
4000baf4:	00d00074 	movhi	r3,16385
4000baf8:	d9802217 	ldw	r6,136(sp)
4000bafc:	18d40804 	addi	r3,r3,20512
4000bb00:	1885883a 	add	r2,r3,r2
4000bb04:	14400017 	ldw	r17,0(r2)
4000bb08:	15000117 	ldw	r20,4(r2)
4000bb0c:	3001c716 	blt	r6,zero,4000c22c <_dtoa_r+0xec4>
4000bb10:	880d883a 	mov	r6,r17
4000bb14:	a00f883a 	mov	r7,r20
4000bb18:	9009883a 	mov	r4,r18
4000bb1c:	980b883a 	mov	r5,r19
4000bb20:	0005a480 	call	40005a48 <__divdf3>
4000bb24:	180b883a 	mov	r5,r3
4000bb28:	1009883a 	mov	r4,r2
4000bb2c:	000754c0 	call	4000754c <__fixdfsi>
4000bb30:	1009883a 	mov	r4,r2
4000bb34:	102d883a 	mov	r22,r2
4000bb38:	00075d40 	call	400075d4 <__floatsidf>
4000bb3c:	1009883a 	mov	r4,r2
4000bb40:	180b883a 	mov	r5,r3
4000bb44:	880d883a 	mov	r6,r17
4000bb48:	a00f883a 	mov	r7,r20
4000bb4c:	00065580 	call	40006558 <__muldf3>
4000bb50:	9009883a 	mov	r4,r18
4000bb54:	980b883a 	mov	r5,r19
4000bb58:	100d883a 	mov	r6,r2
4000bb5c:	180f883a 	mov	r7,r3
4000bb60:	0006c7c0 	call	40006c7c <__subdf3>
4000bb64:	d9000717 	ldw	r4,28(sp)
4000bb68:	d9800617 	ldw	r6,24(sp)
4000bb6c:	180b883a 	mov	r5,r3
4000bb70:	b0c00c04 	addi	r3,r22,48
4000bb74:	20c00005 	stb	r3,0(r4)
4000bb78:	25c00044 	addi	r23,r4,1
4000bb7c:	01000044 	movi	r4,1
4000bb80:	1011883a 	mov	r8,r2
4000bb84:	2807883a 	mov	r3,r5
4000bb88:	31003d26 	beq	r6,r4,4000bc80 <_dtoa_r+0x918>
4000bb8c:	000d883a 	mov	r6,zero
4000bb90:	01d00934 	movhi	r7,16420
4000bb94:	1009883a 	mov	r4,r2
4000bb98:	00065580 	call	40006558 <__muldf3>
4000bb9c:	1009883a 	mov	r4,r2
4000bba0:	180b883a 	mov	r5,r3
4000bba4:	000d883a 	mov	r6,zero
4000bba8:	000f883a 	mov	r7,zero
4000bbac:	1027883a 	mov	r19,r2
4000bbb0:	182b883a 	mov	r21,r3
4000bbb4:	00063140 	call	40006314 <__eqdf2>
4000bbb8:	103f9926 	beq	r2,zero,4000ba20 <__alt_data_end+0xc000ba20>
4000bbbc:	d8c00617 	ldw	r3,24(sp)
4000bbc0:	d9000717 	ldw	r4,28(sp)
4000bbc4:	b825883a 	mov	r18,r23
4000bbc8:	18bfffc4 	addi	r2,r3,-1
4000bbcc:	20ad883a 	add	r22,r4,r2
4000bbd0:	dc000315 	stw	r16,12(sp)
4000bbd4:	00000a06 	br	4000bc00 <_dtoa_r+0x898>
4000bbd8:	00065580 	call	40006558 <__muldf3>
4000bbdc:	1009883a 	mov	r4,r2
4000bbe0:	180b883a 	mov	r5,r3
4000bbe4:	000d883a 	mov	r6,zero
4000bbe8:	000f883a 	mov	r7,zero
4000bbec:	1027883a 	mov	r19,r2
4000bbf0:	182b883a 	mov	r21,r3
4000bbf4:	b825883a 	mov	r18,r23
4000bbf8:	00063140 	call	40006314 <__eqdf2>
4000bbfc:	10022626 	beq	r2,zero,4000c498 <_dtoa_r+0x1130>
4000bc00:	880d883a 	mov	r6,r17
4000bc04:	a00f883a 	mov	r7,r20
4000bc08:	9809883a 	mov	r4,r19
4000bc0c:	a80b883a 	mov	r5,r21
4000bc10:	0005a480 	call	40005a48 <__divdf3>
4000bc14:	180b883a 	mov	r5,r3
4000bc18:	1009883a 	mov	r4,r2
4000bc1c:	000754c0 	call	4000754c <__fixdfsi>
4000bc20:	1009883a 	mov	r4,r2
4000bc24:	1021883a 	mov	r16,r2
4000bc28:	00075d40 	call	400075d4 <__floatsidf>
4000bc2c:	1009883a 	mov	r4,r2
4000bc30:	180b883a 	mov	r5,r3
4000bc34:	880d883a 	mov	r6,r17
4000bc38:	a00f883a 	mov	r7,r20
4000bc3c:	00065580 	call	40006558 <__muldf3>
4000bc40:	9809883a 	mov	r4,r19
4000bc44:	a80b883a 	mov	r5,r21
4000bc48:	100d883a 	mov	r6,r2
4000bc4c:	180f883a 	mov	r7,r3
4000bc50:	0006c7c0 	call	40006c7c <__subdf3>
4000bc54:	82000c04 	addi	r8,r16,48
4000bc58:	92000005 	stb	r8,0(r18)
4000bc5c:	1009883a 	mov	r4,r2
4000bc60:	180b883a 	mov	r5,r3
4000bc64:	000d883a 	mov	r6,zero
4000bc68:	01d00934 	movhi	r7,16420
4000bc6c:	1011883a 	mov	r8,r2
4000bc70:	bdc00044 	addi	r23,r23,1
4000bc74:	95bfd81e 	bne	r18,r22,4000bbd8 <__alt_data_end+0xc000bbd8>
4000bc78:	802d883a 	mov	r22,r16
4000bc7c:	dc000317 	ldw	r16,12(sp)
4000bc80:	4009883a 	mov	r4,r8
4000bc84:	180b883a 	mov	r5,r3
4000bc88:	400d883a 	mov	r6,r8
4000bc8c:	180f883a 	mov	r7,r3
4000bc90:	00051ac0 	call	400051ac <__adddf3>
4000bc94:	8809883a 	mov	r4,r17
4000bc98:	a00b883a 	mov	r5,r20
4000bc9c:	100d883a 	mov	r6,r2
4000bca0:	180f883a 	mov	r7,r3
4000bca4:	1027883a 	mov	r19,r2
4000bca8:	1825883a 	mov	r18,r3
4000bcac:	00064780 	call	40006478 <__ledf2>
4000bcb0:	10000816 	blt	r2,zero,4000bcd4 <_dtoa_r+0x96c>
4000bcb4:	8809883a 	mov	r4,r17
4000bcb8:	a00b883a 	mov	r5,r20
4000bcbc:	980d883a 	mov	r6,r19
4000bcc0:	900f883a 	mov	r7,r18
4000bcc4:	00063140 	call	40006314 <__eqdf2>
4000bcc8:	103f551e 	bne	r2,zero,4000ba20 <__alt_data_end+0xc000ba20>
4000bccc:	b580004c 	andi	r22,r22,1
4000bcd0:	b03f5326 	beq	r22,zero,4000ba20 <__alt_data_end+0xc000ba20>
4000bcd4:	bd7fffc3 	ldbu	r21,-1(r23)
4000bcd8:	b8bfffc4 	addi	r2,r23,-1
4000bcdc:	1007883a 	mov	r3,r2
4000bce0:	01400e44 	movi	r5,57
4000bce4:	d9800717 	ldw	r6,28(sp)
4000bce8:	00000506 	br	4000bd00 <_dtoa_r+0x998>
4000bcec:	18ffffc4 	addi	r3,r3,-1
4000bcf0:	30825e26 	beq	r6,r2,4000c66c <_dtoa_r+0x1304>
4000bcf4:	1d400003 	ldbu	r21,0(r3)
4000bcf8:	102f883a 	mov	r23,r2
4000bcfc:	10bfffc4 	addi	r2,r2,-1
4000bd00:	a9003fcc 	andi	r4,r21,255
4000bd04:	2100201c 	xori	r4,r4,128
4000bd08:	213fe004 	addi	r4,r4,-128
4000bd0c:	217ff726 	beq	r4,r5,4000bcec <__alt_data_end+0xc000bcec>
4000bd10:	aa000044 	addi	r8,r21,1
4000bd14:	12000005 	stb	r8,0(r2)
4000bd18:	003f4106 	br	4000ba20 <__alt_data_end+0xc000ba20>
4000bd1c:	d8c00b17 	ldw	r3,44(sp)
4000bd20:	18006726 	beq	r3,zero,4000bec0 <_dtoa_r+0xb58>
4000bd24:	d9000317 	ldw	r4,12(sp)
4000bd28:	00c00044 	movi	r3,1
4000bd2c:	19016a0e 	bge	r3,r4,4000c2d8 <_dtoa_r+0xf70>
4000bd30:	d8800617 	ldw	r2,24(sp)
4000bd34:	d8c00917 	ldw	r3,36(sp)
4000bd38:	157fffc4 	addi	r21,r2,-1
4000bd3c:	1d420716 	blt	r3,r21,4000c55c <_dtoa_r+0x11f4>
4000bd40:	1d6bc83a 	sub	r21,r3,r21
4000bd44:	d8800617 	ldw	r2,24(sp)
4000bd48:	1002c716 	blt	r2,zero,4000c868 <_dtoa_r+0x1500>
4000bd4c:	dd000817 	ldw	r20,32(sp)
4000bd50:	d8800617 	ldw	r2,24(sp)
4000bd54:	d9800817 	ldw	r6,32(sp)
4000bd58:	8009883a 	mov	r4,r16
4000bd5c:	01400044 	movi	r5,1
4000bd60:	308d883a 	add	r6,r6,r2
4000bd64:	d9800815 	stw	r6,32(sp)
4000bd68:	b0ad883a 	add	r22,r22,r2
4000bd6c:	000e4c40 	call	4000e4c4 <__i2b>
4000bd70:	1023883a 	mov	r17,r2
4000bd74:	a0000826 	beq	r20,zero,4000bd98 <_dtoa_r+0xa30>
4000bd78:	0580070e 	bge	zero,r22,4000bd98 <_dtoa_r+0xa30>
4000bd7c:	b005883a 	mov	r2,r22
4000bd80:	a5812016 	blt	r20,r22,4000c204 <_dtoa_r+0xe9c>
4000bd84:	d8c00817 	ldw	r3,32(sp)
4000bd88:	a0a9c83a 	sub	r20,r20,r2
4000bd8c:	b0adc83a 	sub	r22,r22,r2
4000bd90:	1887c83a 	sub	r3,r3,r2
4000bd94:	d8c00815 	stw	r3,32(sp)
4000bd98:	d9000917 	ldw	r4,36(sp)
4000bd9c:	0100140e 	bge	zero,r4,4000bdf0 <_dtoa_r+0xa88>
4000bda0:	d9800b17 	ldw	r6,44(sp)
4000bda4:	3001e526 	beq	r6,zero,4000c53c <_dtoa_r+0x11d4>
4000bda8:	05400e0e 	bge	zero,r21,4000bde4 <_dtoa_r+0xa7c>
4000bdac:	880b883a 	mov	r5,r17
4000bdb0:	8009883a 	mov	r4,r16
4000bdb4:	a80d883a 	mov	r6,r21
4000bdb8:	000e6fc0 	call	4000e6fc <__pow5mult>
4000bdbc:	e00d883a 	mov	r6,fp
4000bdc0:	8009883a 	mov	r4,r16
4000bdc4:	100b883a 	mov	r5,r2
4000bdc8:	1023883a 	mov	r17,r2
4000bdcc:	000e5000 	call	4000e500 <__multiply>
4000bdd0:	102f883a 	mov	r23,r2
4000bdd4:	e00b883a 	mov	r5,fp
4000bdd8:	8009883a 	mov	r4,r16
4000bddc:	000e16c0 	call	4000e16c <_Bfree>
4000bde0:	b839883a 	mov	fp,r23
4000bde4:	d8800917 	ldw	r2,36(sp)
4000bde8:	154dc83a 	sub	r6,r2,r21
4000bdec:	3001281e 	bne	r6,zero,4000c290 <_dtoa_r+0xf28>
4000bdf0:	05c00044 	movi	r23,1
4000bdf4:	8009883a 	mov	r4,r16
4000bdf8:	b80b883a 	mov	r5,r23
4000bdfc:	000e4c40 	call	4000e4c4 <__i2b>
4000be00:	d8c00a17 	ldw	r3,40(sp)
4000be04:	102b883a 	mov	r21,r2
4000be08:	00c0310e 	bge	zero,r3,4000bed0 <_dtoa_r+0xb68>
4000be0c:	8009883a 	mov	r4,r16
4000be10:	100b883a 	mov	r5,r2
4000be14:	180d883a 	mov	r6,r3
4000be18:	000e6fc0 	call	4000e6fc <__pow5mult>
4000be1c:	d9000317 	ldw	r4,12(sp)
4000be20:	102b883a 	mov	r21,r2
4000be24:	b9011f0e 	bge	r23,r4,4000c2a4 <_dtoa_r+0xf3c>
4000be28:	0027883a 	mov	r19,zero
4000be2c:	a8800417 	ldw	r2,16(r21)
4000be30:	10800104 	addi	r2,r2,4
4000be34:	1085883a 	add	r2,r2,r2
4000be38:	1085883a 	add	r2,r2,r2
4000be3c:	a885883a 	add	r2,r21,r2
4000be40:	11000017 	ldw	r4,0(r2)
4000be44:	000e3ac0 	call	4000e3ac <__hi0bits>
4000be48:	00c00804 	movi	r3,32
4000be4c:	1885c83a 	sub	r2,r3,r2
4000be50:	00002506 	br	4000bee8 <_dtoa_r+0xb80>
4000be54:	01800044 	movi	r6,1
4000be58:	d9800c15 	stw	r6,48(sp)
4000be5c:	003dec06 	br	4000b610 <__alt_data_end+0xc000b610>
4000be60:	d8c00817 	ldw	r3,32(sp)
4000be64:	d9000517 	ldw	r4,20(sp)
4000be68:	d8000a15 	stw	zero,40(sp)
4000be6c:	1907c83a 	sub	r3,r3,r4
4000be70:	010dc83a 	sub	r6,zero,r4
4000be74:	d8c00815 	stw	r3,32(sp)
4000be78:	d9800915 	stw	r6,36(sp)
4000be7c:	003ded06 	br	4000b634 <__alt_data_end+0xc000b634>
4000be80:	05adc83a 	sub	r22,zero,r22
4000be84:	dd800815 	stw	r22,32(sp)
4000be88:	002d883a 	mov	r22,zero
4000be8c:	003de406 	br	4000b620 <__alt_data_end+0xc000b620>
4000be90:	d9000517 	ldw	r4,20(sp)
4000be94:	00075d40 	call	400075d4 <__floatsidf>
4000be98:	1009883a 	mov	r4,r2
4000be9c:	180b883a 	mov	r5,r3
4000bea0:	b00d883a 	mov	r6,r22
4000bea4:	a80f883a 	mov	r7,r21
4000bea8:	00063140 	call	40006314 <__eqdf2>
4000beac:	103dc726 	beq	r2,zero,4000b5cc <__alt_data_end+0xc000b5cc>
4000beb0:	d8800517 	ldw	r2,20(sp)
4000beb4:	10bfffc4 	addi	r2,r2,-1
4000beb8:	d8800515 	stw	r2,20(sp)
4000bebc:	003dc306 	br	4000b5cc <__alt_data_end+0xc000b5cc>
4000bec0:	dd400917 	ldw	r21,36(sp)
4000bec4:	dd000817 	ldw	r20,32(sp)
4000bec8:	0023883a 	mov	r17,zero
4000becc:	003fa906 	br	4000bd74 <__alt_data_end+0xc000bd74>
4000bed0:	d9800317 	ldw	r6,12(sp)
4000bed4:	b981670e 	bge	r23,r6,4000c474 <_dtoa_r+0x110c>
4000bed8:	0027883a 	mov	r19,zero
4000bedc:	d8c00a17 	ldw	r3,40(sp)
4000bee0:	183fd21e 	bne	r3,zero,4000be2c <__alt_data_end+0xc000be2c>
4000bee4:	00800044 	movi	r2,1
4000bee8:	1585883a 	add	r2,r2,r22
4000beec:	108007cc 	andi	r2,r2,31
4000bef0:	10005f26 	beq	r2,zero,4000c070 <_dtoa_r+0xd08>
4000bef4:	00c00804 	movi	r3,32
4000bef8:	1887c83a 	sub	r3,r3,r2
4000befc:	01000104 	movi	r4,4
4000bf00:	20c2dd0e 	bge	r4,r3,4000ca78 <_dtoa_r+0x1710>
4000bf04:	d9000817 	ldw	r4,32(sp)
4000bf08:	00c00704 	movi	r3,28
4000bf0c:	1885c83a 	sub	r2,r3,r2
4000bf10:	2089883a 	add	r4,r4,r2
4000bf14:	d9000815 	stw	r4,32(sp)
4000bf18:	a0a9883a 	add	r20,r20,r2
4000bf1c:	b0ad883a 	add	r22,r22,r2
4000bf20:	d8800817 	ldw	r2,32(sp)
4000bf24:	0080050e 	bge	zero,r2,4000bf3c <_dtoa_r+0xbd4>
4000bf28:	e00b883a 	mov	r5,fp
4000bf2c:	8009883a 	mov	r4,r16
4000bf30:	100d883a 	mov	r6,r2
4000bf34:	000e83c0 	call	4000e83c <__lshift>
4000bf38:	1039883a 	mov	fp,r2
4000bf3c:	0580050e 	bge	zero,r22,4000bf54 <_dtoa_r+0xbec>
4000bf40:	a80b883a 	mov	r5,r21
4000bf44:	8009883a 	mov	r4,r16
4000bf48:	b00d883a 	mov	r6,r22
4000bf4c:	000e83c0 	call	4000e83c <__lshift>
4000bf50:	102b883a 	mov	r21,r2
4000bf54:	d8c00c17 	ldw	r3,48(sp)
4000bf58:	1801161e 	bne	r3,zero,4000c3b4 <_dtoa_r+0x104c>
4000bf5c:	d8c00617 	ldw	r3,24(sp)
4000bf60:	00c12d0e 	bge	zero,r3,4000c418 <_dtoa_r+0x10b0>
4000bf64:	d8c00b17 	ldw	r3,44(sp)
4000bf68:	1800571e 	bne	r3,zero,4000c0c8 <_dtoa_r+0xd60>
4000bf6c:	dc800717 	ldw	r18,28(sp)
4000bf70:	dcc00617 	ldw	r19,24(sp)
4000bf74:	9029883a 	mov	r20,r18
4000bf78:	00000206 	br	4000bf84 <_dtoa_r+0xc1c>
4000bf7c:	000e1940 	call	4000e194 <__multadd>
4000bf80:	1039883a 	mov	fp,r2
4000bf84:	e009883a 	mov	r4,fp
4000bf88:	a80b883a 	mov	r5,r21
4000bf8c:	000b1680 	call	4000b168 <quorem>
4000bf90:	10800c04 	addi	r2,r2,48
4000bf94:	90800005 	stb	r2,0(r18)
4000bf98:	94800044 	addi	r18,r18,1
4000bf9c:	9507c83a 	sub	r3,r18,r20
4000bfa0:	8009883a 	mov	r4,r16
4000bfa4:	e00b883a 	mov	r5,fp
4000bfa8:	01800284 	movi	r6,10
4000bfac:	000f883a 	mov	r7,zero
4000bfb0:	1cfff216 	blt	r3,r19,4000bf7c <__alt_data_end+0xc000bf7c>
4000bfb4:	1011883a 	mov	r8,r2
4000bfb8:	d8800617 	ldw	r2,24(sp)
4000bfbc:	00822e0e 	bge	zero,r2,4000c878 <_dtoa_r+0x1510>
4000bfc0:	d9000717 	ldw	r4,28(sp)
4000bfc4:	0025883a 	mov	r18,zero
4000bfc8:	20af883a 	add	r23,r4,r2
4000bfcc:	e00b883a 	mov	r5,fp
4000bfd0:	01800044 	movi	r6,1
4000bfd4:	8009883a 	mov	r4,r16
4000bfd8:	da001715 	stw	r8,92(sp)
4000bfdc:	000e83c0 	call	4000e83c <__lshift>
4000bfe0:	1009883a 	mov	r4,r2
4000bfe4:	a80b883a 	mov	r5,r21
4000bfe8:	1039883a 	mov	fp,r2
4000bfec:	000e9840 	call	4000e984 <__mcmp>
4000bff0:	da001717 	ldw	r8,92(sp)
4000bff4:	00816e0e 	bge	zero,r2,4000c5b0 <_dtoa_r+0x1248>
4000bff8:	b93fffc3 	ldbu	r4,-1(r23)
4000bffc:	b8bfffc4 	addi	r2,r23,-1
4000c000:	1007883a 	mov	r3,r2
4000c004:	01800e44 	movi	r6,57
4000c008:	d9c00717 	ldw	r7,28(sp)
4000c00c:	00000506 	br	4000c024 <_dtoa_r+0xcbc>
4000c010:	18ffffc4 	addi	r3,r3,-1
4000c014:	38811926 	beq	r7,r2,4000c47c <_dtoa_r+0x1114>
4000c018:	19000003 	ldbu	r4,0(r3)
4000c01c:	102f883a 	mov	r23,r2
4000c020:	10bfffc4 	addi	r2,r2,-1
4000c024:	21403fcc 	andi	r5,r4,255
4000c028:	2940201c 	xori	r5,r5,128
4000c02c:	297fe004 	addi	r5,r5,-128
4000c030:	29bff726 	beq	r5,r6,4000c010 <__alt_data_end+0xc000c010>
4000c034:	21000044 	addi	r4,r4,1
4000c038:	11000005 	stb	r4,0(r2)
4000c03c:	8009883a 	mov	r4,r16
4000c040:	a80b883a 	mov	r5,r21
4000c044:	000e16c0 	call	4000e16c <_Bfree>
4000c048:	883e7526 	beq	r17,zero,4000ba20 <__alt_data_end+0xc000ba20>
4000c04c:	90000426 	beq	r18,zero,4000c060 <_dtoa_r+0xcf8>
4000c050:	94400326 	beq	r18,r17,4000c060 <_dtoa_r+0xcf8>
4000c054:	8009883a 	mov	r4,r16
4000c058:	900b883a 	mov	r5,r18
4000c05c:	000e16c0 	call	4000e16c <_Bfree>
4000c060:	8009883a 	mov	r4,r16
4000c064:	880b883a 	mov	r5,r17
4000c068:	000e16c0 	call	4000e16c <_Bfree>
4000c06c:	003e6c06 	br	4000ba20 <__alt_data_end+0xc000ba20>
4000c070:	00800704 	movi	r2,28
4000c074:	d9800817 	ldw	r6,32(sp)
4000c078:	a0a9883a 	add	r20,r20,r2
4000c07c:	b0ad883a 	add	r22,r22,r2
4000c080:	308d883a 	add	r6,r6,r2
4000c084:	d9800815 	stw	r6,32(sp)
4000c088:	003fa506 	br	4000bf20 <__alt_data_end+0xc000bf20>
4000c08c:	013efb84 	movi	r4,-1042
4000c090:	246bc83a 	sub	r21,r4,r17
4000c094:	9548983a 	sll	r4,r18,r21
4000c098:	003d1806 	br	4000b4fc <__alt_data_end+0xc000b4fc>
4000c09c:	d8000c15 	stw	zero,48(sp)
4000c0a0:	003d5b06 	br	4000b610 <__alt_data_end+0xc000b610>
4000c0a4:	880b883a 	mov	r5,r17
4000c0a8:	8009883a 	mov	r4,r16
4000c0ac:	01800284 	movi	r6,10
4000c0b0:	000f883a 	mov	r7,zero
4000c0b4:	000e1940 	call	4000e194 <__multadd>
4000c0b8:	1023883a 	mov	r17,r2
4000c0bc:	d8800d17 	ldw	r2,52(sp)
4000c0c0:	0082550e 	bge	zero,r2,4000ca18 <_dtoa_r+0x16b0>
4000c0c4:	d8800615 	stw	r2,24(sp)
4000c0c8:	0500050e 	bge	zero,r20,4000c0e0 <_dtoa_r+0xd78>
4000c0cc:	880b883a 	mov	r5,r17
4000c0d0:	8009883a 	mov	r4,r16
4000c0d4:	a00d883a 	mov	r6,r20
4000c0d8:	000e83c0 	call	4000e83c <__lshift>
4000c0dc:	1023883a 	mov	r17,r2
4000c0e0:	98016a1e 	bne	r19,zero,4000c68c <_dtoa_r+0x1324>
4000c0e4:	8829883a 	mov	r20,r17
4000c0e8:	d9000617 	ldw	r4,24(sp)
4000c0ec:	dcc00717 	ldw	r19,28(sp)
4000c0f0:	9480004c 	andi	r18,r18,1
4000c0f4:	20bfffc4 	addi	r2,r4,-1
4000c0f8:	9885883a 	add	r2,r19,r2
4000c0fc:	d8800415 	stw	r2,16(sp)
4000c100:	dc800615 	stw	r18,24(sp)
4000c104:	e009883a 	mov	r4,fp
4000c108:	a80b883a 	mov	r5,r21
4000c10c:	000b1680 	call	4000b168 <quorem>
4000c110:	e009883a 	mov	r4,fp
4000c114:	880b883a 	mov	r5,r17
4000c118:	102f883a 	mov	r23,r2
4000c11c:	000e9840 	call	4000e984 <__mcmp>
4000c120:	8009883a 	mov	r4,r16
4000c124:	a80b883a 	mov	r5,r21
4000c128:	a00d883a 	mov	r6,r20
4000c12c:	102d883a 	mov	r22,r2
4000c130:	000e9e40 	call	4000e9e4 <__mdiff>
4000c134:	1007883a 	mov	r3,r2
4000c138:	10800317 	ldw	r2,12(r2)
4000c13c:	bc800c04 	addi	r18,r23,48
4000c140:	1000971e 	bne	r2,zero,4000c3a0 <_dtoa_r+0x1038>
4000c144:	180b883a 	mov	r5,r3
4000c148:	e009883a 	mov	r4,fp
4000c14c:	d8c01515 	stw	r3,84(sp)
4000c150:	000e9840 	call	4000e984 <__mcmp>
4000c154:	d8c01517 	ldw	r3,84(sp)
4000c158:	8009883a 	mov	r4,r16
4000c15c:	d8801515 	stw	r2,84(sp)
4000c160:	180b883a 	mov	r5,r3
4000c164:	000e16c0 	call	4000e16c <_Bfree>
4000c168:	d8801517 	ldw	r2,84(sp)
4000c16c:	1000041e 	bne	r2,zero,4000c180 <_dtoa_r+0xe18>
4000c170:	d9800317 	ldw	r6,12(sp)
4000c174:	3000021e 	bne	r6,zero,4000c180 <_dtoa_r+0xe18>
4000c178:	d8c00617 	ldw	r3,24(sp)
4000c17c:	18007626 	beq	r3,zero,4000c358 <_dtoa_r+0xff0>
4000c180:	b0005b16 	blt	r22,zero,4000c2f0 <_dtoa_r+0xf88>
4000c184:	b000041e 	bne	r22,zero,4000c198 <_dtoa_r+0xe30>
4000c188:	d9000317 	ldw	r4,12(sp)
4000c18c:	2000021e 	bne	r4,zero,4000c198 <_dtoa_r+0xe30>
4000c190:	d8c00617 	ldw	r3,24(sp)
4000c194:	18005626 	beq	r3,zero,4000c2f0 <_dtoa_r+0xf88>
4000c198:	00814d16 	blt	zero,r2,4000c6d0 <_dtoa_r+0x1368>
4000c19c:	d8c00417 	ldw	r3,16(sp)
4000c1a0:	9d800044 	addi	r22,r19,1
4000c1a4:	9c800005 	stb	r18,0(r19)
4000c1a8:	b02f883a 	mov	r23,r22
4000c1ac:	98c14c26 	beq	r19,r3,4000c6e0 <_dtoa_r+0x1378>
4000c1b0:	e00b883a 	mov	r5,fp
4000c1b4:	8009883a 	mov	r4,r16
4000c1b8:	01800284 	movi	r6,10
4000c1bc:	000f883a 	mov	r7,zero
4000c1c0:	000e1940 	call	4000e194 <__multadd>
4000c1c4:	1039883a 	mov	fp,r2
4000c1c8:	8d006d26 	beq	r17,r20,4000c380 <_dtoa_r+0x1018>
4000c1cc:	880b883a 	mov	r5,r17
4000c1d0:	01800284 	movi	r6,10
4000c1d4:	000f883a 	mov	r7,zero
4000c1d8:	8009883a 	mov	r4,r16
4000c1dc:	000e1940 	call	4000e194 <__multadd>
4000c1e0:	a00b883a 	mov	r5,r20
4000c1e4:	8009883a 	mov	r4,r16
4000c1e8:	01800284 	movi	r6,10
4000c1ec:	000f883a 	mov	r7,zero
4000c1f0:	1023883a 	mov	r17,r2
4000c1f4:	000e1940 	call	4000e194 <__multadd>
4000c1f8:	1029883a 	mov	r20,r2
4000c1fc:	b027883a 	mov	r19,r22
4000c200:	003fc006 	br	4000c104 <__alt_data_end+0xc000c104>
4000c204:	a005883a 	mov	r2,r20
4000c208:	003ede06 	br	4000bd84 <__alt_data_end+0xc000bd84>
4000c20c:	01000044 	movi	r4,1
4000c210:	d9000b15 	stw	r4,44(sp)
4000c214:	d9802217 	ldw	r6,136(sp)
4000c218:	0180dc0e 	bge	zero,r6,4000c58c <_dtoa_r+0x1224>
4000c21c:	3023883a 	mov	r17,r6
4000c220:	d9800d15 	stw	r6,52(sp)
4000c224:	d9800615 	stw	r6,24(sp)
4000c228:	003d1e06 	br	4000b6a4 <__alt_data_end+0xc000b6a4>
4000c22c:	d8800617 	ldw	r2,24(sp)
4000c230:	00be3716 	blt	zero,r2,4000bb10 <__alt_data_end+0xc000bb10>
4000c234:	1000be1e 	bne	r2,zero,4000c530 <_dtoa_r+0x11c8>
4000c238:	8809883a 	mov	r4,r17
4000c23c:	a00b883a 	mov	r5,r20
4000c240:	000d883a 	mov	r6,zero
4000c244:	01d00534 	movhi	r7,16404
4000c248:	00065580 	call	40006558 <__muldf3>
4000c24c:	1009883a 	mov	r4,r2
4000c250:	180b883a 	mov	r5,r3
4000c254:	900d883a 	mov	r6,r18
4000c258:	980f883a 	mov	r7,r19
4000c25c:	00063980 	call	40006398 <__gedf2>
4000c260:	002b883a 	mov	r21,zero
4000c264:	0023883a 	mov	r17,zero
4000c268:	10007a16 	blt	r2,zero,4000c454 <_dtoa_r+0x10ec>
4000c26c:	d9002217 	ldw	r4,136(sp)
4000c270:	ddc00717 	ldw	r23,28(sp)
4000c274:	0108303a 	nor	r4,zero,r4
4000c278:	d9000515 	stw	r4,20(sp)
4000c27c:	8009883a 	mov	r4,r16
4000c280:	a80b883a 	mov	r5,r21
4000c284:	000e16c0 	call	4000e16c <_Bfree>
4000c288:	883f751e 	bne	r17,zero,4000c060 <__alt_data_end+0xc000c060>
4000c28c:	003de406 	br	4000ba20 <__alt_data_end+0xc000ba20>
4000c290:	e00b883a 	mov	r5,fp
4000c294:	8009883a 	mov	r4,r16
4000c298:	000e6fc0 	call	4000e6fc <__pow5mult>
4000c29c:	1039883a 	mov	fp,r2
4000c2a0:	003ed306 	br	4000bdf0 <__alt_data_end+0xc000bdf0>
4000c2a4:	903ee01e 	bne	r18,zero,4000be28 <__alt_data_end+0xc000be28>
4000c2a8:	00800434 	movhi	r2,16
4000c2ac:	10bfffc4 	addi	r2,r2,-1
4000c2b0:	9884703a 	and	r2,r19,r2
4000c2b4:	103f081e 	bne	r2,zero,4000bed8 <__alt_data_end+0xc000bed8>
4000c2b8:	9cdffc2c 	andhi	r19,r19,32752
4000c2bc:	983f0626 	beq	r19,zero,4000bed8 <__alt_data_end+0xc000bed8>
4000c2c0:	d8800817 	ldw	r2,32(sp)
4000c2c4:	b5800044 	addi	r22,r22,1
4000c2c8:	04c00044 	movi	r19,1
4000c2cc:	10800044 	addi	r2,r2,1
4000c2d0:	d8800815 	stw	r2,32(sp)
4000c2d4:	003f0106 	br	4000bedc <__alt_data_end+0xc000bedc>
4000c2d8:	d9800f17 	ldw	r6,60(sp)
4000c2dc:	30016826 	beq	r6,zero,4000c880 <_dtoa_r+0x1518>
4000c2e0:	10810cc4 	addi	r2,r2,1075
4000c2e4:	dd400917 	ldw	r21,36(sp)
4000c2e8:	dd000817 	ldw	r20,32(sp)
4000c2ec:	003e9906 	br	4000bd54 <__alt_data_end+0xc000bd54>
4000c2f0:	9011883a 	mov	r8,r18
4000c2f4:	4007883a 	mov	r3,r8
4000c2f8:	e02d883a 	mov	r22,fp
4000c2fc:	0080100e 	bge	zero,r2,4000c340 <_dtoa_r+0xfd8>
4000c300:	01800044 	movi	r6,1
4000c304:	8009883a 	mov	r4,r16
4000c308:	e00b883a 	mov	r5,fp
4000c30c:	da001515 	stw	r8,84(sp)
4000c310:	da001715 	stw	r8,92(sp)
4000c314:	000e83c0 	call	4000e83c <__lshift>
4000c318:	1009883a 	mov	r4,r2
4000c31c:	a80b883a 	mov	r5,r21
4000c320:	102d883a 	mov	r22,r2
4000c324:	000e9840 	call	4000e984 <__mcmp>
4000c328:	d8c01517 	ldw	r3,84(sp)
4000c32c:	da001717 	ldw	r8,92(sp)
4000c330:	0081a50e 	bge	zero,r2,4000c9c8 <_dtoa_r+0x1660>
4000c334:	00800e44 	movi	r2,57
4000c338:	40817b26 	beq	r8,r2,4000c928 <_dtoa_r+0x15c0>
4000c33c:	40c00044 	addi	r3,r8,1
4000c340:	8825883a 	mov	r18,r17
4000c344:	9dc00044 	addi	r23,r19,1
4000c348:	98c00005 	stb	r3,0(r19)
4000c34c:	a023883a 	mov	r17,r20
4000c350:	b039883a 	mov	fp,r22
4000c354:	003f3906 	br	4000c03c <__alt_data_end+0xc000c03c>
4000c358:	00800e44 	movi	r2,57
4000c35c:	9011883a 	mov	r8,r18
4000c360:	90817226 	beq	r18,r2,4000c92c <_dtoa_r+0x15c4>
4000c364:	0580010e 	bge	zero,r22,4000c36c <_dtoa_r+0x1004>
4000c368:	ba000c44 	addi	r8,r23,49
4000c36c:	8825883a 	mov	r18,r17
4000c370:	9dc00044 	addi	r23,r19,1
4000c374:	9a000005 	stb	r8,0(r19)
4000c378:	a023883a 	mov	r17,r20
4000c37c:	003f2f06 	br	4000c03c <__alt_data_end+0xc000c03c>
4000c380:	880b883a 	mov	r5,r17
4000c384:	8009883a 	mov	r4,r16
4000c388:	01800284 	movi	r6,10
4000c38c:	000f883a 	mov	r7,zero
4000c390:	000e1940 	call	4000e194 <__multadd>
4000c394:	1023883a 	mov	r17,r2
4000c398:	1029883a 	mov	r20,r2
4000c39c:	003f9706 	br	4000c1fc <__alt_data_end+0xc000c1fc>
4000c3a0:	8009883a 	mov	r4,r16
4000c3a4:	180b883a 	mov	r5,r3
4000c3a8:	000e16c0 	call	4000e16c <_Bfree>
4000c3ac:	00800044 	movi	r2,1
4000c3b0:	003f7306 	br	4000c180 <__alt_data_end+0xc000c180>
4000c3b4:	e009883a 	mov	r4,fp
4000c3b8:	a80b883a 	mov	r5,r21
4000c3bc:	000e9840 	call	4000e984 <__mcmp>
4000c3c0:	103ee60e 	bge	r2,zero,4000bf5c <__alt_data_end+0xc000bf5c>
4000c3c4:	8009883a 	mov	r4,r16
4000c3c8:	e00b883a 	mov	r5,fp
4000c3cc:	01800284 	movi	r6,10
4000c3d0:	000f883a 	mov	r7,zero
4000c3d4:	000e1940 	call	4000e194 <__multadd>
4000c3d8:	d9000517 	ldw	r4,20(sp)
4000c3dc:	d9800b17 	ldw	r6,44(sp)
4000c3e0:	1039883a 	mov	fp,r2
4000c3e4:	213fffc4 	addi	r4,r4,-1
4000c3e8:	d9000515 	stw	r4,20(sp)
4000c3ec:	303f2d1e 	bne	r6,zero,4000c0a4 <__alt_data_end+0xc000c0a4>
4000c3f0:	d9000d17 	ldw	r4,52(sp)
4000c3f4:	0101780e 	bge	zero,r4,4000c9d8 <_dtoa_r+0x1670>
4000c3f8:	d9000615 	stw	r4,24(sp)
4000c3fc:	003edb06 	br	4000bf6c <__alt_data_end+0xc000bf6c>
4000c400:	00800084 	movi	r2,2
4000c404:	30818e1e 	bne	r6,r2,4000ca40 <_dtoa_r+0x16d8>
4000c408:	d8000b15 	stw	zero,44(sp)
4000c40c:	003f8106 	br	4000c214 <__alt_data_end+0xc000c214>
4000c410:	d8800717 	ldw	r2,28(sp)
4000c414:	003c0306 	br	4000b424 <__alt_data_end+0xc000b424>
4000c418:	d9000317 	ldw	r4,12(sp)
4000c41c:	00800084 	movi	r2,2
4000c420:	113ed00e 	bge	r2,r4,4000bf64 <__alt_data_end+0xc000bf64>
4000c424:	d8c00617 	ldw	r3,24(sp)
4000c428:	183f901e 	bne	r3,zero,4000c26c <__alt_data_end+0xc000c26c>
4000c42c:	a80b883a 	mov	r5,r21
4000c430:	8009883a 	mov	r4,r16
4000c434:	01800144 	movi	r6,5
4000c438:	000f883a 	mov	r7,zero
4000c43c:	000e1940 	call	4000e194 <__multadd>
4000c440:	e009883a 	mov	r4,fp
4000c444:	100b883a 	mov	r5,r2
4000c448:	102b883a 	mov	r21,r2
4000c44c:	000e9840 	call	4000e984 <__mcmp>
4000c450:	00bf860e 	bge	zero,r2,4000c26c <__alt_data_end+0xc000c26c>
4000c454:	d9800717 	ldw	r6,28(sp)
4000c458:	00800c44 	movi	r2,49
4000c45c:	30800005 	stb	r2,0(r6)
4000c460:	d8800517 	ldw	r2,20(sp)
4000c464:	35c00044 	addi	r23,r6,1
4000c468:	10800044 	addi	r2,r2,1
4000c46c:	d8800515 	stw	r2,20(sp)
4000c470:	003f8206 	br	4000c27c <__alt_data_end+0xc000c27c>
4000c474:	903e981e 	bne	r18,zero,4000bed8 <__alt_data_end+0xc000bed8>
4000c478:	003f8b06 	br	4000c2a8 <__alt_data_end+0xc000c2a8>
4000c47c:	d9800517 	ldw	r6,20(sp)
4000c480:	d8c00717 	ldw	r3,28(sp)
4000c484:	00800c44 	movi	r2,49
4000c488:	31800044 	addi	r6,r6,1
4000c48c:	d9800515 	stw	r6,20(sp)
4000c490:	18800005 	stb	r2,0(r3)
4000c494:	003ee906 	br	4000c03c <__alt_data_end+0xc000c03c>
4000c498:	dc000317 	ldw	r16,12(sp)
4000c49c:	003d6006 	br	4000ba20 <__alt_data_end+0xc000ba20>
4000c4a0:	8809883a 	mov	r4,r17
4000c4a4:	00075d40 	call	400075d4 <__floatsidf>
4000c4a8:	a009883a 	mov	r4,r20
4000c4ac:	a80b883a 	mov	r5,r21
4000c4b0:	100d883a 	mov	r6,r2
4000c4b4:	180f883a 	mov	r7,r3
4000c4b8:	00065580 	call	40006558 <__muldf3>
4000c4bc:	1009883a 	mov	r4,r2
4000c4c0:	180b883a 	mov	r5,r3
4000c4c4:	000d883a 	mov	r6,zero
4000c4c8:	01d00734 	movhi	r7,16412
4000c4cc:	00051ac0 	call	400051ac <__adddf3>
4000c4d0:	1023883a 	mov	r17,r2
4000c4d4:	00bf3034 	movhi	r2,64704
4000c4d8:	1885883a 	add	r2,r3,r2
4000c4dc:	d8800e15 	stw	r2,56(sp)
4000c4e0:	a009883a 	mov	r4,r20
4000c4e4:	a80b883a 	mov	r5,r21
4000c4e8:	000d883a 	mov	r6,zero
4000c4ec:	01d00534 	movhi	r7,16404
4000c4f0:	0006c7c0 	call	40006c7c <__subdf3>
4000c4f4:	d9c00e17 	ldw	r7,56(sp)
4000c4f8:	1009883a 	mov	r4,r2
4000c4fc:	180b883a 	mov	r5,r3
4000c500:	880d883a 	mov	r6,r17
4000c504:	102b883a 	mov	r21,r2
4000c508:	1829883a 	mov	r20,r3
4000c50c:	00063980 	call	40006398 <__gedf2>
4000c510:	00807716 	blt	zero,r2,4000c6f0 <_dtoa_r+0x1388>
4000c514:	d8800e17 	ldw	r2,56(sp)
4000c518:	a809883a 	mov	r4,r21
4000c51c:	a00b883a 	mov	r5,r20
4000c520:	11e0003c 	xorhi	r7,r2,32768
4000c524:	880d883a 	mov	r6,r17
4000c528:	00064780 	call	40006478 <__ledf2>
4000c52c:	103d6b0e 	bge	r2,zero,4000badc <__alt_data_end+0xc000badc>
4000c530:	002b883a 	mov	r21,zero
4000c534:	0023883a 	mov	r17,zero
4000c538:	003f4c06 	br	4000c26c <__alt_data_end+0xc000c26c>
4000c53c:	d9800917 	ldw	r6,36(sp)
4000c540:	e00b883a 	mov	r5,fp
4000c544:	8009883a 	mov	r4,r16
4000c548:	000e6fc0 	call	4000e6fc <__pow5mult>
4000c54c:	1039883a 	mov	fp,r2
4000c550:	003e2706 	br	4000bdf0 <__alt_data_end+0xc000bdf0>
4000c554:	d8000b15 	stw	zero,44(sp)
4000c558:	003c4906 	br	4000b680 <__alt_data_end+0xc000b680>
4000c55c:	d9000917 	ldw	r4,36(sp)
4000c560:	d9800a17 	ldw	r6,40(sp)
4000c564:	dd400915 	stw	r21,36(sp)
4000c568:	a905c83a 	sub	r2,r21,r4
4000c56c:	308d883a 	add	r6,r6,r2
4000c570:	d9800a15 	stw	r6,40(sp)
4000c574:	002b883a 	mov	r21,zero
4000c578:	003df206 	br	4000bd44 <__alt_data_end+0xc000bd44>
4000c57c:	dc800e15 	stw	r18,56(sp)
4000c580:	982b883a 	mov	r21,r19
4000c584:	04400084 	movi	r17,2
4000c588:	003c7406 	br	4000b75c <__alt_data_end+0xc000b75c>
4000c58c:	04400044 	movi	r17,1
4000c590:	dc400d15 	stw	r17,52(sp)
4000c594:	dc400615 	stw	r17,24(sp)
4000c598:	dc402215 	stw	r17,136(sp)
4000c59c:	80001115 	stw	zero,68(r16)
4000c5a0:	000b883a 	mov	r5,zero
4000c5a4:	003c4a06 	br	4000b6d0 <__alt_data_end+0xc000b6d0>
4000c5a8:	3023883a 	mov	r17,r6
4000c5ac:	003ffb06 	br	4000c59c <__alt_data_end+0xc000c59c>
4000c5b0:	1000021e 	bne	r2,zero,4000c5bc <_dtoa_r+0x1254>
4000c5b4:	4200004c 	andi	r8,r8,1
4000c5b8:	403e8f1e 	bne	r8,zero,4000bff8 <__alt_data_end+0xc000bff8>
4000c5bc:	01000c04 	movi	r4,48
4000c5c0:	00000106 	br	4000c5c8 <_dtoa_r+0x1260>
4000c5c4:	102f883a 	mov	r23,r2
4000c5c8:	b8bfffc4 	addi	r2,r23,-1
4000c5cc:	10c00007 	ldb	r3,0(r2)
4000c5d0:	193ffc26 	beq	r3,r4,4000c5c4 <__alt_data_end+0xc000c5c4>
4000c5d4:	003e9906 	br	4000c03c <__alt_data_end+0xc000c03c>
4000c5d8:	d9000517 	ldw	r4,20(sp)
4000c5dc:	012fc83a 	sub	r23,zero,r4
4000c5e0:	b800ad26 	beq	r23,zero,4000c898 <_dtoa_r+0x1530>
4000c5e4:	b88003cc 	andi	r2,r23,15
4000c5e8:	100490fa 	slli	r2,r2,3
4000c5ec:	00d00074 	movhi	r3,16385
4000c5f0:	18d40804 	addi	r3,r3,20512
4000c5f4:	1885883a 	add	r2,r3,r2
4000c5f8:	11800017 	ldw	r6,0(r2)
4000c5fc:	11c00117 	ldw	r7,4(r2)
4000c600:	b82fd13a 	srai	r23,r23,4
4000c604:	9009883a 	mov	r4,r18
4000c608:	980b883a 	mov	r5,r19
4000c60c:	00065580 	call	40006558 <__muldf3>
4000c610:	1029883a 	mov	r20,r2
4000c614:	182b883a 	mov	r21,r3
4000c618:	b800f426 	beq	r23,zero,4000c9ec <_dtoa_r+0x1684>
4000c61c:	02100074 	movhi	r8,16385
4000c620:	4213fe04 	addi	r8,r8,20472
4000c624:	8029883a 	mov	r20,r16
4000c628:	04400084 	movi	r17,2
4000c62c:	4021883a 	mov	r16,r8
4000c630:	b980004c 	andi	r6,r23,1
4000c634:	1009883a 	mov	r4,r2
4000c638:	b82fd07a 	srai	r23,r23,1
4000c63c:	180b883a 	mov	r5,r3
4000c640:	30000426 	beq	r6,zero,4000c654 <_dtoa_r+0x12ec>
4000c644:	81800017 	ldw	r6,0(r16)
4000c648:	81c00117 	ldw	r7,4(r16)
4000c64c:	8c400044 	addi	r17,r17,1
4000c650:	00065580 	call	40006558 <__muldf3>
4000c654:	84000204 	addi	r16,r16,8
4000c658:	b83ff51e 	bne	r23,zero,4000c630 <__alt_data_end+0xc000c630>
4000c65c:	a021883a 	mov	r16,r20
4000c660:	182b883a 	mov	r21,r3
4000c664:	1029883a 	mov	r20,r2
4000c668:	003c5506 	br	4000b7c0 <__alt_data_end+0xc000b7c0>
4000c66c:	d9800517 	ldw	r6,20(sp)
4000c670:	d9000717 	ldw	r4,28(sp)
4000c674:	00c00c04 	movi	r3,48
4000c678:	31800044 	addi	r6,r6,1
4000c67c:	d9800515 	stw	r6,20(sp)
4000c680:	20c00005 	stb	r3,0(r4)
4000c684:	02000c44 	movi	r8,49
4000c688:	003da206 	br	4000bd14 <__alt_data_end+0xc000bd14>
4000c68c:	89400117 	ldw	r5,4(r17)
4000c690:	8009883a 	mov	r4,r16
4000c694:	000e0c40 	call	4000e0c4 <_Balloc>
4000c698:	89800417 	ldw	r6,16(r17)
4000c69c:	11000304 	addi	r4,r2,12
4000c6a0:	89400304 	addi	r5,r17,12
4000c6a4:	31800084 	addi	r6,r6,2
4000c6a8:	318d883a 	add	r6,r6,r6
4000c6ac:	318d883a 	add	r6,r6,r6
4000c6b0:	1027883a 	mov	r19,r2
4000c6b4:	000de300 	call	4000de30 <memcpy>
4000c6b8:	8009883a 	mov	r4,r16
4000c6bc:	980b883a 	mov	r5,r19
4000c6c0:	01800044 	movi	r6,1
4000c6c4:	000e83c0 	call	4000e83c <__lshift>
4000c6c8:	1029883a 	mov	r20,r2
4000c6cc:	003e8606 	br	4000c0e8 <__alt_data_end+0xc000c0e8>
4000c6d0:	00800e44 	movi	r2,57
4000c6d4:	90809526 	beq	r18,r2,4000c92c <_dtoa_r+0x15c4>
4000c6d8:	92000044 	addi	r8,r18,1
4000c6dc:	003f2306 	br	4000c36c <__alt_data_end+0xc000c36c>
4000c6e0:	9011883a 	mov	r8,r18
4000c6e4:	8825883a 	mov	r18,r17
4000c6e8:	a023883a 	mov	r17,r20
4000c6ec:	003e3706 	br	4000bfcc <__alt_data_end+0xc000bfcc>
4000c6f0:	002b883a 	mov	r21,zero
4000c6f4:	0023883a 	mov	r17,zero
4000c6f8:	003f5606 	br	4000c454 <__alt_data_end+0xc000c454>
4000c6fc:	51bfffc4 	addi	r6,r10,-1
4000c700:	300490fa 	slli	r2,r6,3
4000c704:	00d00074 	movhi	r3,16385
4000c708:	18d40804 	addi	r3,r3,20512
4000c70c:	1885883a 	add	r2,r3,r2
4000c710:	d9c00e17 	ldw	r7,56(sp)
4000c714:	11000017 	ldw	r4,0(r2)
4000c718:	11400117 	ldw	r5,4(r2)
4000c71c:	d8800717 	ldw	r2,28(sp)
4000c720:	d9801015 	stw	r6,64(sp)
4000c724:	880d883a 	mov	r6,r17
4000c728:	da801615 	stw	r10,88(sp)
4000c72c:	15c00044 	addi	r23,r2,1
4000c730:	00065580 	call	40006558 <__muldf3>
4000c734:	a80b883a 	mov	r5,r21
4000c738:	a009883a 	mov	r4,r20
4000c73c:	d8c01115 	stw	r3,68(sp)
4000c740:	d8800e15 	stw	r2,56(sp)
4000c744:	000754c0 	call	4000754c <__fixdfsi>
4000c748:	1009883a 	mov	r4,r2
4000c74c:	1023883a 	mov	r17,r2
4000c750:	00075d40 	call	400075d4 <__floatsidf>
4000c754:	a009883a 	mov	r4,r20
4000c758:	a80b883a 	mov	r5,r21
4000c75c:	100d883a 	mov	r6,r2
4000c760:	180f883a 	mov	r7,r3
4000c764:	0006c7c0 	call	40006c7c <__subdf3>
4000c768:	1813883a 	mov	r9,r3
4000c76c:	d8c00717 	ldw	r3,28(sp)
4000c770:	8c400c04 	addi	r17,r17,48
4000c774:	1011883a 	mov	r8,r2
4000c778:	1c400005 	stb	r17,0(r3)
4000c77c:	da801617 	ldw	r10,88(sp)
4000c780:	00800044 	movi	r2,1
4000c784:	50802326 	beq	r10,r2,4000c814 <_dtoa_r+0x14ac>
4000c788:	d8800717 	ldw	r2,28(sp)
4000c78c:	b82b883a 	mov	r21,r23
4000c790:	dc001315 	stw	r16,76(sp)
4000c794:	12a9883a 	add	r20,r2,r10
4000c798:	4807883a 	mov	r3,r9
4000c79c:	4005883a 	mov	r2,r8
4000c7a0:	dc801415 	stw	r18,80(sp)
4000c7a4:	000d883a 	mov	r6,zero
4000c7a8:	01d00934 	movhi	r7,16420
4000c7ac:	1009883a 	mov	r4,r2
4000c7b0:	180b883a 	mov	r5,r3
4000c7b4:	00065580 	call	40006558 <__muldf3>
4000c7b8:	180b883a 	mov	r5,r3
4000c7bc:	1009883a 	mov	r4,r2
4000c7c0:	1821883a 	mov	r16,r3
4000c7c4:	1025883a 	mov	r18,r2
4000c7c8:	000754c0 	call	4000754c <__fixdfsi>
4000c7cc:	1009883a 	mov	r4,r2
4000c7d0:	1023883a 	mov	r17,r2
4000c7d4:	00075d40 	call	400075d4 <__floatsidf>
4000c7d8:	9009883a 	mov	r4,r18
4000c7dc:	800b883a 	mov	r5,r16
4000c7e0:	100d883a 	mov	r6,r2
4000c7e4:	180f883a 	mov	r7,r3
4000c7e8:	8c400c04 	addi	r17,r17,48
4000c7ec:	0006c7c0 	call	40006c7c <__subdf3>
4000c7f0:	ad400044 	addi	r21,r21,1
4000c7f4:	ac7fffc5 	stb	r17,-1(r21)
4000c7f8:	ad3fea1e 	bne	r21,r20,4000c7a4 <__alt_data_end+0xc000c7a4>
4000c7fc:	1813883a 	mov	r9,r3
4000c800:	d8c01017 	ldw	r3,64(sp)
4000c804:	dc001317 	ldw	r16,76(sp)
4000c808:	dc801417 	ldw	r18,80(sp)
4000c80c:	1011883a 	mov	r8,r2
4000c810:	b8ef883a 	add	r23,r23,r3
4000c814:	d9000e17 	ldw	r4,56(sp)
4000c818:	d9401117 	ldw	r5,68(sp)
4000c81c:	000d883a 	mov	r6,zero
4000c820:	01cff834 	movhi	r7,16352
4000c824:	da001715 	stw	r8,92(sp)
4000c828:	da401515 	stw	r9,84(sp)
4000c82c:	00051ac0 	call	400051ac <__adddf3>
4000c830:	da001717 	ldw	r8,92(sp)
4000c834:	da401517 	ldw	r9,84(sp)
4000c838:	1009883a 	mov	r4,r2
4000c83c:	400d883a 	mov	r6,r8
4000c840:	480f883a 	mov	r7,r9
4000c844:	180b883a 	mov	r5,r3
4000c848:	00064780 	call	40006478 <__ledf2>
4000c84c:	da001717 	ldw	r8,92(sp)
4000c850:	da401517 	ldw	r9,84(sp)
4000c854:	10003b0e 	bge	r2,zero,4000c944 <_dtoa_r+0x15dc>
4000c858:	d9001217 	ldw	r4,72(sp)
4000c85c:	bd7fffc3 	ldbu	r21,-1(r23)
4000c860:	d9000515 	stw	r4,20(sp)
4000c864:	003d1c06 	br	4000bcd8 <__alt_data_end+0xc000bcd8>
4000c868:	d8c00817 	ldw	r3,32(sp)
4000c86c:	18a9c83a 	sub	r20,r3,r2
4000c870:	0005883a 	mov	r2,zero
4000c874:	003d3706 	br	4000bd54 <__alt_data_end+0xc000bd54>
4000c878:	00800044 	movi	r2,1
4000c87c:	003dd006 	br	4000bfc0 <__alt_data_end+0xc000bfc0>
4000c880:	d8c00217 	ldw	r3,8(sp)
4000c884:	00800d84 	movi	r2,54
4000c888:	dd400917 	ldw	r21,36(sp)
4000c88c:	10c5c83a 	sub	r2,r2,r3
4000c890:	dd000817 	ldw	r20,32(sp)
4000c894:	003d2f06 	br	4000bd54 <__alt_data_end+0xc000bd54>
4000c898:	9029883a 	mov	r20,r18
4000c89c:	982b883a 	mov	r21,r19
4000c8a0:	04400084 	movi	r17,2
4000c8a4:	003bc606 	br	4000b7c0 <__alt_data_end+0xc000b7c0>
4000c8a8:	d8800617 	ldw	r2,24(sp)
4000c8ac:	103efc26 	beq	r2,zero,4000c4a0 <__alt_data_end+0xc000c4a0>
4000c8b0:	d8c00d17 	ldw	r3,52(sp)
4000c8b4:	00fc890e 	bge	zero,r3,4000badc <__alt_data_end+0xc000badc>
4000c8b8:	a80b883a 	mov	r5,r21
4000c8bc:	a009883a 	mov	r4,r20
4000c8c0:	000d883a 	mov	r6,zero
4000c8c4:	01d00934 	movhi	r7,16420
4000c8c8:	00065580 	call	40006558 <__muldf3>
4000c8cc:	89000044 	addi	r4,r17,1
4000c8d0:	1029883a 	mov	r20,r2
4000c8d4:	182b883a 	mov	r21,r3
4000c8d8:	00075d40 	call	400075d4 <__floatsidf>
4000c8dc:	a009883a 	mov	r4,r20
4000c8e0:	a80b883a 	mov	r5,r21
4000c8e4:	100d883a 	mov	r6,r2
4000c8e8:	180f883a 	mov	r7,r3
4000c8ec:	00065580 	call	40006558 <__muldf3>
4000c8f0:	1009883a 	mov	r4,r2
4000c8f4:	180b883a 	mov	r5,r3
4000c8f8:	000d883a 	mov	r6,zero
4000c8fc:	01d00734 	movhi	r7,16412
4000c900:	00051ac0 	call	400051ac <__adddf3>
4000c904:	d9000517 	ldw	r4,20(sp)
4000c908:	1023883a 	mov	r17,r2
4000c90c:	00bf3034 	movhi	r2,64704
4000c910:	213fffc4 	addi	r4,r4,-1
4000c914:	1885883a 	add	r2,r3,r2
4000c918:	d9001215 	stw	r4,72(sp)
4000c91c:	d8800e15 	stw	r2,56(sp)
4000c920:	da800d17 	ldw	r10,52(sp)
4000c924:	003bc306 	br	4000b834 <__alt_data_end+0xc000b834>
4000c928:	b039883a 	mov	fp,r22
4000c92c:	01000e44 	movi	r4,57
4000c930:	8825883a 	mov	r18,r17
4000c934:	9dc00044 	addi	r23,r19,1
4000c938:	99000005 	stb	r4,0(r19)
4000c93c:	a023883a 	mov	r17,r20
4000c940:	003dae06 	br	4000bffc <__alt_data_end+0xc000bffc>
4000c944:	d9800e17 	ldw	r6,56(sp)
4000c948:	d9c01117 	ldw	r7,68(sp)
4000c94c:	0009883a 	mov	r4,zero
4000c950:	014ff834 	movhi	r5,16352
4000c954:	da001715 	stw	r8,92(sp)
4000c958:	da401515 	stw	r9,84(sp)
4000c95c:	0006c7c0 	call	40006c7c <__subdf3>
4000c960:	da001717 	ldw	r8,92(sp)
4000c964:	da401517 	ldw	r9,84(sp)
4000c968:	1009883a 	mov	r4,r2
4000c96c:	180b883a 	mov	r5,r3
4000c970:	400d883a 	mov	r6,r8
4000c974:	480f883a 	mov	r7,r9
4000c978:	00063980 	call	40006398 <__gedf2>
4000c97c:	00bc570e 	bge	zero,r2,4000badc <__alt_data_end+0xc000badc>
4000c980:	01000c04 	movi	r4,48
4000c984:	00000106 	br	4000c98c <_dtoa_r+0x1624>
4000c988:	102f883a 	mov	r23,r2
4000c98c:	b8bfffc4 	addi	r2,r23,-1
4000c990:	10c00007 	ldb	r3,0(r2)
4000c994:	193ffc26 	beq	r3,r4,4000c988 <__alt_data_end+0xc000c988>
4000c998:	d9801217 	ldw	r6,72(sp)
4000c99c:	d9800515 	stw	r6,20(sp)
4000c9a0:	003c1f06 	br	4000ba20 <__alt_data_end+0xc000ba20>
4000c9a4:	d8801217 	ldw	r2,72(sp)
4000c9a8:	dc001117 	ldw	r16,68(sp)
4000c9ac:	d8800515 	stw	r2,20(sp)
4000c9b0:	003cc906 	br	4000bcd8 <__alt_data_end+0xc000bcd8>
4000c9b4:	dd801317 	ldw	r22,76(sp)
4000c9b8:	dc001117 	ldw	r16,68(sp)
4000c9bc:	dcc01417 	ldw	r19,80(sp)
4000c9c0:	dc801017 	ldw	r18,64(sp)
4000c9c4:	003c4506 	br	4000badc <__alt_data_end+0xc000badc>
4000c9c8:	103e5d1e 	bne	r2,zero,4000c340 <__alt_data_end+0xc000c340>
4000c9cc:	4080004c 	andi	r2,r8,1
4000c9d0:	103e5b26 	beq	r2,zero,4000c340 <__alt_data_end+0xc000c340>
4000c9d4:	003e5706 	br	4000c334 <__alt_data_end+0xc000c334>
4000c9d8:	d8c00317 	ldw	r3,12(sp)
4000c9dc:	00800084 	movi	r2,2
4000c9e0:	10c00a16 	blt	r2,r3,4000ca0c <_dtoa_r+0x16a4>
4000c9e4:	d9000d17 	ldw	r4,52(sp)
4000c9e8:	003e8306 	br	4000c3f8 <__alt_data_end+0xc000c3f8>
4000c9ec:	04400084 	movi	r17,2
4000c9f0:	003b7306 	br	4000b7c0 <__alt_data_end+0xc000b7c0>
4000c9f4:	d9801217 	ldw	r6,72(sp)
4000c9f8:	d9800515 	stw	r6,20(sp)
4000c9fc:	003cb606 	br	4000bcd8 <__alt_data_end+0xc000bcd8>
4000ca00:	d9001217 	ldw	r4,72(sp)
4000ca04:	d9000515 	stw	r4,20(sp)
4000ca08:	003c0506 	br	4000ba20 <__alt_data_end+0xc000ba20>
4000ca0c:	d9800d17 	ldw	r6,52(sp)
4000ca10:	d9800615 	stw	r6,24(sp)
4000ca14:	003e8306 	br	4000c424 <__alt_data_end+0xc000c424>
4000ca18:	d9800317 	ldw	r6,12(sp)
4000ca1c:	00800084 	movi	r2,2
4000ca20:	11800216 	blt	r2,r6,4000ca2c <_dtoa_r+0x16c4>
4000ca24:	d8800d17 	ldw	r2,52(sp)
4000ca28:	003da606 	br	4000c0c4 <__alt_data_end+0xc000c0c4>
4000ca2c:	d8800d17 	ldw	r2,52(sp)
4000ca30:	d8800615 	stw	r2,24(sp)
4000ca34:	003e7b06 	br	4000c424 <__alt_data_end+0xc000c424>
4000ca38:	05000044 	movi	r20,1
4000ca3c:	003b0506 	br	4000b654 <__alt_data_end+0xc000b654>
4000ca40:	8009883a 	mov	r4,r16
4000ca44:	80001115 	stw	zero,68(r16)
4000ca48:	000b883a 	mov	r5,zero
4000ca4c:	000e0c40 	call	4000e0c4 <_Balloc>
4000ca50:	d8800715 	stw	r2,28(sp)
4000ca54:	d8c00717 	ldw	r3,28(sp)
4000ca58:	00bfffc4 	movi	r2,-1
4000ca5c:	01000044 	movi	r4,1
4000ca60:	d8800615 	stw	r2,24(sp)
4000ca64:	80c01015 	stw	r3,64(r16)
4000ca68:	d9000b15 	stw	r4,44(sp)
4000ca6c:	d8002215 	stw	zero,136(sp)
4000ca70:	d8800d15 	stw	r2,52(sp)
4000ca74:	003c1906 	br	4000badc <__alt_data_end+0xc000badc>
4000ca78:	193d2926 	beq	r3,r4,4000bf20 <__alt_data_end+0xc000bf20>
4000ca7c:	00c00f04 	movi	r3,60
4000ca80:	1885c83a 	sub	r2,r3,r2
4000ca84:	003d7b06 	br	4000c074 <__alt_data_end+0xc000c074>
4000ca88:	000b883a 	mov	r5,zero
4000ca8c:	003b1006 	br	4000b6d0 <__alt_data_end+0xc000b6d0>

4000ca90 <_fflush_r>:
4000ca90:	defffb04 	addi	sp,sp,-20
4000ca94:	dcc00315 	stw	r19,12(sp)
4000ca98:	dc000015 	stw	r16,0(sp)
4000ca9c:	dfc00415 	stw	ra,16(sp)
4000caa0:	dc800215 	stw	r18,8(sp)
4000caa4:	dc400115 	stw	r17,4(sp)
4000caa8:	2027883a 	mov	r19,r4
4000caac:	2821883a 	mov	r16,r5
4000cab0:	20000226 	beq	r4,zero,4000cabc <_fflush_r+0x2c>
4000cab4:	20800e17 	ldw	r2,56(r4)
4000cab8:	10005326 	beq	r2,zero,4000cc08 <_fflush_r+0x178>
4000cabc:	8080030b 	ldhu	r2,12(r16)
4000cac0:	10ffffcc 	andi	r3,r2,65535
4000cac4:	18e0001c 	xori	r3,r3,32768
4000cac8:	18e00004 	addi	r3,r3,-32768
4000cacc:	18002c26 	beq	r3,zero,4000cb80 <_fflush_r+0xf0>
4000cad0:	10c0020c 	andi	r3,r2,8
4000cad4:	1800321e 	bne	r3,zero,4000cba0 <_fflush_r+0x110>
4000cad8:	80c00117 	ldw	r3,4(r16)
4000cadc:	10820014 	ori	r2,r2,2048
4000cae0:	8080030d 	sth	r2,12(r16)
4000cae4:	00c0570e 	bge	zero,r3,4000cc44 <_fflush_r+0x1b4>
4000cae8:	82000a17 	ldw	r8,40(r16)
4000caec:	40002426 	beq	r8,zero,4000cb80 <_fflush_r+0xf0>
4000caf0:	9c400017 	ldw	r17,0(r19)
4000caf4:	10c4000c 	andi	r3,r2,4096
4000caf8:	98000015 	stw	zero,0(r19)
4000cafc:	18004626 	beq	r3,zero,4000cc18 <_fflush_r+0x188>
4000cb00:	81801417 	ldw	r6,80(r16)
4000cb04:	10c0010c 	andi	r3,r2,4
4000cb08:	18000626 	beq	r3,zero,4000cb24 <_fflush_r+0x94>
4000cb0c:	80c00117 	ldw	r3,4(r16)
4000cb10:	80800c17 	ldw	r2,48(r16)
4000cb14:	30cdc83a 	sub	r6,r6,r3
4000cb18:	10000226 	beq	r2,zero,4000cb24 <_fflush_r+0x94>
4000cb1c:	80800f17 	ldw	r2,60(r16)
4000cb20:	308dc83a 	sub	r6,r6,r2
4000cb24:	81400717 	ldw	r5,28(r16)
4000cb28:	9809883a 	mov	r4,r19
4000cb2c:	000f883a 	mov	r7,zero
4000cb30:	403ee83a 	callr	r8
4000cb34:	00ffffc4 	movi	r3,-1
4000cb38:	10c04526 	beq	r2,r3,4000cc50 <_fflush_r+0x1c0>
4000cb3c:	80c0030b 	ldhu	r3,12(r16)
4000cb40:	81000417 	ldw	r4,16(r16)
4000cb44:	80000115 	stw	zero,4(r16)
4000cb48:	197dffcc 	andi	r5,r3,63487
4000cb4c:	8140030d 	sth	r5,12(r16)
4000cb50:	81000015 	stw	r4,0(r16)
4000cb54:	18c4000c 	andi	r3,r3,4096
4000cb58:	18000126 	beq	r3,zero,4000cb60 <_fflush_r+0xd0>
4000cb5c:	80801415 	stw	r2,80(r16)
4000cb60:	81400c17 	ldw	r5,48(r16)
4000cb64:	9c400015 	stw	r17,0(r19)
4000cb68:	28000526 	beq	r5,zero,4000cb80 <_fflush_r+0xf0>
4000cb6c:	80801004 	addi	r2,r16,64
4000cb70:	28800226 	beq	r5,r2,4000cb7c <_fflush_r+0xec>
4000cb74:	9809883a 	mov	r4,r19
4000cb78:	000d1ac0 	call	4000d1ac <_free_r>
4000cb7c:	80000c15 	stw	zero,48(r16)
4000cb80:	0005883a 	mov	r2,zero
4000cb84:	dfc00417 	ldw	ra,16(sp)
4000cb88:	dcc00317 	ldw	r19,12(sp)
4000cb8c:	dc800217 	ldw	r18,8(sp)
4000cb90:	dc400117 	ldw	r17,4(sp)
4000cb94:	dc000017 	ldw	r16,0(sp)
4000cb98:	dec00504 	addi	sp,sp,20
4000cb9c:	f800283a 	ret
4000cba0:	84800417 	ldw	r18,16(r16)
4000cba4:	903ff626 	beq	r18,zero,4000cb80 <__alt_data_end+0xc000cb80>
4000cba8:	84400017 	ldw	r17,0(r16)
4000cbac:	108000cc 	andi	r2,r2,3
4000cbb0:	84800015 	stw	r18,0(r16)
4000cbb4:	8ca3c83a 	sub	r17,r17,r18
4000cbb8:	10001526 	beq	r2,zero,4000cc10 <_fflush_r+0x180>
4000cbbc:	0005883a 	mov	r2,zero
4000cbc0:	80800215 	stw	r2,8(r16)
4000cbc4:	04400316 	blt	zero,r17,4000cbd4 <_fflush_r+0x144>
4000cbc8:	003fed06 	br	4000cb80 <__alt_data_end+0xc000cb80>
4000cbcc:	90a5883a 	add	r18,r18,r2
4000cbd0:	047feb0e 	bge	zero,r17,4000cb80 <__alt_data_end+0xc000cb80>
4000cbd4:	80800917 	ldw	r2,36(r16)
4000cbd8:	81400717 	ldw	r5,28(r16)
4000cbdc:	880f883a 	mov	r7,r17
4000cbe0:	900d883a 	mov	r6,r18
4000cbe4:	9809883a 	mov	r4,r19
4000cbe8:	103ee83a 	callr	r2
4000cbec:	88a3c83a 	sub	r17,r17,r2
4000cbf0:	00bff616 	blt	zero,r2,4000cbcc <__alt_data_end+0xc000cbcc>
4000cbf4:	80c0030b 	ldhu	r3,12(r16)
4000cbf8:	00bfffc4 	movi	r2,-1
4000cbfc:	18c01014 	ori	r3,r3,64
4000cc00:	80c0030d 	sth	r3,12(r16)
4000cc04:	003fdf06 	br	4000cb84 <__alt_data_end+0xc000cb84>
4000cc08:	000d0380 	call	4000d038 <__sinit>
4000cc0c:	003fab06 	br	4000cabc <__alt_data_end+0xc000cabc>
4000cc10:	80800517 	ldw	r2,20(r16)
4000cc14:	003fea06 	br	4000cbc0 <__alt_data_end+0xc000cbc0>
4000cc18:	81400717 	ldw	r5,28(r16)
4000cc1c:	000d883a 	mov	r6,zero
4000cc20:	9809883a 	mov	r4,r19
4000cc24:	01c00044 	movi	r7,1
4000cc28:	403ee83a 	callr	r8
4000cc2c:	100d883a 	mov	r6,r2
4000cc30:	00bfffc4 	movi	r2,-1
4000cc34:	30801326 	beq	r6,r2,4000cc84 <_fflush_r+0x1f4>
4000cc38:	8080030b 	ldhu	r2,12(r16)
4000cc3c:	82000a17 	ldw	r8,40(r16)
4000cc40:	003fb006 	br	4000cb04 <__alt_data_end+0xc000cb04>
4000cc44:	80c00f17 	ldw	r3,60(r16)
4000cc48:	00ffa716 	blt	zero,r3,4000cae8 <__alt_data_end+0xc000cae8>
4000cc4c:	003fcc06 	br	4000cb80 <__alt_data_end+0xc000cb80>
4000cc50:	98c00017 	ldw	r3,0(r19)
4000cc54:	183fb926 	beq	r3,zero,4000cb3c <__alt_data_end+0xc000cb3c>
4000cc58:	01000744 	movi	r4,29
4000cc5c:	19000226 	beq	r3,r4,4000cc68 <_fflush_r+0x1d8>
4000cc60:	01000584 	movi	r4,22
4000cc64:	1900101e 	bne	r3,r4,4000cca8 <_fflush_r+0x218>
4000cc68:	8080030b 	ldhu	r2,12(r16)
4000cc6c:	80c00417 	ldw	r3,16(r16)
4000cc70:	80000115 	stw	zero,4(r16)
4000cc74:	10bdffcc 	andi	r2,r2,63487
4000cc78:	8080030d 	sth	r2,12(r16)
4000cc7c:	80c00015 	stw	r3,0(r16)
4000cc80:	003fb706 	br	4000cb60 <__alt_data_end+0xc000cb60>
4000cc84:	98800017 	ldw	r2,0(r19)
4000cc88:	103feb26 	beq	r2,zero,4000cc38 <__alt_data_end+0xc000cc38>
4000cc8c:	00c00744 	movi	r3,29
4000cc90:	10c00226 	beq	r2,r3,4000cc9c <_fflush_r+0x20c>
4000cc94:	00c00584 	movi	r3,22
4000cc98:	10ffd61e 	bne	r2,r3,4000cbf4 <__alt_data_end+0xc000cbf4>
4000cc9c:	9c400015 	stw	r17,0(r19)
4000cca0:	0005883a 	mov	r2,zero
4000cca4:	003fb706 	br	4000cb84 <__alt_data_end+0xc000cb84>
4000cca8:	80c0030b 	ldhu	r3,12(r16)
4000ccac:	18c01014 	ori	r3,r3,64
4000ccb0:	80c0030d 	sth	r3,12(r16)
4000ccb4:	003fb306 	br	4000cb84 <__alt_data_end+0xc000cb84>

4000ccb8 <fflush>:
4000ccb8:	20000526 	beq	r4,zero,4000ccd0 <fflush+0x18>
4000ccbc:	00900074 	movhi	r2,16385
4000ccc0:	109b2304 	addi	r2,r2,27788
4000ccc4:	200b883a 	mov	r5,r4
4000ccc8:	11000017 	ldw	r4,0(r2)
4000cccc:	000ca901 	jmpi	4000ca90 <_fflush_r>
4000ccd0:	00900074 	movhi	r2,16385
4000ccd4:	109b2204 	addi	r2,r2,27784
4000ccd8:	11000017 	ldw	r4,0(r2)
4000ccdc:	01500074 	movhi	r5,16385
4000cce0:	2972a404 	addi	r5,r5,-13680
4000cce4:	000d9f81 	jmpi	4000d9f8 <_fwalk_reent>

4000cce8 <__fp_lock>:
4000cce8:	0005883a 	mov	r2,zero
4000ccec:	f800283a 	ret

4000ccf0 <__fp_unlock>:
4000ccf0:	0005883a 	mov	r2,zero
4000ccf4:	f800283a 	ret

4000ccf8 <_cleanup_r>:
4000ccf8:	01500074 	movhi	r5,16385
4000ccfc:	29444304 	addi	r5,r5,4364
4000cd00:	000d9401 	jmpi	4000d940 <_fwalk>

4000cd04 <__sinit.part.1>:
4000cd04:	defff604 	addi	sp,sp,-40
4000cd08:	00d00074 	movhi	r3,16385
4000cd0c:	dfc00915 	stw	ra,36(sp)
4000cd10:	df000815 	stw	fp,32(sp)
4000cd14:	ddc00715 	stw	r23,28(sp)
4000cd18:	dd800615 	stw	r22,24(sp)
4000cd1c:	dd400515 	stw	r21,20(sp)
4000cd20:	dd000415 	stw	r20,16(sp)
4000cd24:	dcc00315 	stw	r19,12(sp)
4000cd28:	dc800215 	stw	r18,8(sp)
4000cd2c:	dc400115 	stw	r17,4(sp)
4000cd30:	dc000015 	stw	r16,0(sp)
4000cd34:	18f33e04 	addi	r3,r3,-13064
4000cd38:	24000117 	ldw	r16,4(r4)
4000cd3c:	20c00f15 	stw	r3,60(r4)
4000cd40:	07000044 	movi	fp,1
4000cd44:	00c000c4 	movi	r3,3
4000cd48:	2080bb04 	addi	r2,r4,748
4000cd4c:	20c0b915 	stw	r3,740(r4)
4000cd50:	27000e15 	stw	fp,56(r4)
4000cd54:	2080ba15 	stw	r2,744(r4)
4000cd58:	2000b815 	stw	zero,736(r4)
4000cd5c:	05c00204 	movi	r23,8
4000cd60:	00800104 	movi	r2,4
4000cd64:	2025883a 	mov	r18,r4
4000cd68:	b80d883a 	mov	r6,r23
4000cd6c:	81001704 	addi	r4,r16,92
4000cd70:	000b883a 	mov	r5,zero
4000cd74:	80000015 	stw	zero,0(r16)
4000cd78:	80000115 	stw	zero,4(r16)
4000cd7c:	80000215 	stw	zero,8(r16)
4000cd80:	8080030d 	sth	r2,12(r16)
4000cd84:	80001915 	stw	zero,100(r16)
4000cd88:	8000038d 	sth	zero,14(r16)
4000cd8c:	80000415 	stw	zero,16(r16)
4000cd90:	80000515 	stw	zero,20(r16)
4000cd94:	80000615 	stw	zero,24(r16)
4000cd98:	00087000 	call	40008700 <memset>
4000cd9c:	05900074 	movhi	r22,16385
4000cda0:	94400217 	ldw	r17,8(r18)
4000cda4:	05500074 	movhi	r21,16385
4000cda8:	05100074 	movhi	r20,16385
4000cdac:	04d00074 	movhi	r19,16385
4000cdb0:	b5bdd604 	addi	r22,r22,-2216
4000cdb4:	ad7ded04 	addi	r21,r21,-2124
4000cdb8:	a53e0c04 	addi	r20,r20,-2000
4000cdbc:	9cfe2304 	addi	r19,r19,-1908
4000cdc0:	85800815 	stw	r22,32(r16)
4000cdc4:	85400915 	stw	r21,36(r16)
4000cdc8:	85000a15 	stw	r20,40(r16)
4000cdcc:	84c00b15 	stw	r19,44(r16)
4000cdd0:	84000715 	stw	r16,28(r16)
4000cdd4:	00800284 	movi	r2,10
4000cdd8:	89001704 	addi	r4,r17,92
4000cddc:	b80d883a 	mov	r6,r23
4000cde0:	000b883a 	mov	r5,zero
4000cde4:	88000015 	stw	zero,0(r17)
4000cde8:	88000115 	stw	zero,4(r17)
4000cdec:	88000215 	stw	zero,8(r17)
4000cdf0:	8880030d 	sth	r2,12(r17)
4000cdf4:	88001915 	stw	zero,100(r17)
4000cdf8:	8f00038d 	sth	fp,14(r17)
4000cdfc:	88000415 	stw	zero,16(r17)
4000ce00:	88000515 	stw	zero,20(r17)
4000ce04:	88000615 	stw	zero,24(r17)
4000ce08:	00087000 	call	40008700 <memset>
4000ce0c:	94000317 	ldw	r16,12(r18)
4000ce10:	00800484 	movi	r2,18
4000ce14:	8c400715 	stw	r17,28(r17)
4000ce18:	8d800815 	stw	r22,32(r17)
4000ce1c:	8d400915 	stw	r21,36(r17)
4000ce20:	8d000a15 	stw	r20,40(r17)
4000ce24:	8cc00b15 	stw	r19,44(r17)
4000ce28:	8080030d 	sth	r2,12(r16)
4000ce2c:	00800084 	movi	r2,2
4000ce30:	80000015 	stw	zero,0(r16)
4000ce34:	80000115 	stw	zero,4(r16)
4000ce38:	80000215 	stw	zero,8(r16)
4000ce3c:	80001915 	stw	zero,100(r16)
4000ce40:	8080038d 	sth	r2,14(r16)
4000ce44:	80000415 	stw	zero,16(r16)
4000ce48:	80000515 	stw	zero,20(r16)
4000ce4c:	80000615 	stw	zero,24(r16)
4000ce50:	81001704 	addi	r4,r16,92
4000ce54:	000b883a 	mov	r5,zero
4000ce58:	b80d883a 	mov	r6,r23
4000ce5c:	00087000 	call	40008700 <memset>
4000ce60:	84000715 	stw	r16,28(r16)
4000ce64:	85800815 	stw	r22,32(r16)
4000ce68:	85400915 	stw	r21,36(r16)
4000ce6c:	85000a15 	stw	r20,40(r16)
4000ce70:	84c00b15 	stw	r19,44(r16)
4000ce74:	dfc00917 	ldw	ra,36(sp)
4000ce78:	df000817 	ldw	fp,32(sp)
4000ce7c:	ddc00717 	ldw	r23,28(sp)
4000ce80:	dd800617 	ldw	r22,24(sp)
4000ce84:	dd400517 	ldw	r21,20(sp)
4000ce88:	dd000417 	ldw	r20,16(sp)
4000ce8c:	dcc00317 	ldw	r19,12(sp)
4000ce90:	dc800217 	ldw	r18,8(sp)
4000ce94:	dc400117 	ldw	r17,4(sp)
4000ce98:	dc000017 	ldw	r16,0(sp)
4000ce9c:	dec00a04 	addi	sp,sp,40
4000cea0:	f800283a 	ret

4000cea4 <__sfmoreglue>:
4000cea4:	defffc04 	addi	sp,sp,-16
4000cea8:	dc400115 	stw	r17,4(sp)
4000ceac:	2c401a24 	muli	r17,r5,104
4000ceb0:	dc800215 	stw	r18,8(sp)
4000ceb4:	2825883a 	mov	r18,r5
4000ceb8:	89400304 	addi	r5,r17,12
4000cebc:	dc000015 	stw	r16,0(sp)
4000cec0:	dfc00315 	stw	ra,12(sp)
4000cec4:	0007f580 	call	40007f58 <_malloc_r>
4000cec8:	1021883a 	mov	r16,r2
4000cecc:	10000726 	beq	r2,zero,4000ceec <__sfmoreglue+0x48>
4000ced0:	11000304 	addi	r4,r2,12
4000ced4:	10000015 	stw	zero,0(r2)
4000ced8:	14800115 	stw	r18,4(r2)
4000cedc:	11000215 	stw	r4,8(r2)
4000cee0:	000b883a 	mov	r5,zero
4000cee4:	880d883a 	mov	r6,r17
4000cee8:	00087000 	call	40008700 <memset>
4000ceec:	8005883a 	mov	r2,r16
4000cef0:	dfc00317 	ldw	ra,12(sp)
4000cef4:	dc800217 	ldw	r18,8(sp)
4000cef8:	dc400117 	ldw	r17,4(sp)
4000cefc:	dc000017 	ldw	r16,0(sp)
4000cf00:	dec00404 	addi	sp,sp,16
4000cf04:	f800283a 	ret

4000cf08 <__sfp>:
4000cf08:	00900074 	movhi	r2,16385
4000cf0c:	defffb04 	addi	sp,sp,-20
4000cf10:	109b2204 	addi	r2,r2,27784
4000cf14:	dc800215 	stw	r18,8(sp)
4000cf18:	14800017 	ldw	r18,0(r2)
4000cf1c:	dcc00315 	stw	r19,12(sp)
4000cf20:	dfc00415 	stw	ra,16(sp)
4000cf24:	90800e17 	ldw	r2,56(r18)
4000cf28:	dc400115 	stw	r17,4(sp)
4000cf2c:	dc000015 	stw	r16,0(sp)
4000cf30:	2027883a 	mov	r19,r4
4000cf34:	1000021e 	bne	r2,zero,4000cf40 <__sfp+0x38>
4000cf38:	9009883a 	mov	r4,r18
4000cf3c:	000cd040 	call	4000cd04 <__sinit.part.1>
4000cf40:	9480b804 	addi	r18,r18,736
4000cf44:	047fffc4 	movi	r17,-1
4000cf48:	91400117 	ldw	r5,4(r18)
4000cf4c:	94000217 	ldw	r16,8(r18)
4000cf50:	297fffc4 	addi	r5,r5,-1
4000cf54:	28000a16 	blt	r5,zero,4000cf80 <__sfp+0x78>
4000cf58:	8080030f 	ldh	r2,12(r16)
4000cf5c:	10000c26 	beq	r2,zero,4000cf90 <__sfp+0x88>
4000cf60:	80c01d04 	addi	r3,r16,116
4000cf64:	00000206 	br	4000cf70 <__sfp+0x68>
4000cf68:	18bfe60f 	ldh	r2,-104(r3)
4000cf6c:	10000826 	beq	r2,zero,4000cf90 <__sfp+0x88>
4000cf70:	297fffc4 	addi	r5,r5,-1
4000cf74:	1c3ffd04 	addi	r16,r3,-12
4000cf78:	18c01a04 	addi	r3,r3,104
4000cf7c:	2c7ffa1e 	bne	r5,r17,4000cf68 <__alt_data_end+0xc000cf68>
4000cf80:	90800017 	ldw	r2,0(r18)
4000cf84:	10001d26 	beq	r2,zero,4000cffc <__sfp+0xf4>
4000cf88:	1025883a 	mov	r18,r2
4000cf8c:	003fee06 	br	4000cf48 <__alt_data_end+0xc000cf48>
4000cf90:	00bfffc4 	movi	r2,-1
4000cf94:	8080038d 	sth	r2,14(r16)
4000cf98:	00800044 	movi	r2,1
4000cf9c:	8080030d 	sth	r2,12(r16)
4000cfa0:	80001915 	stw	zero,100(r16)
4000cfa4:	80000015 	stw	zero,0(r16)
4000cfa8:	80000215 	stw	zero,8(r16)
4000cfac:	80000115 	stw	zero,4(r16)
4000cfb0:	80000415 	stw	zero,16(r16)
4000cfb4:	80000515 	stw	zero,20(r16)
4000cfb8:	80000615 	stw	zero,24(r16)
4000cfbc:	81001704 	addi	r4,r16,92
4000cfc0:	000b883a 	mov	r5,zero
4000cfc4:	01800204 	movi	r6,8
4000cfc8:	00087000 	call	40008700 <memset>
4000cfcc:	8005883a 	mov	r2,r16
4000cfd0:	80000c15 	stw	zero,48(r16)
4000cfd4:	80000d15 	stw	zero,52(r16)
4000cfd8:	80001115 	stw	zero,68(r16)
4000cfdc:	80001215 	stw	zero,72(r16)
4000cfe0:	dfc00417 	ldw	ra,16(sp)
4000cfe4:	dcc00317 	ldw	r19,12(sp)
4000cfe8:	dc800217 	ldw	r18,8(sp)
4000cfec:	dc400117 	ldw	r17,4(sp)
4000cff0:	dc000017 	ldw	r16,0(sp)
4000cff4:	dec00504 	addi	sp,sp,20
4000cff8:	f800283a 	ret
4000cffc:	9809883a 	mov	r4,r19
4000d000:	01400104 	movi	r5,4
4000d004:	000cea40 	call	4000cea4 <__sfmoreglue>
4000d008:	90800015 	stw	r2,0(r18)
4000d00c:	103fde1e 	bne	r2,zero,4000cf88 <__alt_data_end+0xc000cf88>
4000d010:	00800304 	movi	r2,12
4000d014:	98800015 	stw	r2,0(r19)
4000d018:	0005883a 	mov	r2,zero
4000d01c:	003ff006 	br	4000cfe0 <__alt_data_end+0xc000cfe0>

4000d020 <_cleanup>:
4000d020:	00900074 	movhi	r2,16385
4000d024:	109b2204 	addi	r2,r2,27784
4000d028:	11000017 	ldw	r4,0(r2)
4000d02c:	01500074 	movhi	r5,16385
4000d030:	29444304 	addi	r5,r5,4364
4000d034:	000d9401 	jmpi	4000d940 <_fwalk>

4000d038 <__sinit>:
4000d038:	20800e17 	ldw	r2,56(r4)
4000d03c:	10000126 	beq	r2,zero,4000d044 <__sinit+0xc>
4000d040:	f800283a 	ret
4000d044:	000cd041 	jmpi	4000cd04 <__sinit.part.1>

4000d048 <__sfp_lock_acquire>:
4000d048:	f800283a 	ret

4000d04c <__sfp_lock_release>:
4000d04c:	f800283a 	ret

4000d050 <__sinit_lock_acquire>:
4000d050:	f800283a 	ret

4000d054 <__sinit_lock_release>:
4000d054:	f800283a 	ret

4000d058 <__fp_lock_all>:
4000d058:	00900074 	movhi	r2,16385
4000d05c:	109b2304 	addi	r2,r2,27788
4000d060:	11000017 	ldw	r4,0(r2)
4000d064:	01500074 	movhi	r5,16385
4000d068:	29733a04 	addi	r5,r5,-13080
4000d06c:	000d9401 	jmpi	4000d940 <_fwalk>

4000d070 <__fp_unlock_all>:
4000d070:	00900074 	movhi	r2,16385
4000d074:	109b2304 	addi	r2,r2,27788
4000d078:	11000017 	ldw	r4,0(r2)
4000d07c:	01500074 	movhi	r5,16385
4000d080:	29733c04 	addi	r5,r5,-13072
4000d084:	000d9401 	jmpi	4000d940 <_fwalk>

4000d088 <_malloc_trim_r>:
4000d088:	defffb04 	addi	sp,sp,-20
4000d08c:	dcc00315 	stw	r19,12(sp)
4000d090:	04d00074 	movhi	r19,16385
4000d094:	dc800215 	stw	r18,8(sp)
4000d098:	dc400115 	stw	r17,4(sp)
4000d09c:	dc000015 	stw	r16,0(sp)
4000d0a0:	dfc00415 	stw	ra,16(sp)
4000d0a4:	2821883a 	mov	r16,r5
4000d0a8:	9cd55804 	addi	r19,r19,21856
4000d0ac:	2025883a 	mov	r18,r4
4000d0b0:	0012a480 	call	40012a48 <__malloc_lock>
4000d0b4:	98800217 	ldw	r2,8(r19)
4000d0b8:	14400117 	ldw	r17,4(r2)
4000d0bc:	00bfff04 	movi	r2,-4
4000d0c0:	88a2703a 	and	r17,r17,r2
4000d0c4:	8c21c83a 	sub	r16,r17,r16
4000d0c8:	8403fbc4 	addi	r16,r16,4079
4000d0cc:	8020d33a 	srli	r16,r16,12
4000d0d0:	0083ffc4 	movi	r2,4095
4000d0d4:	843fffc4 	addi	r16,r16,-1
4000d0d8:	8020933a 	slli	r16,r16,12
4000d0dc:	1400060e 	bge	r2,r16,4000d0f8 <_malloc_trim_r+0x70>
4000d0e0:	9009883a 	mov	r4,r18
4000d0e4:	000b883a 	mov	r5,zero
4000d0e8:	00089f40 	call	400089f4 <_sbrk_r>
4000d0ec:	98c00217 	ldw	r3,8(r19)
4000d0f0:	1c47883a 	add	r3,r3,r17
4000d0f4:	10c00a26 	beq	r2,r3,4000d120 <_malloc_trim_r+0x98>
4000d0f8:	9009883a 	mov	r4,r18
4000d0fc:	0012a680 	call	40012a68 <__malloc_unlock>
4000d100:	0005883a 	mov	r2,zero
4000d104:	dfc00417 	ldw	ra,16(sp)
4000d108:	dcc00317 	ldw	r19,12(sp)
4000d10c:	dc800217 	ldw	r18,8(sp)
4000d110:	dc400117 	ldw	r17,4(sp)
4000d114:	dc000017 	ldw	r16,0(sp)
4000d118:	dec00504 	addi	sp,sp,20
4000d11c:	f800283a 	ret
4000d120:	9009883a 	mov	r4,r18
4000d124:	040bc83a 	sub	r5,zero,r16
4000d128:	00089f40 	call	400089f4 <_sbrk_r>
4000d12c:	00ffffc4 	movi	r3,-1
4000d130:	10c00d26 	beq	r2,r3,4000d168 <_malloc_trim_r+0xe0>
4000d134:	00d001b4 	movhi	r3,16390
4000d138:	18d06904 	addi	r3,r3,16804
4000d13c:	18800017 	ldw	r2,0(r3)
4000d140:	99000217 	ldw	r4,8(r19)
4000d144:	8c23c83a 	sub	r17,r17,r16
4000d148:	8c400054 	ori	r17,r17,1
4000d14c:	1421c83a 	sub	r16,r2,r16
4000d150:	24400115 	stw	r17,4(r4)
4000d154:	9009883a 	mov	r4,r18
4000d158:	1c000015 	stw	r16,0(r3)
4000d15c:	0012a680 	call	40012a68 <__malloc_unlock>
4000d160:	00800044 	movi	r2,1
4000d164:	003fe706 	br	4000d104 <__alt_data_end+0xc000d104>
4000d168:	9009883a 	mov	r4,r18
4000d16c:	000b883a 	mov	r5,zero
4000d170:	00089f40 	call	400089f4 <_sbrk_r>
4000d174:	99000217 	ldw	r4,8(r19)
4000d178:	014003c4 	movi	r5,15
4000d17c:	1107c83a 	sub	r3,r2,r4
4000d180:	28ffdd0e 	bge	r5,r3,4000d0f8 <__alt_data_end+0xc000d0f8>
4000d184:	01500074 	movhi	r5,16385
4000d188:	295b2404 	addi	r5,r5,27792
4000d18c:	29400017 	ldw	r5,0(r5)
4000d190:	18c00054 	ori	r3,r3,1
4000d194:	20c00115 	stw	r3,4(r4)
4000d198:	00d001b4 	movhi	r3,16390
4000d19c:	1145c83a 	sub	r2,r2,r5
4000d1a0:	18d06904 	addi	r3,r3,16804
4000d1a4:	18800015 	stw	r2,0(r3)
4000d1a8:	003fd306 	br	4000d0f8 <__alt_data_end+0xc000d0f8>

4000d1ac <_free_r>:
4000d1ac:	28004c26 	beq	r5,zero,4000d2e0 <_free_r+0x134>
4000d1b0:	defffd04 	addi	sp,sp,-12
4000d1b4:	dc400115 	stw	r17,4(sp)
4000d1b8:	dc000015 	stw	r16,0(sp)
4000d1bc:	2023883a 	mov	r17,r4
4000d1c0:	2821883a 	mov	r16,r5
4000d1c4:	dfc00215 	stw	ra,8(sp)
4000d1c8:	0012a480 	call	40012a48 <__malloc_lock>
4000d1cc:	813fff17 	ldw	r4,-4(r16)
4000d1d0:	00bfff84 	movi	r2,-2
4000d1d4:	02500074 	movhi	r9,16385
4000d1d8:	81bffe04 	addi	r6,r16,-8
4000d1dc:	2084703a 	and	r2,r4,r2
4000d1e0:	4a555804 	addi	r9,r9,21856
4000d1e4:	308b883a 	add	r5,r6,r2
4000d1e8:	2a000117 	ldw	r8,4(r5)
4000d1ec:	49c00217 	ldw	r7,8(r9)
4000d1f0:	00ffff04 	movi	r3,-4
4000d1f4:	40c6703a 	and	r3,r8,r3
4000d1f8:	39405326 	beq	r7,r5,4000d348 <_free_r+0x19c>
4000d1fc:	28c00115 	stw	r3,4(r5)
4000d200:	2100004c 	andi	r4,r4,1
4000d204:	2000091e 	bne	r4,zero,4000d22c <_free_r+0x80>
4000d208:	81fffe17 	ldw	r7,-8(r16)
4000d20c:	4a000204 	addi	r8,r9,8
4000d210:	31cdc83a 	sub	r6,r6,r7
4000d214:	31000217 	ldw	r4,8(r6)
4000d218:	11c5883a 	add	r2,r2,r7
4000d21c:	22006126 	beq	r4,r8,4000d3a4 <_free_r+0x1f8>
4000d220:	31c00317 	ldw	r7,12(r6)
4000d224:	21c00315 	stw	r7,12(r4)
4000d228:	39000215 	stw	r4,8(r7)
4000d22c:	28c9883a 	add	r4,r5,r3
4000d230:	21c00117 	ldw	r7,4(r4)
4000d234:	39c0004c 	andi	r7,r7,1
4000d238:	38000d1e 	bne	r7,zero,4000d270 <_free_r+0xc4>
4000d23c:	29000217 	ldw	r4,8(r5)
4000d240:	10c5883a 	add	r2,r2,r3
4000d244:	00d00074 	movhi	r3,16385
4000d248:	18d55a04 	addi	r3,r3,21864
4000d24c:	20c07526 	beq	r4,r3,4000d424 <_free_r+0x278>
4000d250:	29c00317 	ldw	r7,12(r5)
4000d254:	11400054 	ori	r5,r2,1
4000d258:	3087883a 	add	r3,r6,r2
4000d25c:	21c00315 	stw	r7,12(r4)
4000d260:	39000215 	stw	r4,8(r7)
4000d264:	31400115 	stw	r5,4(r6)
4000d268:	18800015 	stw	r2,0(r3)
4000d26c:	00000406 	br	4000d280 <_free_r+0xd4>
4000d270:	10c00054 	ori	r3,r2,1
4000d274:	30c00115 	stw	r3,4(r6)
4000d278:	3087883a 	add	r3,r6,r2
4000d27c:	18800015 	stw	r2,0(r3)
4000d280:	00c07fc4 	movi	r3,511
4000d284:	18801736 	bltu	r3,r2,4000d2e4 <_free_r+0x138>
4000d288:	1004d0fa 	srli	r2,r2,3
4000d28c:	01400044 	movi	r5,1
4000d290:	49000117 	ldw	r4,4(r9)
4000d294:	1087883a 	add	r3,r2,r2
4000d298:	18c7883a 	add	r3,r3,r3
4000d29c:	1005d0ba 	srai	r2,r2,2
4000d2a0:	18c7883a 	add	r3,r3,r3
4000d2a4:	1a47883a 	add	r3,r3,r9
4000d2a8:	19c00217 	ldw	r7,8(r3)
4000d2ac:	2884983a 	sll	r2,r5,r2
4000d2b0:	30c00315 	stw	r3,12(r6)
4000d2b4:	31c00215 	stw	r7,8(r6)
4000d2b8:	1104b03a 	or	r2,r2,r4
4000d2bc:	19800215 	stw	r6,8(r3)
4000d2c0:	48800115 	stw	r2,4(r9)
4000d2c4:	39800315 	stw	r6,12(r7)
4000d2c8:	8809883a 	mov	r4,r17
4000d2cc:	dfc00217 	ldw	ra,8(sp)
4000d2d0:	dc400117 	ldw	r17,4(sp)
4000d2d4:	dc000017 	ldw	r16,0(sp)
4000d2d8:	dec00304 	addi	sp,sp,12
4000d2dc:	0012a681 	jmpi	40012a68 <__malloc_unlock>
4000d2e0:	f800283a 	ret
4000d2e4:	1006d27a 	srli	r3,r2,9
4000d2e8:	01000104 	movi	r4,4
4000d2ec:	20c04036 	bltu	r4,r3,4000d3f0 <_free_r+0x244>
4000d2f0:	1006d1ba 	srli	r3,r2,6
4000d2f4:	19400e04 	addi	r5,r3,56
4000d2f8:	2947883a 	add	r3,r5,r5
4000d2fc:	18c7883a 	add	r3,r3,r3
4000d300:	18c7883a 	add	r3,r3,r3
4000d304:	1a49883a 	add	r4,r3,r9
4000d308:	20c00217 	ldw	r3,8(r4)
4000d30c:	01d00074 	movhi	r7,16385
4000d310:	39d55804 	addi	r7,r7,21856
4000d314:	19003b26 	beq	r3,r4,4000d404 <_free_r+0x258>
4000d318:	01ffff04 	movi	r7,-4
4000d31c:	19400117 	ldw	r5,4(r3)
4000d320:	29ca703a 	and	r5,r5,r7
4000d324:	1140022e 	bgeu	r2,r5,4000d330 <_free_r+0x184>
4000d328:	18c00217 	ldw	r3,8(r3)
4000d32c:	20fffb1e 	bne	r4,r3,4000d31c <__alt_data_end+0xc000d31c>
4000d330:	18800317 	ldw	r2,12(r3)
4000d334:	30800315 	stw	r2,12(r6)
4000d338:	30c00215 	stw	r3,8(r6)
4000d33c:	11800215 	stw	r6,8(r2)
4000d340:	19800315 	stw	r6,12(r3)
4000d344:	003fe006 	br	4000d2c8 <__alt_data_end+0xc000d2c8>
4000d348:	2100004c 	andi	r4,r4,1
4000d34c:	1885883a 	add	r2,r3,r2
4000d350:	2000071e 	bne	r4,zero,4000d370 <_free_r+0x1c4>
4000d354:	817ffe17 	ldw	r5,-8(r16)
4000d358:	314dc83a 	sub	r6,r6,r5
4000d35c:	30c00317 	ldw	r3,12(r6)
4000d360:	31000217 	ldw	r4,8(r6)
4000d364:	1145883a 	add	r2,r2,r5
4000d368:	20c00315 	stw	r3,12(r4)
4000d36c:	19000215 	stw	r4,8(r3)
4000d370:	10c00054 	ori	r3,r2,1
4000d374:	30c00115 	stw	r3,4(r6)
4000d378:	00d00074 	movhi	r3,16385
4000d37c:	18db2504 	addi	r3,r3,27796
4000d380:	18c00017 	ldw	r3,0(r3)
4000d384:	49800215 	stw	r6,8(r9)
4000d388:	10ffcf36 	bltu	r2,r3,4000d2c8 <__alt_data_end+0xc000d2c8>
4000d38c:	009000b4 	movhi	r2,16386
4000d390:	10a21e04 	addi	r2,r2,-30600
4000d394:	11400017 	ldw	r5,0(r2)
4000d398:	8809883a 	mov	r4,r17
4000d39c:	000d0880 	call	4000d088 <_malloc_trim_r>
4000d3a0:	003fc906 	br	4000d2c8 <__alt_data_end+0xc000d2c8>
4000d3a4:	28c9883a 	add	r4,r5,r3
4000d3a8:	21000117 	ldw	r4,4(r4)
4000d3ac:	2100004c 	andi	r4,r4,1
4000d3b0:	20000a1e 	bne	r4,zero,4000d3dc <_free_r+0x230>
4000d3b4:	29000317 	ldw	r4,12(r5)
4000d3b8:	29400217 	ldw	r5,8(r5)
4000d3bc:	10c5883a 	add	r2,r2,r3
4000d3c0:	10c00054 	ori	r3,r2,1
4000d3c4:	29000315 	stw	r4,12(r5)
4000d3c8:	21400215 	stw	r5,8(r4)
4000d3cc:	30c00115 	stw	r3,4(r6)
4000d3d0:	308d883a 	add	r6,r6,r2
4000d3d4:	30800015 	stw	r2,0(r6)
4000d3d8:	003fbb06 	br	4000d2c8 <__alt_data_end+0xc000d2c8>
4000d3dc:	10c00054 	ori	r3,r2,1
4000d3e0:	30c00115 	stw	r3,4(r6)
4000d3e4:	308d883a 	add	r6,r6,r2
4000d3e8:	30800015 	stw	r2,0(r6)
4000d3ec:	003fb606 	br	4000d2c8 <__alt_data_end+0xc000d2c8>
4000d3f0:	01000504 	movi	r4,20
4000d3f4:	20c01436 	bltu	r4,r3,4000d448 <_free_r+0x29c>
4000d3f8:	194016c4 	addi	r5,r3,91
4000d3fc:	2947883a 	add	r3,r5,r5
4000d400:	003fbe06 	br	4000d2fc <__alt_data_end+0xc000d2fc>
4000d404:	280bd0ba 	srai	r5,r5,2
4000d408:	00800044 	movi	r2,1
4000d40c:	39000117 	ldw	r4,4(r7)
4000d410:	114a983a 	sll	r5,r2,r5
4000d414:	1805883a 	mov	r2,r3
4000d418:	2908b03a 	or	r4,r5,r4
4000d41c:	39000115 	stw	r4,4(r7)
4000d420:	003fc406 	br	4000d334 <__alt_data_end+0xc000d334>
4000d424:	49800515 	stw	r6,20(r9)
4000d428:	49800415 	stw	r6,16(r9)
4000d42c:	10c00054 	ori	r3,r2,1
4000d430:	31000315 	stw	r4,12(r6)
4000d434:	31000215 	stw	r4,8(r6)
4000d438:	30c00115 	stw	r3,4(r6)
4000d43c:	308d883a 	add	r6,r6,r2
4000d440:	30800015 	stw	r2,0(r6)
4000d444:	003fa006 	br	4000d2c8 <__alt_data_end+0xc000d2c8>
4000d448:	01001504 	movi	r4,84
4000d44c:	20c00436 	bltu	r4,r3,4000d460 <_free_r+0x2b4>
4000d450:	1006d33a 	srli	r3,r2,12
4000d454:	19401b84 	addi	r5,r3,110
4000d458:	2947883a 	add	r3,r5,r5
4000d45c:	003fa706 	br	4000d2fc <__alt_data_end+0xc000d2fc>
4000d460:	01005504 	movi	r4,340
4000d464:	20c00436 	bltu	r4,r3,4000d478 <_free_r+0x2cc>
4000d468:	1006d3fa 	srli	r3,r2,15
4000d46c:	19401dc4 	addi	r5,r3,119
4000d470:	2947883a 	add	r3,r5,r5
4000d474:	003fa106 	br	4000d2fc <__alt_data_end+0xc000d2fc>
4000d478:	01015504 	movi	r4,1364
4000d47c:	20c00436 	bltu	r4,r3,4000d490 <_free_r+0x2e4>
4000d480:	1006d4ba 	srli	r3,r2,18
4000d484:	19401f04 	addi	r5,r3,124
4000d488:	2947883a 	add	r3,r5,r5
4000d48c:	003f9b06 	br	4000d2fc <__alt_data_end+0xc000d2fc>
4000d490:	00c03f04 	movi	r3,252
4000d494:	01401f84 	movi	r5,126
4000d498:	003f9806 	br	4000d2fc <__alt_data_end+0xc000d2fc>

4000d49c <__sfvwrite_r>:
4000d49c:	30800217 	ldw	r2,8(r6)
4000d4a0:	10004526 	beq	r2,zero,4000d5b8 <__sfvwrite_r+0x11c>
4000d4a4:	28c0030b 	ldhu	r3,12(r5)
4000d4a8:	defff404 	addi	sp,sp,-48
4000d4ac:	dd400715 	stw	r21,28(sp)
4000d4b0:	dcc00515 	stw	r19,20(sp)
4000d4b4:	dc000215 	stw	r16,8(sp)
4000d4b8:	dfc00b15 	stw	ra,44(sp)
4000d4bc:	df000a15 	stw	fp,40(sp)
4000d4c0:	ddc00915 	stw	r23,36(sp)
4000d4c4:	dd800815 	stw	r22,32(sp)
4000d4c8:	dd000615 	stw	r20,24(sp)
4000d4cc:	dc800415 	stw	r18,16(sp)
4000d4d0:	dc400315 	stw	r17,12(sp)
4000d4d4:	1880020c 	andi	r2,r3,8
4000d4d8:	2821883a 	mov	r16,r5
4000d4dc:	202b883a 	mov	r21,r4
4000d4e0:	3027883a 	mov	r19,r6
4000d4e4:	10002526 	beq	r2,zero,4000d57c <__sfvwrite_r+0xe0>
4000d4e8:	28800417 	ldw	r2,16(r5)
4000d4ec:	10002326 	beq	r2,zero,4000d57c <__sfvwrite_r+0xe0>
4000d4f0:	1880008c 	andi	r2,r3,2
4000d4f4:	9c400017 	ldw	r17,0(r19)
4000d4f8:	10003126 	beq	r2,zero,4000d5c0 <__sfvwrite_r+0x124>
4000d4fc:	0029883a 	mov	r20,zero
4000d500:	0025883a 	mov	r18,zero
4000d504:	05810004 	movi	r22,1024
4000d508:	a00d883a 	mov	r6,r20
4000d50c:	a809883a 	mov	r4,r21
4000d510:	90002526 	beq	r18,zero,4000d5a8 <__sfvwrite_r+0x10c>
4000d514:	900f883a 	mov	r7,r18
4000d518:	81400717 	ldw	r5,28(r16)
4000d51c:	b480012e 	bgeu	r22,r18,4000d524 <__sfvwrite_r+0x88>
4000d520:	01c10004 	movi	r7,1024
4000d524:	80800917 	ldw	r2,36(r16)
4000d528:	103ee83a 	callr	r2
4000d52c:	0080510e 	bge	zero,r2,4000d674 <__sfvwrite_r+0x1d8>
4000d530:	98c00217 	ldw	r3,8(r19)
4000d534:	a0a9883a 	add	r20,r20,r2
4000d538:	90a5c83a 	sub	r18,r18,r2
4000d53c:	1885c83a 	sub	r2,r3,r2
4000d540:	98800215 	stw	r2,8(r19)
4000d544:	103ff01e 	bne	r2,zero,4000d508 <__alt_data_end+0xc000d508>
4000d548:	0005883a 	mov	r2,zero
4000d54c:	dfc00b17 	ldw	ra,44(sp)
4000d550:	df000a17 	ldw	fp,40(sp)
4000d554:	ddc00917 	ldw	r23,36(sp)
4000d558:	dd800817 	ldw	r22,32(sp)
4000d55c:	dd400717 	ldw	r21,28(sp)
4000d560:	dd000617 	ldw	r20,24(sp)
4000d564:	dcc00517 	ldw	r19,20(sp)
4000d568:	dc800417 	ldw	r18,16(sp)
4000d56c:	dc400317 	ldw	r17,12(sp)
4000d570:	dc000217 	ldw	r16,8(sp)
4000d574:	dec00c04 	addi	sp,sp,48
4000d578:	f800283a 	ret
4000d57c:	a809883a 	mov	r4,r21
4000d580:	800b883a 	mov	r5,r16
4000d584:	000aea40 	call	4000aea4 <__swsetup_r>
4000d588:	80c0030b 	ldhu	r3,12(r16)
4000d58c:	103fd826 	beq	r2,zero,4000d4f0 <__alt_data_end+0xc000d4f0>
4000d590:	18c01014 	ori	r3,r3,64
4000d594:	80c0030d 	sth	r3,12(r16)
4000d598:	00c00244 	movi	r3,9
4000d59c:	00bfffc4 	movi	r2,-1
4000d5a0:	a8c00015 	stw	r3,0(r21)
4000d5a4:	003fe906 	br	4000d54c <__alt_data_end+0xc000d54c>
4000d5a8:	8d000017 	ldw	r20,0(r17)
4000d5ac:	8c800117 	ldw	r18,4(r17)
4000d5b0:	8c400204 	addi	r17,r17,8
4000d5b4:	003fd406 	br	4000d508 <__alt_data_end+0xc000d508>
4000d5b8:	0005883a 	mov	r2,zero
4000d5bc:	f800283a 	ret
4000d5c0:	1880004c 	andi	r2,r3,1
4000d5c4:	1000301e 	bne	r2,zero,4000d688 <__sfvwrite_r+0x1ec>
4000d5c8:	002f883a 	mov	r23,zero
4000d5cc:	0025883a 	mov	r18,zero
4000d5d0:	90001c26 	beq	r18,zero,4000d644 <__sfvwrite_r+0x1a8>
4000d5d4:	1880800c 	andi	r2,r3,512
4000d5d8:	85000217 	ldw	r20,8(r16)
4000d5dc:	10006c26 	beq	r2,zero,4000d790 <__sfvwrite_r+0x2f4>
4000d5e0:	a02d883a 	mov	r22,r20
4000d5e4:	95008536 	bltu	r18,r20,4000d7fc <__sfvwrite_r+0x360>
4000d5e8:	1881200c 	andi	r2,r3,1152
4000d5ec:	10009d1e 	bne	r2,zero,4000d864 <__sfvwrite_r+0x3c8>
4000d5f0:	81000017 	ldw	r4,0(r16)
4000d5f4:	a039883a 	mov	fp,r20
4000d5f8:	9029883a 	mov	r20,r18
4000d5fc:	b80b883a 	mov	r5,r23
4000d600:	b00d883a 	mov	r6,r22
4000d604:	000df680 	call	4000df68 <memmove>
4000d608:	80c00217 	ldw	r3,8(r16)
4000d60c:	81000017 	ldw	r4,0(r16)
4000d610:	9005883a 	mov	r2,r18
4000d614:	1f39c83a 	sub	fp,r3,fp
4000d618:	258f883a 	add	r7,r4,r22
4000d61c:	87000215 	stw	fp,8(r16)
4000d620:	81c00015 	stw	r7,0(r16)
4000d624:	98c00217 	ldw	r3,8(r19)
4000d628:	b8af883a 	add	r23,r23,r2
4000d62c:	90a5c83a 	sub	r18,r18,r2
4000d630:	1d05c83a 	sub	r2,r3,r20
4000d634:	98800215 	stw	r2,8(r19)
4000d638:	103fc326 	beq	r2,zero,4000d548 <__alt_data_end+0xc000d548>
4000d63c:	80c0030b 	ldhu	r3,12(r16)
4000d640:	903fe41e 	bne	r18,zero,4000d5d4 <__alt_data_end+0xc000d5d4>
4000d644:	8dc00017 	ldw	r23,0(r17)
4000d648:	8c800117 	ldw	r18,4(r17)
4000d64c:	8c400204 	addi	r17,r17,8
4000d650:	003fdf06 	br	4000d5d0 <__alt_data_end+0xc000d5d0>
4000d654:	000f1b80 	call	4000f1b8 <_realloc_r>
4000d658:	102d883a 	mov	r22,r2
4000d65c:	1000a01e 	bne	r2,zero,4000d8e0 <__sfvwrite_r+0x444>
4000d660:	81400417 	ldw	r5,16(r16)
4000d664:	a809883a 	mov	r4,r21
4000d668:	000d1ac0 	call	4000d1ac <_free_r>
4000d66c:	00800304 	movi	r2,12
4000d670:	a8800015 	stw	r2,0(r21)
4000d674:	80c0030b 	ldhu	r3,12(r16)
4000d678:	00bfffc4 	movi	r2,-1
4000d67c:	18c01014 	ori	r3,r3,64
4000d680:	80c0030d 	sth	r3,12(r16)
4000d684:	003fb106 	br	4000d54c <__alt_data_end+0xc000d54c>
4000d688:	0029883a 	mov	r20,zero
4000d68c:	0011883a 	mov	r8,zero
4000d690:	0039883a 	mov	fp,zero
4000d694:	0025883a 	mov	r18,zero
4000d698:	90001f26 	beq	r18,zero,4000d718 <__sfvwrite_r+0x27c>
4000d69c:	40006826 	beq	r8,zero,4000d840 <__sfvwrite_r+0x3a4>
4000d6a0:	a02f883a 	mov	r23,r20
4000d6a4:	9500012e 	bgeu	r18,r20,4000d6ac <__sfvwrite_r+0x210>
4000d6a8:	902f883a 	mov	r23,r18
4000d6ac:	81000017 	ldw	r4,0(r16)
4000d6b0:	80800417 	ldw	r2,16(r16)
4000d6b4:	b82d883a 	mov	r22,r23
4000d6b8:	81800217 	ldw	r6,8(r16)
4000d6bc:	81c00517 	ldw	r7,20(r16)
4000d6c0:	1100022e 	bgeu	r2,r4,4000d6cc <__sfvwrite_r+0x230>
4000d6c4:	31c7883a 	add	r3,r6,r7
4000d6c8:	1dc01816 	blt	r3,r23,4000d72c <__sfvwrite_r+0x290>
4000d6cc:	b9c03f16 	blt	r23,r7,4000d7cc <__sfvwrite_r+0x330>
4000d6d0:	80800917 	ldw	r2,36(r16)
4000d6d4:	81400717 	ldw	r5,28(r16)
4000d6d8:	a809883a 	mov	r4,r21
4000d6dc:	da000115 	stw	r8,4(sp)
4000d6e0:	e00d883a 	mov	r6,fp
4000d6e4:	103ee83a 	callr	r2
4000d6e8:	102d883a 	mov	r22,r2
4000d6ec:	da000117 	ldw	r8,4(sp)
4000d6f0:	00bfe00e 	bge	zero,r2,4000d674 <__alt_data_end+0xc000d674>
4000d6f4:	a5a9c83a 	sub	r20,r20,r22
4000d6f8:	a0001f26 	beq	r20,zero,4000d778 <__sfvwrite_r+0x2dc>
4000d6fc:	98800217 	ldw	r2,8(r19)
4000d700:	e5b9883a 	add	fp,fp,r22
4000d704:	95a5c83a 	sub	r18,r18,r22
4000d708:	15adc83a 	sub	r22,r2,r22
4000d70c:	9d800215 	stw	r22,8(r19)
4000d710:	b03f8d26 	beq	r22,zero,4000d548 <__alt_data_end+0xc000d548>
4000d714:	903fe11e 	bne	r18,zero,4000d69c <__alt_data_end+0xc000d69c>
4000d718:	8f000017 	ldw	fp,0(r17)
4000d71c:	8c800117 	ldw	r18,4(r17)
4000d720:	0011883a 	mov	r8,zero
4000d724:	8c400204 	addi	r17,r17,8
4000d728:	003fdb06 	br	4000d698 <__alt_data_end+0xc000d698>
4000d72c:	180d883a 	mov	r6,r3
4000d730:	e00b883a 	mov	r5,fp
4000d734:	da000115 	stw	r8,4(sp)
4000d738:	d8c00015 	stw	r3,0(sp)
4000d73c:	000df680 	call	4000df68 <memmove>
4000d740:	d8c00017 	ldw	r3,0(sp)
4000d744:	80800017 	ldw	r2,0(r16)
4000d748:	a809883a 	mov	r4,r21
4000d74c:	800b883a 	mov	r5,r16
4000d750:	10c5883a 	add	r2,r2,r3
4000d754:	80800015 	stw	r2,0(r16)
4000d758:	d8c00015 	stw	r3,0(sp)
4000d75c:	000ca900 	call	4000ca90 <_fflush_r>
4000d760:	d8c00017 	ldw	r3,0(sp)
4000d764:	da000117 	ldw	r8,4(sp)
4000d768:	103fc21e 	bne	r2,zero,4000d674 <__alt_data_end+0xc000d674>
4000d76c:	182d883a 	mov	r22,r3
4000d770:	a5a9c83a 	sub	r20,r20,r22
4000d774:	a03fe11e 	bne	r20,zero,4000d6fc <__alt_data_end+0xc000d6fc>
4000d778:	a809883a 	mov	r4,r21
4000d77c:	800b883a 	mov	r5,r16
4000d780:	000ca900 	call	4000ca90 <_fflush_r>
4000d784:	103fbb1e 	bne	r2,zero,4000d674 <__alt_data_end+0xc000d674>
4000d788:	0011883a 	mov	r8,zero
4000d78c:	003fdb06 	br	4000d6fc <__alt_data_end+0xc000d6fc>
4000d790:	81000017 	ldw	r4,0(r16)
4000d794:	80800417 	ldw	r2,16(r16)
4000d798:	1100012e 	bgeu	r2,r4,4000d7a0 <__sfvwrite_r+0x304>
4000d79c:	a4805a36 	bltu	r20,r18,4000d908 <__sfvwrite_r+0x46c>
4000d7a0:	81c00517 	ldw	r7,20(r16)
4000d7a4:	91c01a36 	bltu	r18,r7,4000d810 <__sfvwrite_r+0x374>
4000d7a8:	80800917 	ldw	r2,36(r16)
4000d7ac:	81400717 	ldw	r5,28(r16)
4000d7b0:	a809883a 	mov	r4,r21
4000d7b4:	b80d883a 	mov	r6,r23
4000d7b8:	103ee83a 	callr	r2
4000d7bc:	1029883a 	mov	r20,r2
4000d7c0:	00bfac0e 	bge	zero,r2,4000d674 <__alt_data_end+0xc000d674>
4000d7c4:	a005883a 	mov	r2,r20
4000d7c8:	003f9606 	br	4000d624 <__alt_data_end+0xc000d624>
4000d7cc:	b80d883a 	mov	r6,r23
4000d7d0:	e00b883a 	mov	r5,fp
4000d7d4:	da000115 	stw	r8,4(sp)
4000d7d8:	000df680 	call	4000df68 <memmove>
4000d7dc:	80800217 	ldw	r2,8(r16)
4000d7e0:	80c00017 	ldw	r3,0(r16)
4000d7e4:	da000117 	ldw	r8,4(sp)
4000d7e8:	15c5c83a 	sub	r2,r2,r23
4000d7ec:	1def883a 	add	r23,r3,r23
4000d7f0:	80800215 	stw	r2,8(r16)
4000d7f4:	85c00015 	stw	r23,0(r16)
4000d7f8:	003fbe06 	br	4000d6f4 <__alt_data_end+0xc000d6f4>
4000d7fc:	81000017 	ldw	r4,0(r16)
4000d800:	9039883a 	mov	fp,r18
4000d804:	9029883a 	mov	r20,r18
4000d808:	902d883a 	mov	r22,r18
4000d80c:	003f7b06 	br	4000d5fc <__alt_data_end+0xc000d5fc>
4000d810:	b80b883a 	mov	r5,r23
4000d814:	900d883a 	mov	r6,r18
4000d818:	000df680 	call	4000df68 <memmove>
4000d81c:	80c00217 	ldw	r3,8(r16)
4000d820:	80800017 	ldw	r2,0(r16)
4000d824:	9029883a 	mov	r20,r18
4000d828:	1c87c83a 	sub	r3,r3,r18
4000d82c:	1485883a 	add	r2,r2,r18
4000d830:	80800015 	stw	r2,0(r16)
4000d834:	80c00215 	stw	r3,8(r16)
4000d838:	9005883a 	mov	r2,r18
4000d83c:	003f7906 	br	4000d624 <__alt_data_end+0xc000d624>
4000d840:	e009883a 	mov	r4,fp
4000d844:	01400284 	movi	r5,10
4000d848:	900d883a 	mov	r6,r18
4000d84c:	000dd480 	call	4000dd48 <memchr>
4000d850:	10003826 	beq	r2,zero,4000d934 <__sfvwrite_r+0x498>
4000d854:	10800044 	addi	r2,r2,1
4000d858:	1729c83a 	sub	r20,r2,fp
4000d85c:	02000044 	movi	r8,1
4000d860:	003f8f06 	br	4000d6a0 <__alt_data_end+0xc000d6a0>
4000d864:	80800517 	ldw	r2,20(r16)
4000d868:	81400417 	ldw	r5,16(r16)
4000d86c:	87000017 	ldw	fp,0(r16)
4000d870:	10a9883a 	add	r20,r2,r2
4000d874:	a085883a 	add	r2,r20,r2
4000d878:	1028d7fa 	srli	r20,r2,31
4000d87c:	e179c83a 	sub	fp,fp,r5
4000d880:	e1000044 	addi	r4,fp,1
4000d884:	a085883a 	add	r2,r20,r2
4000d888:	1029d07a 	srai	r20,r2,1
4000d88c:	2485883a 	add	r2,r4,r18
4000d890:	a00d883a 	mov	r6,r20
4000d894:	a080022e 	bgeu	r20,r2,4000d8a0 <__sfvwrite_r+0x404>
4000d898:	1029883a 	mov	r20,r2
4000d89c:	100d883a 	mov	r6,r2
4000d8a0:	18c1000c 	andi	r3,r3,1024
4000d8a4:	a809883a 	mov	r4,r21
4000d8a8:	183f6a26 	beq	r3,zero,4000d654 <__alt_data_end+0xc000d654>
4000d8ac:	300b883a 	mov	r5,r6
4000d8b0:	0007f580 	call	40007f58 <_malloc_r>
4000d8b4:	102d883a 	mov	r22,r2
4000d8b8:	103f6c26 	beq	r2,zero,4000d66c <__alt_data_end+0xc000d66c>
4000d8bc:	81400417 	ldw	r5,16(r16)
4000d8c0:	1009883a 	mov	r4,r2
4000d8c4:	e00d883a 	mov	r6,fp
4000d8c8:	000de300 	call	4000de30 <memcpy>
4000d8cc:	8080030b 	ldhu	r2,12(r16)
4000d8d0:	00fedfc4 	movi	r3,-1153
4000d8d4:	10c4703a 	and	r2,r2,r3
4000d8d8:	10802014 	ori	r2,r2,128
4000d8dc:	8080030d 	sth	r2,12(r16)
4000d8e0:	b709883a 	add	r4,r22,fp
4000d8e4:	a707c83a 	sub	r3,r20,fp
4000d8e8:	85800415 	stw	r22,16(r16)
4000d8ec:	85000515 	stw	r20,20(r16)
4000d8f0:	81000015 	stw	r4,0(r16)
4000d8f4:	9039883a 	mov	fp,r18
4000d8f8:	80c00215 	stw	r3,8(r16)
4000d8fc:	9029883a 	mov	r20,r18
4000d900:	902d883a 	mov	r22,r18
4000d904:	003f3d06 	br	4000d5fc <__alt_data_end+0xc000d5fc>
4000d908:	b80b883a 	mov	r5,r23
4000d90c:	a00d883a 	mov	r6,r20
4000d910:	000df680 	call	4000df68 <memmove>
4000d914:	80800017 	ldw	r2,0(r16)
4000d918:	a809883a 	mov	r4,r21
4000d91c:	800b883a 	mov	r5,r16
4000d920:	1505883a 	add	r2,r2,r20
4000d924:	80800015 	stw	r2,0(r16)
4000d928:	000ca900 	call	4000ca90 <_fflush_r>
4000d92c:	103fa526 	beq	r2,zero,4000d7c4 <__alt_data_end+0xc000d7c4>
4000d930:	003f5006 	br	4000d674 <__alt_data_end+0xc000d674>
4000d934:	95000044 	addi	r20,r18,1
4000d938:	02000044 	movi	r8,1
4000d93c:	003f5806 	br	4000d6a0 <__alt_data_end+0xc000d6a0>

4000d940 <_fwalk>:
4000d940:	defff804 	addi	sp,sp,-32
4000d944:	dd400515 	stw	r21,20(sp)
4000d948:	2540b804 	addi	r21,r4,736
4000d94c:	dd800615 	stw	r22,24(sp)
4000d950:	dd000415 	stw	r20,16(sp)
4000d954:	dfc00715 	stw	ra,28(sp)
4000d958:	dcc00315 	stw	r19,12(sp)
4000d95c:	dc800215 	stw	r18,8(sp)
4000d960:	dc400115 	stw	r17,4(sp)
4000d964:	dc000015 	stw	r16,0(sp)
4000d968:	2829883a 	mov	r20,r5
4000d96c:	002d883a 	mov	r22,zero
4000d970:	000d0480 	call	4000d048 <__sfp_lock_acquire>
4000d974:	a8001426 	beq	r21,zero,4000d9c8 <_fwalk+0x88>
4000d978:	04ffffc4 	movi	r19,-1
4000d97c:	ac400117 	ldw	r17,4(r21)
4000d980:	ac800217 	ldw	r18,8(r21)
4000d984:	8c7fffc4 	addi	r17,r17,-1
4000d988:	88000d16 	blt	r17,zero,4000d9c0 <_fwalk+0x80>
4000d98c:	94000304 	addi	r16,r18,12
4000d990:	94800384 	addi	r18,r18,14
4000d994:	80c0000f 	ldh	r3,0(r16)
4000d998:	8c7fffc4 	addi	r17,r17,-1
4000d99c:	813ffd04 	addi	r4,r16,-12
4000d9a0:	18000426 	beq	r3,zero,4000d9b4 <_fwalk+0x74>
4000d9a4:	90c0000f 	ldh	r3,0(r18)
4000d9a8:	1cc00226 	beq	r3,r19,4000d9b4 <_fwalk+0x74>
4000d9ac:	a03ee83a 	callr	r20
4000d9b0:	b0acb03a 	or	r22,r22,r2
4000d9b4:	84001a04 	addi	r16,r16,104
4000d9b8:	94801a04 	addi	r18,r18,104
4000d9bc:	8cfff51e 	bne	r17,r19,4000d994 <__alt_data_end+0xc000d994>
4000d9c0:	ad400017 	ldw	r21,0(r21)
4000d9c4:	a83fed1e 	bne	r21,zero,4000d97c <__alt_data_end+0xc000d97c>
4000d9c8:	000d04c0 	call	4000d04c <__sfp_lock_release>
4000d9cc:	b005883a 	mov	r2,r22
4000d9d0:	dfc00717 	ldw	ra,28(sp)
4000d9d4:	dd800617 	ldw	r22,24(sp)
4000d9d8:	dd400517 	ldw	r21,20(sp)
4000d9dc:	dd000417 	ldw	r20,16(sp)
4000d9e0:	dcc00317 	ldw	r19,12(sp)
4000d9e4:	dc800217 	ldw	r18,8(sp)
4000d9e8:	dc400117 	ldw	r17,4(sp)
4000d9ec:	dc000017 	ldw	r16,0(sp)
4000d9f0:	dec00804 	addi	sp,sp,32
4000d9f4:	f800283a 	ret

4000d9f8 <_fwalk_reent>:
4000d9f8:	defff804 	addi	sp,sp,-32
4000d9fc:	dd400515 	stw	r21,20(sp)
4000da00:	2540b804 	addi	r21,r4,736
4000da04:	dd800615 	stw	r22,24(sp)
4000da08:	dd000415 	stw	r20,16(sp)
4000da0c:	dcc00315 	stw	r19,12(sp)
4000da10:	dfc00715 	stw	ra,28(sp)
4000da14:	dc800215 	stw	r18,8(sp)
4000da18:	dc400115 	stw	r17,4(sp)
4000da1c:	dc000015 	stw	r16,0(sp)
4000da20:	2027883a 	mov	r19,r4
4000da24:	2829883a 	mov	r20,r5
4000da28:	002d883a 	mov	r22,zero
4000da2c:	000d0480 	call	4000d048 <__sfp_lock_acquire>
4000da30:	a8001326 	beq	r21,zero,4000da80 <_fwalk_reent+0x88>
4000da34:	04bfffc4 	movi	r18,-1
4000da38:	ac400117 	ldw	r17,4(r21)
4000da3c:	ac000217 	ldw	r16,8(r21)
4000da40:	8c7fffc4 	addi	r17,r17,-1
4000da44:	88000c16 	blt	r17,zero,4000da78 <_fwalk_reent+0x80>
4000da48:	84000304 	addi	r16,r16,12
4000da4c:	80c0000f 	ldh	r3,0(r16)
4000da50:	8c7fffc4 	addi	r17,r17,-1
4000da54:	817ffd04 	addi	r5,r16,-12
4000da58:	18000526 	beq	r3,zero,4000da70 <_fwalk_reent+0x78>
4000da5c:	80c0008f 	ldh	r3,2(r16)
4000da60:	9809883a 	mov	r4,r19
4000da64:	1c800226 	beq	r3,r18,4000da70 <_fwalk_reent+0x78>
4000da68:	a03ee83a 	callr	r20
4000da6c:	b0acb03a 	or	r22,r22,r2
4000da70:	84001a04 	addi	r16,r16,104
4000da74:	8cbff51e 	bne	r17,r18,4000da4c <__alt_data_end+0xc000da4c>
4000da78:	ad400017 	ldw	r21,0(r21)
4000da7c:	a83fee1e 	bne	r21,zero,4000da38 <__alt_data_end+0xc000da38>
4000da80:	000d04c0 	call	4000d04c <__sfp_lock_release>
4000da84:	b005883a 	mov	r2,r22
4000da88:	dfc00717 	ldw	ra,28(sp)
4000da8c:	dd800617 	ldw	r22,24(sp)
4000da90:	dd400517 	ldw	r21,20(sp)
4000da94:	dd000417 	ldw	r20,16(sp)
4000da98:	dcc00317 	ldw	r19,12(sp)
4000da9c:	dc800217 	ldw	r18,8(sp)
4000daa0:	dc400117 	ldw	r17,4(sp)
4000daa4:	dc000017 	ldw	r16,0(sp)
4000daa8:	dec00804 	addi	sp,sp,32
4000daac:	f800283a 	ret

4000dab0 <_setlocale_r>:
4000dab0:	30001b26 	beq	r6,zero,4000db20 <_setlocale_r+0x70>
4000dab4:	01500074 	movhi	r5,16385
4000dab8:	defffe04 	addi	sp,sp,-8
4000dabc:	2953ee04 	addi	r5,r5,20408
4000dac0:	3009883a 	mov	r4,r6
4000dac4:	dc000015 	stw	r16,0(sp)
4000dac8:	dfc00115 	stw	ra,4(sp)
4000dacc:	3021883a 	mov	r16,r6
4000dad0:	0008d480 	call	40008d48 <strcmp>
4000dad4:	1000061e 	bne	r2,zero,4000daf0 <_setlocale_r+0x40>
4000dad8:	00900074 	movhi	r2,16385
4000dadc:	1093cf04 	addi	r2,r2,20284
4000dae0:	dfc00117 	ldw	ra,4(sp)
4000dae4:	dc000017 	ldw	r16,0(sp)
4000dae8:	dec00204 	addi	sp,sp,8
4000daec:	f800283a 	ret
4000daf0:	01500074 	movhi	r5,16385
4000daf4:	2953cf04 	addi	r5,r5,20284
4000daf8:	8009883a 	mov	r4,r16
4000dafc:	0008d480 	call	40008d48 <strcmp>
4000db00:	103ff526 	beq	r2,zero,4000dad8 <__alt_data_end+0xc000dad8>
4000db04:	01500074 	movhi	r5,16385
4000db08:	2953d904 	addi	r5,r5,20324
4000db0c:	8009883a 	mov	r4,r16
4000db10:	0008d480 	call	40008d48 <strcmp>
4000db14:	103ff026 	beq	r2,zero,4000dad8 <__alt_data_end+0xc000dad8>
4000db18:	0005883a 	mov	r2,zero
4000db1c:	003ff006 	br	4000dae0 <__alt_data_end+0xc000dae0>
4000db20:	00900074 	movhi	r2,16385
4000db24:	1093cf04 	addi	r2,r2,20284
4000db28:	f800283a 	ret

4000db2c <__locale_charset>:
4000db2c:	00900074 	movhi	r2,16385
4000db30:	10966204 	addi	r2,r2,22920
4000db34:	f800283a 	ret

4000db38 <__locale_mb_cur_max>:
4000db38:	00900074 	movhi	r2,16385
4000db3c:	109b2604 	addi	r2,r2,27800
4000db40:	10800017 	ldw	r2,0(r2)
4000db44:	f800283a 	ret

4000db48 <__locale_msgcharset>:
4000db48:	00900074 	movhi	r2,16385
4000db4c:	10965a04 	addi	r2,r2,22888
4000db50:	f800283a 	ret

4000db54 <__locale_cjk_lang>:
4000db54:	0005883a 	mov	r2,zero
4000db58:	f800283a 	ret

4000db5c <_localeconv_r>:
4000db5c:	00900074 	movhi	r2,16385
4000db60:	10966a04 	addi	r2,r2,22952
4000db64:	f800283a 	ret

4000db68 <setlocale>:
4000db68:	00d00074 	movhi	r3,16385
4000db6c:	18db2304 	addi	r3,r3,27788
4000db70:	2005883a 	mov	r2,r4
4000db74:	19000017 	ldw	r4,0(r3)
4000db78:	280d883a 	mov	r6,r5
4000db7c:	100b883a 	mov	r5,r2
4000db80:	000dab01 	jmpi	4000dab0 <_setlocale_r>

4000db84 <localeconv>:
4000db84:	00900074 	movhi	r2,16385
4000db88:	10966a04 	addi	r2,r2,22952
4000db8c:	f800283a 	ret

4000db90 <__smakebuf_r>:
4000db90:	2880030b 	ldhu	r2,12(r5)
4000db94:	10c0008c 	andi	r3,r2,2
4000db98:	1800401e 	bne	r3,zero,4000dc9c <__smakebuf_r+0x10c>
4000db9c:	deffec04 	addi	sp,sp,-80
4000dba0:	dc000f15 	stw	r16,60(sp)
4000dba4:	2821883a 	mov	r16,r5
4000dba8:	2940038f 	ldh	r5,14(r5)
4000dbac:	dc401015 	stw	r17,64(sp)
4000dbb0:	dfc01315 	stw	ra,76(sp)
4000dbb4:	dcc01215 	stw	r19,72(sp)
4000dbb8:	dc801115 	stw	r18,68(sp)
4000dbbc:	2023883a 	mov	r17,r4
4000dbc0:	28001b16 	blt	r5,zero,4000dc30 <__smakebuf_r+0xa0>
4000dbc4:	d80d883a 	mov	r6,sp
4000dbc8:	00112fc0 	call	400112fc <_fstat_r>
4000dbcc:	10001716 	blt	r2,zero,4000dc2c <__smakebuf_r+0x9c>
4000dbd0:	d8800117 	ldw	r2,4(sp)
4000dbd4:	00e00014 	movui	r3,32768
4000dbd8:	10bc000c 	andi	r2,r2,61440
4000dbdc:	10c03726 	beq	r2,r3,4000dcbc <__smakebuf_r+0x12c>
4000dbe0:	80c0030b 	ldhu	r3,12(r16)
4000dbe4:	18c20014 	ori	r3,r3,2048
4000dbe8:	80c0030d 	sth	r3,12(r16)
4000dbec:	00c80004 	movi	r3,8192
4000dbf0:	10c03c1e 	bne	r2,r3,4000dce4 <__smakebuf_r+0x154>
4000dbf4:	8140038f 	ldh	r5,14(r16)
4000dbf8:	8809883a 	mov	r4,r17
4000dbfc:	00113540 	call	40011354 <_isatty_r>
4000dc00:	10004e26 	beq	r2,zero,4000dd3c <__smakebuf_r+0x1ac>
4000dc04:	8080030b 	ldhu	r2,12(r16)
4000dc08:	04c00044 	movi	r19,1
4000dc0c:	80c010c4 	addi	r3,r16,67
4000dc10:	14c4b03a 	or	r2,r2,r19
4000dc14:	8080030d 	sth	r2,12(r16)
4000dc18:	80c00015 	stw	r3,0(r16)
4000dc1c:	80c00415 	stw	r3,16(r16)
4000dc20:	84c00515 	stw	r19,20(r16)
4000dc24:	04810004 	movi	r18,1024
4000dc28:	00000706 	br	4000dc48 <__smakebuf_r+0xb8>
4000dc2c:	8080030b 	ldhu	r2,12(r16)
4000dc30:	10c0200c 	andi	r3,r2,128
4000dc34:	18001f1e 	bne	r3,zero,4000dcb4 <__smakebuf_r+0x124>
4000dc38:	04810004 	movi	r18,1024
4000dc3c:	10820014 	ori	r2,r2,2048
4000dc40:	8080030d 	sth	r2,12(r16)
4000dc44:	0027883a 	mov	r19,zero
4000dc48:	8809883a 	mov	r4,r17
4000dc4c:	900b883a 	mov	r5,r18
4000dc50:	0007f580 	call	40007f58 <_malloc_r>
4000dc54:	10002e26 	beq	r2,zero,4000dd10 <__smakebuf_r+0x180>
4000dc58:	80c0030b 	ldhu	r3,12(r16)
4000dc5c:	01100074 	movhi	r4,16385
4000dc60:	21333e04 	addi	r4,r4,-13064
4000dc64:	89000f15 	stw	r4,60(r17)
4000dc68:	18c02014 	ori	r3,r3,128
4000dc6c:	80c0030d 	sth	r3,12(r16)
4000dc70:	80800015 	stw	r2,0(r16)
4000dc74:	80800415 	stw	r2,16(r16)
4000dc78:	84800515 	stw	r18,20(r16)
4000dc7c:	98001c1e 	bne	r19,zero,4000dcf0 <__smakebuf_r+0x160>
4000dc80:	dfc01317 	ldw	ra,76(sp)
4000dc84:	dcc01217 	ldw	r19,72(sp)
4000dc88:	dc801117 	ldw	r18,68(sp)
4000dc8c:	dc401017 	ldw	r17,64(sp)
4000dc90:	dc000f17 	ldw	r16,60(sp)
4000dc94:	dec01404 	addi	sp,sp,80
4000dc98:	f800283a 	ret
4000dc9c:	288010c4 	addi	r2,r5,67
4000dca0:	28800015 	stw	r2,0(r5)
4000dca4:	28800415 	stw	r2,16(r5)
4000dca8:	00800044 	movi	r2,1
4000dcac:	28800515 	stw	r2,20(r5)
4000dcb0:	f800283a 	ret
4000dcb4:	04801004 	movi	r18,64
4000dcb8:	003fe006 	br	4000dc3c <__alt_data_end+0xc000dc3c>
4000dcbc:	81000a17 	ldw	r4,40(r16)
4000dcc0:	00d00074 	movhi	r3,16385
4000dcc4:	18fe0c04 	addi	r3,r3,-2000
4000dcc8:	20ffc51e 	bne	r4,r3,4000dbe0 <__alt_data_end+0xc000dbe0>
4000dccc:	80c0030b 	ldhu	r3,12(r16)
4000dcd0:	01010004 	movi	r4,1024
4000dcd4:	81001315 	stw	r4,76(r16)
4000dcd8:	1906b03a 	or	r3,r3,r4
4000dcdc:	80c0030d 	sth	r3,12(r16)
4000dce0:	003fc206 	br	4000dbec <__alt_data_end+0xc000dbec>
4000dce4:	0027883a 	mov	r19,zero
4000dce8:	04810004 	movi	r18,1024
4000dcec:	003fd606 	br	4000dc48 <__alt_data_end+0xc000dc48>
4000dcf0:	8140038f 	ldh	r5,14(r16)
4000dcf4:	8809883a 	mov	r4,r17
4000dcf8:	00113540 	call	40011354 <_isatty_r>
4000dcfc:	103fe026 	beq	r2,zero,4000dc80 <__alt_data_end+0xc000dc80>
4000dd00:	8080030b 	ldhu	r2,12(r16)
4000dd04:	10800054 	ori	r2,r2,1
4000dd08:	8080030d 	sth	r2,12(r16)
4000dd0c:	003fdc06 	br	4000dc80 <__alt_data_end+0xc000dc80>
4000dd10:	8080030b 	ldhu	r2,12(r16)
4000dd14:	10c0800c 	andi	r3,r2,512
4000dd18:	183fd91e 	bne	r3,zero,4000dc80 <__alt_data_end+0xc000dc80>
4000dd1c:	10800094 	ori	r2,r2,2
4000dd20:	80c010c4 	addi	r3,r16,67
4000dd24:	8080030d 	sth	r2,12(r16)
4000dd28:	00800044 	movi	r2,1
4000dd2c:	80c00015 	stw	r3,0(r16)
4000dd30:	80c00415 	stw	r3,16(r16)
4000dd34:	80800515 	stw	r2,20(r16)
4000dd38:	003fd106 	br	4000dc80 <__alt_data_end+0xc000dc80>
4000dd3c:	04c00044 	movi	r19,1
4000dd40:	04810004 	movi	r18,1024
4000dd44:	003fc006 	br	4000dc48 <__alt_data_end+0xc000dc48>

4000dd48 <memchr>:
4000dd48:	208000cc 	andi	r2,r4,3
4000dd4c:	280f883a 	mov	r7,r5
4000dd50:	10003526 	beq	r2,zero,4000de28 <memchr+0xe0>
4000dd54:	30bfffc4 	addi	r2,r6,-1
4000dd58:	30001b26 	beq	r6,zero,4000ddc8 <memchr+0x80>
4000dd5c:	21800003 	ldbu	r6,0(r4)
4000dd60:	28c03fcc 	andi	r3,r5,255
4000dd64:	30c01a26 	beq	r6,r3,4000ddd0 <memchr+0x88>
4000dd68:	180d883a 	mov	r6,r3
4000dd6c:	00000406 	br	4000dd80 <memchr+0x38>
4000dd70:	10001526 	beq	r2,zero,4000ddc8 <memchr+0x80>
4000dd74:	20c00003 	ldbu	r3,0(r4)
4000dd78:	10bfffc4 	addi	r2,r2,-1
4000dd7c:	19801426 	beq	r3,r6,4000ddd0 <memchr+0x88>
4000dd80:	21000044 	addi	r4,r4,1
4000dd84:	20c000cc 	andi	r3,r4,3
4000dd88:	183ff91e 	bne	r3,zero,4000dd70 <__alt_data_end+0xc000dd70>
4000dd8c:	024000c4 	movi	r9,3
4000dd90:	48801136 	bltu	r9,r2,4000ddd8 <memchr+0x90>
4000dd94:	10000c26 	beq	r2,zero,4000ddc8 <memchr+0x80>
4000dd98:	20c00003 	ldbu	r3,0(r4)
4000dd9c:	29403fcc 	andi	r5,r5,255
4000dda0:	19400b26 	beq	r3,r5,4000ddd0 <memchr+0x88>
4000dda4:	20c00044 	addi	r3,r4,1
4000dda8:	2085883a 	add	r2,r4,r2
4000ddac:	39803fcc 	andi	r6,r7,255
4000ddb0:	00000306 	br	4000ddc0 <memchr+0x78>
4000ddb4:	18c00044 	addi	r3,r3,1
4000ddb8:	197fffc3 	ldbu	r5,-1(r3)
4000ddbc:	29800426 	beq	r5,r6,4000ddd0 <memchr+0x88>
4000ddc0:	1809883a 	mov	r4,r3
4000ddc4:	18bffb1e 	bne	r3,r2,4000ddb4 <__alt_data_end+0xc000ddb4>
4000ddc8:	0005883a 	mov	r2,zero
4000ddcc:	f800283a 	ret
4000ddd0:	2005883a 	mov	r2,r4
4000ddd4:	f800283a 	ret
4000ddd8:	28c03fcc 	andi	r3,r5,255
4000dddc:	1810923a 	slli	r8,r3,8
4000dde0:	02ffbff4 	movhi	r11,65279
4000dde4:	02a02074 	movhi	r10,32897
4000dde8:	40c6b03a 	or	r3,r8,r3
4000ddec:	1810943a 	slli	r8,r3,16
4000ddf0:	5affbfc4 	addi	r11,r11,-257
4000ddf4:	52a02004 	addi	r10,r10,-32640
4000ddf8:	40d0b03a 	or	r8,r8,r3
4000ddfc:	20c00017 	ldw	r3,0(r4)
4000de00:	40c6f03a 	xor	r3,r8,r3
4000de04:	1acd883a 	add	r6,r3,r11
4000de08:	00c6303a 	nor	r3,zero,r3
4000de0c:	30c6703a 	and	r3,r6,r3
4000de10:	1a86703a 	and	r3,r3,r10
4000de14:	183fdf1e 	bne	r3,zero,4000dd94 <__alt_data_end+0xc000dd94>
4000de18:	10bfff04 	addi	r2,r2,-4
4000de1c:	21000104 	addi	r4,r4,4
4000de20:	48bff636 	bltu	r9,r2,4000ddfc <__alt_data_end+0xc000ddfc>
4000de24:	003fdb06 	br	4000dd94 <__alt_data_end+0xc000dd94>
4000de28:	3005883a 	mov	r2,r6
4000de2c:	003fd706 	br	4000dd8c <__alt_data_end+0xc000dd8c>

4000de30 <memcpy>:
4000de30:	deffff04 	addi	sp,sp,-4
4000de34:	dc000015 	stw	r16,0(sp)
4000de38:	00c003c4 	movi	r3,15
4000de3c:	2005883a 	mov	r2,r4
4000de40:	1980432e 	bgeu	r3,r6,4000df50 <memcpy+0x120>
4000de44:	2146b03a 	or	r3,r4,r5
4000de48:	18c000cc 	andi	r3,r3,3
4000de4c:	1800421e 	bne	r3,zero,4000df58 <memcpy+0x128>
4000de50:	343ffc04 	addi	r16,r6,-16
4000de54:	8020d13a 	srli	r16,r16,4
4000de58:	28c00104 	addi	r3,r5,4
4000de5c:	23400104 	addi	r13,r4,4
4000de60:	801e913a 	slli	r15,r16,4
4000de64:	2b000204 	addi	r12,r5,8
4000de68:	22c00204 	addi	r11,r4,8
4000de6c:	7bc00504 	addi	r15,r15,20
4000de70:	2a800304 	addi	r10,r5,12
4000de74:	22400304 	addi	r9,r4,12
4000de78:	2bdf883a 	add	r15,r5,r15
4000de7c:	2811883a 	mov	r8,r5
4000de80:	200f883a 	mov	r7,r4
4000de84:	41000017 	ldw	r4,0(r8)
4000de88:	39c00404 	addi	r7,r7,16
4000de8c:	18c00404 	addi	r3,r3,16
4000de90:	393ffc15 	stw	r4,-16(r7)
4000de94:	1bbffc17 	ldw	r14,-16(r3)
4000de98:	6b400404 	addi	r13,r13,16
4000de9c:	5ac00404 	addi	r11,r11,16
4000dea0:	6bbffc15 	stw	r14,-16(r13)
4000dea4:	63800017 	ldw	r14,0(r12)
4000dea8:	4a400404 	addi	r9,r9,16
4000deac:	42000404 	addi	r8,r8,16
4000deb0:	5bbffc15 	stw	r14,-16(r11)
4000deb4:	53800017 	ldw	r14,0(r10)
4000deb8:	63000404 	addi	r12,r12,16
4000debc:	52800404 	addi	r10,r10,16
4000dec0:	4bbffc15 	stw	r14,-16(r9)
4000dec4:	1bffef1e 	bne	r3,r15,4000de84 <__alt_data_end+0xc000de84>
4000dec8:	81c00044 	addi	r7,r16,1
4000decc:	380e913a 	slli	r7,r7,4
4000ded0:	310003cc 	andi	r4,r6,15
4000ded4:	02c000c4 	movi	r11,3
4000ded8:	11c7883a 	add	r3,r2,r7
4000dedc:	29cb883a 	add	r5,r5,r7
4000dee0:	59001f2e 	bgeu	r11,r4,4000df60 <memcpy+0x130>
4000dee4:	1813883a 	mov	r9,r3
4000dee8:	2811883a 	mov	r8,r5
4000deec:	200f883a 	mov	r7,r4
4000def0:	42800017 	ldw	r10,0(r8)
4000def4:	4a400104 	addi	r9,r9,4
4000def8:	39ffff04 	addi	r7,r7,-4
4000defc:	4abfff15 	stw	r10,-4(r9)
4000df00:	42000104 	addi	r8,r8,4
4000df04:	59fffa36 	bltu	r11,r7,4000def0 <__alt_data_end+0xc000def0>
4000df08:	213fff04 	addi	r4,r4,-4
4000df0c:	2008d0ba 	srli	r4,r4,2
4000df10:	318000cc 	andi	r6,r6,3
4000df14:	21000044 	addi	r4,r4,1
4000df18:	2109883a 	add	r4,r4,r4
4000df1c:	2109883a 	add	r4,r4,r4
4000df20:	1907883a 	add	r3,r3,r4
4000df24:	290b883a 	add	r5,r5,r4
4000df28:	30000626 	beq	r6,zero,4000df44 <memcpy+0x114>
4000df2c:	198d883a 	add	r6,r3,r6
4000df30:	29c00003 	ldbu	r7,0(r5)
4000df34:	18c00044 	addi	r3,r3,1
4000df38:	29400044 	addi	r5,r5,1
4000df3c:	19ffffc5 	stb	r7,-1(r3)
4000df40:	19bffb1e 	bne	r3,r6,4000df30 <__alt_data_end+0xc000df30>
4000df44:	dc000017 	ldw	r16,0(sp)
4000df48:	dec00104 	addi	sp,sp,4
4000df4c:	f800283a 	ret
4000df50:	2007883a 	mov	r3,r4
4000df54:	003ff406 	br	4000df28 <__alt_data_end+0xc000df28>
4000df58:	2007883a 	mov	r3,r4
4000df5c:	003ff306 	br	4000df2c <__alt_data_end+0xc000df2c>
4000df60:	200d883a 	mov	r6,r4
4000df64:	003ff006 	br	4000df28 <__alt_data_end+0xc000df28>

4000df68 <memmove>:
4000df68:	2005883a 	mov	r2,r4
4000df6c:	29000b2e 	bgeu	r5,r4,4000df9c <memmove+0x34>
4000df70:	298f883a 	add	r7,r5,r6
4000df74:	21c0092e 	bgeu	r4,r7,4000df9c <memmove+0x34>
4000df78:	2187883a 	add	r3,r4,r6
4000df7c:	198bc83a 	sub	r5,r3,r6
4000df80:	30004b26 	beq	r6,zero,4000e0b0 <memmove+0x148>
4000df84:	39ffffc4 	addi	r7,r7,-1
4000df88:	39000003 	ldbu	r4,0(r7)
4000df8c:	18ffffc4 	addi	r3,r3,-1
4000df90:	19000005 	stb	r4,0(r3)
4000df94:	197ffb1e 	bne	r3,r5,4000df84 <__alt_data_end+0xc000df84>
4000df98:	f800283a 	ret
4000df9c:	00c003c4 	movi	r3,15
4000dfa0:	1980412e 	bgeu	r3,r6,4000e0a8 <memmove+0x140>
4000dfa4:	1146b03a 	or	r3,r2,r5
4000dfa8:	18c000cc 	andi	r3,r3,3
4000dfac:	1800411e 	bne	r3,zero,4000e0b4 <memmove+0x14c>
4000dfb0:	33fffc04 	addi	r15,r6,-16
4000dfb4:	781ed13a 	srli	r15,r15,4
4000dfb8:	28c00104 	addi	r3,r5,4
4000dfbc:	13400104 	addi	r13,r2,4
4000dfc0:	781c913a 	slli	r14,r15,4
4000dfc4:	2b000204 	addi	r12,r5,8
4000dfc8:	12c00204 	addi	r11,r2,8
4000dfcc:	73800504 	addi	r14,r14,20
4000dfd0:	2a800304 	addi	r10,r5,12
4000dfd4:	12400304 	addi	r9,r2,12
4000dfd8:	2b9d883a 	add	r14,r5,r14
4000dfdc:	2811883a 	mov	r8,r5
4000dfe0:	100f883a 	mov	r7,r2
4000dfe4:	41000017 	ldw	r4,0(r8)
4000dfe8:	39c00404 	addi	r7,r7,16
4000dfec:	18c00404 	addi	r3,r3,16
4000dff0:	393ffc15 	stw	r4,-16(r7)
4000dff4:	193ffc17 	ldw	r4,-16(r3)
4000dff8:	6b400404 	addi	r13,r13,16
4000dffc:	5ac00404 	addi	r11,r11,16
4000e000:	693ffc15 	stw	r4,-16(r13)
4000e004:	61000017 	ldw	r4,0(r12)
4000e008:	4a400404 	addi	r9,r9,16
4000e00c:	42000404 	addi	r8,r8,16
4000e010:	593ffc15 	stw	r4,-16(r11)
4000e014:	51000017 	ldw	r4,0(r10)
4000e018:	63000404 	addi	r12,r12,16
4000e01c:	52800404 	addi	r10,r10,16
4000e020:	493ffc15 	stw	r4,-16(r9)
4000e024:	1bbfef1e 	bne	r3,r14,4000dfe4 <__alt_data_end+0xc000dfe4>
4000e028:	79000044 	addi	r4,r15,1
4000e02c:	2008913a 	slli	r4,r4,4
4000e030:	328003cc 	andi	r10,r6,15
4000e034:	02c000c4 	movi	r11,3
4000e038:	1107883a 	add	r3,r2,r4
4000e03c:	290b883a 	add	r5,r5,r4
4000e040:	5a801e2e 	bgeu	r11,r10,4000e0bc <memmove+0x154>
4000e044:	1813883a 	mov	r9,r3
4000e048:	2811883a 	mov	r8,r5
4000e04c:	500f883a 	mov	r7,r10
4000e050:	41000017 	ldw	r4,0(r8)
4000e054:	4a400104 	addi	r9,r9,4
4000e058:	39ffff04 	addi	r7,r7,-4
4000e05c:	493fff15 	stw	r4,-4(r9)
4000e060:	42000104 	addi	r8,r8,4
4000e064:	59fffa36 	bltu	r11,r7,4000e050 <__alt_data_end+0xc000e050>
4000e068:	513fff04 	addi	r4,r10,-4
4000e06c:	2008d0ba 	srli	r4,r4,2
4000e070:	318000cc 	andi	r6,r6,3
4000e074:	21000044 	addi	r4,r4,1
4000e078:	2109883a 	add	r4,r4,r4
4000e07c:	2109883a 	add	r4,r4,r4
4000e080:	1907883a 	add	r3,r3,r4
4000e084:	290b883a 	add	r5,r5,r4
4000e088:	30000926 	beq	r6,zero,4000e0b0 <memmove+0x148>
4000e08c:	198d883a 	add	r6,r3,r6
4000e090:	29c00003 	ldbu	r7,0(r5)
4000e094:	18c00044 	addi	r3,r3,1
4000e098:	29400044 	addi	r5,r5,1
4000e09c:	19ffffc5 	stb	r7,-1(r3)
4000e0a0:	19bffb1e 	bne	r3,r6,4000e090 <__alt_data_end+0xc000e090>
4000e0a4:	f800283a 	ret
4000e0a8:	1007883a 	mov	r3,r2
4000e0ac:	003ff606 	br	4000e088 <__alt_data_end+0xc000e088>
4000e0b0:	f800283a 	ret
4000e0b4:	1007883a 	mov	r3,r2
4000e0b8:	003ff406 	br	4000e08c <__alt_data_end+0xc000e08c>
4000e0bc:	500d883a 	mov	r6,r10
4000e0c0:	003ff106 	br	4000e088 <__alt_data_end+0xc000e088>

4000e0c4 <_Balloc>:
4000e0c4:	20801317 	ldw	r2,76(r4)
4000e0c8:	defffc04 	addi	sp,sp,-16
4000e0cc:	dc400115 	stw	r17,4(sp)
4000e0d0:	dc000015 	stw	r16,0(sp)
4000e0d4:	dfc00315 	stw	ra,12(sp)
4000e0d8:	dc800215 	stw	r18,8(sp)
4000e0dc:	2023883a 	mov	r17,r4
4000e0e0:	2821883a 	mov	r16,r5
4000e0e4:	10000f26 	beq	r2,zero,4000e124 <_Balloc+0x60>
4000e0e8:	8407883a 	add	r3,r16,r16
4000e0ec:	18c7883a 	add	r3,r3,r3
4000e0f0:	10c7883a 	add	r3,r2,r3
4000e0f4:	18800017 	ldw	r2,0(r3)
4000e0f8:	10001126 	beq	r2,zero,4000e140 <_Balloc+0x7c>
4000e0fc:	11000017 	ldw	r4,0(r2)
4000e100:	19000015 	stw	r4,0(r3)
4000e104:	10000415 	stw	zero,16(r2)
4000e108:	10000315 	stw	zero,12(r2)
4000e10c:	dfc00317 	ldw	ra,12(sp)
4000e110:	dc800217 	ldw	r18,8(sp)
4000e114:	dc400117 	ldw	r17,4(sp)
4000e118:	dc000017 	ldw	r16,0(sp)
4000e11c:	dec00404 	addi	sp,sp,16
4000e120:	f800283a 	ret
4000e124:	01400104 	movi	r5,4
4000e128:	01800844 	movi	r6,33
4000e12c:	0010f480 	call	40010f48 <_calloc_r>
4000e130:	88801315 	stw	r2,76(r17)
4000e134:	103fec1e 	bne	r2,zero,4000e0e8 <__alt_data_end+0xc000e0e8>
4000e138:	0005883a 	mov	r2,zero
4000e13c:	003ff306 	br	4000e10c <__alt_data_end+0xc000e10c>
4000e140:	01400044 	movi	r5,1
4000e144:	2c24983a 	sll	r18,r5,r16
4000e148:	8809883a 	mov	r4,r17
4000e14c:	91800144 	addi	r6,r18,5
4000e150:	318d883a 	add	r6,r6,r6
4000e154:	318d883a 	add	r6,r6,r6
4000e158:	0010f480 	call	40010f48 <_calloc_r>
4000e15c:	103ff626 	beq	r2,zero,4000e138 <__alt_data_end+0xc000e138>
4000e160:	14000115 	stw	r16,4(r2)
4000e164:	14800215 	stw	r18,8(r2)
4000e168:	003fe606 	br	4000e104 <__alt_data_end+0xc000e104>

4000e16c <_Bfree>:
4000e16c:	28000826 	beq	r5,zero,4000e190 <_Bfree+0x24>
4000e170:	28c00117 	ldw	r3,4(r5)
4000e174:	20801317 	ldw	r2,76(r4)
4000e178:	18c7883a 	add	r3,r3,r3
4000e17c:	18c7883a 	add	r3,r3,r3
4000e180:	10c5883a 	add	r2,r2,r3
4000e184:	10c00017 	ldw	r3,0(r2)
4000e188:	28c00015 	stw	r3,0(r5)
4000e18c:	11400015 	stw	r5,0(r2)
4000e190:	f800283a 	ret

4000e194 <__multadd>:
4000e194:	defffa04 	addi	sp,sp,-24
4000e198:	dc000115 	stw	r16,4(sp)
4000e19c:	2c000417 	ldw	r16,16(r5)
4000e1a0:	dc800315 	stw	r18,12(sp)
4000e1a4:	dc400215 	stw	r17,8(sp)
4000e1a8:	dfc00515 	stw	ra,20(sp)
4000e1ac:	dcc00415 	stw	r19,16(sp)
4000e1b0:	2823883a 	mov	r17,r5
4000e1b4:	2025883a 	mov	r18,r4
4000e1b8:	2a400504 	addi	r9,r5,20
4000e1bc:	0015883a 	mov	r10,zero
4000e1c0:	4a000017 	ldw	r8,0(r9)
4000e1c4:	4a400104 	addi	r9,r9,4
4000e1c8:	52800044 	addi	r10,r10,1
4000e1cc:	40ffffcc 	andi	r3,r8,65535
4000e1d0:	1987383a 	mul	r3,r3,r6
4000e1d4:	4010d43a 	srli	r8,r8,16
4000e1d8:	19cf883a 	add	r7,r3,r7
4000e1dc:	4191383a 	mul	r8,r8,r6
4000e1e0:	3816d43a 	srli	r11,r7,16
4000e1e4:	38ffffcc 	andi	r3,r7,65535
4000e1e8:	5a0f883a 	add	r7,r11,r8
4000e1ec:	3810943a 	slli	r8,r7,16
4000e1f0:	380ed43a 	srli	r7,r7,16
4000e1f4:	40c7883a 	add	r3,r8,r3
4000e1f8:	48ffff15 	stw	r3,-4(r9)
4000e1fc:	543ff016 	blt	r10,r16,4000e1c0 <__alt_data_end+0xc000e1c0>
4000e200:	38000926 	beq	r7,zero,4000e228 <__multadd+0x94>
4000e204:	88800217 	ldw	r2,8(r17)
4000e208:	80800f0e 	bge	r16,r2,4000e248 <__multadd+0xb4>
4000e20c:	80800144 	addi	r2,r16,5
4000e210:	1085883a 	add	r2,r2,r2
4000e214:	1085883a 	add	r2,r2,r2
4000e218:	8885883a 	add	r2,r17,r2
4000e21c:	11c00015 	stw	r7,0(r2)
4000e220:	84000044 	addi	r16,r16,1
4000e224:	8c000415 	stw	r16,16(r17)
4000e228:	8805883a 	mov	r2,r17
4000e22c:	dfc00517 	ldw	ra,20(sp)
4000e230:	dcc00417 	ldw	r19,16(sp)
4000e234:	dc800317 	ldw	r18,12(sp)
4000e238:	dc400217 	ldw	r17,8(sp)
4000e23c:	dc000117 	ldw	r16,4(sp)
4000e240:	dec00604 	addi	sp,sp,24
4000e244:	f800283a 	ret
4000e248:	89400117 	ldw	r5,4(r17)
4000e24c:	9009883a 	mov	r4,r18
4000e250:	d9c00015 	stw	r7,0(sp)
4000e254:	29400044 	addi	r5,r5,1
4000e258:	000e0c40 	call	4000e0c4 <_Balloc>
4000e25c:	89800417 	ldw	r6,16(r17)
4000e260:	89400304 	addi	r5,r17,12
4000e264:	11000304 	addi	r4,r2,12
4000e268:	31800084 	addi	r6,r6,2
4000e26c:	318d883a 	add	r6,r6,r6
4000e270:	318d883a 	add	r6,r6,r6
4000e274:	1027883a 	mov	r19,r2
4000e278:	000de300 	call	4000de30 <memcpy>
4000e27c:	89000117 	ldw	r4,4(r17)
4000e280:	90c01317 	ldw	r3,76(r18)
4000e284:	d9c00017 	ldw	r7,0(sp)
4000e288:	2109883a 	add	r4,r4,r4
4000e28c:	2109883a 	add	r4,r4,r4
4000e290:	1907883a 	add	r3,r3,r4
4000e294:	18800017 	ldw	r2,0(r3)
4000e298:	88800015 	stw	r2,0(r17)
4000e29c:	1c400015 	stw	r17,0(r3)
4000e2a0:	9823883a 	mov	r17,r19
4000e2a4:	003fd906 	br	4000e20c <__alt_data_end+0xc000e20c>

4000e2a8 <__s2b>:
4000e2a8:	defff904 	addi	sp,sp,-28
4000e2ac:	dc400115 	stw	r17,4(sp)
4000e2b0:	dc000015 	stw	r16,0(sp)
4000e2b4:	2023883a 	mov	r17,r4
4000e2b8:	2821883a 	mov	r16,r5
4000e2bc:	39000204 	addi	r4,r7,8
4000e2c0:	01400244 	movi	r5,9
4000e2c4:	dcc00315 	stw	r19,12(sp)
4000e2c8:	dc800215 	stw	r18,8(sp)
4000e2cc:	dfc00615 	stw	ra,24(sp)
4000e2d0:	dd400515 	stw	r21,20(sp)
4000e2d4:	dd000415 	stw	r20,16(sp)
4000e2d8:	3825883a 	mov	r18,r7
4000e2dc:	3027883a 	mov	r19,r6
4000e2e0:	00050ec0 	call	400050ec <__divsi3>
4000e2e4:	00c00044 	movi	r3,1
4000e2e8:	000b883a 	mov	r5,zero
4000e2ec:	1880030e 	bge	r3,r2,4000e2fc <__s2b+0x54>
4000e2f0:	18c7883a 	add	r3,r3,r3
4000e2f4:	29400044 	addi	r5,r5,1
4000e2f8:	18bffd16 	blt	r3,r2,4000e2f0 <__alt_data_end+0xc000e2f0>
4000e2fc:	8809883a 	mov	r4,r17
4000e300:	000e0c40 	call	4000e0c4 <_Balloc>
4000e304:	d8c00717 	ldw	r3,28(sp)
4000e308:	10c00515 	stw	r3,20(r2)
4000e30c:	00c00044 	movi	r3,1
4000e310:	10c00415 	stw	r3,16(r2)
4000e314:	00c00244 	movi	r3,9
4000e318:	1cc0210e 	bge	r3,r19,4000e3a0 <__s2b+0xf8>
4000e31c:	80eb883a 	add	r21,r16,r3
4000e320:	a829883a 	mov	r20,r21
4000e324:	84e1883a 	add	r16,r16,r19
4000e328:	a1c00007 	ldb	r7,0(r20)
4000e32c:	8809883a 	mov	r4,r17
4000e330:	a5000044 	addi	r20,r20,1
4000e334:	100b883a 	mov	r5,r2
4000e338:	01800284 	movi	r6,10
4000e33c:	39fff404 	addi	r7,r7,-48
4000e340:	000e1940 	call	4000e194 <__multadd>
4000e344:	a43ff81e 	bne	r20,r16,4000e328 <__alt_data_end+0xc000e328>
4000e348:	ace1883a 	add	r16,r21,r19
4000e34c:	843ffe04 	addi	r16,r16,-8
4000e350:	9c800a0e 	bge	r19,r18,4000e37c <__s2b+0xd4>
4000e354:	94e5c83a 	sub	r18,r18,r19
4000e358:	84a5883a 	add	r18,r16,r18
4000e35c:	81c00007 	ldb	r7,0(r16)
4000e360:	8809883a 	mov	r4,r17
4000e364:	84000044 	addi	r16,r16,1
4000e368:	100b883a 	mov	r5,r2
4000e36c:	01800284 	movi	r6,10
4000e370:	39fff404 	addi	r7,r7,-48
4000e374:	000e1940 	call	4000e194 <__multadd>
4000e378:	84bff81e 	bne	r16,r18,4000e35c <__alt_data_end+0xc000e35c>
4000e37c:	dfc00617 	ldw	ra,24(sp)
4000e380:	dd400517 	ldw	r21,20(sp)
4000e384:	dd000417 	ldw	r20,16(sp)
4000e388:	dcc00317 	ldw	r19,12(sp)
4000e38c:	dc800217 	ldw	r18,8(sp)
4000e390:	dc400117 	ldw	r17,4(sp)
4000e394:	dc000017 	ldw	r16,0(sp)
4000e398:	dec00704 	addi	sp,sp,28
4000e39c:	f800283a 	ret
4000e3a0:	84000284 	addi	r16,r16,10
4000e3a4:	1827883a 	mov	r19,r3
4000e3a8:	003fe906 	br	4000e350 <__alt_data_end+0xc000e350>

4000e3ac <__hi0bits>:
4000e3ac:	20bfffec 	andhi	r2,r4,65535
4000e3b0:	1000141e 	bne	r2,zero,4000e404 <__hi0bits+0x58>
4000e3b4:	2008943a 	slli	r4,r4,16
4000e3b8:	00800404 	movi	r2,16
4000e3bc:	20ffc02c 	andhi	r3,r4,65280
4000e3c0:	1800021e 	bne	r3,zero,4000e3cc <__hi0bits+0x20>
4000e3c4:	2008923a 	slli	r4,r4,8
4000e3c8:	10800204 	addi	r2,r2,8
4000e3cc:	20fc002c 	andhi	r3,r4,61440
4000e3d0:	1800021e 	bne	r3,zero,4000e3dc <__hi0bits+0x30>
4000e3d4:	2008913a 	slli	r4,r4,4
4000e3d8:	10800104 	addi	r2,r2,4
4000e3dc:	20f0002c 	andhi	r3,r4,49152
4000e3e0:	1800031e 	bne	r3,zero,4000e3f0 <__hi0bits+0x44>
4000e3e4:	2109883a 	add	r4,r4,r4
4000e3e8:	10800084 	addi	r2,r2,2
4000e3ec:	2109883a 	add	r4,r4,r4
4000e3f0:	20000316 	blt	r4,zero,4000e400 <__hi0bits+0x54>
4000e3f4:	2110002c 	andhi	r4,r4,16384
4000e3f8:	2000041e 	bne	r4,zero,4000e40c <__hi0bits+0x60>
4000e3fc:	00800804 	movi	r2,32
4000e400:	f800283a 	ret
4000e404:	0005883a 	mov	r2,zero
4000e408:	003fec06 	br	4000e3bc <__alt_data_end+0xc000e3bc>
4000e40c:	10800044 	addi	r2,r2,1
4000e410:	f800283a 	ret

4000e414 <__lo0bits>:
4000e414:	20c00017 	ldw	r3,0(r4)
4000e418:	188001cc 	andi	r2,r3,7
4000e41c:	10000826 	beq	r2,zero,4000e440 <__lo0bits+0x2c>
4000e420:	1880004c 	andi	r2,r3,1
4000e424:	1000211e 	bne	r2,zero,4000e4ac <__lo0bits+0x98>
4000e428:	1880008c 	andi	r2,r3,2
4000e42c:	1000211e 	bne	r2,zero,4000e4b4 <__lo0bits+0xa0>
4000e430:	1806d0ba 	srli	r3,r3,2
4000e434:	00800084 	movi	r2,2
4000e438:	20c00015 	stw	r3,0(r4)
4000e43c:	f800283a 	ret
4000e440:	18bfffcc 	andi	r2,r3,65535
4000e444:	10001326 	beq	r2,zero,4000e494 <__lo0bits+0x80>
4000e448:	0005883a 	mov	r2,zero
4000e44c:	19403fcc 	andi	r5,r3,255
4000e450:	2800021e 	bne	r5,zero,4000e45c <__lo0bits+0x48>
4000e454:	1806d23a 	srli	r3,r3,8
4000e458:	10800204 	addi	r2,r2,8
4000e45c:	194003cc 	andi	r5,r3,15
4000e460:	2800021e 	bne	r5,zero,4000e46c <__lo0bits+0x58>
4000e464:	1806d13a 	srli	r3,r3,4
4000e468:	10800104 	addi	r2,r2,4
4000e46c:	194000cc 	andi	r5,r3,3
4000e470:	2800021e 	bne	r5,zero,4000e47c <__lo0bits+0x68>
4000e474:	1806d0ba 	srli	r3,r3,2
4000e478:	10800084 	addi	r2,r2,2
4000e47c:	1940004c 	andi	r5,r3,1
4000e480:	2800081e 	bne	r5,zero,4000e4a4 <__lo0bits+0x90>
4000e484:	1806d07a 	srli	r3,r3,1
4000e488:	1800051e 	bne	r3,zero,4000e4a0 <__lo0bits+0x8c>
4000e48c:	00800804 	movi	r2,32
4000e490:	f800283a 	ret
4000e494:	1806d43a 	srli	r3,r3,16
4000e498:	00800404 	movi	r2,16
4000e49c:	003feb06 	br	4000e44c <__alt_data_end+0xc000e44c>
4000e4a0:	10800044 	addi	r2,r2,1
4000e4a4:	20c00015 	stw	r3,0(r4)
4000e4a8:	f800283a 	ret
4000e4ac:	0005883a 	mov	r2,zero
4000e4b0:	f800283a 	ret
4000e4b4:	1806d07a 	srli	r3,r3,1
4000e4b8:	00800044 	movi	r2,1
4000e4bc:	20c00015 	stw	r3,0(r4)
4000e4c0:	f800283a 	ret

4000e4c4 <__i2b>:
4000e4c4:	defffd04 	addi	sp,sp,-12
4000e4c8:	dc000015 	stw	r16,0(sp)
4000e4cc:	04000044 	movi	r16,1
4000e4d0:	dc400115 	stw	r17,4(sp)
4000e4d4:	2823883a 	mov	r17,r5
4000e4d8:	800b883a 	mov	r5,r16
4000e4dc:	dfc00215 	stw	ra,8(sp)
4000e4e0:	000e0c40 	call	4000e0c4 <_Balloc>
4000e4e4:	14400515 	stw	r17,20(r2)
4000e4e8:	14000415 	stw	r16,16(r2)
4000e4ec:	dfc00217 	ldw	ra,8(sp)
4000e4f0:	dc400117 	ldw	r17,4(sp)
4000e4f4:	dc000017 	ldw	r16,0(sp)
4000e4f8:	dec00304 	addi	sp,sp,12
4000e4fc:	f800283a 	ret

4000e500 <__multiply>:
4000e500:	defffa04 	addi	sp,sp,-24
4000e504:	dcc00315 	stw	r19,12(sp)
4000e508:	dc800215 	stw	r18,8(sp)
4000e50c:	2cc00417 	ldw	r19,16(r5)
4000e510:	34800417 	ldw	r18,16(r6)
4000e514:	dd000415 	stw	r20,16(sp)
4000e518:	dc400115 	stw	r17,4(sp)
4000e51c:	dfc00515 	stw	ra,20(sp)
4000e520:	dc000015 	stw	r16,0(sp)
4000e524:	2829883a 	mov	r20,r5
4000e528:	3023883a 	mov	r17,r6
4000e52c:	9c807016 	blt	r19,r18,4000e6f0 <__multiply+0x1f0>
4000e530:	9005883a 	mov	r2,r18
4000e534:	9825883a 	mov	r18,r19
4000e538:	1027883a 	mov	r19,r2
4000e53c:	a0800217 	ldw	r2,8(r20)
4000e540:	94e1883a 	add	r16,r18,r19
4000e544:	a1400117 	ldw	r5,4(r20)
4000e548:	1400010e 	bge	r2,r16,4000e550 <__multiply+0x50>
4000e54c:	29400044 	addi	r5,r5,1
4000e550:	000e0c40 	call	4000e0c4 <_Balloc>
4000e554:	8417883a 	add	r11,r16,r16
4000e558:	13000504 	addi	r12,r2,20
4000e55c:	5ad7883a 	add	r11,r11,r11
4000e560:	62d7883a 	add	r11,r12,r11
4000e564:	6007883a 	mov	r3,r12
4000e568:	62c0032e 	bgeu	r12,r11,4000e578 <__multiply+0x78>
4000e56c:	18000015 	stw	zero,0(r3)
4000e570:	18c00104 	addi	r3,r3,4
4000e574:	1afffd36 	bltu	r3,r11,4000e56c <__alt_data_end+0xc000e56c>
4000e578:	9ce7883a 	add	r19,r19,r19
4000e57c:	94a5883a 	add	r18,r18,r18
4000e580:	89800504 	addi	r6,r17,20
4000e584:	9ce7883a 	add	r19,r19,r19
4000e588:	a3800504 	addi	r14,r20,20
4000e58c:	94a5883a 	add	r18,r18,r18
4000e590:	34db883a 	add	r13,r6,r19
4000e594:	7495883a 	add	r10,r14,r18
4000e598:	3340422e 	bgeu	r6,r13,4000e6a4 <__multiply+0x1a4>
4000e59c:	34400017 	ldw	r17,0(r6)
4000e5a0:	8cbfffcc 	andi	r18,r17,65535
4000e5a4:	90001b26 	beq	r18,zero,4000e614 <__multiply+0x114>
4000e5a8:	6013883a 	mov	r9,r12
4000e5ac:	7023883a 	mov	r17,r14
4000e5b0:	0011883a 	mov	r8,zero
4000e5b4:	88c00017 	ldw	r3,0(r17)
4000e5b8:	4bc00017 	ldw	r15,0(r9)
4000e5bc:	8c400104 	addi	r17,r17,4
4000e5c0:	19ffffcc 	andi	r7,r3,65535
4000e5c4:	3c8f383a 	mul	r7,r7,r18
4000e5c8:	1808d43a 	srli	r4,r3,16
4000e5cc:	797fffcc 	andi	r5,r15,65535
4000e5d0:	29cb883a 	add	r5,r5,r7
4000e5d4:	2a0b883a 	add	r5,r5,r8
4000e5d8:	2489383a 	mul	r4,r4,r18
4000e5dc:	7806d43a 	srli	r3,r15,16
4000e5e0:	2810d43a 	srli	r8,r5,16
4000e5e4:	297fffcc 	andi	r5,r5,65535
4000e5e8:	1907883a 	add	r3,r3,r4
4000e5ec:	1a07883a 	add	r3,r3,r8
4000e5f0:	1808943a 	slli	r4,r3,16
4000e5f4:	480f883a 	mov	r7,r9
4000e5f8:	1810d43a 	srli	r8,r3,16
4000e5fc:	214ab03a 	or	r5,r4,r5
4000e600:	49400015 	stw	r5,0(r9)
4000e604:	4a400104 	addi	r9,r9,4
4000e608:	8abfea36 	bltu	r17,r10,4000e5b4 <__alt_data_end+0xc000e5b4>
4000e60c:	3a000115 	stw	r8,4(r7)
4000e610:	34400017 	ldw	r17,0(r6)
4000e614:	8822d43a 	srli	r17,r17,16
4000e618:	88001f26 	beq	r17,zero,4000e698 <__multiply+0x198>
4000e61c:	60c00017 	ldw	r3,0(r12)
4000e620:	7013883a 	mov	r9,r14
4000e624:	601f883a 	mov	r15,r12
4000e628:	1811883a 	mov	r8,r3
4000e62c:	6027883a 	mov	r19,r12
4000e630:	000f883a 	mov	r7,zero
4000e634:	00000106 	br	4000e63c <__multiply+0x13c>
4000e638:	9027883a 	mov	r19,r18
4000e63c:	4940000b 	ldhu	r5,0(r9)
4000e640:	4010d43a 	srli	r8,r8,16
4000e644:	193fffcc 	andi	r4,r3,65535
4000e648:	2c4b383a 	mul	r5,r5,r17
4000e64c:	7bc00104 	addi	r15,r15,4
4000e650:	4a400104 	addi	r9,r9,4
4000e654:	2a0b883a 	add	r5,r5,r8
4000e658:	29cb883a 	add	r5,r5,r7
4000e65c:	2806943a 	slli	r3,r5,16
4000e660:	9c800104 	addi	r18,r19,4
4000e664:	280ad43a 	srli	r5,r5,16
4000e668:	1908b03a 	or	r4,r3,r4
4000e66c:	793fff15 	stw	r4,-4(r15)
4000e670:	48ffff17 	ldw	r3,-4(r9)
4000e674:	92000017 	ldw	r8,0(r18)
4000e678:	1806d43a 	srli	r3,r3,16
4000e67c:	413fffcc 	andi	r4,r8,65535
4000e680:	1c47383a 	mul	r3,r3,r17
4000e684:	1907883a 	add	r3,r3,r4
4000e688:	1947883a 	add	r3,r3,r5
4000e68c:	180ed43a 	srli	r7,r3,16
4000e690:	4abfe936 	bltu	r9,r10,4000e638 <__alt_data_end+0xc000e638>
4000e694:	98c00115 	stw	r3,4(r19)
4000e698:	31800104 	addi	r6,r6,4
4000e69c:	63000104 	addi	r12,r12,4
4000e6a0:	337fbe36 	bltu	r6,r13,4000e59c <__alt_data_end+0xc000e59c>
4000e6a4:	0400090e 	bge	zero,r16,4000e6cc <__multiply+0x1cc>
4000e6a8:	58ffff17 	ldw	r3,-4(r11)
4000e6ac:	5affff04 	addi	r11,r11,-4
4000e6b0:	18000326 	beq	r3,zero,4000e6c0 <__multiply+0x1c0>
4000e6b4:	00000506 	br	4000e6cc <__multiply+0x1cc>
4000e6b8:	58c00017 	ldw	r3,0(r11)
4000e6bc:	1800031e 	bne	r3,zero,4000e6cc <__multiply+0x1cc>
4000e6c0:	843fffc4 	addi	r16,r16,-1
4000e6c4:	5affff04 	addi	r11,r11,-4
4000e6c8:	803ffb1e 	bne	r16,zero,4000e6b8 <__alt_data_end+0xc000e6b8>
4000e6cc:	14000415 	stw	r16,16(r2)
4000e6d0:	dfc00517 	ldw	ra,20(sp)
4000e6d4:	dd000417 	ldw	r20,16(sp)
4000e6d8:	dcc00317 	ldw	r19,12(sp)
4000e6dc:	dc800217 	ldw	r18,8(sp)
4000e6e0:	dc400117 	ldw	r17,4(sp)
4000e6e4:	dc000017 	ldw	r16,0(sp)
4000e6e8:	dec00604 	addi	sp,sp,24
4000e6ec:	f800283a 	ret
4000e6f0:	3029883a 	mov	r20,r6
4000e6f4:	2823883a 	mov	r17,r5
4000e6f8:	003f9006 	br	4000e53c <__alt_data_end+0xc000e53c>

4000e6fc <__pow5mult>:
4000e6fc:	defffa04 	addi	sp,sp,-24
4000e700:	dcc00315 	stw	r19,12(sp)
4000e704:	dc800215 	stw	r18,8(sp)
4000e708:	dc000015 	stw	r16,0(sp)
4000e70c:	dfc00515 	stw	ra,20(sp)
4000e710:	dd000415 	stw	r20,16(sp)
4000e714:	dc400115 	stw	r17,4(sp)
4000e718:	308000cc 	andi	r2,r6,3
4000e71c:	3021883a 	mov	r16,r6
4000e720:	2027883a 	mov	r19,r4
4000e724:	2825883a 	mov	r18,r5
4000e728:	10002e1e 	bne	r2,zero,4000e7e4 <__pow5mult+0xe8>
4000e72c:	8021d0ba 	srai	r16,r16,2
4000e730:	80001a26 	beq	r16,zero,4000e79c <__pow5mult+0xa0>
4000e734:	9c401217 	ldw	r17,72(r19)
4000e738:	8800061e 	bne	r17,zero,4000e754 <__pow5mult+0x58>
4000e73c:	00003406 	br	4000e810 <__pow5mult+0x114>
4000e740:	8021d07a 	srai	r16,r16,1
4000e744:	80001526 	beq	r16,zero,4000e79c <__pow5mult+0xa0>
4000e748:	88800017 	ldw	r2,0(r17)
4000e74c:	10001c26 	beq	r2,zero,4000e7c0 <__pow5mult+0xc4>
4000e750:	1023883a 	mov	r17,r2
4000e754:	80c0004c 	andi	r3,r16,1
4000e758:	183ff926 	beq	r3,zero,4000e740 <__alt_data_end+0xc000e740>
4000e75c:	900b883a 	mov	r5,r18
4000e760:	880d883a 	mov	r6,r17
4000e764:	9809883a 	mov	r4,r19
4000e768:	000e5000 	call	4000e500 <__multiply>
4000e76c:	90001b26 	beq	r18,zero,4000e7dc <__pow5mult+0xe0>
4000e770:	91c00117 	ldw	r7,4(r18)
4000e774:	98c01317 	ldw	r3,76(r19)
4000e778:	8021d07a 	srai	r16,r16,1
4000e77c:	39cf883a 	add	r7,r7,r7
4000e780:	39cf883a 	add	r7,r7,r7
4000e784:	19c7883a 	add	r3,r3,r7
4000e788:	19000017 	ldw	r4,0(r3)
4000e78c:	91000015 	stw	r4,0(r18)
4000e790:	1c800015 	stw	r18,0(r3)
4000e794:	1025883a 	mov	r18,r2
4000e798:	803feb1e 	bne	r16,zero,4000e748 <__alt_data_end+0xc000e748>
4000e79c:	9005883a 	mov	r2,r18
4000e7a0:	dfc00517 	ldw	ra,20(sp)
4000e7a4:	dd000417 	ldw	r20,16(sp)
4000e7a8:	dcc00317 	ldw	r19,12(sp)
4000e7ac:	dc800217 	ldw	r18,8(sp)
4000e7b0:	dc400117 	ldw	r17,4(sp)
4000e7b4:	dc000017 	ldw	r16,0(sp)
4000e7b8:	dec00604 	addi	sp,sp,24
4000e7bc:	f800283a 	ret
4000e7c0:	9809883a 	mov	r4,r19
4000e7c4:	880b883a 	mov	r5,r17
4000e7c8:	880d883a 	mov	r6,r17
4000e7cc:	000e5000 	call	4000e500 <__multiply>
4000e7d0:	88800015 	stw	r2,0(r17)
4000e7d4:	10000015 	stw	zero,0(r2)
4000e7d8:	003fdd06 	br	4000e750 <__alt_data_end+0xc000e750>
4000e7dc:	1025883a 	mov	r18,r2
4000e7e0:	003fd706 	br	4000e740 <__alt_data_end+0xc000e740>
4000e7e4:	10bfffc4 	addi	r2,r2,-1
4000e7e8:	1085883a 	add	r2,r2,r2
4000e7ec:	00d00074 	movhi	r3,16385
4000e7f0:	18d3f104 	addi	r3,r3,20420
4000e7f4:	1085883a 	add	r2,r2,r2
4000e7f8:	1885883a 	add	r2,r3,r2
4000e7fc:	11800017 	ldw	r6,0(r2)
4000e800:	000f883a 	mov	r7,zero
4000e804:	000e1940 	call	4000e194 <__multadd>
4000e808:	1025883a 	mov	r18,r2
4000e80c:	003fc706 	br	4000e72c <__alt_data_end+0xc000e72c>
4000e810:	05000044 	movi	r20,1
4000e814:	9809883a 	mov	r4,r19
4000e818:	a00b883a 	mov	r5,r20
4000e81c:	000e0c40 	call	4000e0c4 <_Balloc>
4000e820:	1023883a 	mov	r17,r2
4000e824:	00809c44 	movi	r2,625
4000e828:	88800515 	stw	r2,20(r17)
4000e82c:	8d000415 	stw	r20,16(r17)
4000e830:	9c401215 	stw	r17,72(r19)
4000e834:	88000015 	stw	zero,0(r17)
4000e838:	003fc606 	br	4000e754 <__alt_data_end+0xc000e754>

4000e83c <__lshift>:
4000e83c:	defff904 	addi	sp,sp,-28
4000e840:	dd000415 	stw	r20,16(sp)
4000e844:	dcc00315 	stw	r19,12(sp)
4000e848:	3029d17a 	srai	r20,r6,5
4000e84c:	2cc00417 	ldw	r19,16(r5)
4000e850:	28800217 	ldw	r2,8(r5)
4000e854:	dd400515 	stw	r21,20(sp)
4000e858:	a4e7883a 	add	r19,r20,r19
4000e85c:	dc800215 	stw	r18,8(sp)
4000e860:	dc400115 	stw	r17,4(sp)
4000e864:	dc000015 	stw	r16,0(sp)
4000e868:	dfc00615 	stw	ra,24(sp)
4000e86c:	9c000044 	addi	r16,r19,1
4000e870:	2823883a 	mov	r17,r5
4000e874:	302b883a 	mov	r21,r6
4000e878:	2025883a 	mov	r18,r4
4000e87c:	29400117 	ldw	r5,4(r5)
4000e880:	1400030e 	bge	r2,r16,4000e890 <__lshift+0x54>
4000e884:	1085883a 	add	r2,r2,r2
4000e888:	29400044 	addi	r5,r5,1
4000e88c:	143ffd16 	blt	r2,r16,4000e884 <__alt_data_end+0xc000e884>
4000e890:	9009883a 	mov	r4,r18
4000e894:	000e0c40 	call	4000e0c4 <_Balloc>
4000e898:	11c00504 	addi	r7,r2,20
4000e89c:	0500090e 	bge	zero,r20,4000e8c4 <__lshift+0x88>
4000e8a0:	3811883a 	mov	r8,r7
4000e8a4:	0007883a 	mov	r3,zero
4000e8a8:	40000015 	stw	zero,0(r8)
4000e8ac:	18c00044 	addi	r3,r3,1
4000e8b0:	42000104 	addi	r8,r8,4
4000e8b4:	1d3ffc1e 	bne	r3,r20,4000e8a8 <__alt_data_end+0xc000e8a8>
4000e8b8:	18c7883a 	add	r3,r3,r3
4000e8bc:	18c7883a 	add	r3,r3,r3
4000e8c0:	38cf883a 	add	r7,r7,r3
4000e8c4:	89000417 	ldw	r4,16(r17)
4000e8c8:	88c00504 	addi	r3,r17,20
4000e8cc:	a98007cc 	andi	r6,r21,31
4000e8d0:	2109883a 	add	r4,r4,r4
4000e8d4:	2109883a 	add	r4,r4,r4
4000e8d8:	1909883a 	add	r4,r3,r4
4000e8dc:	30002326 	beq	r6,zero,4000e96c <__lshift+0x130>
4000e8e0:	01400804 	movi	r5,32
4000e8e4:	298bc83a 	sub	r5,r5,r6
4000e8e8:	0013883a 	mov	r9,zero
4000e8ec:	1a000017 	ldw	r8,0(r3)
4000e8f0:	3815883a 	mov	r10,r7
4000e8f4:	39c00104 	addi	r7,r7,4
4000e8f8:	4190983a 	sll	r8,r8,r6
4000e8fc:	18c00104 	addi	r3,r3,4
4000e900:	4a10b03a 	or	r8,r9,r8
4000e904:	3a3fff15 	stw	r8,-4(r7)
4000e908:	1a3fff17 	ldw	r8,-4(r3)
4000e90c:	4152d83a 	srl	r9,r8,r5
4000e910:	193ff636 	bltu	r3,r4,4000e8ec <__alt_data_end+0xc000e8ec>
4000e914:	52400115 	stw	r9,4(r10)
4000e918:	48000126 	beq	r9,zero,4000e920 <__lshift+0xe4>
4000e91c:	9c000084 	addi	r16,r19,2
4000e920:	89000117 	ldw	r4,4(r17)
4000e924:	90c01317 	ldw	r3,76(r18)
4000e928:	843fffc4 	addi	r16,r16,-1
4000e92c:	2109883a 	add	r4,r4,r4
4000e930:	2109883a 	add	r4,r4,r4
4000e934:	1907883a 	add	r3,r3,r4
4000e938:	19000017 	ldw	r4,0(r3)
4000e93c:	14000415 	stw	r16,16(r2)
4000e940:	89000015 	stw	r4,0(r17)
4000e944:	1c400015 	stw	r17,0(r3)
4000e948:	dfc00617 	ldw	ra,24(sp)
4000e94c:	dd400517 	ldw	r21,20(sp)
4000e950:	dd000417 	ldw	r20,16(sp)
4000e954:	dcc00317 	ldw	r19,12(sp)
4000e958:	dc800217 	ldw	r18,8(sp)
4000e95c:	dc400117 	ldw	r17,4(sp)
4000e960:	dc000017 	ldw	r16,0(sp)
4000e964:	dec00704 	addi	sp,sp,28
4000e968:	f800283a 	ret
4000e96c:	19400017 	ldw	r5,0(r3)
4000e970:	39c00104 	addi	r7,r7,4
4000e974:	18c00104 	addi	r3,r3,4
4000e978:	397fff15 	stw	r5,-4(r7)
4000e97c:	193ffb36 	bltu	r3,r4,4000e96c <__alt_data_end+0xc000e96c>
4000e980:	003fe706 	br	4000e920 <__alt_data_end+0xc000e920>

4000e984 <__mcmp>:
4000e984:	20800417 	ldw	r2,16(r4)
4000e988:	28c00417 	ldw	r3,16(r5)
4000e98c:	10c5c83a 	sub	r2,r2,r3
4000e990:	1000111e 	bne	r2,zero,4000e9d8 <__mcmp+0x54>
4000e994:	18c7883a 	add	r3,r3,r3
4000e998:	18c7883a 	add	r3,r3,r3
4000e99c:	21000504 	addi	r4,r4,20
4000e9a0:	29400504 	addi	r5,r5,20
4000e9a4:	20c5883a 	add	r2,r4,r3
4000e9a8:	28cb883a 	add	r5,r5,r3
4000e9ac:	00000106 	br	4000e9b4 <__mcmp+0x30>
4000e9b0:	20800a2e 	bgeu	r4,r2,4000e9dc <__mcmp+0x58>
4000e9b4:	10bfff04 	addi	r2,r2,-4
4000e9b8:	297fff04 	addi	r5,r5,-4
4000e9bc:	11800017 	ldw	r6,0(r2)
4000e9c0:	28c00017 	ldw	r3,0(r5)
4000e9c4:	30fffa26 	beq	r6,r3,4000e9b0 <__alt_data_end+0xc000e9b0>
4000e9c8:	30c00236 	bltu	r6,r3,4000e9d4 <__mcmp+0x50>
4000e9cc:	00800044 	movi	r2,1
4000e9d0:	f800283a 	ret
4000e9d4:	00bfffc4 	movi	r2,-1
4000e9d8:	f800283a 	ret
4000e9dc:	0005883a 	mov	r2,zero
4000e9e0:	f800283a 	ret

4000e9e4 <__mdiff>:
4000e9e4:	defffb04 	addi	sp,sp,-20
4000e9e8:	dc000015 	stw	r16,0(sp)
4000e9ec:	2821883a 	mov	r16,r5
4000e9f0:	dcc00315 	stw	r19,12(sp)
4000e9f4:	300b883a 	mov	r5,r6
4000e9f8:	2027883a 	mov	r19,r4
4000e9fc:	8009883a 	mov	r4,r16
4000ea00:	dc800215 	stw	r18,8(sp)
4000ea04:	dfc00415 	stw	ra,16(sp)
4000ea08:	dc400115 	stw	r17,4(sp)
4000ea0c:	3025883a 	mov	r18,r6
4000ea10:	000e9840 	call	4000e984 <__mcmp>
4000ea14:	10005226 	beq	r2,zero,4000eb60 <__mdiff+0x17c>
4000ea18:	10004c16 	blt	r2,zero,4000eb4c <__mdiff+0x168>
4000ea1c:	0023883a 	mov	r17,zero
4000ea20:	81400117 	ldw	r5,4(r16)
4000ea24:	9809883a 	mov	r4,r19
4000ea28:	000e0c40 	call	4000e0c4 <_Balloc>
4000ea2c:	83400417 	ldw	r13,16(r16)
4000ea30:	93800417 	ldw	r14,16(r18)
4000ea34:	81000504 	addi	r4,r16,20
4000ea38:	6b59883a 	add	r12,r13,r13
4000ea3c:	739d883a 	add	r14,r14,r14
4000ea40:	6319883a 	add	r12,r12,r12
4000ea44:	91800504 	addi	r6,r18,20
4000ea48:	739d883a 	add	r14,r14,r14
4000ea4c:	14400315 	stw	r17,12(r2)
4000ea50:	2319883a 	add	r12,r4,r12
4000ea54:	339d883a 	add	r14,r6,r14
4000ea58:	12400504 	addi	r9,r2,20
4000ea5c:	0007883a 	mov	r3,zero
4000ea60:	22000017 	ldw	r8,0(r4)
4000ea64:	32800017 	ldw	r10,0(r6)
4000ea68:	4ac00104 	addi	r11,r9,4
4000ea6c:	41ffffcc 	andi	r7,r8,65535
4000ea70:	38c7883a 	add	r3,r7,r3
4000ea74:	51ffffcc 	andi	r7,r10,65535
4000ea78:	19cfc83a 	sub	r7,r3,r7
4000ea7c:	4010d43a 	srli	r8,r8,16
4000ea80:	5014d43a 	srli	r10,r10,16
4000ea84:	3807d43a 	srai	r3,r7,16
4000ea88:	39ffffcc 	andi	r7,r7,65535
4000ea8c:	4291c83a 	sub	r8,r8,r10
4000ea90:	40c7883a 	add	r3,r8,r3
4000ea94:	1810943a 	slli	r8,r3,16
4000ea98:	31800104 	addi	r6,r6,4
4000ea9c:	21000104 	addi	r4,r4,4
4000eaa0:	41ceb03a 	or	r7,r8,r7
4000eaa4:	49c00015 	stw	r7,0(r9)
4000eaa8:	1807d43a 	srai	r3,r3,16
4000eaac:	580b883a 	mov	r5,r11
4000eab0:	5813883a 	mov	r9,r11
4000eab4:	33bfea36 	bltu	r6,r14,4000ea60 <__alt_data_end+0xc000ea60>
4000eab8:	2011883a 	mov	r8,r4
4000eabc:	2300152e 	bgeu	r4,r12,4000eb14 <__mdiff+0x130>
4000eac0:	21400017 	ldw	r5,0(r4)
4000eac4:	4a400104 	addi	r9,r9,4
4000eac8:	21000104 	addi	r4,r4,4
4000eacc:	29ffffcc 	andi	r7,r5,65535
4000ead0:	38c7883a 	add	r3,r7,r3
4000ead4:	280ad43a 	srli	r5,r5,16
4000ead8:	180dd43a 	srai	r6,r3,16
4000eadc:	19ffffcc 	andi	r7,r3,65535
4000eae0:	3147883a 	add	r3,r6,r5
4000eae4:	180a943a 	slli	r5,r3,16
4000eae8:	1807d43a 	srai	r3,r3,16
4000eaec:	29ceb03a 	or	r7,r5,r7
4000eaf0:	49ffff15 	stw	r7,-4(r9)
4000eaf4:	233ff236 	bltu	r4,r12,4000eac0 <__alt_data_end+0xc000eac0>
4000eaf8:	0206303a 	nor	r3,zero,r8
4000eafc:	1b07883a 	add	r3,r3,r12
4000eb00:	1806d0ba 	srli	r3,r3,2
4000eb04:	18c00044 	addi	r3,r3,1
4000eb08:	18c7883a 	add	r3,r3,r3
4000eb0c:	18c7883a 	add	r3,r3,r3
4000eb10:	58cb883a 	add	r5,r11,r3
4000eb14:	28ffff04 	addi	r3,r5,-4
4000eb18:	3800041e 	bne	r7,zero,4000eb2c <__mdiff+0x148>
4000eb1c:	18ffff04 	addi	r3,r3,-4
4000eb20:	19000017 	ldw	r4,0(r3)
4000eb24:	6b7fffc4 	addi	r13,r13,-1
4000eb28:	203ffc26 	beq	r4,zero,4000eb1c <__alt_data_end+0xc000eb1c>
4000eb2c:	13400415 	stw	r13,16(r2)
4000eb30:	dfc00417 	ldw	ra,16(sp)
4000eb34:	dcc00317 	ldw	r19,12(sp)
4000eb38:	dc800217 	ldw	r18,8(sp)
4000eb3c:	dc400117 	ldw	r17,4(sp)
4000eb40:	dc000017 	ldw	r16,0(sp)
4000eb44:	dec00504 	addi	sp,sp,20
4000eb48:	f800283a 	ret
4000eb4c:	8005883a 	mov	r2,r16
4000eb50:	04400044 	movi	r17,1
4000eb54:	9021883a 	mov	r16,r18
4000eb58:	1025883a 	mov	r18,r2
4000eb5c:	003fb006 	br	4000ea20 <__alt_data_end+0xc000ea20>
4000eb60:	9809883a 	mov	r4,r19
4000eb64:	000b883a 	mov	r5,zero
4000eb68:	000e0c40 	call	4000e0c4 <_Balloc>
4000eb6c:	00c00044 	movi	r3,1
4000eb70:	10c00415 	stw	r3,16(r2)
4000eb74:	10000515 	stw	zero,20(r2)
4000eb78:	003fed06 	br	4000eb30 <__alt_data_end+0xc000eb30>

4000eb7c <__ulp>:
4000eb7c:	295ffc2c 	andhi	r5,r5,32752
4000eb80:	00bf3034 	movhi	r2,64704
4000eb84:	2887883a 	add	r3,r5,r2
4000eb88:	00c0020e 	bge	zero,r3,4000eb94 <__ulp+0x18>
4000eb8c:	0005883a 	mov	r2,zero
4000eb90:	f800283a 	ret
4000eb94:	00c7c83a 	sub	r3,zero,r3
4000eb98:	180bd53a 	srai	r5,r3,20
4000eb9c:	008004c4 	movi	r2,19
4000eba0:	11400a0e 	bge	r2,r5,4000ebcc <__ulp+0x50>
4000eba4:	00800c84 	movi	r2,50
4000eba8:	0007883a 	mov	r3,zero
4000ebac:	11400516 	blt	r2,r5,4000ebc4 <__ulp+0x48>
4000ebb0:	00800cc4 	movi	r2,51
4000ebb4:	114bc83a 	sub	r5,r2,r5
4000ebb8:	00800044 	movi	r2,1
4000ebbc:	1144983a 	sll	r2,r2,r5
4000ebc0:	f800283a 	ret
4000ebc4:	00800044 	movi	r2,1
4000ebc8:	f800283a 	ret
4000ebcc:	00800234 	movhi	r2,8
4000ebd0:	1147d83a 	sra	r3,r2,r5
4000ebd4:	0005883a 	mov	r2,zero
4000ebd8:	f800283a 	ret

4000ebdc <__b2d>:
4000ebdc:	defffa04 	addi	sp,sp,-24
4000ebe0:	dc000015 	stw	r16,0(sp)
4000ebe4:	24000417 	ldw	r16,16(r4)
4000ebe8:	dc400115 	stw	r17,4(sp)
4000ebec:	24400504 	addi	r17,r4,20
4000ebf0:	8421883a 	add	r16,r16,r16
4000ebf4:	8421883a 	add	r16,r16,r16
4000ebf8:	8c21883a 	add	r16,r17,r16
4000ebfc:	dc800215 	stw	r18,8(sp)
4000ec00:	84bfff17 	ldw	r18,-4(r16)
4000ec04:	dd000415 	stw	r20,16(sp)
4000ec08:	dcc00315 	stw	r19,12(sp)
4000ec0c:	9009883a 	mov	r4,r18
4000ec10:	2829883a 	mov	r20,r5
4000ec14:	dfc00515 	stw	ra,20(sp)
4000ec18:	000e3ac0 	call	4000e3ac <__hi0bits>
4000ec1c:	00c00804 	movi	r3,32
4000ec20:	1887c83a 	sub	r3,r3,r2
4000ec24:	a0c00015 	stw	r3,0(r20)
4000ec28:	00c00284 	movi	r3,10
4000ec2c:	84ffff04 	addi	r19,r16,-4
4000ec30:	18801216 	blt	r3,r2,4000ec7c <__b2d+0xa0>
4000ec34:	014002c4 	movi	r5,11
4000ec38:	2889c83a 	sub	r4,r5,r2
4000ec3c:	9106d83a 	srl	r3,r18,r4
4000ec40:	18cffc34 	orhi	r3,r3,16368
4000ec44:	8cc0282e 	bgeu	r17,r19,4000ece8 <__b2d+0x10c>
4000ec48:	817ffe17 	ldw	r5,-8(r16)
4000ec4c:	290ad83a 	srl	r5,r5,r4
4000ec50:	10800544 	addi	r2,r2,21
4000ec54:	9084983a 	sll	r2,r18,r2
4000ec58:	2884b03a 	or	r2,r5,r2
4000ec5c:	dfc00517 	ldw	ra,20(sp)
4000ec60:	dd000417 	ldw	r20,16(sp)
4000ec64:	dcc00317 	ldw	r19,12(sp)
4000ec68:	dc800217 	ldw	r18,8(sp)
4000ec6c:	dc400117 	ldw	r17,4(sp)
4000ec70:	dc000017 	ldw	r16,0(sp)
4000ec74:	dec00604 	addi	sp,sp,24
4000ec78:	f800283a 	ret
4000ec7c:	113ffd44 	addi	r4,r2,-11
4000ec80:	8cc00f2e 	bgeu	r17,r19,4000ecc0 <__b2d+0xe4>
4000ec84:	81bffe04 	addi	r6,r16,-8
4000ec88:	817ffe17 	ldw	r5,-8(r16)
4000ec8c:	20001326 	beq	r4,zero,4000ecdc <__b2d+0x100>
4000ec90:	00c00ac4 	movi	r3,43
4000ec94:	1885c83a 	sub	r2,r3,r2
4000ec98:	2886d83a 	srl	r3,r5,r2
4000ec9c:	9124983a 	sll	r18,r18,r4
4000eca0:	90e4b03a 	or	r18,r18,r3
4000eca4:	90cffc34 	orhi	r3,r18,16368
4000eca8:	8980112e 	bgeu	r17,r6,4000ecf0 <__b2d+0x114>
4000ecac:	81bffd17 	ldw	r6,-12(r16)
4000ecb0:	308cd83a 	srl	r6,r6,r2
4000ecb4:	2904983a 	sll	r2,r5,r4
4000ecb8:	1184b03a 	or	r2,r2,r6
4000ecbc:	003fe706 	br	4000ec5c <__alt_data_end+0xc000ec5c>
4000ecc0:	20000526 	beq	r4,zero,4000ecd8 <__b2d+0xfc>
4000ecc4:	9124983a 	sll	r18,r18,r4
4000ecc8:	000d883a 	mov	r6,zero
4000eccc:	000b883a 	mov	r5,zero
4000ecd0:	90cffc34 	orhi	r3,r18,16368
4000ecd4:	003ff706 	br	4000ecb4 <__alt_data_end+0xc000ecb4>
4000ecd8:	000b883a 	mov	r5,zero
4000ecdc:	90cffc34 	orhi	r3,r18,16368
4000ece0:	2805883a 	mov	r2,r5
4000ece4:	003fdd06 	br	4000ec5c <__alt_data_end+0xc000ec5c>
4000ece8:	000b883a 	mov	r5,zero
4000ecec:	003fd806 	br	4000ec50 <__alt_data_end+0xc000ec50>
4000ecf0:	000d883a 	mov	r6,zero
4000ecf4:	003fef06 	br	4000ecb4 <__alt_data_end+0xc000ecb4>

4000ecf8 <__d2b>:
4000ecf8:	defff704 	addi	sp,sp,-36
4000ecfc:	dc000215 	stw	r16,8(sp)
4000ed00:	3021883a 	mov	r16,r6
4000ed04:	dc400315 	stw	r17,12(sp)
4000ed08:	8022907a 	slli	r17,r16,1
4000ed0c:	dd400715 	stw	r21,28(sp)
4000ed10:	282b883a 	mov	r21,r5
4000ed14:	01400044 	movi	r5,1
4000ed18:	dd000615 	stw	r20,24(sp)
4000ed1c:	dcc00515 	stw	r19,20(sp)
4000ed20:	dc800415 	stw	r18,16(sp)
4000ed24:	dfc00815 	stw	ra,32(sp)
4000ed28:	3829883a 	mov	r20,r7
4000ed2c:	dc800917 	ldw	r18,36(sp)
4000ed30:	8822d57a 	srli	r17,r17,21
4000ed34:	000e0c40 	call	4000e0c4 <_Balloc>
4000ed38:	1027883a 	mov	r19,r2
4000ed3c:	00800434 	movhi	r2,16
4000ed40:	10bfffc4 	addi	r2,r2,-1
4000ed44:	808c703a 	and	r6,r16,r2
4000ed48:	88000126 	beq	r17,zero,4000ed50 <__d2b+0x58>
4000ed4c:	31800434 	orhi	r6,r6,16
4000ed50:	d9800015 	stw	r6,0(sp)
4000ed54:	a8001f26 	beq	r21,zero,4000edd4 <__d2b+0xdc>
4000ed58:	d9000104 	addi	r4,sp,4
4000ed5c:	dd400115 	stw	r21,4(sp)
4000ed60:	000e4140 	call	4000e414 <__lo0bits>
4000ed64:	d8c00017 	ldw	r3,0(sp)
4000ed68:	1000291e 	bne	r2,zero,4000ee10 <__d2b+0x118>
4000ed6c:	d9000117 	ldw	r4,4(sp)
4000ed70:	99000515 	stw	r4,20(r19)
4000ed74:	1820c03a 	cmpne	r16,r3,zero
4000ed78:	84000044 	addi	r16,r16,1
4000ed7c:	98c00615 	stw	r3,24(r19)
4000ed80:	9c000415 	stw	r16,16(r19)
4000ed84:	88001b1e 	bne	r17,zero,4000edf4 <__d2b+0xfc>
4000ed88:	800690ba 	slli	r3,r16,2
4000ed8c:	10bef384 	addi	r2,r2,-1074
4000ed90:	a0800015 	stw	r2,0(r20)
4000ed94:	98c5883a 	add	r2,r19,r3
4000ed98:	11000417 	ldw	r4,16(r2)
4000ed9c:	8020917a 	slli	r16,r16,5
4000eda0:	000e3ac0 	call	4000e3ac <__hi0bits>
4000eda4:	8085c83a 	sub	r2,r16,r2
4000eda8:	90800015 	stw	r2,0(r18)
4000edac:	9805883a 	mov	r2,r19
4000edb0:	dfc00817 	ldw	ra,32(sp)
4000edb4:	dd400717 	ldw	r21,28(sp)
4000edb8:	dd000617 	ldw	r20,24(sp)
4000edbc:	dcc00517 	ldw	r19,20(sp)
4000edc0:	dc800417 	ldw	r18,16(sp)
4000edc4:	dc400317 	ldw	r17,12(sp)
4000edc8:	dc000217 	ldw	r16,8(sp)
4000edcc:	dec00904 	addi	sp,sp,36
4000edd0:	f800283a 	ret
4000edd4:	d809883a 	mov	r4,sp
4000edd8:	000e4140 	call	4000e414 <__lo0bits>
4000eddc:	d8c00017 	ldw	r3,0(sp)
4000ede0:	04000044 	movi	r16,1
4000ede4:	9c000415 	stw	r16,16(r19)
4000ede8:	98c00515 	stw	r3,20(r19)
4000edec:	10800804 	addi	r2,r2,32
4000edf0:	883fe526 	beq	r17,zero,4000ed88 <__alt_data_end+0xc000ed88>
4000edf4:	8c7ef344 	addi	r17,r17,-1075
4000edf8:	88a3883a 	add	r17,r17,r2
4000edfc:	00c00d44 	movi	r3,53
4000ee00:	a4400015 	stw	r17,0(r20)
4000ee04:	1885c83a 	sub	r2,r3,r2
4000ee08:	90800015 	stw	r2,0(r18)
4000ee0c:	003fe706 	br	4000edac <__alt_data_end+0xc000edac>
4000ee10:	01000804 	movi	r4,32
4000ee14:	2089c83a 	sub	r4,r4,r2
4000ee18:	1908983a 	sll	r4,r3,r4
4000ee1c:	d9400117 	ldw	r5,4(sp)
4000ee20:	1886d83a 	srl	r3,r3,r2
4000ee24:	2148b03a 	or	r4,r4,r5
4000ee28:	99000515 	stw	r4,20(r19)
4000ee2c:	d8c00015 	stw	r3,0(sp)
4000ee30:	003fd006 	br	4000ed74 <__alt_data_end+0xc000ed74>

4000ee34 <__ratio>:
4000ee34:	defff904 	addi	sp,sp,-28
4000ee38:	dc400315 	stw	r17,12(sp)
4000ee3c:	2823883a 	mov	r17,r5
4000ee40:	d9400104 	addi	r5,sp,4
4000ee44:	dfc00615 	stw	ra,24(sp)
4000ee48:	dcc00515 	stw	r19,20(sp)
4000ee4c:	dc800415 	stw	r18,16(sp)
4000ee50:	2027883a 	mov	r19,r4
4000ee54:	dc000215 	stw	r16,8(sp)
4000ee58:	000ebdc0 	call	4000ebdc <__b2d>
4000ee5c:	8809883a 	mov	r4,r17
4000ee60:	d80b883a 	mov	r5,sp
4000ee64:	1025883a 	mov	r18,r2
4000ee68:	1821883a 	mov	r16,r3
4000ee6c:	000ebdc0 	call	4000ebdc <__b2d>
4000ee70:	8a400417 	ldw	r9,16(r17)
4000ee74:	9a000417 	ldw	r8,16(r19)
4000ee78:	100d883a 	mov	r6,r2
4000ee7c:	d8800017 	ldw	r2,0(sp)
4000ee80:	4251c83a 	sub	r8,r8,r9
4000ee84:	4012917a 	slli	r9,r8,5
4000ee88:	da000117 	ldw	r8,4(sp)
4000ee8c:	4091c83a 	sub	r8,r8,r2
4000ee90:	4251883a 	add	r8,r8,r9
4000ee94:	02000d0e 	bge	zero,r8,4000eecc <__ratio+0x98>
4000ee98:	4010953a 	slli	r8,r8,20
4000ee9c:	4421883a 	add	r16,r8,r16
4000eea0:	9009883a 	mov	r4,r18
4000eea4:	800b883a 	mov	r5,r16
4000eea8:	180f883a 	mov	r7,r3
4000eeac:	0005a480 	call	40005a48 <__divdf3>
4000eeb0:	dfc00617 	ldw	ra,24(sp)
4000eeb4:	dcc00517 	ldw	r19,20(sp)
4000eeb8:	dc800417 	ldw	r18,16(sp)
4000eebc:	dc400317 	ldw	r17,12(sp)
4000eec0:	dc000217 	ldw	r16,8(sp)
4000eec4:	dec00704 	addi	sp,sp,28
4000eec8:	f800283a 	ret
4000eecc:	4010953a 	slli	r8,r8,20
4000eed0:	1a07c83a 	sub	r3,r3,r8
4000eed4:	003ff206 	br	4000eea0 <__alt_data_end+0xc000eea0>

4000eed8 <_mprec_log10>:
4000eed8:	defffe04 	addi	sp,sp,-8
4000eedc:	dc000015 	stw	r16,0(sp)
4000eee0:	dfc00115 	stw	ra,4(sp)
4000eee4:	008005c4 	movi	r2,23
4000eee8:	2021883a 	mov	r16,r4
4000eeec:	11000d0e 	bge	r2,r4,4000ef24 <_mprec_log10+0x4c>
4000eef0:	0005883a 	mov	r2,zero
4000eef4:	00cffc34 	movhi	r3,16368
4000eef8:	843fffc4 	addi	r16,r16,-1
4000eefc:	1009883a 	mov	r4,r2
4000ef00:	180b883a 	mov	r5,r3
4000ef04:	000d883a 	mov	r6,zero
4000ef08:	01d00934 	movhi	r7,16420
4000ef0c:	00065580 	call	40006558 <__muldf3>
4000ef10:	803ff91e 	bne	r16,zero,4000eef8 <__alt_data_end+0xc000eef8>
4000ef14:	dfc00117 	ldw	ra,4(sp)
4000ef18:	dc000017 	ldw	r16,0(sp)
4000ef1c:	dec00204 	addi	sp,sp,8
4000ef20:	f800283a 	ret
4000ef24:	202090fa 	slli	r16,r4,3
4000ef28:	00900074 	movhi	r2,16385
4000ef2c:	10940804 	addi	r2,r2,20512
4000ef30:	1421883a 	add	r16,r2,r16
4000ef34:	80800017 	ldw	r2,0(r16)
4000ef38:	80c00117 	ldw	r3,4(r16)
4000ef3c:	dfc00117 	ldw	ra,4(sp)
4000ef40:	dc000017 	ldw	r16,0(sp)
4000ef44:	dec00204 	addi	sp,sp,8
4000ef48:	f800283a 	ret

4000ef4c <__copybits>:
4000ef4c:	297fffc4 	addi	r5,r5,-1
4000ef50:	280fd17a 	srai	r7,r5,5
4000ef54:	30c00417 	ldw	r3,16(r6)
4000ef58:	30800504 	addi	r2,r6,20
4000ef5c:	39c00044 	addi	r7,r7,1
4000ef60:	18c7883a 	add	r3,r3,r3
4000ef64:	39cf883a 	add	r7,r7,r7
4000ef68:	18c7883a 	add	r3,r3,r3
4000ef6c:	39cf883a 	add	r7,r7,r7
4000ef70:	10c7883a 	add	r3,r2,r3
4000ef74:	21cf883a 	add	r7,r4,r7
4000ef78:	10c00d2e 	bgeu	r2,r3,4000efb0 <__copybits+0x64>
4000ef7c:	200b883a 	mov	r5,r4
4000ef80:	12000017 	ldw	r8,0(r2)
4000ef84:	29400104 	addi	r5,r5,4
4000ef88:	10800104 	addi	r2,r2,4
4000ef8c:	2a3fff15 	stw	r8,-4(r5)
4000ef90:	10fffb36 	bltu	r2,r3,4000ef80 <__alt_data_end+0xc000ef80>
4000ef94:	1985c83a 	sub	r2,r3,r6
4000ef98:	10bffac4 	addi	r2,r2,-21
4000ef9c:	1004d0ba 	srli	r2,r2,2
4000efa0:	10800044 	addi	r2,r2,1
4000efa4:	1085883a 	add	r2,r2,r2
4000efa8:	1085883a 	add	r2,r2,r2
4000efac:	2089883a 	add	r4,r4,r2
4000efb0:	21c0032e 	bgeu	r4,r7,4000efc0 <__copybits+0x74>
4000efb4:	20000015 	stw	zero,0(r4)
4000efb8:	21000104 	addi	r4,r4,4
4000efbc:	21fffd36 	bltu	r4,r7,4000efb4 <__alt_data_end+0xc000efb4>
4000efc0:	f800283a 	ret

4000efc4 <__any_on>:
4000efc4:	20c00417 	ldw	r3,16(r4)
4000efc8:	2805d17a 	srai	r2,r5,5
4000efcc:	21000504 	addi	r4,r4,20
4000efd0:	18800d0e 	bge	r3,r2,4000f008 <__any_on+0x44>
4000efd4:	18c7883a 	add	r3,r3,r3
4000efd8:	18c7883a 	add	r3,r3,r3
4000efdc:	20c7883a 	add	r3,r4,r3
4000efe0:	20c0192e 	bgeu	r4,r3,4000f048 <__any_on+0x84>
4000efe4:	18bfff17 	ldw	r2,-4(r3)
4000efe8:	18ffff04 	addi	r3,r3,-4
4000efec:	1000041e 	bne	r2,zero,4000f000 <__any_on+0x3c>
4000eff0:	20c0142e 	bgeu	r4,r3,4000f044 <__any_on+0x80>
4000eff4:	18ffff04 	addi	r3,r3,-4
4000eff8:	19400017 	ldw	r5,0(r3)
4000effc:	283ffc26 	beq	r5,zero,4000eff0 <__alt_data_end+0xc000eff0>
4000f000:	00800044 	movi	r2,1
4000f004:	f800283a 	ret
4000f008:	10c00a0e 	bge	r2,r3,4000f034 <__any_on+0x70>
4000f00c:	1085883a 	add	r2,r2,r2
4000f010:	1085883a 	add	r2,r2,r2
4000f014:	294007cc 	andi	r5,r5,31
4000f018:	2087883a 	add	r3,r4,r2
4000f01c:	283ff026 	beq	r5,zero,4000efe0 <__alt_data_end+0xc000efe0>
4000f020:	19800017 	ldw	r6,0(r3)
4000f024:	3144d83a 	srl	r2,r6,r5
4000f028:	114a983a 	sll	r5,r2,r5
4000f02c:	29bff41e 	bne	r5,r6,4000f000 <__alt_data_end+0xc000f000>
4000f030:	003feb06 	br	4000efe0 <__alt_data_end+0xc000efe0>
4000f034:	1085883a 	add	r2,r2,r2
4000f038:	1085883a 	add	r2,r2,r2
4000f03c:	2087883a 	add	r3,r4,r2
4000f040:	003fe706 	br	4000efe0 <__alt_data_end+0xc000efe0>
4000f044:	f800283a 	ret
4000f048:	0005883a 	mov	r2,zero
4000f04c:	f800283a 	ret

4000f050 <_putc_r>:
4000f050:	defffc04 	addi	sp,sp,-16
4000f054:	dc000215 	stw	r16,8(sp)
4000f058:	dfc00315 	stw	ra,12(sp)
4000f05c:	2021883a 	mov	r16,r4
4000f060:	20000226 	beq	r4,zero,4000f06c <_putc_r+0x1c>
4000f064:	20800e17 	ldw	r2,56(r4)
4000f068:	10001b26 	beq	r2,zero,4000f0d8 <_putc_r+0x88>
4000f06c:	30800217 	ldw	r2,8(r6)
4000f070:	10bfffc4 	addi	r2,r2,-1
4000f074:	30800215 	stw	r2,8(r6)
4000f078:	10000a16 	blt	r2,zero,4000f0a4 <_putc_r+0x54>
4000f07c:	30800017 	ldw	r2,0(r6)
4000f080:	11400005 	stb	r5,0(r2)
4000f084:	30800017 	ldw	r2,0(r6)
4000f088:	10c00044 	addi	r3,r2,1
4000f08c:	30c00015 	stw	r3,0(r6)
4000f090:	10800003 	ldbu	r2,0(r2)
4000f094:	dfc00317 	ldw	ra,12(sp)
4000f098:	dc000217 	ldw	r16,8(sp)
4000f09c:	dec00404 	addi	sp,sp,16
4000f0a0:	f800283a 	ret
4000f0a4:	30c00617 	ldw	r3,24(r6)
4000f0a8:	10c00616 	blt	r2,r3,4000f0c4 <_putc_r+0x74>
4000f0ac:	30800017 	ldw	r2,0(r6)
4000f0b0:	00c00284 	movi	r3,10
4000f0b4:	11400005 	stb	r5,0(r2)
4000f0b8:	30800017 	ldw	r2,0(r6)
4000f0bc:	11400003 	ldbu	r5,0(r2)
4000f0c0:	28fff11e 	bne	r5,r3,4000f088 <__alt_data_end+0xc000f088>
4000f0c4:	8009883a 	mov	r4,r16
4000f0c8:	dfc00317 	ldw	ra,12(sp)
4000f0cc:	dc000217 	ldw	r16,8(sp)
4000f0d0:	dec00404 	addi	sp,sp,16
4000f0d4:	0010d281 	jmpi	40010d28 <__swbuf_r>
4000f0d8:	d9400015 	stw	r5,0(sp)
4000f0dc:	d9800115 	stw	r6,4(sp)
4000f0e0:	000d0380 	call	4000d038 <__sinit>
4000f0e4:	d9800117 	ldw	r6,4(sp)
4000f0e8:	d9400017 	ldw	r5,0(sp)
4000f0ec:	003fdf06 	br	4000f06c <__alt_data_end+0xc000f06c>

4000f0f0 <putc>:
4000f0f0:	defffc04 	addi	sp,sp,-16
4000f0f4:	dc400115 	stw	r17,4(sp)
4000f0f8:	04500074 	movhi	r17,16385
4000f0fc:	8c5b2304 	addi	r17,r17,27788
4000f100:	dc800215 	stw	r18,8(sp)
4000f104:	2025883a 	mov	r18,r4
4000f108:	89000017 	ldw	r4,0(r17)
4000f10c:	dc000015 	stw	r16,0(sp)
4000f110:	dfc00315 	stw	ra,12(sp)
4000f114:	2821883a 	mov	r16,r5
4000f118:	20000226 	beq	r4,zero,4000f124 <putc+0x34>
4000f11c:	20c00e17 	ldw	r3,56(r4)
4000f120:	18001a26 	beq	r3,zero,4000f18c <putc+0x9c>
4000f124:	80800217 	ldw	r2,8(r16)
4000f128:	10bfffc4 	addi	r2,r2,-1
4000f12c:	80800215 	stw	r2,8(r16)
4000f130:	10000c16 	blt	r2,zero,4000f164 <putc+0x74>
4000f134:	80800017 	ldw	r2,0(r16)
4000f138:	14800005 	stb	r18,0(r2)
4000f13c:	80800017 	ldw	r2,0(r16)
4000f140:	10c00044 	addi	r3,r2,1
4000f144:	80c00015 	stw	r3,0(r16)
4000f148:	10800003 	ldbu	r2,0(r2)
4000f14c:	dfc00317 	ldw	ra,12(sp)
4000f150:	dc800217 	ldw	r18,8(sp)
4000f154:	dc400117 	ldw	r17,4(sp)
4000f158:	dc000017 	ldw	r16,0(sp)
4000f15c:	dec00404 	addi	sp,sp,16
4000f160:	f800283a 	ret
4000f164:	80c00617 	ldw	r3,24(r16)
4000f168:	10c00a16 	blt	r2,r3,4000f194 <putc+0xa4>
4000f16c:	80800017 	ldw	r2,0(r16)
4000f170:	00c00284 	movi	r3,10
4000f174:	14800005 	stb	r18,0(r2)
4000f178:	80800017 	ldw	r2,0(r16)
4000f17c:	11400003 	ldbu	r5,0(r2)
4000f180:	28ffef1e 	bne	r5,r3,4000f140 <__alt_data_end+0xc000f140>
4000f184:	89000017 	ldw	r4,0(r17)
4000f188:	00000406 	br	4000f19c <putc+0xac>
4000f18c:	000d0380 	call	4000d038 <__sinit>
4000f190:	003fe406 	br	4000f124 <__alt_data_end+0xc000f124>
4000f194:	89000017 	ldw	r4,0(r17)
4000f198:	900b883a 	mov	r5,r18
4000f19c:	800d883a 	mov	r6,r16
4000f1a0:	dfc00317 	ldw	ra,12(sp)
4000f1a4:	dc800217 	ldw	r18,8(sp)
4000f1a8:	dc400117 	ldw	r17,4(sp)
4000f1ac:	dc000017 	ldw	r16,0(sp)
4000f1b0:	dec00404 	addi	sp,sp,16
4000f1b4:	0010d281 	jmpi	40010d28 <__swbuf_r>

4000f1b8 <_realloc_r>:
4000f1b8:	defff604 	addi	sp,sp,-40
4000f1bc:	dcc00315 	stw	r19,12(sp)
4000f1c0:	dc400115 	stw	r17,4(sp)
4000f1c4:	dfc00915 	stw	ra,36(sp)
4000f1c8:	df000815 	stw	fp,32(sp)
4000f1cc:	ddc00715 	stw	r23,28(sp)
4000f1d0:	dd800615 	stw	r22,24(sp)
4000f1d4:	dd400515 	stw	r21,20(sp)
4000f1d8:	dd000415 	stw	r20,16(sp)
4000f1dc:	dc800215 	stw	r18,8(sp)
4000f1e0:	dc000015 	stw	r16,0(sp)
4000f1e4:	2827883a 	mov	r19,r5
4000f1e8:	3023883a 	mov	r17,r6
4000f1ec:	2800bf26 	beq	r5,zero,4000f4ec <_realloc_r+0x334>
4000f1f0:	2025883a 	mov	r18,r4
4000f1f4:	0012a480 	call	40012a48 <__malloc_lock>
4000f1f8:	98ffff17 	ldw	r3,-4(r19)
4000f1fc:	01bfff04 	movi	r6,-4
4000f200:	890002c4 	addi	r4,r17,11
4000f204:	01c00584 	movi	r7,22
4000f208:	9d7ffe04 	addi	r21,r19,-8
4000f20c:	19a0703a 	and	r16,r3,r6
4000f210:	39003f2e 	bgeu	r7,r4,4000f310 <_realloc_r+0x158>
4000f214:	053ffe04 	movi	r20,-8
4000f218:	2528703a 	and	r20,r4,r20
4000f21c:	a00f883a 	mov	r7,r20
4000f220:	a0008216 	blt	r20,zero,4000f42c <_realloc_r+0x274>
4000f224:	a4408136 	bltu	r20,r17,4000f42c <_realloc_r+0x274>
4000f228:	81c03c0e 	bge	r16,r7,4000f31c <_realloc_r+0x164>
4000f22c:	07100074 	movhi	fp,16385
4000f230:	e7155804 	addi	fp,fp,21856
4000f234:	e1000217 	ldw	r4,8(fp)
4000f238:	ac05883a 	add	r2,r21,r16
4000f23c:	2080bf26 	beq	r4,r2,4000f53c <_realloc_r+0x384>
4000f240:	11000117 	ldw	r4,4(r2)
4000f244:	023fff84 	movi	r8,-2
4000f248:	2210703a 	and	r8,r4,r8
4000f24c:	1211883a 	add	r8,r2,r8
4000f250:	41400117 	ldw	r5,4(r8)
4000f254:	2940004c 	andi	r5,r5,1
4000f258:	28004a1e 	bne	r5,zero,4000f384 <_realloc_r+0x1cc>
4000f25c:	017fff04 	movi	r5,-4
4000f260:	2148703a 	and	r4,r4,r5
4000f264:	2409883a 	add	r4,r4,r16
4000f268:	21c0ad0e 	bge	r4,r7,4000f520 <_realloc_r+0x368>
4000f26c:	18c0004c 	andi	r3,r3,1
4000f270:	18007f1e 	bne	r3,zero,4000f470 <_realloc_r+0x2b8>
4000f274:	9dfffe17 	ldw	r23,-8(r19)
4000f278:	adefc83a 	sub	r23,r21,r23
4000f27c:	bd800117 	ldw	r22,4(r23)
4000f280:	b14a703a 	and	r5,r22,r5
4000f284:	216d883a 	add	r22,r4,r5
4000f288:	b1c04516 	blt	r22,r7,4000f3a0 <_realloc_r+0x1e8>
4000f28c:	10c00317 	ldw	r3,12(r2)
4000f290:	10800217 	ldw	r2,8(r2)
4000f294:	81bfff04 	addi	r6,r16,-4
4000f298:	bc400204 	addi	r17,r23,8
4000f29c:	10c00315 	stw	r3,12(r2)
4000f2a0:	18800215 	stw	r2,8(r3)
4000f2a4:	b9400217 	ldw	r5,8(r23)
4000f2a8:	b8c00317 	ldw	r3,12(r23)
4000f2ac:	00800904 	movi	r2,36
4000f2b0:	28c00315 	stw	r3,12(r5)
4000f2b4:	19400215 	stw	r5,8(r3)
4000f2b8:	1180ef36 	bltu	r2,r6,4000f678 <_realloc_r+0x4c0>
4000f2bc:	008004c4 	movi	r2,19
4000f2c0:	1180da2e 	bgeu	r2,r6,4000f62c <_realloc_r+0x474>
4000f2c4:	98800017 	ldw	r2,0(r19)
4000f2c8:	b8800215 	stw	r2,8(r23)
4000f2cc:	98800117 	ldw	r2,4(r19)
4000f2d0:	b8800315 	stw	r2,12(r23)
4000f2d4:	008006c4 	movi	r2,27
4000f2d8:	1180fc2e 	bgeu	r2,r6,4000f6cc <_realloc_r+0x514>
4000f2dc:	98800217 	ldw	r2,8(r19)
4000f2e0:	b8800415 	stw	r2,16(r23)
4000f2e4:	98800317 	ldw	r2,12(r19)
4000f2e8:	b8800515 	stw	r2,20(r23)
4000f2ec:	00800904 	movi	r2,36
4000f2f0:	3080421e 	bne	r6,r2,4000f3fc <_realloc_r+0x244>
4000f2f4:	98800417 	ldw	r2,16(r19)
4000f2f8:	9cc00604 	addi	r19,r19,24
4000f2fc:	b8c00804 	addi	r3,r23,32
4000f300:	b8800615 	stw	r2,24(r23)
4000f304:	98bfff17 	ldw	r2,-4(r19)
4000f308:	b8800715 	stw	r2,28(r23)
4000f30c:	00003d06 	br	4000f404 <_realloc_r+0x24c>
4000f310:	01c00404 	movi	r7,16
4000f314:	3829883a 	mov	r20,r7
4000f318:	003fc206 	br	4000f224 <__alt_data_end+0xc000f224>
4000f31c:	9823883a 	mov	r17,r19
4000f320:	850fc83a 	sub	r7,r16,r20
4000f324:	008003c4 	movi	r2,15
4000f328:	18c0004c 	andi	r3,r3,1
4000f32c:	11c04336 	bltu	r2,r7,4000f43c <_realloc_r+0x284>
4000f330:	1c06b03a 	or	r3,r3,r16
4000f334:	a8c00115 	stw	r3,4(r21)
4000f338:	ac21883a 	add	r16,r21,r16
4000f33c:	80c00117 	ldw	r3,4(r16)
4000f340:	18c00054 	ori	r3,r3,1
4000f344:	80c00115 	stw	r3,4(r16)
4000f348:	9009883a 	mov	r4,r18
4000f34c:	0012a680 	call	40012a68 <__malloc_unlock>
4000f350:	8805883a 	mov	r2,r17
4000f354:	dfc00917 	ldw	ra,36(sp)
4000f358:	df000817 	ldw	fp,32(sp)
4000f35c:	ddc00717 	ldw	r23,28(sp)
4000f360:	dd800617 	ldw	r22,24(sp)
4000f364:	dd400517 	ldw	r21,20(sp)
4000f368:	dd000417 	ldw	r20,16(sp)
4000f36c:	dcc00317 	ldw	r19,12(sp)
4000f370:	dc800217 	ldw	r18,8(sp)
4000f374:	dc400117 	ldw	r17,4(sp)
4000f378:	dc000017 	ldw	r16,0(sp)
4000f37c:	dec00a04 	addi	sp,sp,40
4000f380:	f800283a 	ret
4000f384:	18c0004c 	andi	r3,r3,1
4000f388:	1800391e 	bne	r3,zero,4000f470 <_realloc_r+0x2b8>
4000f38c:	9dfffe17 	ldw	r23,-8(r19)
4000f390:	00bfff04 	movi	r2,-4
4000f394:	adefc83a 	sub	r23,r21,r23
4000f398:	b9400117 	ldw	r5,4(r23)
4000f39c:	288a703a 	and	r5,r5,r2
4000f3a0:	2c2d883a 	add	r22,r5,r16
4000f3a4:	b1c03216 	blt	r22,r7,4000f470 <_realloc_r+0x2b8>
4000f3a8:	b8800317 	ldw	r2,12(r23)
4000f3ac:	b8c00217 	ldw	r3,8(r23)
4000f3b0:	81bfff04 	addi	r6,r16,-4
4000f3b4:	01000904 	movi	r4,36
4000f3b8:	18800315 	stw	r2,12(r3)
4000f3bc:	10c00215 	stw	r3,8(r2)
4000f3c0:	bc400204 	addi	r17,r23,8
4000f3c4:	2180ac36 	bltu	r4,r6,4000f678 <_realloc_r+0x4c0>
4000f3c8:	008004c4 	movi	r2,19
4000f3cc:	1180972e 	bgeu	r2,r6,4000f62c <_realloc_r+0x474>
4000f3d0:	98800017 	ldw	r2,0(r19)
4000f3d4:	b8800215 	stw	r2,8(r23)
4000f3d8:	98800117 	ldw	r2,4(r19)
4000f3dc:	b8800315 	stw	r2,12(r23)
4000f3e0:	008006c4 	movi	r2,27
4000f3e4:	1180b92e 	bgeu	r2,r6,4000f6cc <_realloc_r+0x514>
4000f3e8:	98800217 	ldw	r2,8(r19)
4000f3ec:	b8800415 	stw	r2,16(r23)
4000f3f0:	98800317 	ldw	r2,12(r19)
4000f3f4:	b8800515 	stw	r2,20(r23)
4000f3f8:	313fbe26 	beq	r6,r4,4000f2f4 <__alt_data_end+0xc000f2f4>
4000f3fc:	b8c00604 	addi	r3,r23,24
4000f400:	9cc00404 	addi	r19,r19,16
4000f404:	98800017 	ldw	r2,0(r19)
4000f408:	b021883a 	mov	r16,r22
4000f40c:	b82b883a 	mov	r21,r23
4000f410:	18800015 	stw	r2,0(r3)
4000f414:	98800117 	ldw	r2,4(r19)
4000f418:	18800115 	stw	r2,4(r3)
4000f41c:	98800217 	ldw	r2,8(r19)
4000f420:	18800215 	stw	r2,8(r3)
4000f424:	b8c00117 	ldw	r3,4(r23)
4000f428:	003fbd06 	br	4000f320 <__alt_data_end+0xc000f320>
4000f42c:	00800304 	movi	r2,12
4000f430:	90800015 	stw	r2,0(r18)
4000f434:	0005883a 	mov	r2,zero
4000f438:	003fc606 	br	4000f354 <__alt_data_end+0xc000f354>
4000f43c:	1d06b03a 	or	r3,r3,r20
4000f440:	ad0b883a 	add	r5,r21,r20
4000f444:	a8c00115 	stw	r3,4(r21)
4000f448:	38800054 	ori	r2,r7,1
4000f44c:	28800115 	stw	r2,4(r5)
4000f450:	29cf883a 	add	r7,r5,r7
4000f454:	38800117 	ldw	r2,4(r7)
4000f458:	9009883a 	mov	r4,r18
4000f45c:	29400204 	addi	r5,r5,8
4000f460:	10800054 	ori	r2,r2,1
4000f464:	38800115 	stw	r2,4(r7)
4000f468:	000d1ac0 	call	4000d1ac <_free_r>
4000f46c:	003fb606 	br	4000f348 <__alt_data_end+0xc000f348>
4000f470:	880b883a 	mov	r5,r17
4000f474:	9009883a 	mov	r4,r18
4000f478:	0007f580 	call	40007f58 <_malloc_r>
4000f47c:	1023883a 	mov	r17,r2
4000f480:	1000aa26 	beq	r2,zero,4000f72c <_realloc_r+0x574>
4000f484:	98ffff17 	ldw	r3,-4(r19)
4000f488:	113ffe04 	addi	r4,r2,-8
4000f48c:	00bfff84 	movi	r2,-2
4000f490:	1884703a 	and	r2,r3,r2
4000f494:	a885883a 	add	r2,r21,r2
4000f498:	20808626 	beq	r4,r2,4000f6b4 <_realloc_r+0x4fc>
4000f49c:	81bfff04 	addi	r6,r16,-4
4000f4a0:	00800904 	movi	r2,36
4000f4a4:	11807036 	bltu	r2,r6,4000f668 <_realloc_r+0x4b0>
4000f4a8:	00c004c4 	movi	r3,19
4000f4ac:	19805636 	bltu	r3,r6,4000f608 <_realloc_r+0x450>
4000f4b0:	8805883a 	mov	r2,r17
4000f4b4:	9807883a 	mov	r3,r19
4000f4b8:	19000017 	ldw	r4,0(r3)
4000f4bc:	11000015 	stw	r4,0(r2)
4000f4c0:	19000117 	ldw	r4,4(r3)
4000f4c4:	11000115 	stw	r4,4(r2)
4000f4c8:	18c00217 	ldw	r3,8(r3)
4000f4cc:	10c00215 	stw	r3,8(r2)
4000f4d0:	980b883a 	mov	r5,r19
4000f4d4:	9009883a 	mov	r4,r18
4000f4d8:	000d1ac0 	call	4000d1ac <_free_r>
4000f4dc:	9009883a 	mov	r4,r18
4000f4e0:	0012a680 	call	40012a68 <__malloc_unlock>
4000f4e4:	8805883a 	mov	r2,r17
4000f4e8:	003f9a06 	br	4000f354 <__alt_data_end+0xc000f354>
4000f4ec:	300b883a 	mov	r5,r6
4000f4f0:	dfc00917 	ldw	ra,36(sp)
4000f4f4:	df000817 	ldw	fp,32(sp)
4000f4f8:	ddc00717 	ldw	r23,28(sp)
4000f4fc:	dd800617 	ldw	r22,24(sp)
4000f500:	dd400517 	ldw	r21,20(sp)
4000f504:	dd000417 	ldw	r20,16(sp)
4000f508:	dcc00317 	ldw	r19,12(sp)
4000f50c:	dc800217 	ldw	r18,8(sp)
4000f510:	dc400117 	ldw	r17,4(sp)
4000f514:	dc000017 	ldw	r16,0(sp)
4000f518:	dec00a04 	addi	sp,sp,40
4000f51c:	0007f581 	jmpi	40007f58 <_malloc_r>
4000f520:	11400317 	ldw	r5,12(r2)
4000f524:	10800217 	ldw	r2,8(r2)
4000f528:	9823883a 	mov	r17,r19
4000f52c:	2021883a 	mov	r16,r4
4000f530:	11400315 	stw	r5,12(r2)
4000f534:	28800215 	stw	r2,8(r5)
4000f538:	003f7906 	br	4000f320 <__alt_data_end+0xc000f320>
4000f53c:	21000117 	ldw	r4,4(r4)
4000f540:	00bfff04 	movi	r2,-4
4000f544:	a1800404 	addi	r6,r20,16
4000f548:	2088703a 	and	r4,r4,r2
4000f54c:	2409883a 	add	r4,r4,r16
4000f550:	2180380e 	bge	r4,r6,4000f634 <_realloc_r+0x47c>
4000f554:	18c0004c 	andi	r3,r3,1
4000f558:	183fc51e 	bne	r3,zero,4000f470 <__alt_data_end+0xc000f470>
4000f55c:	9dfffe17 	ldw	r23,-8(r19)
4000f560:	adefc83a 	sub	r23,r21,r23
4000f564:	b9400117 	ldw	r5,4(r23)
4000f568:	288a703a 	and	r5,r5,r2
4000f56c:	216d883a 	add	r22,r4,r5
4000f570:	b1bf8b16 	blt	r22,r6,4000f3a0 <__alt_data_end+0xc000f3a0>
4000f574:	b8800317 	ldw	r2,12(r23)
4000f578:	b8c00217 	ldw	r3,8(r23)
4000f57c:	81bfff04 	addi	r6,r16,-4
4000f580:	01000904 	movi	r4,36
4000f584:	18800315 	stw	r2,12(r3)
4000f588:	10c00215 	stw	r3,8(r2)
4000f58c:	bc400204 	addi	r17,r23,8
4000f590:	21805a36 	bltu	r4,r6,4000f6fc <_realloc_r+0x544>
4000f594:	008004c4 	movi	r2,19
4000f598:	1180562e 	bgeu	r2,r6,4000f6f4 <_realloc_r+0x53c>
4000f59c:	98800017 	ldw	r2,0(r19)
4000f5a0:	b8800215 	stw	r2,8(r23)
4000f5a4:	98800117 	ldw	r2,4(r19)
4000f5a8:	b8800315 	stw	r2,12(r23)
4000f5ac:	008006c4 	movi	r2,27
4000f5b0:	11805636 	bltu	r2,r6,4000f70c <_realloc_r+0x554>
4000f5b4:	b8800404 	addi	r2,r23,16
4000f5b8:	9cc00204 	addi	r19,r19,8
4000f5bc:	98c00017 	ldw	r3,0(r19)
4000f5c0:	10c00015 	stw	r3,0(r2)
4000f5c4:	98c00117 	ldw	r3,4(r19)
4000f5c8:	10c00115 	stw	r3,4(r2)
4000f5cc:	98c00217 	ldw	r3,8(r19)
4000f5d0:	10c00215 	stw	r3,8(r2)
4000f5d4:	bd07883a 	add	r3,r23,r20
4000f5d8:	b505c83a 	sub	r2,r22,r20
4000f5dc:	e0c00215 	stw	r3,8(fp)
4000f5e0:	10800054 	ori	r2,r2,1
4000f5e4:	18800115 	stw	r2,4(r3)
4000f5e8:	b8800117 	ldw	r2,4(r23)
4000f5ec:	9009883a 	mov	r4,r18
4000f5f0:	1080004c 	andi	r2,r2,1
4000f5f4:	a0a8b03a 	or	r20,r20,r2
4000f5f8:	bd000115 	stw	r20,4(r23)
4000f5fc:	0012a680 	call	40012a68 <__malloc_unlock>
4000f600:	8805883a 	mov	r2,r17
4000f604:	003f5306 	br	4000f354 <__alt_data_end+0xc000f354>
4000f608:	98c00017 	ldw	r3,0(r19)
4000f60c:	88c00015 	stw	r3,0(r17)
4000f610:	98c00117 	ldw	r3,4(r19)
4000f614:	88c00115 	stw	r3,4(r17)
4000f618:	00c006c4 	movi	r3,27
4000f61c:	19801d36 	bltu	r3,r6,4000f694 <_realloc_r+0x4dc>
4000f620:	88800204 	addi	r2,r17,8
4000f624:	98c00204 	addi	r3,r19,8
4000f628:	003fa306 	br	4000f4b8 <__alt_data_end+0xc000f4b8>
4000f62c:	8807883a 	mov	r3,r17
4000f630:	003f7406 	br	4000f404 <__alt_data_end+0xc000f404>
4000f634:	ad2b883a 	add	r21,r21,r20
4000f638:	2505c83a 	sub	r2,r4,r20
4000f63c:	e5400215 	stw	r21,8(fp)
4000f640:	10800054 	ori	r2,r2,1
4000f644:	a8800115 	stw	r2,4(r21)
4000f648:	98bfff17 	ldw	r2,-4(r19)
4000f64c:	9009883a 	mov	r4,r18
4000f650:	1080004c 	andi	r2,r2,1
4000f654:	a0a8b03a 	or	r20,r20,r2
4000f658:	9d3fff15 	stw	r20,-4(r19)
4000f65c:	0012a680 	call	40012a68 <__malloc_unlock>
4000f660:	9805883a 	mov	r2,r19
4000f664:	003f3b06 	br	4000f354 <__alt_data_end+0xc000f354>
4000f668:	8809883a 	mov	r4,r17
4000f66c:	980b883a 	mov	r5,r19
4000f670:	000df680 	call	4000df68 <memmove>
4000f674:	003f9606 	br	4000f4d0 <__alt_data_end+0xc000f4d0>
4000f678:	8809883a 	mov	r4,r17
4000f67c:	980b883a 	mov	r5,r19
4000f680:	000df680 	call	4000df68 <memmove>
4000f684:	b8c00117 	ldw	r3,4(r23)
4000f688:	b021883a 	mov	r16,r22
4000f68c:	b82b883a 	mov	r21,r23
4000f690:	003f2306 	br	4000f320 <__alt_data_end+0xc000f320>
4000f694:	98c00217 	ldw	r3,8(r19)
4000f698:	88c00215 	stw	r3,8(r17)
4000f69c:	98c00317 	ldw	r3,12(r19)
4000f6a0:	88c00315 	stw	r3,12(r17)
4000f6a4:	30800c26 	beq	r6,r2,4000f6d8 <_realloc_r+0x520>
4000f6a8:	88800404 	addi	r2,r17,16
4000f6ac:	98c00404 	addi	r3,r19,16
4000f6b0:	003f8106 	br	4000f4b8 <__alt_data_end+0xc000f4b8>
4000f6b4:	893fff17 	ldw	r4,-4(r17)
4000f6b8:	00bfff04 	movi	r2,-4
4000f6bc:	9823883a 	mov	r17,r19
4000f6c0:	2084703a 	and	r2,r4,r2
4000f6c4:	80a1883a 	add	r16,r16,r2
4000f6c8:	003f1506 	br	4000f320 <__alt_data_end+0xc000f320>
4000f6cc:	b8c00404 	addi	r3,r23,16
4000f6d0:	9cc00204 	addi	r19,r19,8
4000f6d4:	003f4b06 	br	4000f404 <__alt_data_end+0xc000f404>
4000f6d8:	99000417 	ldw	r4,16(r19)
4000f6dc:	88800604 	addi	r2,r17,24
4000f6e0:	98c00604 	addi	r3,r19,24
4000f6e4:	89000415 	stw	r4,16(r17)
4000f6e8:	99000517 	ldw	r4,20(r19)
4000f6ec:	89000515 	stw	r4,20(r17)
4000f6f0:	003f7106 	br	4000f4b8 <__alt_data_end+0xc000f4b8>
4000f6f4:	8805883a 	mov	r2,r17
4000f6f8:	003fb006 	br	4000f5bc <__alt_data_end+0xc000f5bc>
4000f6fc:	8809883a 	mov	r4,r17
4000f700:	980b883a 	mov	r5,r19
4000f704:	000df680 	call	4000df68 <memmove>
4000f708:	003fb206 	br	4000f5d4 <__alt_data_end+0xc000f5d4>
4000f70c:	98800217 	ldw	r2,8(r19)
4000f710:	b8800415 	stw	r2,16(r23)
4000f714:	98800317 	ldw	r2,12(r19)
4000f718:	b8800515 	stw	r2,20(r23)
4000f71c:	31000726 	beq	r6,r4,4000f73c <_realloc_r+0x584>
4000f720:	b8800604 	addi	r2,r23,24
4000f724:	9cc00404 	addi	r19,r19,16
4000f728:	003fa406 	br	4000f5bc <__alt_data_end+0xc000f5bc>
4000f72c:	9009883a 	mov	r4,r18
4000f730:	0012a680 	call	40012a68 <__malloc_unlock>
4000f734:	0005883a 	mov	r2,zero
4000f738:	003f0606 	br	4000f354 <__alt_data_end+0xc000f354>
4000f73c:	98c00417 	ldw	r3,16(r19)
4000f740:	9cc00604 	addi	r19,r19,24
4000f744:	b8800804 	addi	r2,r23,32
4000f748:	b8c00615 	stw	r3,24(r23)
4000f74c:	98ffff17 	ldw	r3,-4(r19)
4000f750:	b8c00715 	stw	r3,28(r23)
4000f754:	003f9906 	br	4000f5bc <__alt_data_end+0xc000f5bc>

4000f758 <__sread>:
4000f758:	defffe04 	addi	sp,sp,-8
4000f75c:	dc000015 	stw	r16,0(sp)
4000f760:	2821883a 	mov	r16,r5
4000f764:	2940038f 	ldh	r5,14(r5)
4000f768:	dfc00115 	stw	ra,4(sp)
4000f76c:	00114040 	call	40011404 <_read_r>
4000f770:	10000716 	blt	r2,zero,4000f790 <__sread+0x38>
4000f774:	80c01417 	ldw	r3,80(r16)
4000f778:	1887883a 	add	r3,r3,r2
4000f77c:	80c01415 	stw	r3,80(r16)
4000f780:	dfc00117 	ldw	ra,4(sp)
4000f784:	dc000017 	ldw	r16,0(sp)
4000f788:	dec00204 	addi	sp,sp,8
4000f78c:	f800283a 	ret
4000f790:	80c0030b 	ldhu	r3,12(r16)
4000f794:	18fbffcc 	andi	r3,r3,61439
4000f798:	80c0030d 	sth	r3,12(r16)
4000f79c:	dfc00117 	ldw	ra,4(sp)
4000f7a0:	dc000017 	ldw	r16,0(sp)
4000f7a4:	dec00204 	addi	sp,sp,8
4000f7a8:	f800283a 	ret

4000f7ac <__seofread>:
4000f7ac:	0005883a 	mov	r2,zero
4000f7b0:	f800283a 	ret

4000f7b4 <__swrite>:
4000f7b4:	2880030b 	ldhu	r2,12(r5)
4000f7b8:	defffb04 	addi	sp,sp,-20
4000f7bc:	dcc00315 	stw	r19,12(sp)
4000f7c0:	dc800215 	stw	r18,8(sp)
4000f7c4:	dc400115 	stw	r17,4(sp)
4000f7c8:	dc000015 	stw	r16,0(sp)
4000f7cc:	dfc00415 	stw	ra,16(sp)
4000f7d0:	10c0400c 	andi	r3,r2,256
4000f7d4:	2821883a 	mov	r16,r5
4000f7d8:	2027883a 	mov	r19,r4
4000f7dc:	3025883a 	mov	r18,r6
4000f7e0:	3823883a 	mov	r17,r7
4000f7e4:	18000526 	beq	r3,zero,4000f7fc <__swrite+0x48>
4000f7e8:	2940038f 	ldh	r5,14(r5)
4000f7ec:	000d883a 	mov	r6,zero
4000f7f0:	01c00084 	movi	r7,2
4000f7f4:	00113a80 	call	400113a8 <_lseek_r>
4000f7f8:	8080030b 	ldhu	r2,12(r16)
4000f7fc:	8140038f 	ldh	r5,14(r16)
4000f800:	10bbffcc 	andi	r2,r2,61439
4000f804:	9809883a 	mov	r4,r19
4000f808:	900d883a 	mov	r6,r18
4000f80c:	880f883a 	mov	r7,r17
4000f810:	8080030d 	sth	r2,12(r16)
4000f814:	dfc00417 	ldw	ra,16(sp)
4000f818:	dcc00317 	ldw	r19,12(sp)
4000f81c:	dc800217 	ldw	r18,8(sp)
4000f820:	dc400117 	ldw	r17,4(sp)
4000f824:	dc000017 	ldw	r16,0(sp)
4000f828:	dec00504 	addi	sp,sp,20
4000f82c:	0010e981 	jmpi	40010e98 <_write_r>

4000f830 <__sseek>:
4000f830:	defffe04 	addi	sp,sp,-8
4000f834:	dc000015 	stw	r16,0(sp)
4000f838:	2821883a 	mov	r16,r5
4000f83c:	2940038f 	ldh	r5,14(r5)
4000f840:	dfc00115 	stw	ra,4(sp)
4000f844:	00113a80 	call	400113a8 <_lseek_r>
4000f848:	00ffffc4 	movi	r3,-1
4000f84c:	10c00826 	beq	r2,r3,4000f870 <__sseek+0x40>
4000f850:	80c0030b 	ldhu	r3,12(r16)
4000f854:	80801415 	stw	r2,80(r16)
4000f858:	18c40014 	ori	r3,r3,4096
4000f85c:	80c0030d 	sth	r3,12(r16)
4000f860:	dfc00117 	ldw	ra,4(sp)
4000f864:	dc000017 	ldw	r16,0(sp)
4000f868:	dec00204 	addi	sp,sp,8
4000f86c:	f800283a 	ret
4000f870:	80c0030b 	ldhu	r3,12(r16)
4000f874:	18fbffcc 	andi	r3,r3,61439
4000f878:	80c0030d 	sth	r3,12(r16)
4000f87c:	dfc00117 	ldw	ra,4(sp)
4000f880:	dc000017 	ldw	r16,0(sp)
4000f884:	dec00204 	addi	sp,sp,8
4000f888:	f800283a 	ret

4000f88c <__sclose>:
4000f88c:	2940038f 	ldh	r5,14(r5)
4000f890:	0010ef41 	jmpi	40010ef4 <_close_r>

4000f894 <__sprint_r.part.0>:
4000f894:	28801917 	ldw	r2,100(r5)
4000f898:	defff604 	addi	sp,sp,-40
4000f89c:	dd400515 	stw	r21,20(sp)
4000f8a0:	dcc00315 	stw	r19,12(sp)
4000f8a4:	dfc00915 	stw	ra,36(sp)
4000f8a8:	df000815 	stw	fp,32(sp)
4000f8ac:	ddc00715 	stw	r23,28(sp)
4000f8b0:	dd800615 	stw	r22,24(sp)
4000f8b4:	dd000415 	stw	r20,16(sp)
4000f8b8:	dc800215 	stw	r18,8(sp)
4000f8bc:	dc400115 	stw	r17,4(sp)
4000f8c0:	dc000015 	stw	r16,0(sp)
4000f8c4:	1088000c 	andi	r2,r2,8192
4000f8c8:	2827883a 	mov	r19,r5
4000f8cc:	302b883a 	mov	r21,r6
4000f8d0:	10002d26 	beq	r2,zero,4000f988 <__sprint_r.part.0+0xf4>
4000f8d4:	30800217 	ldw	r2,8(r6)
4000f8d8:	35800017 	ldw	r22,0(r6)
4000f8dc:	10002826 	beq	r2,zero,4000f980 <__sprint_r.part.0+0xec>
4000f8e0:	2029883a 	mov	r20,r4
4000f8e4:	b5c00104 	addi	r23,r22,4
4000f8e8:	04bfffc4 	movi	r18,-1
4000f8ec:	bc400017 	ldw	r17,0(r23)
4000f8f0:	b4000017 	ldw	r16,0(r22)
4000f8f4:	0039883a 	mov	fp,zero
4000f8f8:	8822d0ba 	srli	r17,r17,2
4000f8fc:	04400316 	blt	zero,r17,4000f90c <__sprint_r.part.0+0x78>
4000f900:	00001706 	br	4000f960 <__sprint_r.part.0+0xcc>
4000f904:	84000104 	addi	r16,r16,4
4000f908:	8f001526 	beq	r17,fp,4000f960 <__sprint_r.part.0+0xcc>
4000f90c:	81400017 	ldw	r5,0(r16)
4000f910:	a009883a 	mov	r4,r20
4000f914:	980d883a 	mov	r6,r19
4000f918:	00111200 	call	40011120 <_fputwc_r>
4000f91c:	e7000044 	addi	fp,fp,1
4000f920:	14bff81e 	bne	r2,r18,4000f904 <__alt_data_end+0xc000f904>
4000f924:	9005883a 	mov	r2,r18
4000f928:	a8000215 	stw	zero,8(r21)
4000f92c:	a8000115 	stw	zero,4(r21)
4000f930:	dfc00917 	ldw	ra,36(sp)
4000f934:	df000817 	ldw	fp,32(sp)
4000f938:	ddc00717 	ldw	r23,28(sp)
4000f93c:	dd800617 	ldw	r22,24(sp)
4000f940:	dd400517 	ldw	r21,20(sp)
4000f944:	dd000417 	ldw	r20,16(sp)
4000f948:	dcc00317 	ldw	r19,12(sp)
4000f94c:	dc800217 	ldw	r18,8(sp)
4000f950:	dc400117 	ldw	r17,4(sp)
4000f954:	dc000017 	ldw	r16,0(sp)
4000f958:	dec00a04 	addi	sp,sp,40
4000f95c:	f800283a 	ret
4000f960:	a8c00217 	ldw	r3,8(r21)
4000f964:	8c63883a 	add	r17,r17,r17
4000f968:	8c63883a 	add	r17,r17,r17
4000f96c:	1c45c83a 	sub	r2,r3,r17
4000f970:	a8800215 	stw	r2,8(r21)
4000f974:	b5800204 	addi	r22,r22,8
4000f978:	bdc00204 	addi	r23,r23,8
4000f97c:	103fdb1e 	bne	r2,zero,4000f8ec <__alt_data_end+0xc000f8ec>
4000f980:	0005883a 	mov	r2,zero
4000f984:	003fe806 	br	4000f928 <__alt_data_end+0xc000f928>
4000f988:	000d49c0 	call	4000d49c <__sfvwrite_r>
4000f98c:	003fe606 	br	4000f928 <__alt_data_end+0xc000f928>

4000f990 <__sprint_r>:
4000f990:	30c00217 	ldw	r3,8(r6)
4000f994:	18000126 	beq	r3,zero,4000f99c <__sprint_r+0xc>
4000f998:	000f8941 	jmpi	4000f894 <__sprint_r.part.0>
4000f99c:	30000115 	stw	zero,4(r6)
4000f9a0:	0005883a 	mov	r2,zero
4000f9a4:	f800283a 	ret

4000f9a8 <___vfiprintf_internal_r>:
4000f9a8:	defeca04 	addi	sp,sp,-1240
4000f9ac:	dd813215 	stw	r22,1224(sp)
4000f9b0:	dd013015 	stw	r20,1216(sp)
4000f9b4:	dfc13515 	stw	ra,1236(sp)
4000f9b8:	df013415 	stw	fp,1232(sp)
4000f9bc:	ddc13315 	stw	r23,1228(sp)
4000f9c0:	dd413115 	stw	r21,1220(sp)
4000f9c4:	dcc12f15 	stw	r19,1212(sp)
4000f9c8:	dc812e15 	stw	r18,1208(sp)
4000f9cc:	dc412d15 	stw	r17,1204(sp)
4000f9d0:	dc012c15 	stw	r16,1200(sp)
4000f9d4:	d9012015 	stw	r4,1152(sp)
4000f9d8:	d9c12115 	stw	r7,1156(sp)
4000f9dc:	2829883a 	mov	r20,r5
4000f9e0:	302d883a 	mov	r22,r6
4000f9e4:	20000226 	beq	r4,zero,4000f9f0 <___vfiprintf_internal_r+0x48>
4000f9e8:	20800e17 	ldw	r2,56(r4)
4000f9ec:	1001d326 	beq	r2,zero,4001013c <___vfiprintf_internal_r+0x794>
4000f9f0:	a0c0030b 	ldhu	r3,12(r20)
4000f9f4:	1908000c 	andi	r4,r3,8192
4000f9f8:	1805883a 	mov	r2,r3
4000f9fc:	2000071e 	bne	r4,zero,4000fa1c <___vfiprintf_internal_r+0x74>
4000fa00:	a1001917 	ldw	r4,100(r20)
4000fa04:	18880014 	ori	r2,r3,8192
4000fa08:	00f7ffc4 	movi	r3,-8193
4000fa0c:	20c8703a 	and	r4,r4,r3
4000fa10:	a080030d 	sth	r2,12(r20)
4000fa14:	1007883a 	mov	r3,r2
4000fa18:	a1001915 	stw	r4,100(r20)
4000fa1c:	1100020c 	andi	r4,r2,8
4000fa20:	20018926 	beq	r4,zero,40010048 <___vfiprintf_internal_r+0x6a0>
4000fa24:	a1000417 	ldw	r4,16(r20)
4000fa28:	20018726 	beq	r4,zero,40010048 <___vfiprintf_internal_r+0x6a0>
4000fa2c:	1080068c 	andi	r2,r2,26
4000fa30:	01000284 	movi	r4,10
4000fa34:	11018d26 	beq	r2,r4,4001006c <___vfiprintf_internal_r+0x6c4>
4000fa38:	da810a04 	addi	r10,sp,1064
4000fa3c:	dac109c4 	addi	r11,sp,1063
4000fa40:	07100074 	movhi	fp,16385
4000fa44:	05d00074 	movhi	r23,16385
4000fa48:	da811e15 	stw	r10,1144(sp)
4000fa4c:	52d5c83a 	sub	r10,r10,r11
4000fa50:	e7143e04 	addi	fp,fp,20728
4000fa54:	bdd43a04 	addi	r23,r23,20712
4000fa58:	dac11f15 	stw	r11,1148(sp)
4000fa5c:	dec11a15 	stw	sp,1128(sp)
4000fa60:	d8011c15 	stw	zero,1136(sp)
4000fa64:	d8011b15 	stw	zero,1132(sp)
4000fa68:	d8012615 	stw	zero,1176(sp)
4000fa6c:	d8012215 	stw	zero,1160(sp)
4000fa70:	da812715 	stw	r10,1180(sp)
4000fa74:	d811883a 	mov	r8,sp
4000fa78:	b021883a 	mov	r16,r22
4000fa7c:	80800007 	ldb	r2,0(r16)
4000fa80:	10039c26 	beq	r2,zero,400108f4 <___vfiprintf_internal_r+0xf4c>
4000fa84:	01000944 	movi	r4,37
4000fa88:	11039a26 	beq	r2,r4,400108f4 <___vfiprintf_internal_r+0xf4c>
4000fa8c:	8005883a 	mov	r2,r16
4000fa90:	00000106 	br	4000fa98 <___vfiprintf_internal_r+0xf0>
4000fa94:	19000326 	beq	r3,r4,4000faa4 <___vfiprintf_internal_r+0xfc>
4000fa98:	10800044 	addi	r2,r2,1
4000fa9c:	10c00007 	ldb	r3,0(r2)
4000faa0:	183ffc1e 	bne	r3,zero,4000fa94 <__alt_data_end+0xc000fa94>
4000faa4:	1425c83a 	sub	r18,r2,r16
4000faa8:	1023883a 	mov	r17,r2
4000faac:	90001026 	beq	r18,zero,4000faf0 <___vfiprintf_internal_r+0x148>
4000fab0:	d8c11c17 	ldw	r3,1136(sp)
4000fab4:	d8811b17 	ldw	r2,1132(sp)
4000fab8:	44000015 	stw	r16,0(r8)
4000fabc:	90c7883a 	add	r3,r18,r3
4000fac0:	10800044 	addi	r2,r2,1
4000fac4:	44800115 	stw	r18,4(r8)
4000fac8:	d8c11c15 	stw	r3,1136(sp)
4000facc:	d8811b15 	stw	r2,1132(sp)
4000fad0:	010001c4 	movi	r4,7
4000fad4:	2080750e 	bge	r4,r2,4000fcac <___vfiprintf_internal_r+0x304>
4000fad8:	18039d1e 	bne	r3,zero,40010950 <___vfiprintf_internal_r+0xfa8>
4000fadc:	dac12217 	ldw	r11,1160(sp)
4000fae0:	d8011b15 	stw	zero,1132(sp)
4000fae4:	d811883a 	mov	r8,sp
4000fae8:	5c97883a 	add	r11,r11,r18
4000faec:	dac12215 	stw	r11,1160(sp)
4000faf0:	88800007 	ldb	r2,0(r17)
4000faf4:	1002e026 	beq	r2,zero,40010678 <___vfiprintf_internal_r+0xcd0>
4000faf8:	88c00047 	ldb	r3,1(r17)
4000fafc:	8c000044 	addi	r16,r17,1
4000fb00:	d8011d85 	stb	zero,1142(sp)
4000fb04:	000d883a 	mov	r6,zero
4000fb08:	027fffc4 	movi	r9,-1
4000fb0c:	0027883a 	mov	r19,zero
4000fb10:	002b883a 	mov	r21,zero
4000fb14:	01001604 	movi	r4,88
4000fb18:	01400244 	movi	r5,9
4000fb1c:	03000a84 	movi	r12,42
4000fb20:	01c01b04 	movi	r7,108
4000fb24:	84000044 	addi	r16,r16,1
4000fb28:	18bff804 	addi	r2,r3,-32
4000fb2c:	20825f36 	bltu	r4,r2,400104ac <___vfiprintf_internal_r+0xb04>
4000fb30:	100490ba 	slli	r2,r2,2
4000fb34:	02900074 	movhi	r10,16385
4000fb38:	52bed204 	addi	r10,r10,-1208
4000fb3c:	1285883a 	add	r2,r2,r10
4000fb40:	10800017 	ldw	r2,0(r2)
4000fb44:	1000683a 	jmp	r2
4000fb48:	4001031c 	xori	zero,r8,1036
4000fb4c:	400104ac 	andhi	zero,r8,1042
4000fb50:	400104ac 	andhi	zero,r8,1042
4000fb54:	400104a0 	cmpeqi	zero,r8,1042
4000fb58:	400104ac 	andhi	zero,r8,1042
4000fb5c:	400104ac 	andhi	zero,r8,1042
4000fb60:	400104ac 	andhi	zero,r8,1042
4000fb64:	400104ac 	andhi	zero,r8,1042
4000fb68:	400104ac 	andhi	zero,r8,1042
4000fb6c:	400104ac 	andhi	zero,r8,1042
4000fb70:	40010478 	rdprs	zero,r8,1041
4000fb74:	40010494 	ori	zero,r8,1042
4000fb78:	400104ac 	andhi	zero,r8,1042
4000fb7c:	4001014c 	andi	zero,r8,1029
4000fb80:	400102ac 	andhi	zero,r8,1034
4000fb84:	400104ac 	andhi	zero,r8,1042
4000fb88:	40010230 	cmpltui	zero,r8,1032
4000fb8c:	4001023c 	xorhi	zero,r8,1032
4000fb90:	4001023c 	xorhi	zero,r8,1032
4000fb94:	4001023c 	xorhi	zero,r8,1032
4000fb98:	4001023c 	xorhi	zero,r8,1032
4000fb9c:	4001023c 	xorhi	zero,r8,1032
4000fba0:	4001023c 	xorhi	zero,r8,1032
4000fba4:	4001023c 	xorhi	zero,r8,1032
4000fba8:	4001023c 	xorhi	zero,r8,1032
4000fbac:	4001023c 	xorhi	zero,r8,1032
4000fbb0:	400104ac 	andhi	zero,r8,1042
4000fbb4:	400104ac 	andhi	zero,r8,1042
4000fbb8:	400104ac 	andhi	zero,r8,1042
4000fbbc:	400104ac 	andhi	zero,r8,1042
4000fbc0:	400104ac 	andhi	zero,r8,1042
4000fbc4:	400104ac 	andhi	zero,r8,1042
4000fbc8:	400104ac 	andhi	zero,r8,1042
4000fbcc:	400104ac 	andhi	zero,r8,1042
4000fbd0:	400104ac 	andhi	zero,r8,1042
4000fbd4:	400104ac 	andhi	zero,r8,1042
4000fbd8:	40010268 	cmpgeui	zero,r8,1033
4000fbdc:	400104ac 	andhi	zero,r8,1042
4000fbe0:	400104ac 	andhi	zero,r8,1042
4000fbe4:	400104ac 	andhi	zero,r8,1042
4000fbe8:	400104ac 	andhi	zero,r8,1042
4000fbec:	400104ac 	andhi	zero,r8,1042
4000fbf0:	400104ac 	andhi	zero,r8,1042
4000fbf4:	400104ac 	andhi	zero,r8,1042
4000fbf8:	400104ac 	andhi	zero,r8,1042
4000fbfc:	400104ac 	andhi	zero,r8,1042
4000fc00:	400104ac 	andhi	zero,r8,1042
4000fc04:	4000fcfc 	xorhi	zero,r8,1011
4000fc08:	400104ac 	andhi	zero,r8,1042
4000fc0c:	400104ac 	andhi	zero,r8,1042
4000fc10:	400104ac 	andhi	zero,r8,1042
4000fc14:	400104ac 	andhi	zero,r8,1042
4000fc18:	400104ac 	andhi	zero,r8,1042
4000fc1c:	4000fcc0 	call	44000fcc <__alt_heap_start+0x3f9cd00>
4000fc20:	400104ac 	andhi	zero,r8,1042
4000fc24:	400104ac 	andhi	zero,r8,1042
4000fc28:	400101a8 	cmpgeui	zero,r8,1030
4000fc2c:	400104ac 	andhi	zero,r8,1042
4000fc30:	400104ac 	andhi	zero,r8,1042
4000fc34:	400104ac 	andhi	zero,r8,1042
4000fc38:	400104ac 	andhi	zero,r8,1042
4000fc3c:	400104ac 	andhi	zero,r8,1042
4000fc40:	400104ac 	andhi	zero,r8,1042
4000fc44:	400104ac 	andhi	zero,r8,1042
4000fc48:	400104ac 	andhi	zero,r8,1042
4000fc4c:	400104ac 	andhi	zero,r8,1042
4000fc50:	400104ac 	andhi	zero,r8,1042
4000fc54:	40010200 	call	44001020 <__alt_heap_start+0x3f9cd54>
4000fc58:	40010398 	cmpnei	zero,r8,1038
4000fc5c:	400104ac 	andhi	zero,r8,1042
4000fc60:	400104ac 	andhi	zero,r8,1042
4000fc64:	400104ac 	andhi	zero,r8,1042
4000fc68:	40010420 	cmpeqi	zero,r8,1040
4000fc6c:	40010398 	cmpnei	zero,r8,1038
4000fc70:	400104ac 	andhi	zero,r8,1042
4000fc74:	400104ac 	andhi	zero,r8,1042
4000fc78:	4001042c 	andhi	zero,r8,1040
4000fc7c:	400104ac 	andhi	zero,r8,1042
4000fc80:	400102ec 	andhi	zero,r8,1035
4000fc84:	4000fd00 	call	44000fd0 <__alt_heap_start+0x3f9cd04>
4000fc88:	400103d4 	ori	zero,r8,1039
4000fc8c:	40010414 	ori	zero,r8,1040
4000fc90:	400104ac 	andhi	zero,r8,1042
4000fc94:	40010338 	rdprs	zero,r8,1036
4000fc98:	400104ac 	andhi	zero,r8,1042
4000fc9c:	4000fcc4 	addi	zero,r8,1011
4000fca0:	400104ac 	andhi	zero,r8,1042
4000fca4:	400104ac 	andhi	zero,r8,1042
4000fca8:	4001043c 	xorhi	zero,r8,1040
4000fcac:	42000204 	addi	r8,r8,8
4000fcb0:	dac12217 	ldw	r11,1160(sp)
4000fcb4:	5c97883a 	add	r11,r11,r18
4000fcb8:	dac12215 	stw	r11,1160(sp)
4000fcbc:	003f8c06 	br	4000faf0 <__alt_data_end+0xc000faf0>
4000fcc0:	ad400414 	ori	r21,r21,16
4000fcc4:	a880080c 	andi	r2,r21,32
4000fcc8:	10012f1e 	bne	r2,zero,40010188 <___vfiprintf_internal_r+0x7e0>
4000fccc:	a880040c 	andi	r2,r21,16
4000fcd0:	1001ff1e 	bne	r2,zero,400104d0 <___vfiprintf_internal_r+0xb28>
4000fcd4:	a880100c 	andi	r2,r21,64
4000fcd8:	1001fd26 	beq	r2,zero,400104d0 <___vfiprintf_internal_r+0xb28>
4000fcdc:	da812117 	ldw	r10,1156(sp)
4000fce0:	002d883a 	mov	r22,zero
4000fce4:	00800044 	movi	r2,1
4000fce8:	5480000b 	ldhu	r18,0(r10)
4000fcec:	52800104 	addi	r10,r10,4
4000fcf0:	da812115 	stw	r10,1156(sp)
4000fcf4:	9009883a 	mov	r4,r18
4000fcf8:	00000a06 	br	4000fd24 <___vfiprintf_internal_r+0x37c>
4000fcfc:	ad400414 	ori	r21,r21,16
4000fd00:	a880080c 	andi	r2,r21,32
4000fd04:	10011426 	beq	r2,zero,40010158 <___vfiprintf_internal_r+0x7b0>
4000fd08:	da812117 	ldw	r10,1156(sp)
4000fd0c:	0005883a 	mov	r2,zero
4000fd10:	54800017 	ldw	r18,0(r10)
4000fd14:	55800117 	ldw	r22,4(r10)
4000fd18:	52800204 	addi	r10,r10,8
4000fd1c:	da812115 	stw	r10,1156(sp)
4000fd20:	9588b03a 	or	r4,r18,r22
4000fd24:	d8011d85 	stb	zero,1142(sp)
4000fd28:	4823883a 	mov	r17,r9
4000fd2c:	0019883a 	mov	r12,zero
4000fd30:	48000216 	blt	r9,zero,4000fd3c <___vfiprintf_internal_r+0x394>
4000fd34:	00ffdfc4 	movi	r3,-129
4000fd38:	a8ea703a 	and	r21,r21,r3
4000fd3c:	2002221e 	bne	r4,zero,400105c8 <___vfiprintf_internal_r+0xc20>
4000fd40:	4802c726 	beq	r9,zero,40010860 <___vfiprintf_internal_r+0xeb8>
4000fd44:	10803fcc 	andi	r2,r2,255
4000fd48:	00c00044 	movi	r3,1
4000fd4c:	10c24426 	beq	r2,r3,40010660 <___vfiprintf_internal_r+0xcb8>
4000fd50:	00c00084 	movi	r3,2
4000fd54:	10c2cc26 	beq	r2,r3,40010888 <___vfiprintf_internal_r+0xee0>
4000fd58:	d8c10a04 	addi	r3,sp,1064
4000fd5c:	9008d0fa 	srli	r4,r18,3
4000fd60:	b00a977a 	slli	r5,r22,29
4000fd64:	b02cd0fa 	srli	r22,r22,3
4000fd68:	948001cc 	andi	r18,r18,7
4000fd6c:	90800c04 	addi	r2,r18,48
4000fd70:	18ffffc4 	addi	r3,r3,-1
4000fd74:	2924b03a 	or	r18,r5,r4
4000fd78:	18800005 	stb	r2,0(r3)
4000fd7c:	9588b03a 	or	r4,r18,r22
4000fd80:	203ff61e 	bne	r4,zero,4000fd5c <__alt_data_end+0xc000fd5c>
4000fd84:	a900004c 	andi	r4,r21,1
4000fd88:	d8c12415 	stw	r3,1168(sp)
4000fd8c:	2002fb1e 	bne	r4,zero,4001097c <___vfiprintf_internal_r+0xfd4>
4000fd90:	da811e17 	ldw	r10,1144(sp)
4000fd94:	50e3c83a 	sub	r17,r10,r3
4000fd98:	8825883a 	mov	r18,r17
4000fd9c:	8a40010e 	bge	r17,r9,4000fda4 <___vfiprintf_internal_r+0x3fc>
4000fda0:	4825883a 	mov	r18,r9
4000fda4:	63003fcc 	andi	r12,r12,255
4000fda8:	6300201c 	xori	r12,r12,128
4000fdac:	633fe004 	addi	r12,r12,-128
4000fdb0:	60000126 	beq	r12,zero,4000fdb8 <___vfiprintf_internal_r+0x410>
4000fdb4:	94800044 	addi	r18,r18,1
4000fdb8:	ab80008c 	andi	r14,r21,2
4000fdbc:	70000126 	beq	r14,zero,4000fdc4 <___vfiprintf_internal_r+0x41c>
4000fdc0:	94800084 	addi	r18,r18,2
4000fdc4:	ad80210c 	andi	r22,r21,132
4000fdc8:	b001df1e 	bne	r22,zero,40010548 <___vfiprintf_internal_r+0xba0>
4000fdcc:	9c8fc83a 	sub	r7,r19,r18
4000fdd0:	01c1dd0e 	bge	zero,r7,40010548 <___vfiprintf_internal_r+0xba0>
4000fdd4:	03000404 	movi	r12,16
4000fdd8:	d8811c17 	ldw	r2,1136(sp)
4000fddc:	61c3920e 	bge	r12,r7,40010c28 <___vfiprintf_internal_r+0x1280>
4000fde0:	02900074 	movhi	r10,16385
4000fde4:	52943e04 	addi	r10,r10,20728
4000fde8:	dc012915 	stw	r16,1188(sp)
4000fdec:	d9811b17 	ldw	r6,1132(sp)
4000fdf0:	da812315 	stw	r10,1164(sp)
4000fdf4:	00c001c4 	movi	r3,7
4000fdf8:	da412515 	stw	r9,1172(sp)
4000fdfc:	db812815 	stw	r14,1184(sp)
4000fe00:	3821883a 	mov	r16,r7
4000fe04:	00000506 	br	4000fe1c <___vfiprintf_internal_r+0x474>
4000fe08:	31400084 	addi	r5,r6,2
4000fe0c:	42000204 	addi	r8,r8,8
4000fe10:	200d883a 	mov	r6,r4
4000fe14:	843ffc04 	addi	r16,r16,-16
4000fe18:	64000d0e 	bge	r12,r16,4000fe50 <___vfiprintf_internal_r+0x4a8>
4000fe1c:	10800404 	addi	r2,r2,16
4000fe20:	31000044 	addi	r4,r6,1
4000fe24:	47000015 	stw	fp,0(r8)
4000fe28:	43000115 	stw	r12,4(r8)
4000fe2c:	d8811c15 	stw	r2,1136(sp)
4000fe30:	d9011b15 	stw	r4,1132(sp)
4000fe34:	193ff40e 	bge	r3,r4,4000fe08 <__alt_data_end+0xc000fe08>
4000fe38:	1001b51e 	bne	r2,zero,40010510 <___vfiprintf_internal_r+0xb68>
4000fe3c:	843ffc04 	addi	r16,r16,-16
4000fe40:	000d883a 	mov	r6,zero
4000fe44:	01400044 	movi	r5,1
4000fe48:	d811883a 	mov	r8,sp
4000fe4c:	643ff316 	blt	r12,r16,4000fe1c <__alt_data_end+0xc000fe1c>
4000fe50:	800f883a 	mov	r7,r16
4000fe54:	da412517 	ldw	r9,1172(sp)
4000fe58:	db812817 	ldw	r14,1184(sp)
4000fe5c:	dc012917 	ldw	r16,1188(sp)
4000fe60:	dac12317 	ldw	r11,1164(sp)
4000fe64:	3887883a 	add	r3,r7,r2
4000fe68:	41c00115 	stw	r7,4(r8)
4000fe6c:	42c00015 	stw	r11,0(r8)
4000fe70:	d8c11c15 	stw	r3,1136(sp)
4000fe74:	d9411b15 	stw	r5,1132(sp)
4000fe78:	008001c4 	movi	r2,7
4000fe7c:	11429316 	blt	r2,r5,400108cc <___vfiprintf_internal_r+0xf24>
4000fe80:	d9011d87 	ldb	r4,1142(sp)
4000fe84:	42000204 	addi	r8,r8,8
4000fe88:	28800044 	addi	r2,r5,1
4000fe8c:	2001b31e 	bne	r4,zero,4001055c <___vfiprintf_internal_r+0xbb4>
4000fe90:	70000c26 	beq	r14,zero,4000fec4 <___vfiprintf_internal_r+0x51c>
4000fe94:	d9011d04 	addi	r4,sp,1140
4000fe98:	18c00084 	addi	r3,r3,2
4000fe9c:	41000015 	stw	r4,0(r8)
4000fea0:	01000084 	movi	r4,2
4000fea4:	41000115 	stw	r4,4(r8)
4000fea8:	d8c11c15 	stw	r3,1136(sp)
4000feac:	d8811b15 	stw	r2,1132(sp)
4000feb0:	010001c4 	movi	r4,7
4000feb4:	20826516 	blt	r4,r2,4001084c <___vfiprintf_internal_r+0xea4>
4000feb8:	100b883a 	mov	r5,r2
4000febc:	42000204 	addi	r8,r8,8
4000fec0:	10800044 	addi	r2,r2,1
4000fec4:	01002004 	movi	r4,128
4000fec8:	b1021a26 	beq	r22,r4,40010734 <___vfiprintf_internal_r+0xd8c>
4000fecc:	4c6dc83a 	sub	r22,r9,r17
4000fed0:	0580230e 	bge	zero,r22,4000ff60 <___vfiprintf_internal_r+0x5b8>
4000fed4:	01c00404 	movi	r7,16
4000fed8:	3d83300e 	bge	r7,r22,40010b9c <___vfiprintf_internal_r+0x11f4>
4000fedc:	00900074 	movhi	r2,16385
4000fee0:	10943a04 	addi	r2,r2,20712
4000fee4:	d8812315 	stw	r2,1164(sp)
4000fee8:	030001c4 	movi	r12,7
4000feec:	00000506 	br	4000ff04 <___vfiprintf_internal_r+0x55c>
4000fef0:	28800084 	addi	r2,r5,2
4000fef4:	42000204 	addi	r8,r8,8
4000fef8:	200b883a 	mov	r5,r4
4000fefc:	b5bffc04 	addi	r22,r22,-16
4000ff00:	3d800d0e 	bge	r7,r22,4000ff38 <___vfiprintf_internal_r+0x590>
4000ff04:	18c00404 	addi	r3,r3,16
4000ff08:	29000044 	addi	r4,r5,1
4000ff0c:	45c00015 	stw	r23,0(r8)
4000ff10:	41c00115 	stw	r7,4(r8)
4000ff14:	d8c11c15 	stw	r3,1136(sp)
4000ff18:	d9011b15 	stw	r4,1132(sp)
4000ff1c:	613ff40e 	bge	r12,r4,4000fef0 <__alt_data_end+0xc000fef0>
4000ff20:	18019b1e 	bne	r3,zero,40010590 <___vfiprintf_internal_r+0xbe8>
4000ff24:	b5bffc04 	addi	r22,r22,-16
4000ff28:	000b883a 	mov	r5,zero
4000ff2c:	00800044 	movi	r2,1
4000ff30:	d811883a 	mov	r8,sp
4000ff34:	3dbff316 	blt	r7,r22,4000ff04 <__alt_data_end+0xc000ff04>
4000ff38:	da812317 	ldw	r10,1164(sp)
4000ff3c:	1d87883a 	add	r3,r3,r22
4000ff40:	45800115 	stw	r22,4(r8)
4000ff44:	42800015 	stw	r10,0(r8)
4000ff48:	d8c11c15 	stw	r3,1136(sp)
4000ff4c:	d8811b15 	stw	r2,1132(sp)
4000ff50:	010001c4 	movi	r4,7
4000ff54:	2081dd16 	blt	r4,r2,400106cc <___vfiprintf_internal_r+0xd24>
4000ff58:	42000204 	addi	r8,r8,8
4000ff5c:	10800044 	addi	r2,r2,1
4000ff60:	da812417 	ldw	r10,1168(sp)
4000ff64:	1c47883a 	add	r3,r3,r17
4000ff68:	44400115 	stw	r17,4(r8)
4000ff6c:	42800015 	stw	r10,0(r8)
4000ff70:	d8c11c15 	stw	r3,1136(sp)
4000ff74:	d8811b15 	stw	r2,1132(sp)
4000ff78:	010001c4 	movi	r4,7
4000ff7c:	2081dc0e 	bge	r4,r2,400106f0 <___vfiprintf_internal_r+0xd48>
4000ff80:	1802611e 	bne	r3,zero,40010908 <___vfiprintf_internal_r+0xf60>
4000ff84:	d8011b15 	stw	zero,1132(sp)
4000ff88:	aac0010c 	andi	r11,r21,4
4000ff8c:	58002726 	beq	r11,zero,4001002c <___vfiprintf_internal_r+0x684>
4000ff90:	9ca3c83a 	sub	r17,r19,r18
4000ff94:	d811883a 	mov	r8,sp
4000ff98:	0443510e 	bge	zero,r17,40010ce0 <___vfiprintf_internal_r+0x1338>
4000ff9c:	01c00404 	movi	r7,16
4000ffa0:	3c43320e 	bge	r7,r17,40010c6c <___vfiprintf_internal_r+0x12c4>
4000ffa4:	00900074 	movhi	r2,16385
4000ffa8:	10943e04 	addi	r2,r2,20728
4000ffac:	d9011b17 	ldw	r4,1132(sp)
4000ffb0:	d8812315 	stw	r2,1164(sp)
4000ffb4:	382d883a 	mov	r22,r7
4000ffb8:	054001c4 	movi	r21,7
4000ffbc:	00000506 	br	4000ffd4 <___vfiprintf_internal_r+0x62c>
4000ffc0:	21400084 	addi	r5,r4,2
4000ffc4:	42000204 	addi	r8,r8,8
4000ffc8:	1009883a 	mov	r4,r2
4000ffcc:	8c7ffc04 	addi	r17,r17,-16
4000ffd0:	b4400d0e 	bge	r22,r17,40010008 <___vfiprintf_internal_r+0x660>
4000ffd4:	18c00404 	addi	r3,r3,16
4000ffd8:	20800044 	addi	r2,r4,1
4000ffdc:	47000015 	stw	fp,0(r8)
4000ffe0:	45800115 	stw	r22,4(r8)
4000ffe4:	d8c11c15 	stw	r3,1136(sp)
4000ffe8:	d8811b15 	stw	r2,1132(sp)
4000ffec:	a8bff40e 	bge	r21,r2,4000ffc0 <__alt_data_end+0xc000ffc0>
4000fff0:	1801ac1e 	bne	r3,zero,400106a4 <___vfiprintf_internal_r+0xcfc>
4000fff4:	8c7ffc04 	addi	r17,r17,-16
4000fff8:	0009883a 	mov	r4,zero
4000fffc:	01400044 	movi	r5,1
40010000:	d811883a 	mov	r8,sp
40010004:	b47ff316 	blt	r22,r17,4000ffd4 <__alt_data_end+0xc000ffd4>
40010008:	da812317 	ldw	r10,1164(sp)
4001000c:	1c47883a 	add	r3,r3,r17
40010010:	44400115 	stw	r17,4(r8)
40010014:	42800015 	stw	r10,0(r8)
40010018:	d8c11c15 	stw	r3,1136(sp)
4001001c:	d9411b15 	stw	r5,1132(sp)
40010020:	008001c4 	movi	r2,7
40010024:	1141b70e 	bge	r2,r5,40010704 <___vfiprintf_internal_r+0xd5c>
40010028:	1802cf1e 	bne	r3,zero,40010b68 <___vfiprintf_internal_r+0x11c0>
4001002c:	94c2ca16 	blt	r18,r19,40010b58 <___vfiprintf_internal_r+0x11b0>
40010030:	dac12217 	ldw	r11,1160(sp)
40010034:	5c97883a 	add	r11,r11,r18
40010038:	dac12215 	stw	r11,1160(sp)
4001003c:	d8011b15 	stw	zero,1132(sp)
40010040:	d811883a 	mov	r8,sp
40010044:	003e8d06 	br	4000fa7c <__alt_data_end+0xc000fa7c>
40010048:	d9012017 	ldw	r4,1152(sp)
4001004c:	a00b883a 	mov	r5,r20
40010050:	000aea40 	call	4000aea4 <__swsetup_r>
40010054:	10002c1e 	bne	r2,zero,40010108 <___vfiprintf_internal_r+0x760>
40010058:	a0c0030b 	ldhu	r3,12(r20)
4001005c:	01000284 	movi	r4,10
40010060:	1805883a 	mov	r2,r3
40010064:	1080068c 	andi	r2,r2,26
40010068:	113e731e 	bne	r2,r4,4000fa38 <__alt_data_end+0xc000fa38>
4001006c:	a080038b 	ldhu	r2,14(r20)
40010070:	113fffcc 	andi	r4,r2,65535
40010074:	2120001c 	xori	r4,r4,32768
40010078:	21200004 	addi	r4,r4,-32768
4001007c:	203e6e16 	blt	r4,zero,4000fa38 <__alt_data_end+0xc000fa38>
40010080:	a3001917 	ldw	r12,100(r20)
40010084:	a2c00717 	ldw	r11,28(r20)
40010088:	a2800917 	ldw	r10,36(r20)
4001008c:	d9012017 	ldw	r4,1152(sp)
40010090:	d9c12117 	ldw	r7,1156(sp)
40010094:	02410004 	movi	r9,1024
40010098:	18ffff4c 	andi	r3,r3,65533
4001009c:	da4b883a 	add	r5,sp,r9
400100a0:	b00d883a 	mov	r6,r22
400100a4:	d8c1030d 	sth	r3,1036(sp)
400100a8:	db011915 	stw	r12,1124(sp)
400100ac:	d881038d 	sth	r2,1038(sp)
400100b0:	dac10715 	stw	r11,1052(sp)
400100b4:	da810915 	stw	r10,1060(sp)
400100b8:	dec10015 	stw	sp,1024(sp)
400100bc:	dec10415 	stw	sp,1040(sp)
400100c0:	da410215 	stw	r9,1032(sp)
400100c4:	da410515 	stw	r9,1044(sp)
400100c8:	d8010615 	stw	zero,1048(sp)
400100cc:	000f9a80 	call	4000f9a8 <___vfiprintf_internal_r>
400100d0:	1021883a 	mov	r16,r2
400100d4:	10000416 	blt	r2,zero,400100e8 <___vfiprintf_internal_r+0x740>
400100d8:	d9012017 	ldw	r4,1152(sp)
400100dc:	d9410004 	addi	r5,sp,1024
400100e0:	000ca900 	call	4000ca90 <_fflush_r>
400100e4:	1002fc1e 	bne	r2,zero,40010cd8 <___vfiprintf_internal_r+0x1330>
400100e8:	d881030b 	ldhu	r2,1036(sp)
400100ec:	1080100c 	andi	r2,r2,64
400100f0:	10000326 	beq	r2,zero,40010100 <___vfiprintf_internal_r+0x758>
400100f4:	a080030b 	ldhu	r2,12(r20)
400100f8:	10801014 	ori	r2,r2,64
400100fc:	a080030d 	sth	r2,12(r20)
40010100:	8005883a 	mov	r2,r16
40010104:	00000106 	br	4001010c <___vfiprintf_internal_r+0x764>
40010108:	00bfffc4 	movi	r2,-1
4001010c:	dfc13517 	ldw	ra,1236(sp)
40010110:	df013417 	ldw	fp,1232(sp)
40010114:	ddc13317 	ldw	r23,1228(sp)
40010118:	dd813217 	ldw	r22,1224(sp)
4001011c:	dd413117 	ldw	r21,1220(sp)
40010120:	dd013017 	ldw	r20,1216(sp)
40010124:	dcc12f17 	ldw	r19,1212(sp)
40010128:	dc812e17 	ldw	r18,1208(sp)
4001012c:	dc412d17 	ldw	r17,1204(sp)
40010130:	dc012c17 	ldw	r16,1200(sp)
40010134:	dec13604 	addi	sp,sp,1240
40010138:	f800283a 	ret
4001013c:	000d0380 	call	4000d038 <__sinit>
40010140:	003e2b06 	br	4000f9f0 <__alt_data_end+0xc000f9f0>
40010144:	04e7c83a 	sub	r19,zero,r19
40010148:	d8812115 	stw	r2,1156(sp)
4001014c:	ad400114 	ori	r21,r21,4
40010150:	80c00007 	ldb	r3,0(r16)
40010154:	003e7306 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010158:	a880040c 	andi	r2,r21,16
4001015c:	1000e41e 	bne	r2,zero,400104f0 <___vfiprintf_internal_r+0xb48>
40010160:	a880100c 	andi	r2,r21,64
40010164:	1000e226 	beq	r2,zero,400104f0 <___vfiprintf_internal_r+0xb48>
40010168:	da812117 	ldw	r10,1156(sp)
4001016c:	002d883a 	mov	r22,zero
40010170:	0005883a 	mov	r2,zero
40010174:	5480000b 	ldhu	r18,0(r10)
40010178:	52800104 	addi	r10,r10,4
4001017c:	da812115 	stw	r10,1156(sp)
40010180:	9009883a 	mov	r4,r18
40010184:	003ee706 	br	4000fd24 <__alt_data_end+0xc000fd24>
40010188:	da812117 	ldw	r10,1156(sp)
4001018c:	00800044 	movi	r2,1
40010190:	54800017 	ldw	r18,0(r10)
40010194:	55800117 	ldw	r22,4(r10)
40010198:	52800204 	addi	r10,r10,8
4001019c:	da812115 	stw	r10,1156(sp)
400101a0:	9588b03a 	or	r4,r18,r22
400101a4:	003edf06 	br	4000fd24 <__alt_data_end+0xc000fd24>
400101a8:	02d00074 	movhi	r11,16385
400101ac:	5ad3d504 	addi	r11,r11,20308
400101b0:	d9811d85 	stb	r6,1142(sp)
400101b4:	dac12615 	stw	r11,1176(sp)
400101b8:	a900080c 	andi	r4,r21,32
400101bc:	d8812117 	ldw	r2,1156(sp)
400101c0:	2000a526 	beq	r4,zero,40010458 <___vfiprintf_internal_r+0xab0>
400101c4:	da812117 	ldw	r10,1156(sp)
400101c8:	14800017 	ldw	r18,0(r2)
400101cc:	15800117 	ldw	r22,4(r2)
400101d0:	52800204 	addi	r10,r10,8
400101d4:	da812115 	stw	r10,1156(sp)
400101d8:	a880004c 	andi	r2,r21,1
400101dc:	1001d926 	beq	r2,zero,40010944 <___vfiprintf_internal_r+0xf9c>
400101e0:	9588b03a 	or	r4,r18,r22
400101e4:	20024426 	beq	r4,zero,40010af8 <___vfiprintf_internal_r+0x1150>
400101e8:	00800c04 	movi	r2,48
400101ec:	d8811d05 	stb	r2,1140(sp)
400101f0:	d8c11d45 	stb	r3,1141(sp)
400101f4:	ad400094 	ori	r21,r21,2
400101f8:	00800084 	movi	r2,2
400101fc:	003ec906 	br	4000fd24 <__alt_data_end+0xc000fd24>
40010200:	da812117 	ldw	r10,1156(sp)
40010204:	04800044 	movi	r18,1
40010208:	dac10004 	addi	r11,sp,1024
4001020c:	50800017 	ldw	r2,0(r10)
40010210:	52800104 	addi	r10,r10,4
40010214:	d8011d85 	stb	zero,1142(sp)
40010218:	d8810005 	stb	r2,1024(sp)
4001021c:	da812115 	stw	r10,1156(sp)
40010220:	9023883a 	mov	r17,r18
40010224:	dac12415 	stw	r11,1168(sp)
40010228:	0013883a 	mov	r9,zero
4001022c:	003ee206 	br	4000fdb8 <__alt_data_end+0xc000fdb8>
40010230:	ad402014 	ori	r21,r21,128
40010234:	80c00007 	ldb	r3,0(r16)
40010238:	003e3a06 	br	4000fb24 <__alt_data_end+0xc000fb24>
4001023c:	8015883a 	mov	r10,r16
40010240:	0027883a 	mov	r19,zero
40010244:	18bff404 	addi	r2,r3,-48
40010248:	50c00007 	ldb	r3,0(r10)
4001024c:	9cc002a4 	muli	r19,r19,10
40010250:	84000044 	addi	r16,r16,1
40010254:	8015883a 	mov	r10,r16
40010258:	98a7883a 	add	r19,r19,r2
4001025c:	18bff404 	addi	r2,r3,-48
40010260:	28bff92e 	bgeu	r5,r2,40010248 <__alt_data_end+0xc0010248>
40010264:	003e3006 	br	4000fb28 <__alt_data_end+0xc000fb28>
40010268:	ad400414 	ori	r21,r21,16
4001026c:	d9811d85 	stb	r6,1142(sp)
40010270:	a880080c 	andi	r2,r21,32
40010274:	d8c12117 	ldw	r3,1156(sp)
40010278:	10004b26 	beq	r2,zero,400103a8 <___vfiprintf_internal_r+0xa00>
4001027c:	da812117 	ldw	r10,1156(sp)
40010280:	18800117 	ldw	r2,4(r3)
40010284:	1c800017 	ldw	r18,0(r3)
40010288:	52800204 	addi	r10,r10,8
4001028c:	da812115 	stw	r10,1156(sp)
40010290:	102d883a 	mov	r22,r2
40010294:	1001f116 	blt	r2,zero,40010a5c <___vfiprintf_internal_r+0x10b4>
40010298:	db011d83 	ldbu	r12,1142(sp)
4001029c:	4823883a 	mov	r17,r9
400102a0:	00800044 	movi	r2,1
400102a4:	9588b03a 	or	r4,r18,r22
400102a8:	003ea106 	br	4000fd30 <__alt_data_end+0xc000fd30>
400102ac:	80c00007 	ldb	r3,0(r16)
400102b0:	82800044 	addi	r10,r16,1
400102b4:	1b027f26 	beq	r3,r12,40010cb4 <___vfiprintf_internal_r+0x130c>
400102b8:	18bff404 	addi	r2,r3,-48
400102bc:	5021883a 	mov	r16,r10
400102c0:	0013883a 	mov	r9,zero
400102c4:	28be1836 	bltu	r5,r2,4000fb28 <__alt_data_end+0xc000fb28>
400102c8:	80c00007 	ldb	r3,0(r16)
400102cc:	4a4002a4 	muli	r9,r9,10
400102d0:	84000044 	addi	r16,r16,1
400102d4:	1253883a 	add	r9,r2,r9
400102d8:	18bff404 	addi	r2,r3,-48
400102dc:	28bffa2e 	bgeu	r5,r2,400102c8 <__alt_data_end+0xc00102c8>
400102e0:	483e110e 	bge	r9,zero,4000fb28 <__alt_data_end+0xc000fb28>
400102e4:	027fffc4 	movi	r9,-1
400102e8:	003e0f06 	br	4000fb28 <__alt_data_end+0xc000fb28>
400102ec:	d9811d85 	stb	r6,1142(sp)
400102f0:	a880080c 	andi	r2,r21,32
400102f4:	1001ee26 	beq	r2,zero,40010ab0 <___vfiprintf_internal_r+0x1108>
400102f8:	da812117 	ldw	r10,1156(sp)
400102fc:	dac12217 	ldw	r11,1160(sp)
40010300:	50800017 	ldw	r2,0(r10)
40010304:	5807d7fa 	srai	r3,r11,31
40010308:	52800104 	addi	r10,r10,4
4001030c:	da812115 	stw	r10,1156(sp)
40010310:	12c00015 	stw	r11,0(r2)
40010314:	10c00115 	stw	r3,4(r2)
40010318:	003dd806 	br	4000fa7c <__alt_data_end+0xc000fa7c>
4001031c:	30803fcc 	andi	r2,r6,255
40010320:	1080201c 	xori	r2,r2,128
40010324:	10bfe004 	addi	r2,r2,-128
40010328:	1001df1e 	bne	r2,zero,40010aa8 <___vfiprintf_internal_r+0x1100>
4001032c:	01800804 	movi	r6,32
40010330:	80c00007 	ldb	r3,0(r16)
40010334:	003dfb06 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010338:	da812117 	ldw	r10,1156(sp)
4001033c:	dac12117 	ldw	r11,1156(sp)
40010340:	d8011d85 	stb	zero,1142(sp)
40010344:	52800017 	ldw	r10,0(r10)
40010348:	5d800104 	addi	r22,r11,4
4001034c:	da812415 	stw	r10,1168(sp)
40010350:	50023b26 	beq	r10,zero,40010c40 <___vfiprintf_internal_r+0x1298>
40010354:	d9012417 	ldw	r4,1168(sp)
40010358:	48021f16 	blt	r9,zero,40010bd8 <___vfiprintf_internal_r+0x1230>
4001035c:	480d883a 	mov	r6,r9
40010360:	000b883a 	mov	r5,zero
40010364:	da012a15 	stw	r8,1192(sp)
40010368:	da412b15 	stw	r9,1196(sp)
4001036c:	000dd480 	call	4000dd48 <memchr>
40010370:	da012a17 	ldw	r8,1192(sp)
40010374:	da412b17 	ldw	r9,1196(sp)
40010378:	10024726 	beq	r2,zero,40010c98 <___vfiprintf_internal_r+0x12f0>
4001037c:	d8c12417 	ldw	r3,1168(sp)
40010380:	10e3c83a 	sub	r17,r2,r3
40010384:	4c41f616 	blt	r9,r17,40010b60 <___vfiprintf_internal_r+0x11b8>
40010388:	db011d83 	ldbu	r12,1142(sp)
4001038c:	dd812115 	stw	r22,1156(sp)
40010390:	0013883a 	mov	r9,zero
40010394:	003e8006 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010398:	d9811d85 	stb	r6,1142(sp)
4001039c:	a880080c 	andi	r2,r21,32
400103a0:	d8c12117 	ldw	r3,1156(sp)
400103a4:	103fb51e 	bne	r2,zero,4001027c <__alt_data_end+0xc001027c>
400103a8:	a880040c 	andi	r2,r21,16
400103ac:	10015e1e 	bne	r2,zero,40010928 <___vfiprintf_internal_r+0xf80>
400103b0:	a880100c 	andi	r2,r21,64
400103b4:	10015c26 	beq	r2,zero,40010928 <___vfiprintf_internal_r+0xf80>
400103b8:	1c80000f 	ldh	r18,0(r3)
400103bc:	da812117 	ldw	r10,1156(sp)
400103c0:	902dd7fa 	srai	r22,r18,31
400103c4:	52800104 	addi	r10,r10,4
400103c8:	da812115 	stw	r10,1156(sp)
400103cc:	b005883a 	mov	r2,r22
400103d0:	003fb006 	br	40010294 <__alt_data_end+0xc0010294>
400103d4:	da812117 	ldw	r10,1156(sp)
400103d8:	00800c04 	movi	r2,48
400103dc:	02d00074 	movhi	r11,16385
400103e0:	54800017 	ldw	r18,0(r10)
400103e4:	d8811d05 	stb	r2,1140(sp)
400103e8:	52800104 	addi	r10,r10,4
400103ec:	00801e04 	movi	r2,120
400103f0:	5ad3da04 	addi	r11,r11,20328
400103f4:	d8811d45 	stb	r2,1141(sp)
400103f8:	002d883a 	mov	r22,zero
400103fc:	ad400094 	ori	r21,r21,2
40010400:	da812115 	stw	r10,1156(sp)
40010404:	dac12615 	stw	r11,1176(sp)
40010408:	00800084 	movi	r2,2
4001040c:	9009883a 	mov	r4,r18
40010410:	003e4406 	br	4000fd24 <__alt_data_end+0xc000fd24>
40010414:	ad400814 	ori	r21,r21,32
40010418:	80c00007 	ldb	r3,0(r16)
4001041c:	003dc106 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010420:	ad401014 	ori	r21,r21,64
40010424:	80c00007 	ldb	r3,0(r16)
40010428:	003dbe06 	br	4000fb24 <__alt_data_end+0xc000fb24>
4001042c:	80c00007 	ldb	r3,0(r16)
40010430:	19c1de26 	beq	r3,r7,40010bac <___vfiprintf_internal_r+0x1204>
40010434:	ad400414 	ori	r21,r21,16
40010438:	003dba06 	br	4000fb24 <__alt_data_end+0xc000fb24>
4001043c:	00900074 	movhi	r2,16385
40010440:	1093da04 	addi	r2,r2,20328
40010444:	d8812615 	stw	r2,1176(sp)
40010448:	d9811d85 	stb	r6,1142(sp)
4001044c:	a900080c 	andi	r4,r21,32
40010450:	d8812117 	ldw	r2,1156(sp)
40010454:	203f5b1e 	bne	r4,zero,400101c4 <__alt_data_end+0xc00101c4>
40010458:	a900040c 	andi	r4,r21,16
4001045c:	2001a826 	beq	r4,zero,40010b00 <___vfiprintf_internal_r+0x1158>
40010460:	dac12117 	ldw	r11,1156(sp)
40010464:	14800017 	ldw	r18,0(r2)
40010468:	002d883a 	mov	r22,zero
4001046c:	5ac00104 	addi	r11,r11,4
40010470:	dac12115 	stw	r11,1156(sp)
40010474:	003f5806 	br	400101d8 <__alt_data_end+0xc00101d8>
40010478:	da812117 	ldw	r10,1156(sp)
4001047c:	54c00017 	ldw	r19,0(r10)
40010480:	50800104 	addi	r2,r10,4
40010484:	983f2f16 	blt	r19,zero,40010144 <__alt_data_end+0xc0010144>
40010488:	d8812115 	stw	r2,1156(sp)
4001048c:	80c00007 	ldb	r3,0(r16)
40010490:	003da406 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010494:	01800ac4 	movi	r6,43
40010498:	80c00007 	ldb	r3,0(r16)
4001049c:	003da106 	br	4000fb24 <__alt_data_end+0xc000fb24>
400104a0:	ad400054 	ori	r21,r21,1
400104a4:	80c00007 	ldb	r3,0(r16)
400104a8:	003d9e06 	br	4000fb24 <__alt_data_end+0xc000fb24>
400104ac:	d9811d85 	stb	r6,1142(sp)
400104b0:	18007126 	beq	r3,zero,40010678 <___vfiprintf_internal_r+0xcd0>
400104b4:	04800044 	movi	r18,1
400104b8:	d8c10005 	stb	r3,1024(sp)
400104bc:	d8c10004 	addi	r3,sp,1024
400104c0:	d8011d85 	stb	zero,1142(sp)
400104c4:	9023883a 	mov	r17,r18
400104c8:	d8c12415 	stw	r3,1168(sp)
400104cc:	003f5606 	br	40010228 <__alt_data_end+0xc0010228>
400104d0:	dac12117 	ldw	r11,1156(sp)
400104d4:	002d883a 	mov	r22,zero
400104d8:	00800044 	movi	r2,1
400104dc:	5c800017 	ldw	r18,0(r11)
400104e0:	5ac00104 	addi	r11,r11,4
400104e4:	dac12115 	stw	r11,1156(sp)
400104e8:	9009883a 	mov	r4,r18
400104ec:	003e0d06 	br	4000fd24 <__alt_data_end+0xc000fd24>
400104f0:	dac12117 	ldw	r11,1156(sp)
400104f4:	002d883a 	mov	r22,zero
400104f8:	0005883a 	mov	r2,zero
400104fc:	5c800017 	ldw	r18,0(r11)
40010500:	5ac00104 	addi	r11,r11,4
40010504:	dac12115 	stw	r11,1156(sp)
40010508:	9009883a 	mov	r4,r18
4001050c:	003e0506 	br	4000fd24 <__alt_data_end+0xc000fd24>
40010510:	d9012017 	ldw	r4,1152(sp)
40010514:	a00b883a 	mov	r5,r20
40010518:	d9811a04 	addi	r6,sp,1128
4001051c:	d8c12a15 	stw	r3,1192(sp)
40010520:	db012b15 	stw	r12,1196(sp)
40010524:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010528:	d8c12a17 	ldw	r3,1192(sp)
4001052c:	db012b17 	ldw	r12,1196(sp)
40010530:	1000571e 	bne	r2,zero,40010690 <___vfiprintf_internal_r+0xce8>
40010534:	d9811b17 	ldw	r6,1132(sp)
40010538:	d8811c17 	ldw	r2,1136(sp)
4001053c:	d811883a 	mov	r8,sp
40010540:	31400044 	addi	r5,r6,1
40010544:	003e3306 	br	4000fe14 <__alt_data_end+0xc000fe14>
40010548:	d9411b17 	ldw	r5,1132(sp)
4001054c:	d8c11c17 	ldw	r3,1136(sp)
40010550:	28800044 	addi	r2,r5,1
40010554:	d9011d87 	ldb	r4,1142(sp)
40010558:	203e4d26 	beq	r4,zero,4000fe90 <__alt_data_end+0xc000fe90>
4001055c:	01000044 	movi	r4,1
40010560:	d9411d84 	addi	r5,sp,1142
40010564:	1907883a 	add	r3,r3,r4
40010568:	41400015 	stw	r5,0(r8)
4001056c:	41000115 	stw	r4,4(r8)
40010570:	d8c11c15 	stw	r3,1136(sp)
40010574:	d8811b15 	stw	r2,1132(sp)
40010578:	014001c4 	movi	r5,7
4001057c:	2880aa16 	blt	r5,r2,40010828 <___vfiprintf_internal_r+0xe80>
40010580:	100b883a 	mov	r5,r2
40010584:	42000204 	addi	r8,r8,8
40010588:	10800044 	addi	r2,r2,1
4001058c:	003e4006 	br	4000fe90 <__alt_data_end+0xc000fe90>
40010590:	d9012017 	ldw	r4,1152(sp)
40010594:	a00b883a 	mov	r5,r20
40010598:	d9811a04 	addi	r6,sp,1128
4001059c:	d9c12a15 	stw	r7,1192(sp)
400105a0:	db012b15 	stw	r12,1196(sp)
400105a4:	000f8940 	call	4000f894 <__sprint_r.part.0>
400105a8:	d9c12a17 	ldw	r7,1192(sp)
400105ac:	db012b17 	ldw	r12,1196(sp)
400105b0:	1000371e 	bne	r2,zero,40010690 <___vfiprintf_internal_r+0xce8>
400105b4:	d9411b17 	ldw	r5,1132(sp)
400105b8:	d8c11c17 	ldw	r3,1136(sp)
400105bc:	d811883a 	mov	r8,sp
400105c0:	28800044 	addi	r2,r5,1
400105c4:	003e4d06 	br	4000fefc <__alt_data_end+0xc000fefc>
400105c8:	10803fcc 	andi	r2,r2,255
400105cc:	00c00044 	movi	r3,1
400105d0:	10fddf1e 	bne	r2,r3,4000fd50 <__alt_data_end+0xc000fd50>
400105d4:	b000021e 	bne	r22,zero,400105e0 <___vfiprintf_internal_r+0xc38>
400105d8:	00800244 	movi	r2,9
400105dc:	1480202e 	bgeu	r2,r18,40010660 <___vfiprintf_internal_r+0xcb8>
400105e0:	dc012515 	stw	r16,1172(sp)
400105e4:	dc410a04 	addi	r17,sp,1064
400105e8:	9021883a 	mov	r16,r18
400105ec:	da012415 	stw	r8,1168(sp)
400105f0:	b025883a 	mov	r18,r22
400105f4:	da412315 	stw	r9,1164(sp)
400105f8:	602d883a 	mov	r22,r12
400105fc:	8009883a 	mov	r4,r16
40010600:	900b883a 	mov	r5,r18
40010604:	01800284 	movi	r6,10
40010608:	000f883a 	mov	r7,zero
4001060c:	0011c800 	call	40011c80 <__umoddi3>
40010610:	10800c04 	addi	r2,r2,48
40010614:	8c7fffc4 	addi	r17,r17,-1
40010618:	8009883a 	mov	r4,r16
4001061c:	900b883a 	mov	r5,r18
40010620:	01800284 	movi	r6,10
40010624:	000f883a 	mov	r7,zero
40010628:	88800005 	stb	r2,0(r17)
4001062c:	00116c00 	call	400116c0 <__udivdi3>
40010630:	1021883a 	mov	r16,r2
40010634:	10c4b03a 	or	r2,r2,r3
40010638:	1825883a 	mov	r18,r3
4001063c:	103fef1e 	bne	r2,zero,400105fc <__alt_data_end+0xc00105fc>
40010640:	da811e17 	ldw	r10,1144(sp)
40010644:	da012417 	ldw	r8,1168(sp)
40010648:	da412317 	ldw	r9,1164(sp)
4001064c:	dc412415 	stw	r17,1168(sp)
40010650:	b019883a 	mov	r12,r22
40010654:	dc012517 	ldw	r16,1172(sp)
40010658:	5463c83a 	sub	r17,r10,r17
4001065c:	003dce06 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010660:	94800c04 	addi	r18,r18,48
40010664:	d8c109c4 	addi	r3,sp,1063
40010668:	dc8109c5 	stb	r18,1063(sp)
4001066c:	dc412717 	ldw	r17,1180(sp)
40010670:	d8c12415 	stw	r3,1168(sp)
40010674:	003dc806 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010678:	d8811c17 	ldw	r2,1136(sp)
4001067c:	10000426 	beq	r2,zero,40010690 <___vfiprintf_internal_r+0xce8>
40010680:	d9012017 	ldw	r4,1152(sp)
40010684:	a00b883a 	mov	r5,r20
40010688:	d9811a04 	addi	r6,sp,1128
4001068c:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010690:	a080030b 	ldhu	r2,12(r20)
40010694:	1080100c 	andi	r2,r2,64
40010698:	103e9b1e 	bne	r2,zero,40010108 <__alt_data_end+0xc0010108>
4001069c:	d8812217 	ldw	r2,1160(sp)
400106a0:	003e9a06 	br	4001010c <__alt_data_end+0xc001010c>
400106a4:	d9012017 	ldw	r4,1152(sp)
400106a8:	a00b883a 	mov	r5,r20
400106ac:	d9811a04 	addi	r6,sp,1128
400106b0:	000f8940 	call	4000f894 <__sprint_r.part.0>
400106b4:	103ff61e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
400106b8:	d9011b17 	ldw	r4,1132(sp)
400106bc:	d8c11c17 	ldw	r3,1136(sp)
400106c0:	d811883a 	mov	r8,sp
400106c4:	21400044 	addi	r5,r4,1
400106c8:	003e4006 	br	4000ffcc <__alt_data_end+0xc000ffcc>
400106cc:	1800d61e 	bne	r3,zero,40010a28 <___vfiprintf_internal_r+0x1080>
400106d0:	dac12417 	ldw	r11,1168(sp)
400106d4:	00800044 	movi	r2,1
400106d8:	dc400115 	stw	r17,4(sp)
400106dc:	dac00015 	stw	r11,0(sp)
400106e0:	dc411c15 	stw	r17,1136(sp)
400106e4:	d8811b15 	stw	r2,1132(sp)
400106e8:	8807883a 	mov	r3,r17
400106ec:	d811883a 	mov	r8,sp
400106f0:	42000204 	addi	r8,r8,8
400106f4:	aac0010c 	andi	r11,r21,4
400106f8:	58000226 	beq	r11,zero,40010704 <___vfiprintf_internal_r+0xd5c>
400106fc:	9ca3c83a 	sub	r17,r19,r18
40010700:	047e2616 	blt	zero,r17,4000ff9c <__alt_data_end+0xc000ff9c>
40010704:	94c0010e 	bge	r18,r19,4001070c <___vfiprintf_internal_r+0xd64>
40010708:	9825883a 	mov	r18,r19
4001070c:	da812217 	ldw	r10,1160(sp)
40010710:	5495883a 	add	r10,r10,r18
40010714:	da812215 	stw	r10,1160(sp)
40010718:	183e4826 	beq	r3,zero,4001003c <__alt_data_end+0xc001003c>
4001071c:	d9012017 	ldw	r4,1152(sp)
40010720:	a00b883a 	mov	r5,r20
40010724:	d9811a04 	addi	r6,sp,1128
40010728:	000f8940 	call	4000f894 <__sprint_r.part.0>
4001072c:	103e4326 	beq	r2,zero,4001003c <__alt_data_end+0xc001003c>
40010730:	003fd706 	br	40010690 <__alt_data_end+0xc0010690>
40010734:	9cadc83a 	sub	r22,r19,r18
40010738:	05bde40e 	bge	zero,r22,4000fecc <__alt_data_end+0xc000fecc>
4001073c:	03000404 	movi	r12,16
40010740:	6581500e 	bge	r12,r22,40010c84 <___vfiprintf_internal_r+0x12dc>
40010744:	00900074 	movhi	r2,16385
40010748:	10943a04 	addi	r2,r2,20712
4001074c:	d8812315 	stw	r2,1164(sp)
40010750:	8005883a 	mov	r2,r16
40010754:	038001c4 	movi	r14,7
40010758:	b021883a 	mov	r16,r22
4001075c:	da412515 	stw	r9,1172(sp)
40010760:	102d883a 	mov	r22,r2
40010764:	00000506 	br	4001077c <___vfiprintf_internal_r+0xdd4>
40010768:	29000084 	addi	r4,r5,2
4001076c:	42000204 	addi	r8,r8,8
40010770:	100b883a 	mov	r5,r2
40010774:	843ffc04 	addi	r16,r16,-16
40010778:	64000d0e 	bge	r12,r16,400107b0 <___vfiprintf_internal_r+0xe08>
4001077c:	18c00404 	addi	r3,r3,16
40010780:	28800044 	addi	r2,r5,1
40010784:	45c00015 	stw	r23,0(r8)
40010788:	43000115 	stw	r12,4(r8)
4001078c:	d8c11c15 	stw	r3,1136(sp)
40010790:	d8811b15 	stw	r2,1132(sp)
40010794:	70bff40e 	bge	r14,r2,40010768 <__alt_data_end+0xc0010768>
40010798:	1800151e 	bne	r3,zero,400107f0 <___vfiprintf_internal_r+0xe48>
4001079c:	843ffc04 	addi	r16,r16,-16
400107a0:	000b883a 	mov	r5,zero
400107a4:	01000044 	movi	r4,1
400107a8:	d811883a 	mov	r8,sp
400107ac:	643ff316 	blt	r12,r16,4001077c <__alt_data_end+0xc001077c>
400107b0:	da412517 	ldw	r9,1172(sp)
400107b4:	b005883a 	mov	r2,r22
400107b8:	802d883a 	mov	r22,r16
400107bc:	1021883a 	mov	r16,r2
400107c0:	da812317 	ldw	r10,1164(sp)
400107c4:	1d87883a 	add	r3,r3,r22
400107c8:	45800115 	stw	r22,4(r8)
400107cc:	42800015 	stw	r10,0(r8)
400107d0:	d8c11c15 	stw	r3,1136(sp)
400107d4:	d9011b15 	stw	r4,1132(sp)
400107d8:	008001c4 	movi	r2,7
400107dc:	11008d16 	blt	r2,r4,40010a14 <___vfiprintf_internal_r+0x106c>
400107e0:	42000204 	addi	r8,r8,8
400107e4:	20800044 	addi	r2,r4,1
400107e8:	200b883a 	mov	r5,r4
400107ec:	003db706 	br	4000fecc <__alt_data_end+0xc000fecc>
400107f0:	d9012017 	ldw	r4,1152(sp)
400107f4:	a00b883a 	mov	r5,r20
400107f8:	d9811a04 	addi	r6,sp,1128
400107fc:	db012b15 	stw	r12,1196(sp)
40010800:	db812a15 	stw	r14,1192(sp)
40010804:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010808:	db012b17 	ldw	r12,1196(sp)
4001080c:	db812a17 	ldw	r14,1192(sp)
40010810:	103f9f1e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010814:	d9411b17 	ldw	r5,1132(sp)
40010818:	d8c11c17 	ldw	r3,1136(sp)
4001081c:	d811883a 	mov	r8,sp
40010820:	29000044 	addi	r4,r5,1
40010824:	003fd306 	br	40010774 <__alt_data_end+0xc0010774>
40010828:	18006c1e 	bne	r3,zero,400109dc <___vfiprintf_internal_r+0x1034>
4001082c:	70004f26 	beq	r14,zero,4001096c <___vfiprintf_internal_r+0xfc4>
40010830:	d8811d04 	addi	r2,sp,1140
40010834:	00c00084 	movi	r3,2
40010838:	d8800015 	stw	r2,0(sp)
4001083c:	d8c00115 	stw	r3,4(sp)
40010840:	2005883a 	mov	r2,r4
40010844:	d811883a 	mov	r8,sp
40010848:	003d9b06 	br	4000feb8 <__alt_data_end+0xc000feb8>
4001084c:	1800571e 	bne	r3,zero,400109ac <___vfiprintf_internal_r+0x1004>
40010850:	000b883a 	mov	r5,zero
40010854:	00800044 	movi	r2,1
40010858:	d811883a 	mov	r8,sp
4001085c:	003d9906 	br	4000fec4 <__alt_data_end+0xc000fec4>
40010860:	10803fcc 	andi	r2,r2,255
40010864:	1000251e 	bne	r2,zero,400108fc <___vfiprintf_internal_r+0xf54>
40010868:	a880004c 	andi	r2,r21,1
4001086c:	10007826 	beq	r2,zero,40010a50 <___vfiprintf_internal_r+0x10a8>
40010870:	00800c04 	movi	r2,48
40010874:	d8c109c4 	addi	r3,sp,1063
40010878:	d88109c5 	stb	r2,1063(sp)
4001087c:	dc412717 	ldw	r17,1180(sp)
40010880:	d8c12415 	stw	r3,1168(sp)
40010884:	003d4406 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010888:	d9012617 	ldw	r4,1176(sp)
4001088c:	dc410a04 	addi	r17,sp,1064
40010890:	908003cc 	andi	r2,r18,15
40010894:	b006973a 	slli	r3,r22,28
40010898:	2085883a 	add	r2,r4,r2
4001089c:	9024d13a 	srli	r18,r18,4
400108a0:	10800003 	ldbu	r2,0(r2)
400108a4:	b02cd13a 	srli	r22,r22,4
400108a8:	8c7fffc4 	addi	r17,r17,-1
400108ac:	1ca4b03a 	or	r18,r3,r18
400108b0:	88800005 	stb	r2,0(r17)
400108b4:	9584b03a 	or	r2,r18,r22
400108b8:	103ff51e 	bne	r2,zero,40010890 <__alt_data_end+0xc0010890>
400108bc:	dac11e17 	ldw	r11,1144(sp)
400108c0:	dc412415 	stw	r17,1168(sp)
400108c4:	5c63c83a 	sub	r17,r11,r17
400108c8:	003d3306 	br	4000fd98 <__alt_data_end+0xc000fd98>
400108cc:	1800941e 	bne	r3,zero,40010b20 <___vfiprintf_internal_r+0x1178>
400108d0:	d8811d87 	ldb	r2,1142(sp)
400108d4:	10006b26 	beq	r2,zero,40010a84 <___vfiprintf_internal_r+0x10dc>
400108d8:	00c00044 	movi	r3,1
400108dc:	d9011d84 	addi	r4,sp,1142
400108e0:	1805883a 	mov	r2,r3
400108e4:	d9000015 	stw	r4,0(sp)
400108e8:	d8c00115 	stw	r3,4(sp)
400108ec:	d811883a 	mov	r8,sp
400108f0:	003f2306 	br	40010580 <__alt_data_end+0xc0010580>
400108f4:	8023883a 	mov	r17,r16
400108f8:	003c7d06 	br	4000faf0 <__alt_data_end+0xc000faf0>
400108fc:	da810a04 	addi	r10,sp,1064
40010900:	da812415 	stw	r10,1168(sp)
40010904:	003d2406 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010908:	d9012017 	ldw	r4,1152(sp)
4001090c:	a00b883a 	mov	r5,r20
40010910:	d9811a04 	addi	r6,sp,1128
40010914:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010918:	103f5d1e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
4001091c:	d8c11c17 	ldw	r3,1136(sp)
40010920:	d811883a 	mov	r8,sp
40010924:	003f7306 	br	400106f4 <__alt_data_end+0xc00106f4>
40010928:	1c800017 	ldw	r18,0(r3)
4001092c:	dac12117 	ldw	r11,1156(sp)
40010930:	902dd7fa 	srai	r22,r18,31
40010934:	5ac00104 	addi	r11,r11,4
40010938:	dac12115 	stw	r11,1156(sp)
4001093c:	b005883a 	mov	r2,r22
40010940:	003e5406 	br	40010294 <__alt_data_end+0xc0010294>
40010944:	00800084 	movi	r2,2
40010948:	9588b03a 	or	r4,r18,r22
4001094c:	003cf506 	br	4000fd24 <__alt_data_end+0xc000fd24>
40010950:	d9012017 	ldw	r4,1152(sp)
40010954:	a00b883a 	mov	r5,r20
40010958:	d9811a04 	addi	r6,sp,1128
4001095c:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010960:	103f4b1e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010964:	d811883a 	mov	r8,sp
40010968:	003cd106 	br	4000fcb0 <__alt_data_end+0xc000fcb0>
4001096c:	000b883a 	mov	r5,zero
40010970:	2005883a 	mov	r2,r4
40010974:	d811883a 	mov	r8,sp
40010978:	003d5206 	br	4000fec4 <__alt_data_end+0xc000fec4>
4001097c:	10803fcc 	andi	r2,r2,255
40010980:	1080201c 	xori	r2,r2,128
40010984:	10bfe004 	addi	r2,r2,-128
40010988:	01000c04 	movi	r4,48
4001098c:	11008e26 	beq	r2,r4,40010bc8 <___vfiprintf_internal_r+0x1220>
40010990:	da812417 	ldw	r10,1168(sp)
40010994:	dac11e17 	ldw	r11,1144(sp)
40010998:	193fffc5 	stb	r4,-1(r3)
4001099c:	52bfffc4 	addi	r10,r10,-1
400109a0:	da812415 	stw	r10,1168(sp)
400109a4:	5aa3c83a 	sub	r17,r11,r10
400109a8:	003cfb06 	br	4000fd98 <__alt_data_end+0xc000fd98>
400109ac:	d9012017 	ldw	r4,1152(sp)
400109b0:	a00b883a 	mov	r5,r20
400109b4:	d9811a04 	addi	r6,sp,1128
400109b8:	da412b15 	stw	r9,1196(sp)
400109bc:	000f8940 	call	4000f894 <__sprint_r.part.0>
400109c0:	da412b17 	ldw	r9,1196(sp)
400109c4:	103f321e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
400109c8:	d9411b17 	ldw	r5,1132(sp)
400109cc:	d8c11c17 	ldw	r3,1136(sp)
400109d0:	d811883a 	mov	r8,sp
400109d4:	28800044 	addi	r2,r5,1
400109d8:	003d3a06 	br	4000fec4 <__alt_data_end+0xc000fec4>
400109dc:	d9012017 	ldw	r4,1152(sp)
400109e0:	a00b883a 	mov	r5,r20
400109e4:	d9811a04 	addi	r6,sp,1128
400109e8:	da412b15 	stw	r9,1196(sp)
400109ec:	db812a15 	stw	r14,1192(sp)
400109f0:	000f8940 	call	4000f894 <__sprint_r.part.0>
400109f4:	da412b17 	ldw	r9,1196(sp)
400109f8:	db812a17 	ldw	r14,1192(sp)
400109fc:	103f241e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010a00:	d9411b17 	ldw	r5,1132(sp)
40010a04:	d8c11c17 	ldw	r3,1136(sp)
40010a08:	d811883a 	mov	r8,sp
40010a0c:	28800044 	addi	r2,r5,1
40010a10:	003d1f06 	br	4000fe90 <__alt_data_end+0xc000fe90>
40010a14:	1800781e 	bne	r3,zero,40010bf8 <___vfiprintf_internal_r+0x1250>
40010a18:	000b883a 	mov	r5,zero
40010a1c:	00800044 	movi	r2,1
40010a20:	d811883a 	mov	r8,sp
40010a24:	003d2906 	br	4000fecc <__alt_data_end+0xc000fecc>
40010a28:	d9012017 	ldw	r4,1152(sp)
40010a2c:	a00b883a 	mov	r5,r20
40010a30:	d9811a04 	addi	r6,sp,1128
40010a34:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010a38:	103f151e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010a3c:	d8811b17 	ldw	r2,1132(sp)
40010a40:	d8c11c17 	ldw	r3,1136(sp)
40010a44:	d811883a 	mov	r8,sp
40010a48:	10800044 	addi	r2,r2,1
40010a4c:	003d4406 	br	4000ff60 <__alt_data_end+0xc000ff60>
40010a50:	dac10a04 	addi	r11,sp,1064
40010a54:	dac12415 	stw	r11,1168(sp)
40010a58:	003ccf06 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010a5c:	04a5c83a 	sub	r18,zero,r18
40010a60:	9004c03a 	cmpne	r2,r18,zero
40010a64:	05adc83a 	sub	r22,zero,r22
40010a68:	b0adc83a 	sub	r22,r22,r2
40010a6c:	03000b44 	movi	r12,45
40010a70:	db011d85 	stb	r12,1142(sp)
40010a74:	4823883a 	mov	r17,r9
40010a78:	00800044 	movi	r2,1
40010a7c:	9588b03a 	or	r4,r18,r22
40010a80:	003cab06 	br	4000fd30 <__alt_data_end+0xc000fd30>
40010a84:	000b883a 	mov	r5,zero
40010a88:	00800044 	movi	r2,1
40010a8c:	d811883a 	mov	r8,sp
40010a90:	703d0c26 	beq	r14,zero,4000fec4 <__alt_data_end+0xc000fec4>
40010a94:	00c00084 	movi	r3,2
40010a98:	d9011d04 	addi	r4,sp,1140
40010a9c:	d9000015 	stw	r4,0(sp)
40010aa0:	d8c00115 	stw	r3,4(sp)
40010aa4:	003d0406 	br	4000feb8 <__alt_data_end+0xc000feb8>
40010aa8:	80c00007 	ldb	r3,0(r16)
40010aac:	003c1d06 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010ab0:	a880040c 	andi	r2,r21,16
40010ab4:	1000091e 	bne	r2,zero,40010adc <___vfiprintf_internal_r+0x1134>
40010ab8:	aac0100c 	andi	r11,r21,64
40010abc:	58000726 	beq	r11,zero,40010adc <___vfiprintf_internal_r+0x1134>
40010ac0:	da812117 	ldw	r10,1156(sp)
40010ac4:	dac12217 	ldw	r11,1160(sp)
40010ac8:	50800017 	ldw	r2,0(r10)
40010acc:	52800104 	addi	r10,r10,4
40010ad0:	da812115 	stw	r10,1156(sp)
40010ad4:	12c0000d 	sth	r11,0(r2)
40010ad8:	003be806 	br	4000fa7c <__alt_data_end+0xc000fa7c>
40010adc:	da812117 	ldw	r10,1156(sp)
40010ae0:	dac12217 	ldw	r11,1160(sp)
40010ae4:	50800017 	ldw	r2,0(r10)
40010ae8:	52800104 	addi	r10,r10,4
40010aec:	da812115 	stw	r10,1156(sp)
40010af0:	12c00015 	stw	r11,0(r2)
40010af4:	003be106 	br	4000fa7c <__alt_data_end+0xc000fa7c>
40010af8:	00800084 	movi	r2,2
40010afc:	003c8906 	br	4000fd24 <__alt_data_end+0xc000fd24>
40010b00:	a900100c 	andi	r4,r21,64
40010b04:	20001f26 	beq	r4,zero,40010b84 <___vfiprintf_internal_r+0x11dc>
40010b08:	da812117 	ldw	r10,1156(sp)
40010b0c:	1480000b 	ldhu	r18,0(r2)
40010b10:	002d883a 	mov	r22,zero
40010b14:	52800104 	addi	r10,r10,4
40010b18:	da812115 	stw	r10,1156(sp)
40010b1c:	003dae06 	br	400101d8 <__alt_data_end+0xc00101d8>
40010b20:	d9012017 	ldw	r4,1152(sp)
40010b24:	a00b883a 	mov	r5,r20
40010b28:	d9811a04 	addi	r6,sp,1128
40010b2c:	da412b15 	stw	r9,1196(sp)
40010b30:	db812a15 	stw	r14,1192(sp)
40010b34:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010b38:	da412b17 	ldw	r9,1196(sp)
40010b3c:	db812a17 	ldw	r14,1192(sp)
40010b40:	103ed31e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010b44:	d9411b17 	ldw	r5,1132(sp)
40010b48:	d8c11c17 	ldw	r3,1136(sp)
40010b4c:	d811883a 	mov	r8,sp
40010b50:	28800044 	addi	r2,r5,1
40010b54:	003e7f06 	br	40010554 <__alt_data_end+0xc0010554>
40010b58:	9825883a 	mov	r18,r19
40010b5c:	003d3406 	br	40010030 <__alt_data_end+0xc0010030>
40010b60:	4823883a 	mov	r17,r9
40010b64:	003e0806 	br	40010388 <__alt_data_end+0xc0010388>
40010b68:	d9012017 	ldw	r4,1152(sp)
40010b6c:	a00b883a 	mov	r5,r20
40010b70:	d9811a04 	addi	r6,sp,1128
40010b74:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010b78:	103ec51e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010b7c:	d8c11c17 	ldw	r3,1136(sp)
40010b80:	003ee006 	br	40010704 <__alt_data_end+0xc0010704>
40010b84:	dac12117 	ldw	r11,1156(sp)
40010b88:	14800017 	ldw	r18,0(r2)
40010b8c:	002d883a 	mov	r22,zero
40010b90:	5ac00104 	addi	r11,r11,4
40010b94:	dac12115 	stw	r11,1156(sp)
40010b98:	003d8f06 	br	400101d8 <__alt_data_end+0xc00101d8>
40010b9c:	02d00074 	movhi	r11,16385
40010ba0:	5ad43a04 	addi	r11,r11,20712
40010ba4:	dac12315 	stw	r11,1164(sp)
40010ba8:	003ce306 	br	4000ff38 <__alt_data_end+0xc000ff38>
40010bac:	80c00043 	ldbu	r3,1(r16)
40010bb0:	ad400814 	ori	r21,r21,32
40010bb4:	84000044 	addi	r16,r16,1
40010bb8:	18c03fcc 	andi	r3,r3,255
40010bbc:	18c0201c 	xori	r3,r3,128
40010bc0:	18ffe004 	addi	r3,r3,-128
40010bc4:	003bd706 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010bc8:	dac11e17 	ldw	r11,1144(sp)
40010bcc:	d8c12417 	ldw	r3,1168(sp)
40010bd0:	58e3c83a 	sub	r17,r11,r3
40010bd4:	003c7006 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010bd8:	da012a15 	stw	r8,1192(sp)
40010bdc:	0008dec0 	call	40008dec <strlen>
40010be0:	1023883a 	mov	r17,r2
40010be4:	db011d83 	ldbu	r12,1142(sp)
40010be8:	dd812115 	stw	r22,1156(sp)
40010bec:	0013883a 	mov	r9,zero
40010bf0:	da012a17 	ldw	r8,1192(sp)
40010bf4:	003c6806 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010bf8:	d9012017 	ldw	r4,1152(sp)
40010bfc:	a00b883a 	mov	r5,r20
40010c00:	d9811a04 	addi	r6,sp,1128
40010c04:	da412b15 	stw	r9,1196(sp)
40010c08:	000f8940 	call	4000f894 <__sprint_r.part.0>
40010c0c:	da412b17 	ldw	r9,1196(sp)
40010c10:	103e9f1e 	bne	r2,zero,40010690 <__alt_data_end+0xc0010690>
40010c14:	d9411b17 	ldw	r5,1132(sp)
40010c18:	d8c11c17 	ldw	r3,1136(sp)
40010c1c:	d811883a 	mov	r8,sp
40010c20:	28800044 	addi	r2,r5,1
40010c24:	003ca906 	br	4000fecc <__alt_data_end+0xc000fecc>
40010c28:	d9411b17 	ldw	r5,1132(sp)
40010c2c:	01100074 	movhi	r4,16385
40010c30:	21143e04 	addi	r4,r4,20728
40010c34:	d9012315 	stw	r4,1164(sp)
40010c38:	29400044 	addi	r5,r5,1
40010c3c:	003c8806 	br	4000fe60 <__alt_data_end+0xc000fe60>
40010c40:	00800184 	movi	r2,6
40010c44:	1240012e 	bgeu	r2,r9,40010c4c <___vfiprintf_internal_r+0x12a4>
40010c48:	1013883a 	mov	r9,r2
40010c4c:	4823883a 	mov	r17,r9
40010c50:	4825883a 	mov	r18,r9
40010c54:	48001516 	blt	r9,zero,40010cac <___vfiprintf_internal_r+0x1304>
40010c58:	00900074 	movhi	r2,16385
40010c5c:	1093df04 	addi	r2,r2,20348
40010c60:	dd812115 	stw	r22,1156(sp)
40010c64:	d8812415 	stw	r2,1168(sp)
40010c68:	003d6f06 	br	40010228 <__alt_data_end+0xc0010228>
40010c6c:	d9411b17 	ldw	r5,1132(sp)
40010c70:	02d00074 	movhi	r11,16385
40010c74:	5ad43e04 	addi	r11,r11,20728
40010c78:	dac12315 	stw	r11,1164(sp)
40010c7c:	29400044 	addi	r5,r5,1
40010c80:	003ce106 	br	40010008 <__alt_data_end+0xc0010008>
40010c84:	01100074 	movhi	r4,16385
40010c88:	21143a04 	addi	r4,r4,20712
40010c8c:	d9012315 	stw	r4,1164(sp)
40010c90:	1009883a 	mov	r4,r2
40010c94:	003eca06 	br	400107c0 <__alt_data_end+0xc00107c0>
40010c98:	4823883a 	mov	r17,r9
40010c9c:	db011d83 	ldbu	r12,1142(sp)
40010ca0:	dd812115 	stw	r22,1156(sp)
40010ca4:	0013883a 	mov	r9,zero
40010ca8:	003c3b06 	br	4000fd98 <__alt_data_end+0xc000fd98>
40010cac:	0025883a 	mov	r18,zero
40010cb0:	003fe906 	br	40010c58 <__alt_data_end+0xc0010c58>
40010cb4:	dac12117 	ldw	r11,1156(sp)
40010cb8:	8005883a 	mov	r2,r16
40010cbc:	5021883a 	mov	r16,r10
40010cc0:	5a400017 	ldw	r9,0(r11)
40010cc4:	58c00104 	addi	r3,r11,4
40010cc8:	d8c12115 	stw	r3,1156(sp)
40010ccc:	48000a16 	blt	r9,zero,40010cf8 <___vfiprintf_internal_r+0x1350>
40010cd0:	10c00047 	ldb	r3,1(r2)
40010cd4:	003b9306 	br	4000fb24 <__alt_data_end+0xc000fb24>
40010cd8:	043fffc4 	movi	r16,-1
40010cdc:	003d0206 	br	400100e8 <__alt_data_end+0xc00100e8>
40010ce0:	94c0010e 	bge	r18,r19,40010ce8 <___vfiprintf_internal_r+0x1340>
40010ce4:	9825883a 	mov	r18,r19
40010ce8:	da812217 	ldw	r10,1160(sp)
40010cec:	5495883a 	add	r10,r10,r18
40010cf0:	da812215 	stw	r10,1160(sp)
40010cf4:	003cd106 	br	4001003c <__alt_data_end+0xc001003c>
40010cf8:	027fffc4 	movi	r9,-1
40010cfc:	10c00047 	ldb	r3,1(r2)
40010d00:	003b8806 	br	4000fb24 <__alt_data_end+0xc000fb24>

40010d04 <__vfiprintf_internal>:
40010d04:	2007883a 	mov	r3,r4
40010d08:	01100074 	movhi	r4,16385
40010d0c:	211b2304 	addi	r4,r4,27788
40010d10:	21000017 	ldw	r4,0(r4)
40010d14:	2805883a 	mov	r2,r5
40010d18:	300f883a 	mov	r7,r6
40010d1c:	180b883a 	mov	r5,r3
40010d20:	100d883a 	mov	r6,r2
40010d24:	000f9a81 	jmpi	4000f9a8 <___vfiprintf_internal_r>

40010d28 <__swbuf_r>:
40010d28:	defffc04 	addi	sp,sp,-16
40010d2c:	dc800215 	stw	r18,8(sp)
40010d30:	dc400115 	stw	r17,4(sp)
40010d34:	dc000015 	stw	r16,0(sp)
40010d38:	dfc00315 	stw	ra,12(sp)
40010d3c:	2025883a 	mov	r18,r4
40010d40:	2823883a 	mov	r17,r5
40010d44:	3021883a 	mov	r16,r6
40010d48:	20000226 	beq	r4,zero,40010d54 <__swbuf_r+0x2c>
40010d4c:	20800e17 	ldw	r2,56(r4)
40010d50:	10004126 	beq	r2,zero,40010e58 <__swbuf_r+0x130>
40010d54:	80c00617 	ldw	r3,24(r16)
40010d58:	8180030b 	ldhu	r6,12(r16)
40010d5c:	80c00215 	stw	r3,8(r16)
40010d60:	30c0020c 	andi	r3,r6,8
40010d64:	18003526 	beq	r3,zero,40010e3c <__swbuf_r+0x114>
40010d68:	80c00417 	ldw	r3,16(r16)
40010d6c:	18003326 	beq	r3,zero,40010e3c <__swbuf_r+0x114>
40010d70:	3088000c 	andi	r2,r6,8192
40010d74:	8c403fcc 	andi	r17,r17,255
40010d78:	10001726 	beq	r2,zero,40010dd8 <__swbuf_r+0xb0>
40010d7c:	80800017 	ldw	r2,0(r16)
40010d80:	81000517 	ldw	r4,20(r16)
40010d84:	10c7c83a 	sub	r3,r2,r3
40010d88:	19001d0e 	bge	r3,r4,40010e00 <__swbuf_r+0xd8>
40010d8c:	18c00044 	addi	r3,r3,1
40010d90:	81400217 	ldw	r5,8(r16)
40010d94:	11000044 	addi	r4,r2,1
40010d98:	81000015 	stw	r4,0(r16)
40010d9c:	297fffc4 	addi	r5,r5,-1
40010da0:	81400215 	stw	r5,8(r16)
40010da4:	14400005 	stb	r17,0(r2)
40010da8:	80800517 	ldw	r2,20(r16)
40010dac:	10c01d26 	beq	r2,r3,40010e24 <__swbuf_r+0xfc>
40010db0:	8080030b 	ldhu	r2,12(r16)
40010db4:	1080004c 	andi	r2,r2,1
40010db8:	1000181e 	bne	r2,zero,40010e1c <__swbuf_r+0xf4>
40010dbc:	8805883a 	mov	r2,r17
40010dc0:	dfc00317 	ldw	ra,12(sp)
40010dc4:	dc800217 	ldw	r18,8(sp)
40010dc8:	dc400117 	ldw	r17,4(sp)
40010dcc:	dc000017 	ldw	r16,0(sp)
40010dd0:	dec00404 	addi	sp,sp,16
40010dd4:	f800283a 	ret
40010dd8:	81001917 	ldw	r4,100(r16)
40010ddc:	00b7ffc4 	movi	r2,-8193
40010de0:	31880014 	ori	r6,r6,8192
40010de4:	2084703a 	and	r2,r4,r2
40010de8:	80801915 	stw	r2,100(r16)
40010dec:	80800017 	ldw	r2,0(r16)
40010df0:	81000517 	ldw	r4,20(r16)
40010df4:	8180030d 	sth	r6,12(r16)
40010df8:	10c7c83a 	sub	r3,r2,r3
40010dfc:	193fe316 	blt	r3,r4,40010d8c <__alt_data_end+0xc0010d8c>
40010e00:	9009883a 	mov	r4,r18
40010e04:	800b883a 	mov	r5,r16
40010e08:	000ca900 	call	4000ca90 <_fflush_r>
40010e0c:	1000091e 	bne	r2,zero,40010e34 <__swbuf_r+0x10c>
40010e10:	80800017 	ldw	r2,0(r16)
40010e14:	00c00044 	movi	r3,1
40010e18:	003fdd06 	br	40010d90 <__alt_data_end+0xc0010d90>
40010e1c:	00800284 	movi	r2,10
40010e20:	88bfe61e 	bne	r17,r2,40010dbc <__alt_data_end+0xc0010dbc>
40010e24:	9009883a 	mov	r4,r18
40010e28:	800b883a 	mov	r5,r16
40010e2c:	000ca900 	call	4000ca90 <_fflush_r>
40010e30:	103fe226 	beq	r2,zero,40010dbc <__alt_data_end+0xc0010dbc>
40010e34:	00bfffc4 	movi	r2,-1
40010e38:	003fe106 	br	40010dc0 <__alt_data_end+0xc0010dc0>
40010e3c:	9009883a 	mov	r4,r18
40010e40:	800b883a 	mov	r5,r16
40010e44:	000aea40 	call	4000aea4 <__swsetup_r>
40010e48:	1000051e 	bne	r2,zero,40010e60 <__swbuf_r+0x138>
40010e4c:	8180030b 	ldhu	r6,12(r16)
40010e50:	80c00417 	ldw	r3,16(r16)
40010e54:	003fc606 	br	40010d70 <__alt_data_end+0xc0010d70>
40010e58:	000d0380 	call	4000d038 <__sinit>
40010e5c:	003fbd06 	br	40010d54 <__alt_data_end+0xc0010d54>
40010e60:	80c0030b 	ldhu	r3,12(r16)
40010e64:	00bfffc4 	movi	r2,-1
40010e68:	18c01014 	ori	r3,r3,64
40010e6c:	80c0030d 	sth	r3,12(r16)
40010e70:	00c00244 	movi	r3,9
40010e74:	90c00015 	stw	r3,0(r18)
40010e78:	003fd106 	br	40010dc0 <__alt_data_end+0xc0010dc0>

40010e7c <__swbuf>:
40010e7c:	00d00074 	movhi	r3,16385
40010e80:	18db2304 	addi	r3,r3,27788
40010e84:	2005883a 	mov	r2,r4
40010e88:	19000017 	ldw	r4,0(r3)
40010e8c:	280d883a 	mov	r6,r5
40010e90:	100b883a 	mov	r5,r2
40010e94:	0010d281 	jmpi	40010d28 <__swbuf_r>

40010e98 <_write_r>:
40010e98:	defffd04 	addi	sp,sp,-12
40010e9c:	dc000015 	stw	r16,0(sp)
40010ea0:	041000b4 	movhi	r16,16386
40010ea4:	dc400115 	stw	r17,4(sp)
40010ea8:	84221f04 	addi	r16,r16,-30596
40010eac:	2023883a 	mov	r17,r4
40010eb0:	2809883a 	mov	r4,r5
40010eb4:	300b883a 	mov	r5,r6
40010eb8:	380d883a 	mov	r6,r7
40010ebc:	dfc00215 	stw	ra,8(sp)
40010ec0:	80000015 	stw	zero,0(r16)
40010ec4:	0012ed00 	call	40012ed0 <write>
40010ec8:	00ffffc4 	movi	r3,-1
40010ecc:	10c00526 	beq	r2,r3,40010ee4 <_write_r+0x4c>
40010ed0:	dfc00217 	ldw	ra,8(sp)
40010ed4:	dc400117 	ldw	r17,4(sp)
40010ed8:	dc000017 	ldw	r16,0(sp)
40010edc:	dec00304 	addi	sp,sp,12
40010ee0:	f800283a 	ret
40010ee4:	80c00017 	ldw	r3,0(r16)
40010ee8:	183ff926 	beq	r3,zero,40010ed0 <__alt_data_end+0xc0010ed0>
40010eec:	88c00015 	stw	r3,0(r17)
40010ef0:	003ff706 	br	40010ed0 <__alt_data_end+0xc0010ed0>

40010ef4 <_close_r>:
40010ef4:	defffd04 	addi	sp,sp,-12
40010ef8:	dc000015 	stw	r16,0(sp)
40010efc:	041000b4 	movhi	r16,16386
40010f00:	dc400115 	stw	r17,4(sp)
40010f04:	84221f04 	addi	r16,r16,-30596
40010f08:	2023883a 	mov	r17,r4
40010f0c:	2809883a 	mov	r4,r5
40010f10:	dfc00215 	stw	ra,8(sp)
40010f14:	80000015 	stw	zero,0(r16)
40010f18:	00123040 	call	40012304 <close>
40010f1c:	00ffffc4 	movi	r3,-1
40010f20:	10c00526 	beq	r2,r3,40010f38 <_close_r+0x44>
40010f24:	dfc00217 	ldw	ra,8(sp)
40010f28:	dc400117 	ldw	r17,4(sp)
40010f2c:	dc000017 	ldw	r16,0(sp)
40010f30:	dec00304 	addi	sp,sp,12
40010f34:	f800283a 	ret
40010f38:	80c00017 	ldw	r3,0(r16)
40010f3c:	183ff926 	beq	r3,zero,40010f24 <__alt_data_end+0xc0010f24>
40010f40:	88c00015 	stw	r3,0(r17)
40010f44:	003ff706 	br	40010f24 <__alt_data_end+0xc0010f24>

40010f48 <_calloc_r>:
40010f48:	298b383a 	mul	r5,r5,r6
40010f4c:	defffe04 	addi	sp,sp,-8
40010f50:	dc000015 	stw	r16,0(sp)
40010f54:	dfc00115 	stw	ra,4(sp)
40010f58:	0007f580 	call	40007f58 <_malloc_r>
40010f5c:	1021883a 	mov	r16,r2
40010f60:	10002826 	beq	r2,zero,40011004 <_calloc_r+0xbc>
40010f64:	11bfff17 	ldw	r6,-4(r2)
40010f68:	00bfff04 	movi	r2,-4
40010f6c:	00c00904 	movi	r3,36
40010f70:	308c703a 	and	r6,r6,r2
40010f74:	308d883a 	add	r6,r6,r2
40010f78:	19801436 	bltu	r3,r6,40010fcc <_calloc_r+0x84>
40010f7c:	008004c4 	movi	r2,19
40010f80:	11800936 	bltu	r2,r6,40010fa8 <_calloc_r+0x60>
40010f84:	8005883a 	mov	r2,r16
40010f88:	10000015 	stw	zero,0(r2)
40010f8c:	10000115 	stw	zero,4(r2)
40010f90:	10000215 	stw	zero,8(r2)
40010f94:	8005883a 	mov	r2,r16
40010f98:	dfc00117 	ldw	ra,4(sp)
40010f9c:	dc000017 	ldw	r16,0(sp)
40010fa0:	dec00204 	addi	sp,sp,8
40010fa4:	f800283a 	ret
40010fa8:	80000015 	stw	zero,0(r16)
40010fac:	80000115 	stw	zero,4(r16)
40010fb0:	008006c4 	movi	r2,27
40010fb4:	11800d2e 	bgeu	r2,r6,40010fec <_calloc_r+0xa4>
40010fb8:	80000215 	stw	zero,8(r16)
40010fbc:	80000315 	stw	zero,12(r16)
40010fc0:	30c00c26 	beq	r6,r3,40010ff4 <_calloc_r+0xac>
40010fc4:	80800404 	addi	r2,r16,16
40010fc8:	003fef06 	br	40010f88 <__alt_data_end+0xc0010f88>
40010fcc:	8009883a 	mov	r4,r16
40010fd0:	000b883a 	mov	r5,zero
40010fd4:	00087000 	call	40008700 <memset>
40010fd8:	8005883a 	mov	r2,r16
40010fdc:	dfc00117 	ldw	ra,4(sp)
40010fe0:	dc000017 	ldw	r16,0(sp)
40010fe4:	dec00204 	addi	sp,sp,8
40010fe8:	f800283a 	ret
40010fec:	80800204 	addi	r2,r16,8
40010ff0:	003fe506 	br	40010f88 <__alt_data_end+0xc0010f88>
40010ff4:	80000415 	stw	zero,16(r16)
40010ff8:	80800604 	addi	r2,r16,24
40010ffc:	80000515 	stw	zero,20(r16)
40011000:	003fe106 	br	40010f88 <__alt_data_end+0xc0010f88>
40011004:	0005883a 	mov	r2,zero
40011008:	003fe306 	br	40010f98 <__alt_data_end+0xc0010f98>

4001100c <_fclose_r>:
4001100c:	28003226 	beq	r5,zero,400110d8 <_fclose_r+0xcc>
40011010:	defffc04 	addi	sp,sp,-16
40011014:	dc400115 	stw	r17,4(sp)
40011018:	2023883a 	mov	r17,r4
4001101c:	dc000015 	stw	r16,0(sp)
40011020:	dfc00315 	stw	ra,12(sp)
40011024:	dc800215 	stw	r18,8(sp)
40011028:	2821883a 	mov	r16,r5
4001102c:	000d0480 	call	4000d048 <__sfp_lock_acquire>
40011030:	88000226 	beq	r17,zero,4001103c <_fclose_r+0x30>
40011034:	88800e17 	ldw	r2,56(r17)
40011038:	10002926 	beq	r2,zero,400110e0 <_fclose_r+0xd4>
4001103c:	8080030f 	ldh	r2,12(r16)
40011040:	10002226 	beq	r2,zero,400110cc <_fclose_r+0xc0>
40011044:	8809883a 	mov	r4,r17
40011048:	800b883a 	mov	r5,r16
4001104c:	000ca900 	call	4000ca90 <_fflush_r>
40011050:	1025883a 	mov	r18,r2
40011054:	80800b17 	ldw	r2,44(r16)
40011058:	10000426 	beq	r2,zero,4001106c <_fclose_r+0x60>
4001105c:	81400717 	ldw	r5,28(r16)
40011060:	8809883a 	mov	r4,r17
40011064:	103ee83a 	callr	r2
40011068:	10002616 	blt	r2,zero,40011104 <_fclose_r+0xf8>
4001106c:	8080030b 	ldhu	r2,12(r16)
40011070:	1080200c 	andi	r2,r2,128
40011074:	10001f1e 	bne	r2,zero,400110f4 <_fclose_r+0xe8>
40011078:	81400c17 	ldw	r5,48(r16)
4001107c:	28000526 	beq	r5,zero,40011094 <_fclose_r+0x88>
40011080:	80801004 	addi	r2,r16,64
40011084:	28800226 	beq	r5,r2,40011090 <_fclose_r+0x84>
40011088:	8809883a 	mov	r4,r17
4001108c:	000d1ac0 	call	4000d1ac <_free_r>
40011090:	80000c15 	stw	zero,48(r16)
40011094:	81401117 	ldw	r5,68(r16)
40011098:	28000326 	beq	r5,zero,400110a8 <_fclose_r+0x9c>
4001109c:	8809883a 	mov	r4,r17
400110a0:	000d1ac0 	call	4000d1ac <_free_r>
400110a4:	80001115 	stw	zero,68(r16)
400110a8:	8000030d 	sth	zero,12(r16)
400110ac:	000d04c0 	call	4000d04c <__sfp_lock_release>
400110b0:	9005883a 	mov	r2,r18
400110b4:	dfc00317 	ldw	ra,12(sp)
400110b8:	dc800217 	ldw	r18,8(sp)
400110bc:	dc400117 	ldw	r17,4(sp)
400110c0:	dc000017 	ldw	r16,0(sp)
400110c4:	dec00404 	addi	sp,sp,16
400110c8:	f800283a 	ret
400110cc:	000d04c0 	call	4000d04c <__sfp_lock_release>
400110d0:	0005883a 	mov	r2,zero
400110d4:	003ff706 	br	400110b4 <__alt_data_end+0xc00110b4>
400110d8:	0005883a 	mov	r2,zero
400110dc:	f800283a 	ret
400110e0:	8809883a 	mov	r4,r17
400110e4:	000d0380 	call	4000d038 <__sinit>
400110e8:	8080030f 	ldh	r2,12(r16)
400110ec:	103fd51e 	bne	r2,zero,40011044 <__alt_data_end+0xc0011044>
400110f0:	003ff606 	br	400110cc <__alt_data_end+0xc00110cc>
400110f4:	81400417 	ldw	r5,16(r16)
400110f8:	8809883a 	mov	r4,r17
400110fc:	000d1ac0 	call	4000d1ac <_free_r>
40011100:	003fdd06 	br	40011078 <__alt_data_end+0xc0011078>
40011104:	04bfffc4 	movi	r18,-1
40011108:	003fd806 	br	4001106c <__alt_data_end+0xc001106c>

4001110c <fclose>:
4001110c:	00900074 	movhi	r2,16385
40011110:	109b2304 	addi	r2,r2,27788
40011114:	200b883a 	mov	r5,r4
40011118:	11000017 	ldw	r4,0(r2)
4001111c:	001100c1 	jmpi	4001100c <_fclose_r>

40011120 <_fputwc_r>:
40011120:	3080030b 	ldhu	r2,12(r6)
40011124:	defff804 	addi	sp,sp,-32
40011128:	dcc00415 	stw	r19,16(sp)
4001112c:	dc800315 	stw	r18,12(sp)
40011130:	dc000115 	stw	r16,4(sp)
40011134:	dfc00715 	stw	ra,28(sp)
40011138:	dd400615 	stw	r21,24(sp)
4001113c:	dd000515 	stw	r20,20(sp)
40011140:	dc400215 	stw	r17,8(sp)
40011144:	10c8000c 	andi	r3,r2,8192
40011148:	3021883a 	mov	r16,r6
4001114c:	2027883a 	mov	r19,r4
40011150:	2825883a 	mov	r18,r5
40011154:	1800051e 	bne	r3,zero,4001116c <_fputwc_r+0x4c>
40011158:	30c01917 	ldw	r3,100(r6)
4001115c:	10880014 	ori	r2,r2,8192
40011160:	3080030d 	sth	r2,12(r6)
40011164:	18880014 	ori	r2,r3,8192
40011168:	30801915 	stw	r2,100(r6)
4001116c:	000db380 	call	4000db38 <__locale_mb_cur_max>
40011170:	00c00044 	movi	r3,1
40011174:	10c03e26 	beq	r2,r3,40011270 <_fputwc_r+0x150>
40011178:	9809883a 	mov	r4,r19
4001117c:	d80b883a 	mov	r5,sp
40011180:	900d883a 	mov	r6,r18
40011184:	81c01704 	addi	r7,r16,92
40011188:	00114600 	call	40011460 <_wcrtomb_r>
4001118c:	1029883a 	mov	r20,r2
40011190:	00bfffc4 	movi	r2,-1
40011194:	a0802026 	beq	r20,r2,40011218 <_fputwc_r+0xf8>
40011198:	d9400003 	ldbu	r5,0(sp)
4001119c:	a0001c26 	beq	r20,zero,40011210 <_fputwc_r+0xf0>
400111a0:	0023883a 	mov	r17,zero
400111a4:	05400284 	movi	r21,10
400111a8:	00000906 	br	400111d0 <_fputwc_r+0xb0>
400111ac:	80800017 	ldw	r2,0(r16)
400111b0:	11400005 	stb	r5,0(r2)
400111b4:	80c00017 	ldw	r3,0(r16)
400111b8:	18c00044 	addi	r3,r3,1
400111bc:	80c00015 	stw	r3,0(r16)
400111c0:	8c400044 	addi	r17,r17,1
400111c4:	dc45883a 	add	r2,sp,r17
400111c8:	8d00112e 	bgeu	r17,r20,40011210 <_fputwc_r+0xf0>
400111cc:	11400003 	ldbu	r5,0(r2)
400111d0:	80c00217 	ldw	r3,8(r16)
400111d4:	18ffffc4 	addi	r3,r3,-1
400111d8:	80c00215 	stw	r3,8(r16)
400111dc:	183ff30e 	bge	r3,zero,400111ac <__alt_data_end+0xc00111ac>
400111e0:	80800617 	ldw	r2,24(r16)
400111e4:	18801916 	blt	r3,r2,4001124c <_fputwc_r+0x12c>
400111e8:	80800017 	ldw	r2,0(r16)
400111ec:	11400005 	stb	r5,0(r2)
400111f0:	80800017 	ldw	r2,0(r16)
400111f4:	10c00003 	ldbu	r3,0(r2)
400111f8:	10800044 	addi	r2,r2,1
400111fc:	1d402326 	beq	r3,r21,4001128c <_fputwc_r+0x16c>
40011200:	80800015 	stw	r2,0(r16)
40011204:	8c400044 	addi	r17,r17,1
40011208:	dc45883a 	add	r2,sp,r17
4001120c:	8d3fef36 	bltu	r17,r20,400111cc <__alt_data_end+0xc00111cc>
40011210:	9005883a 	mov	r2,r18
40011214:	00000406 	br	40011228 <_fputwc_r+0x108>
40011218:	80c0030b 	ldhu	r3,12(r16)
4001121c:	a005883a 	mov	r2,r20
40011220:	18c01014 	ori	r3,r3,64
40011224:	80c0030d 	sth	r3,12(r16)
40011228:	dfc00717 	ldw	ra,28(sp)
4001122c:	dd400617 	ldw	r21,24(sp)
40011230:	dd000517 	ldw	r20,20(sp)
40011234:	dcc00417 	ldw	r19,16(sp)
40011238:	dc800317 	ldw	r18,12(sp)
4001123c:	dc400217 	ldw	r17,8(sp)
40011240:	dc000117 	ldw	r16,4(sp)
40011244:	dec00804 	addi	sp,sp,32
40011248:	f800283a 	ret
4001124c:	9809883a 	mov	r4,r19
40011250:	29403fcc 	andi	r5,r5,255
40011254:	800d883a 	mov	r6,r16
40011258:	0010d280 	call	40010d28 <__swbuf_r>
4001125c:	10bfffe0 	cmpeqi	r2,r2,-1
40011260:	10803fcc 	andi	r2,r2,255
40011264:	103fd626 	beq	r2,zero,400111c0 <__alt_data_end+0xc00111c0>
40011268:	00bfffc4 	movi	r2,-1
4001126c:	003fee06 	br	40011228 <__alt_data_end+0xc0011228>
40011270:	90ffffc4 	addi	r3,r18,-1
40011274:	01003f84 	movi	r4,254
40011278:	20ffbf36 	bltu	r4,r3,40011178 <__alt_data_end+0xc0011178>
4001127c:	900b883a 	mov	r5,r18
40011280:	dc800005 	stb	r18,0(sp)
40011284:	1029883a 	mov	r20,r2
40011288:	003fc506 	br	400111a0 <__alt_data_end+0xc00111a0>
4001128c:	9809883a 	mov	r4,r19
40011290:	a80b883a 	mov	r5,r21
40011294:	800d883a 	mov	r6,r16
40011298:	0010d280 	call	40010d28 <__swbuf_r>
4001129c:	10bfffe0 	cmpeqi	r2,r2,-1
400112a0:	003fef06 	br	40011260 <__alt_data_end+0xc0011260>

400112a4 <fputwc>:
400112a4:	defffc04 	addi	sp,sp,-16
400112a8:	dc000115 	stw	r16,4(sp)
400112ac:	04100074 	movhi	r16,16385
400112b0:	841b2304 	addi	r16,r16,27788
400112b4:	dc400215 	stw	r17,8(sp)
400112b8:	2023883a 	mov	r17,r4
400112bc:	81000017 	ldw	r4,0(r16)
400112c0:	dfc00315 	stw	ra,12(sp)
400112c4:	280d883a 	mov	r6,r5
400112c8:	20000626 	beq	r4,zero,400112e4 <fputwc+0x40>
400112cc:	20800e17 	ldw	r2,56(r4)
400112d0:	1000041e 	bne	r2,zero,400112e4 <fputwc+0x40>
400112d4:	d9400015 	stw	r5,0(sp)
400112d8:	000d0380 	call	4000d038 <__sinit>
400112dc:	81000017 	ldw	r4,0(r16)
400112e0:	d9800017 	ldw	r6,0(sp)
400112e4:	880b883a 	mov	r5,r17
400112e8:	dfc00317 	ldw	ra,12(sp)
400112ec:	dc400217 	ldw	r17,8(sp)
400112f0:	dc000117 	ldw	r16,4(sp)
400112f4:	dec00404 	addi	sp,sp,16
400112f8:	00111201 	jmpi	40011120 <_fputwc_r>

400112fc <_fstat_r>:
400112fc:	defffd04 	addi	sp,sp,-12
40011300:	dc000015 	stw	r16,0(sp)
40011304:	041000b4 	movhi	r16,16386
40011308:	dc400115 	stw	r17,4(sp)
4001130c:	84221f04 	addi	r16,r16,-30596
40011310:	2023883a 	mov	r17,r4
40011314:	2809883a 	mov	r4,r5
40011318:	300b883a 	mov	r5,r6
4001131c:	dfc00215 	stw	ra,8(sp)
40011320:	80000015 	stw	zero,0(r16)
40011324:	00124840 	call	40012484 <fstat>
40011328:	00ffffc4 	movi	r3,-1
4001132c:	10c00526 	beq	r2,r3,40011344 <_fstat_r+0x48>
40011330:	dfc00217 	ldw	ra,8(sp)
40011334:	dc400117 	ldw	r17,4(sp)
40011338:	dc000017 	ldw	r16,0(sp)
4001133c:	dec00304 	addi	sp,sp,12
40011340:	f800283a 	ret
40011344:	80c00017 	ldw	r3,0(r16)
40011348:	183ff926 	beq	r3,zero,40011330 <__alt_data_end+0xc0011330>
4001134c:	88c00015 	stw	r3,0(r17)
40011350:	003ff706 	br	40011330 <__alt_data_end+0xc0011330>

40011354 <_isatty_r>:
40011354:	defffd04 	addi	sp,sp,-12
40011358:	dc000015 	stw	r16,0(sp)
4001135c:	041000b4 	movhi	r16,16386
40011360:	dc400115 	stw	r17,4(sp)
40011364:	84221f04 	addi	r16,r16,-30596
40011368:	2023883a 	mov	r17,r4
4001136c:	2809883a 	mov	r4,r5
40011370:	dfc00215 	stw	ra,8(sp)
40011374:	80000015 	stw	zero,0(r16)
40011378:	00125a40 	call	400125a4 <isatty>
4001137c:	00ffffc4 	movi	r3,-1
40011380:	10c00526 	beq	r2,r3,40011398 <_isatty_r+0x44>
40011384:	dfc00217 	ldw	ra,8(sp)
40011388:	dc400117 	ldw	r17,4(sp)
4001138c:	dc000017 	ldw	r16,0(sp)
40011390:	dec00304 	addi	sp,sp,12
40011394:	f800283a 	ret
40011398:	80c00017 	ldw	r3,0(r16)
4001139c:	183ff926 	beq	r3,zero,40011384 <__alt_data_end+0xc0011384>
400113a0:	88c00015 	stw	r3,0(r17)
400113a4:	003ff706 	br	40011384 <__alt_data_end+0xc0011384>

400113a8 <_lseek_r>:
400113a8:	defffd04 	addi	sp,sp,-12
400113ac:	dc000015 	stw	r16,0(sp)
400113b0:	041000b4 	movhi	r16,16386
400113b4:	dc400115 	stw	r17,4(sp)
400113b8:	84221f04 	addi	r16,r16,-30596
400113bc:	2023883a 	mov	r17,r4
400113c0:	2809883a 	mov	r4,r5
400113c4:	300b883a 	mov	r5,r6
400113c8:	380d883a 	mov	r6,r7
400113cc:	dfc00215 	stw	ra,8(sp)
400113d0:	80000015 	stw	zero,0(r16)
400113d4:	00128fc0 	call	400128fc <lseek>
400113d8:	00ffffc4 	movi	r3,-1
400113dc:	10c00526 	beq	r2,r3,400113f4 <_lseek_r+0x4c>
400113e0:	dfc00217 	ldw	ra,8(sp)
400113e4:	dc400117 	ldw	r17,4(sp)
400113e8:	dc000017 	ldw	r16,0(sp)
400113ec:	dec00304 	addi	sp,sp,12
400113f0:	f800283a 	ret
400113f4:	80c00017 	ldw	r3,0(r16)
400113f8:	183ff926 	beq	r3,zero,400113e0 <__alt_data_end+0xc00113e0>
400113fc:	88c00015 	stw	r3,0(r17)
40011400:	003ff706 	br	400113e0 <__alt_data_end+0xc00113e0>

40011404 <_read_r>:
40011404:	defffd04 	addi	sp,sp,-12
40011408:	dc000015 	stw	r16,0(sp)
4001140c:	041000b4 	movhi	r16,16386
40011410:	dc400115 	stw	r17,4(sp)
40011414:	84221f04 	addi	r16,r16,-30596
40011418:	2023883a 	mov	r17,r4
4001141c:	2809883a 	mov	r4,r5
40011420:	300b883a 	mov	r5,r6
40011424:	380d883a 	mov	r6,r7
40011428:	dfc00215 	stw	ra,8(sp)
4001142c:	80000015 	stw	zero,0(r16)
40011430:	0012ad80 	call	40012ad8 <read>
40011434:	00ffffc4 	movi	r3,-1
40011438:	10c00526 	beq	r2,r3,40011450 <_read_r+0x4c>
4001143c:	dfc00217 	ldw	ra,8(sp)
40011440:	dc400117 	ldw	r17,4(sp)
40011444:	dc000017 	ldw	r16,0(sp)
40011448:	dec00304 	addi	sp,sp,12
4001144c:	f800283a 	ret
40011450:	80c00017 	ldw	r3,0(r16)
40011454:	183ff926 	beq	r3,zero,4001143c <__alt_data_end+0xc001143c>
40011458:	88c00015 	stw	r3,0(r17)
4001145c:	003ff706 	br	4001143c <__alt_data_end+0xc001143c>

40011460 <_wcrtomb_r>:
40011460:	defff604 	addi	sp,sp,-40
40011464:	00900074 	movhi	r2,16385
40011468:	dc800815 	stw	r18,32(sp)
4001146c:	dc400715 	stw	r17,28(sp)
40011470:	dc000615 	stw	r16,24(sp)
40011474:	109b2704 	addi	r2,r2,27804
40011478:	dfc00915 	stw	ra,36(sp)
4001147c:	2021883a 	mov	r16,r4
40011480:	3823883a 	mov	r17,r7
40011484:	14800017 	ldw	r18,0(r2)
40011488:	28001426 	beq	r5,zero,400114dc <_wcrtomb_r+0x7c>
4001148c:	d9400415 	stw	r5,16(sp)
40011490:	d9800515 	stw	r6,20(sp)
40011494:	000db2c0 	call	4000db2c <__locale_charset>
40011498:	d9400417 	ldw	r5,16(sp)
4001149c:	d9800517 	ldw	r6,20(sp)
400114a0:	8009883a 	mov	r4,r16
400114a4:	dc400015 	stw	r17,0(sp)
400114a8:	100f883a 	mov	r7,r2
400114ac:	903ee83a 	callr	r18
400114b0:	00ffffc4 	movi	r3,-1
400114b4:	10c0031e 	bne	r2,r3,400114c4 <_wcrtomb_r+0x64>
400114b8:	88000015 	stw	zero,0(r17)
400114bc:	00c02284 	movi	r3,138
400114c0:	80c00015 	stw	r3,0(r16)
400114c4:	dfc00917 	ldw	ra,36(sp)
400114c8:	dc800817 	ldw	r18,32(sp)
400114cc:	dc400717 	ldw	r17,28(sp)
400114d0:	dc000617 	ldw	r16,24(sp)
400114d4:	dec00a04 	addi	sp,sp,40
400114d8:	f800283a 	ret
400114dc:	000db2c0 	call	4000db2c <__locale_charset>
400114e0:	8009883a 	mov	r4,r16
400114e4:	dc400015 	stw	r17,0(sp)
400114e8:	d9400104 	addi	r5,sp,4
400114ec:	000d883a 	mov	r6,zero
400114f0:	100f883a 	mov	r7,r2
400114f4:	903ee83a 	callr	r18
400114f8:	003fed06 	br	400114b0 <__alt_data_end+0xc00114b0>

400114fc <wcrtomb>:
400114fc:	defff504 	addi	sp,sp,-44
40011500:	dc400515 	stw	r17,20(sp)
40011504:	dc000415 	stw	r16,16(sp)
40011508:	dfc00a15 	stw	ra,40(sp)
4001150c:	dd400915 	stw	r21,36(sp)
40011510:	dd000815 	stw	r20,32(sp)
40011514:	dcc00715 	stw	r19,28(sp)
40011518:	dc800615 	stw	r18,24(sp)
4001151c:	2021883a 	mov	r16,r4
40011520:	3023883a 	mov	r17,r6
40011524:	20001d26 	beq	r4,zero,4001159c <wcrtomb+0xa0>
40011528:	04900074 	movhi	r18,16385
4001152c:	949b2304 	addi	r18,r18,27788
40011530:	00900074 	movhi	r2,16385
40011534:	95400017 	ldw	r21,0(r18)
40011538:	109b2704 	addi	r2,r2,27804
4001153c:	15000017 	ldw	r20,0(r2)
40011540:	2827883a 	mov	r19,r5
40011544:	000db2c0 	call	4000db2c <__locale_charset>
40011548:	a809883a 	mov	r4,r21
4001154c:	dc400015 	stw	r17,0(sp)
40011550:	800b883a 	mov	r5,r16
40011554:	980d883a 	mov	r6,r19
40011558:	100f883a 	mov	r7,r2
4001155c:	a03ee83a 	callr	r20
40011560:	00ffffc4 	movi	r3,-1
40011564:	10c0041e 	bne	r2,r3,40011578 <wcrtomb+0x7c>
40011568:	90c00017 	ldw	r3,0(r18)
4001156c:	01002284 	movi	r4,138
40011570:	88000015 	stw	zero,0(r17)
40011574:	19000015 	stw	r4,0(r3)
40011578:	dfc00a17 	ldw	ra,40(sp)
4001157c:	dd400917 	ldw	r21,36(sp)
40011580:	dd000817 	ldw	r20,32(sp)
40011584:	dcc00717 	ldw	r19,28(sp)
40011588:	dc800617 	ldw	r18,24(sp)
4001158c:	dc400517 	ldw	r17,20(sp)
40011590:	dc000417 	ldw	r16,16(sp)
40011594:	dec00b04 	addi	sp,sp,44
40011598:	f800283a 	ret
4001159c:	04900074 	movhi	r18,16385
400115a0:	949b2304 	addi	r18,r18,27788
400115a4:	00900074 	movhi	r2,16385
400115a8:	94c00017 	ldw	r19,0(r18)
400115ac:	109b2704 	addi	r2,r2,27804
400115b0:	14000017 	ldw	r16,0(r2)
400115b4:	000db2c0 	call	4000db2c <__locale_charset>
400115b8:	9809883a 	mov	r4,r19
400115bc:	dc400015 	stw	r17,0(sp)
400115c0:	d9400104 	addi	r5,sp,4
400115c4:	000d883a 	mov	r6,zero
400115c8:	100f883a 	mov	r7,r2
400115cc:	803ee83a 	callr	r16
400115d0:	003fe306 	br	40011560 <__alt_data_end+0xc0011560>

400115d4 <__ascii_wctomb>:
400115d4:	28000526 	beq	r5,zero,400115ec <__ascii_wctomb+0x18>
400115d8:	00803fc4 	movi	r2,255
400115dc:	11800536 	bltu	r2,r6,400115f4 <__ascii_wctomb+0x20>
400115e0:	29800005 	stb	r6,0(r5)
400115e4:	00800044 	movi	r2,1
400115e8:	f800283a 	ret
400115ec:	0005883a 	mov	r2,zero
400115f0:	f800283a 	ret
400115f4:	00802284 	movi	r2,138
400115f8:	20800015 	stw	r2,0(r4)
400115fc:	00bfffc4 	movi	r2,-1
40011600:	f800283a 	ret

40011604 <_wctomb_r>:
40011604:	00900074 	movhi	r2,16385
40011608:	defff904 	addi	sp,sp,-28
4001160c:	109b2704 	addi	r2,r2,27804
40011610:	dfc00615 	stw	ra,24(sp)
40011614:	dc400515 	stw	r17,20(sp)
40011618:	dc000415 	stw	r16,16(sp)
4001161c:	3823883a 	mov	r17,r7
40011620:	14000017 	ldw	r16,0(r2)
40011624:	d9000115 	stw	r4,4(sp)
40011628:	d9400215 	stw	r5,8(sp)
4001162c:	d9800315 	stw	r6,12(sp)
40011630:	000db2c0 	call	4000db2c <__locale_charset>
40011634:	d9000117 	ldw	r4,4(sp)
40011638:	d9400217 	ldw	r5,8(sp)
4001163c:	d9800317 	ldw	r6,12(sp)
40011640:	dc400015 	stw	r17,0(sp)
40011644:	100f883a 	mov	r7,r2
40011648:	803ee83a 	callr	r16
4001164c:	dfc00617 	ldw	ra,24(sp)
40011650:	dc400517 	ldw	r17,20(sp)
40011654:	dc000417 	ldw	r16,16(sp)
40011658:	dec00704 	addi	sp,sp,28
4001165c:	f800283a 	ret

40011660 <__muldi3>:
40011660:	223fffcc 	andi	r8,r4,65535
40011664:	2012d43a 	srli	r9,r4,16
40011668:	32bfffcc 	andi	r10,r6,65535
4001166c:	3006d43a 	srli	r3,r6,16
40011670:	5217383a 	mul	r11,r10,r8
40011674:	5255383a 	mul	r10,r10,r9
40011678:	1a05383a 	mul	r2,r3,r8
4001167c:	5810d43a 	srli	r8,r11,16
40011680:	5085883a 	add	r2,r10,r2
40011684:	1205883a 	add	r2,r2,r8
40011688:	1a51383a 	mul	r8,r3,r9
4001168c:	1280022e 	bgeu	r2,r10,40011698 <__muldi3+0x38>
40011690:	00c00074 	movhi	r3,1
40011694:	40d1883a 	add	r8,r8,r3
40011698:	1006d43a 	srli	r3,r2,16
4001169c:	21cf383a 	mul	r7,r4,r7
400116a0:	314b383a 	mul	r5,r6,r5
400116a4:	1004943a 	slli	r2,r2,16
400116a8:	40c7883a 	add	r3,r8,r3
400116ac:	5affffcc 	andi	r11,r11,65535
400116b0:	3949883a 	add	r4,r7,r5
400116b4:	12c5883a 	add	r2,r2,r11
400116b8:	20c7883a 	add	r3,r4,r3
400116bc:	f800283a 	ret

400116c0 <__udivdi3>:
400116c0:	defff504 	addi	sp,sp,-44
400116c4:	dcc00415 	stw	r19,16(sp)
400116c8:	dc000115 	stw	r16,4(sp)
400116cc:	dfc00a15 	stw	ra,40(sp)
400116d0:	df000915 	stw	fp,36(sp)
400116d4:	ddc00815 	stw	r23,32(sp)
400116d8:	dd800715 	stw	r22,28(sp)
400116dc:	dd400615 	stw	r21,24(sp)
400116e0:	dd000515 	stw	r20,20(sp)
400116e4:	dc800315 	stw	r18,12(sp)
400116e8:	dc400215 	stw	r17,8(sp)
400116ec:	2027883a 	mov	r19,r4
400116f0:	2821883a 	mov	r16,r5
400116f4:	3800421e 	bne	r7,zero,40011800 <__udivdi3+0x140>
400116f8:	3025883a 	mov	r18,r6
400116fc:	2023883a 	mov	r17,r4
40011700:	2980542e 	bgeu	r5,r6,40011854 <__udivdi3+0x194>
40011704:	00bfffd4 	movui	r2,65535
40011708:	282d883a 	mov	r22,r5
4001170c:	1180a836 	bltu	r2,r6,400119b0 <__udivdi3+0x2f0>
40011710:	00803fc4 	movi	r2,255
40011714:	1181422e 	bgeu	r2,r6,40011c20 <__udivdi3+0x560>
40011718:	00800204 	movi	r2,8
4001171c:	1007883a 	mov	r3,r2
40011720:	3084d83a 	srl	r2,r6,r2
40011724:	01100074 	movhi	r4,16385
40011728:	21138f04 	addi	r4,r4,20028
4001172c:	2085883a 	add	r2,r4,r2
40011730:	10800003 	ldbu	r2,0(r2)
40011734:	10c7883a 	add	r3,r2,r3
40011738:	00800804 	movi	r2,32
4001173c:	10c5c83a 	sub	r2,r2,r3
40011740:	10000526 	beq	r2,zero,40011758 <__udivdi3+0x98>
40011744:	80a0983a 	sll	r16,r16,r2
40011748:	98c6d83a 	srl	r3,r19,r3
4001174c:	30a4983a 	sll	r18,r6,r2
40011750:	98a2983a 	sll	r17,r19,r2
40011754:	80ecb03a 	or	r22,r16,r3
40011758:	902ad43a 	srli	r21,r18,16
4001175c:	b009883a 	mov	r4,r22
40011760:	953fffcc 	andi	r20,r18,65535
40011764:	a80b883a 	mov	r5,r21
40011768:	00051a40 	call	400051a4 <__umodsi3>
4001176c:	b009883a 	mov	r4,r22
40011770:	a80b883a 	mov	r5,r21
40011774:	1027883a 	mov	r19,r2
40011778:	000519c0 	call	4000519c <__udivsi3>
4001177c:	1021883a 	mov	r16,r2
40011780:	8806d43a 	srli	r3,r17,16
40011784:	9804943a 	slli	r2,r19,16
40011788:	8527383a 	mul	r19,r16,r20
4001178c:	10c4b03a 	or	r2,r2,r3
40011790:	14c0052e 	bgeu	r2,r19,400117a8 <__udivdi3+0xe8>
40011794:	1485883a 	add	r2,r2,r18
40011798:	80ffffc4 	addi	r3,r16,-1
4001179c:	14800136 	bltu	r2,r18,400117a4 <__udivdi3+0xe4>
400117a0:	14c13436 	bltu	r2,r19,40011c74 <__udivdi3+0x5b4>
400117a4:	1821883a 	mov	r16,r3
400117a8:	14e7c83a 	sub	r19,r2,r19
400117ac:	9809883a 	mov	r4,r19
400117b0:	a80b883a 	mov	r5,r21
400117b4:	00051a40 	call	400051a4 <__umodsi3>
400117b8:	102d883a 	mov	r22,r2
400117bc:	9809883a 	mov	r4,r19
400117c0:	a80b883a 	mov	r5,r21
400117c4:	000519c0 	call	4000519c <__udivsi3>
400117c8:	b02c943a 	slli	r22,r22,16
400117cc:	1529383a 	mul	r20,r2,r20
400117d0:	8c7fffcc 	andi	r17,r17,65535
400117d4:	b462b03a 	or	r17,r22,r17
400117d8:	8d00052e 	bgeu	r17,r20,400117f0 <__udivdi3+0x130>
400117dc:	8ca3883a 	add	r17,r17,r18
400117e0:	10ffffc4 	addi	r3,r2,-1
400117e4:	8c80f636 	bltu	r17,r18,40011bc0 <__udivdi3+0x500>
400117e8:	8d00f52e 	bgeu	r17,r20,40011bc0 <__udivdi3+0x500>
400117ec:	10bfff84 	addi	r2,r2,-2
400117f0:	8020943a 	slli	r16,r16,16
400117f4:	0007883a 	mov	r3,zero
400117f8:	1404b03a 	or	r2,r2,r16
400117fc:	00005b06 	br	4001196c <__udivdi3+0x2ac>
40011800:	29c05836 	bltu	r5,r7,40011964 <__udivdi3+0x2a4>
40011804:	00bfffd4 	movui	r2,65535
40011808:	11c0642e 	bgeu	r2,r7,4001199c <__udivdi3+0x2dc>
4001180c:	00804034 	movhi	r2,256
40011810:	10bfffc4 	addi	r2,r2,-1
40011814:	11c0f32e 	bgeu	r2,r7,40011be4 <__udivdi3+0x524>
40011818:	00c00604 	movi	r3,24
4001181c:	180b883a 	mov	r5,r3
40011820:	38c6d83a 	srl	r3,r7,r3
40011824:	00900074 	movhi	r2,16385
40011828:	10938f04 	addi	r2,r2,20028
4001182c:	10c7883a 	add	r3,r2,r3
40011830:	18c00003 	ldbu	r3,0(r3)
40011834:	01000804 	movi	r4,32
40011838:	1947883a 	add	r3,r3,r5
4001183c:	20e5c83a 	sub	r18,r4,r3
40011840:	9000661e 	bne	r18,zero,400119dc <__udivdi3+0x31c>
40011844:	3c00f936 	bltu	r7,r16,40011c2c <__udivdi3+0x56c>
40011848:	9985403a 	cmpgeu	r2,r19,r6
4001184c:	0007883a 	mov	r3,zero
40011850:	00004606 	br	4001196c <__udivdi3+0x2ac>
40011854:	3000041e 	bne	r6,zero,40011868 <__udivdi3+0x1a8>
40011858:	01000044 	movi	r4,1
4001185c:	000b883a 	mov	r5,zero
40011860:	000519c0 	call	4000519c <__udivsi3>
40011864:	1025883a 	mov	r18,r2
40011868:	00bfffd4 	movui	r2,65535
4001186c:	1480562e 	bgeu	r2,r18,400119c8 <__udivdi3+0x308>
40011870:	00804034 	movhi	r2,256
40011874:	10bfffc4 	addi	r2,r2,-1
40011878:	1480e32e 	bgeu	r2,r18,40011c08 <__udivdi3+0x548>
4001187c:	00800604 	movi	r2,24
40011880:	1007883a 	mov	r3,r2
40011884:	9084d83a 	srl	r2,r18,r2
40011888:	01100074 	movhi	r4,16385
4001188c:	21138f04 	addi	r4,r4,20028
40011890:	2085883a 	add	r2,r4,r2
40011894:	10800003 	ldbu	r2,0(r2)
40011898:	10c5883a 	add	r2,r2,r3
4001189c:	00c00804 	movi	r3,32
400118a0:	1887c83a 	sub	r3,r3,r2
400118a4:	1800911e 	bne	r3,zero,40011aec <__udivdi3+0x42c>
400118a8:	9028d43a 	srli	r20,r18,16
400118ac:	84a1c83a 	sub	r16,r16,r18
400118b0:	957fffcc 	andi	r21,r18,65535
400118b4:	00c00044 	movi	r3,1
400118b8:	8009883a 	mov	r4,r16
400118bc:	a00b883a 	mov	r5,r20
400118c0:	d8c00015 	stw	r3,0(sp)
400118c4:	00051a40 	call	400051a4 <__umodsi3>
400118c8:	8009883a 	mov	r4,r16
400118cc:	a00b883a 	mov	r5,r20
400118d0:	1027883a 	mov	r19,r2
400118d4:	000519c0 	call	4000519c <__udivsi3>
400118d8:	1021883a 	mov	r16,r2
400118dc:	880cd43a 	srli	r6,r17,16
400118e0:	9804943a 	slli	r2,r19,16
400118e4:	8567383a 	mul	r19,r16,r21
400118e8:	d8c00017 	ldw	r3,0(sp)
400118ec:	1188b03a 	or	r4,r2,r6
400118f0:	24c0052e 	bgeu	r4,r19,40011908 <__udivdi3+0x248>
400118f4:	2489883a 	add	r4,r4,r18
400118f8:	80bfffc4 	addi	r2,r16,-1
400118fc:	24800136 	bltu	r4,r18,40011904 <__udivdi3+0x244>
40011900:	24c0d936 	bltu	r4,r19,40011c68 <__udivdi3+0x5a8>
40011904:	1021883a 	mov	r16,r2
40011908:	24e7c83a 	sub	r19,r4,r19
4001190c:	9809883a 	mov	r4,r19
40011910:	a00b883a 	mov	r5,r20
40011914:	d8c00015 	stw	r3,0(sp)
40011918:	00051a40 	call	400051a4 <__umodsi3>
4001191c:	102d883a 	mov	r22,r2
40011920:	9809883a 	mov	r4,r19
40011924:	a00b883a 	mov	r5,r20
40011928:	000519c0 	call	4000519c <__udivsi3>
4001192c:	b02c943a 	slli	r22,r22,16
40011930:	156b383a 	mul	r21,r2,r21
40011934:	8c7fffcc 	andi	r17,r17,65535
40011938:	b462b03a 	or	r17,r22,r17
4001193c:	d8c00017 	ldw	r3,0(sp)
40011940:	8d40052e 	bgeu	r17,r21,40011958 <__udivdi3+0x298>
40011944:	8ca3883a 	add	r17,r17,r18
40011948:	113fffc4 	addi	r4,r2,-1
4001194c:	8c809a36 	bltu	r17,r18,40011bb8 <__udivdi3+0x4f8>
40011950:	8d40992e 	bgeu	r17,r21,40011bb8 <__udivdi3+0x4f8>
40011954:	10bfff84 	addi	r2,r2,-2
40011958:	8020943a 	slli	r16,r16,16
4001195c:	1404b03a 	or	r2,r2,r16
40011960:	00000206 	br	4001196c <__udivdi3+0x2ac>
40011964:	0007883a 	mov	r3,zero
40011968:	0005883a 	mov	r2,zero
4001196c:	dfc00a17 	ldw	ra,40(sp)
40011970:	df000917 	ldw	fp,36(sp)
40011974:	ddc00817 	ldw	r23,32(sp)
40011978:	dd800717 	ldw	r22,28(sp)
4001197c:	dd400617 	ldw	r21,24(sp)
40011980:	dd000517 	ldw	r20,20(sp)
40011984:	dcc00417 	ldw	r19,16(sp)
40011988:	dc800317 	ldw	r18,12(sp)
4001198c:	dc400217 	ldw	r17,8(sp)
40011990:	dc000117 	ldw	r16,4(sp)
40011994:	dec00b04 	addi	sp,sp,44
40011998:	f800283a 	ret
4001199c:	00803fc4 	movi	r2,255
400119a0:	11c0932e 	bgeu	r2,r7,40011bf0 <__udivdi3+0x530>
400119a4:	00c00204 	movi	r3,8
400119a8:	180b883a 	mov	r5,r3
400119ac:	003f9c06 	br	40011820 <__alt_data_end+0xc0011820>
400119b0:	00804034 	movhi	r2,256
400119b4:	10bfffc4 	addi	r2,r2,-1
400119b8:	1180902e 	bgeu	r2,r6,40011bfc <__udivdi3+0x53c>
400119bc:	00800604 	movi	r2,24
400119c0:	1007883a 	mov	r3,r2
400119c4:	003f5606 	br	40011720 <__alt_data_end+0xc0011720>
400119c8:	00803fc4 	movi	r2,255
400119cc:	1480912e 	bgeu	r2,r18,40011c14 <__udivdi3+0x554>
400119d0:	00800204 	movi	r2,8
400119d4:	1007883a 	mov	r3,r2
400119d8:	003faa06 	br	40011884 <__alt_data_end+0xc0011884>
400119dc:	30eed83a 	srl	r23,r6,r3
400119e0:	3c8e983a 	sll	r7,r7,r18
400119e4:	80f8d83a 	srl	fp,r16,r3
400119e8:	98c6d83a 	srl	r3,r19,r3
400119ec:	3deeb03a 	or	r23,r7,r23
400119f0:	b828d43a 	srli	r20,r23,16
400119f4:	84a0983a 	sll	r16,r16,r18
400119f8:	e009883a 	mov	r4,fp
400119fc:	a00b883a 	mov	r5,r20
40011a00:	80e2b03a 	or	r17,r16,r3
40011a04:	34aa983a 	sll	r21,r6,r18
40011a08:	00051a40 	call	400051a4 <__umodsi3>
40011a0c:	e009883a 	mov	r4,fp
40011a10:	a00b883a 	mov	r5,r20
40011a14:	102d883a 	mov	r22,r2
40011a18:	000519c0 	call	4000519c <__udivsi3>
40011a1c:	1021883a 	mov	r16,r2
40011a20:	bf3fffcc 	andi	fp,r23,65535
40011a24:	b004943a 	slli	r2,r22,16
40011a28:	8808d43a 	srli	r4,r17,16
40011a2c:	872d383a 	mul	r22,r16,fp
40011a30:	1104b03a 	or	r2,r2,r4
40011a34:	1580042e 	bgeu	r2,r22,40011a48 <__udivdi3+0x388>
40011a38:	15c5883a 	add	r2,r2,r23
40011a3c:	80ffffc4 	addi	r3,r16,-1
40011a40:	15c0812e 	bgeu	r2,r23,40011c48 <__udivdi3+0x588>
40011a44:	1821883a 	mov	r16,r3
40011a48:	15adc83a 	sub	r22,r2,r22
40011a4c:	b009883a 	mov	r4,r22
40011a50:	a00b883a 	mov	r5,r20
40011a54:	00051a40 	call	400051a4 <__umodsi3>
40011a58:	a00b883a 	mov	r5,r20
40011a5c:	b009883a 	mov	r4,r22
40011a60:	d8800015 	stw	r2,0(sp)
40011a64:	000519c0 	call	4000519c <__udivsi3>
40011a68:	d8c00017 	ldw	r3,0(sp)
40011a6c:	170b383a 	mul	r5,r2,fp
40011a70:	8c7fffcc 	andi	r17,r17,65535
40011a74:	1806943a 	slli	r3,r3,16
40011a78:	1c46b03a 	or	r3,r3,r17
40011a7c:	1940042e 	bgeu	r3,r5,40011a90 <__udivdi3+0x3d0>
40011a80:	1dc7883a 	add	r3,r3,r23
40011a84:	113fffc4 	addi	r4,r2,-1
40011a88:	1dc06b2e 	bgeu	r3,r23,40011c38 <__udivdi3+0x578>
40011a8c:	2005883a 	mov	r2,r4
40011a90:	8020943a 	slli	r16,r16,16
40011a94:	a9ffffcc 	andi	r7,r21,65535
40011a98:	a82ad43a 	srli	r21,r21,16
40011a9c:	1404b03a 	or	r2,r2,r16
40011aa0:	113fffcc 	andi	r4,r2,65535
40011aa4:	100cd43a 	srli	r6,r2,16
40011aa8:	21d3383a 	mul	r9,r4,r7
40011aac:	2549383a 	mul	r4,r4,r21
40011ab0:	31cf383a 	mul	r7,r6,r7
40011ab4:	4810d43a 	srli	r8,r9,16
40011ab8:	1947c83a 	sub	r3,r3,r5
40011abc:	3909883a 	add	r4,r7,r4
40011ac0:	2209883a 	add	r4,r4,r8
40011ac4:	354d383a 	mul	r6,r6,r21
40011ac8:	21c0022e 	bgeu	r4,r7,40011ad4 <__udivdi3+0x414>
40011acc:	01400074 	movhi	r5,1
40011ad0:	314d883a 	add	r6,r6,r5
40011ad4:	202ad43a 	srli	r21,r4,16
40011ad8:	354d883a 	add	r6,r6,r21
40011adc:	19803f36 	bltu	r3,r6,40011bdc <__udivdi3+0x51c>
40011ae0:	19803926 	beq	r3,r6,40011bc8 <__udivdi3+0x508>
40011ae4:	0007883a 	mov	r3,zero
40011ae8:	003fa006 	br	4001196c <__alt_data_end+0xc001196c>
40011aec:	90e4983a 	sll	r18,r18,r3
40011af0:	80aad83a 	srl	r21,r16,r2
40011af4:	80e0983a 	sll	r16,r16,r3
40011af8:	9028d43a 	srli	r20,r18,16
40011afc:	9884d83a 	srl	r2,r19,r2
40011b00:	a809883a 	mov	r4,r21
40011b04:	a00b883a 	mov	r5,r20
40011b08:	80acb03a 	or	r22,r16,r2
40011b0c:	98e2983a 	sll	r17,r19,r3
40011b10:	00051a40 	call	400051a4 <__umodsi3>
40011b14:	a809883a 	mov	r4,r21
40011b18:	a00b883a 	mov	r5,r20
40011b1c:	1021883a 	mov	r16,r2
40011b20:	000519c0 	call	4000519c <__udivsi3>
40011b24:	957fffcc 	andi	r21,r18,65535
40011b28:	8020943a 	slli	r16,r16,16
40011b2c:	b00ad43a 	srli	r5,r22,16
40011b30:	1567383a 	mul	r19,r2,r21
40011b34:	102f883a 	mov	r23,r2
40011b38:	8148b03a 	or	r4,r16,r5
40011b3c:	24c0062e 	bgeu	r4,r19,40011b58 <__udivdi3+0x498>
40011b40:	2489883a 	add	r4,r4,r18
40011b44:	10bfffc4 	addi	r2,r2,-1
40011b48:	24804536 	bltu	r4,r18,40011c60 <__udivdi3+0x5a0>
40011b4c:	24c0442e 	bgeu	r4,r19,40011c60 <__udivdi3+0x5a0>
40011b50:	bdffff84 	addi	r23,r23,-2
40011b54:	2489883a 	add	r4,r4,r18
40011b58:	24e7c83a 	sub	r19,r4,r19
40011b5c:	9809883a 	mov	r4,r19
40011b60:	a00b883a 	mov	r5,r20
40011b64:	00051a40 	call	400051a4 <__umodsi3>
40011b68:	1021883a 	mov	r16,r2
40011b6c:	9809883a 	mov	r4,r19
40011b70:	a00b883a 	mov	r5,r20
40011b74:	000519c0 	call	4000519c <__udivsi3>
40011b78:	8020943a 	slli	r16,r16,16
40011b7c:	1007883a 	mov	r3,r2
40011b80:	1545383a 	mul	r2,r2,r21
40011b84:	b13fffcc 	andi	r4,r22,65535
40011b88:	8108b03a 	or	r4,r16,r4
40011b8c:	2080062e 	bgeu	r4,r2,40011ba8 <__udivdi3+0x4e8>
40011b90:	2489883a 	add	r4,r4,r18
40011b94:	197fffc4 	addi	r5,r3,-1
40011b98:	24802f36 	bltu	r4,r18,40011c58 <__udivdi3+0x598>
40011b9c:	20802e2e 	bgeu	r4,r2,40011c58 <__udivdi3+0x598>
40011ba0:	18ffff84 	addi	r3,r3,-2
40011ba4:	2489883a 	add	r4,r4,r18
40011ba8:	b82e943a 	slli	r23,r23,16
40011bac:	20a1c83a 	sub	r16,r4,r2
40011bb0:	1dc6b03a 	or	r3,r3,r23
40011bb4:	003f4006 	br	400118b8 <__alt_data_end+0xc00118b8>
40011bb8:	2005883a 	mov	r2,r4
40011bbc:	003f6606 	br	40011958 <__alt_data_end+0xc0011958>
40011bc0:	1805883a 	mov	r2,r3
40011bc4:	003f0a06 	br	400117f0 <__alt_data_end+0xc00117f0>
40011bc8:	2006943a 	slli	r3,r4,16
40011bcc:	9c88983a 	sll	r4,r19,r18
40011bd0:	4a7fffcc 	andi	r9,r9,65535
40011bd4:	1a47883a 	add	r3,r3,r9
40011bd8:	20ffc22e 	bgeu	r4,r3,40011ae4 <__alt_data_end+0xc0011ae4>
40011bdc:	10bfffc4 	addi	r2,r2,-1
40011be0:	003fc006 	br	40011ae4 <__alt_data_end+0xc0011ae4>
40011be4:	00c00404 	movi	r3,16
40011be8:	180b883a 	mov	r5,r3
40011bec:	003f0c06 	br	40011820 <__alt_data_end+0xc0011820>
40011bf0:	0007883a 	mov	r3,zero
40011bf4:	000b883a 	mov	r5,zero
40011bf8:	003f0906 	br	40011820 <__alt_data_end+0xc0011820>
40011bfc:	00800404 	movi	r2,16
40011c00:	1007883a 	mov	r3,r2
40011c04:	003ec606 	br	40011720 <__alt_data_end+0xc0011720>
40011c08:	00800404 	movi	r2,16
40011c0c:	1007883a 	mov	r3,r2
40011c10:	003f1c06 	br	40011884 <__alt_data_end+0xc0011884>
40011c14:	0005883a 	mov	r2,zero
40011c18:	0007883a 	mov	r3,zero
40011c1c:	003f1906 	br	40011884 <__alt_data_end+0xc0011884>
40011c20:	0005883a 	mov	r2,zero
40011c24:	0007883a 	mov	r3,zero
40011c28:	003ebd06 	br	40011720 <__alt_data_end+0xc0011720>
40011c2c:	0007883a 	mov	r3,zero
40011c30:	00800044 	movi	r2,1
40011c34:	003f4d06 	br	4001196c <__alt_data_end+0xc001196c>
40011c38:	197f942e 	bgeu	r3,r5,40011a8c <__alt_data_end+0xc0011a8c>
40011c3c:	10bfff84 	addi	r2,r2,-2
40011c40:	1dc7883a 	add	r3,r3,r23
40011c44:	003f9206 	br	40011a90 <__alt_data_end+0xc0011a90>
40011c48:	15bf7e2e 	bgeu	r2,r22,40011a44 <__alt_data_end+0xc0011a44>
40011c4c:	843fff84 	addi	r16,r16,-2
40011c50:	15c5883a 	add	r2,r2,r23
40011c54:	003f7c06 	br	40011a48 <__alt_data_end+0xc0011a48>
40011c58:	2807883a 	mov	r3,r5
40011c5c:	003fd206 	br	40011ba8 <__alt_data_end+0xc0011ba8>
40011c60:	102f883a 	mov	r23,r2
40011c64:	003fbc06 	br	40011b58 <__alt_data_end+0xc0011b58>
40011c68:	843fff84 	addi	r16,r16,-2
40011c6c:	2489883a 	add	r4,r4,r18
40011c70:	003f2506 	br	40011908 <__alt_data_end+0xc0011908>
40011c74:	843fff84 	addi	r16,r16,-2
40011c78:	1485883a 	add	r2,r2,r18
40011c7c:	003eca06 	br	400117a8 <__alt_data_end+0xc00117a8>

40011c80 <__umoddi3>:
40011c80:	defff404 	addi	sp,sp,-48
40011c84:	ddc00915 	stw	r23,36(sp)
40011c88:	dc400315 	stw	r17,12(sp)
40011c8c:	dc000215 	stw	r16,8(sp)
40011c90:	dfc00b15 	stw	ra,44(sp)
40011c94:	df000a15 	stw	fp,40(sp)
40011c98:	dd800815 	stw	r22,32(sp)
40011c9c:	dd400715 	stw	r21,28(sp)
40011ca0:	dd000615 	stw	r20,24(sp)
40011ca4:	dcc00515 	stw	r19,20(sp)
40011ca8:	dc800415 	stw	r18,16(sp)
40011cac:	2021883a 	mov	r16,r4
40011cb0:	2823883a 	mov	r17,r5
40011cb4:	282f883a 	mov	r23,r5
40011cb8:	3800381e 	bne	r7,zero,40011d9c <__umoddi3+0x11c>
40011cbc:	3027883a 	mov	r19,r6
40011cc0:	2029883a 	mov	r20,r4
40011cc4:	29804e2e 	bgeu	r5,r6,40011e00 <__umoddi3+0x180>
40011cc8:	00bfffd4 	movui	r2,65535
40011ccc:	11809c36 	bltu	r2,r6,40011f40 <__umoddi3+0x2c0>
40011cd0:	00803fc4 	movi	r2,255
40011cd4:	11813b2e 	bgeu	r2,r6,400121c4 <__umoddi3+0x544>
40011cd8:	01400204 	movi	r5,8
40011cdc:	2805883a 	mov	r2,r5
40011ce0:	314ad83a 	srl	r5,r6,r5
40011ce4:	00d00074 	movhi	r3,16385
40011ce8:	18d38f04 	addi	r3,r3,20028
40011cec:	194b883a 	add	r5,r3,r5
40011cf0:	29000003 	ldbu	r4,0(r5)
40011cf4:	2089883a 	add	r4,r4,r2
40011cf8:	00800804 	movi	r2,32
40011cfc:	1105c83a 	sub	r2,r2,r4
40011d00:	1000ec26 	beq	r2,zero,400120b4 <__umoddi3+0x434>
40011d04:	88a2983a 	sll	r17,r17,r2
40011d08:	8108d83a 	srl	r4,r16,r4
40011d0c:	30a6983a 	sll	r19,r6,r2
40011d10:	80a8983a 	sll	r20,r16,r2
40011d14:	1025883a 	mov	r18,r2
40011d18:	892eb03a 	or	r23,r17,r4
40011d1c:	982cd43a 	srli	r22,r19,16
40011d20:	b809883a 	mov	r4,r23
40011d24:	9d7fffcc 	andi	r21,r19,65535
40011d28:	b00b883a 	mov	r5,r22
40011d2c:	00051a40 	call	400051a4 <__umodsi3>
40011d30:	b809883a 	mov	r4,r23
40011d34:	b00b883a 	mov	r5,r22
40011d38:	1021883a 	mov	r16,r2
40011d3c:	000519c0 	call	4000519c <__udivsi3>
40011d40:	8020943a 	slli	r16,r16,16
40011d44:	a00cd43a 	srli	r6,r20,16
40011d48:	1545383a 	mul	r2,r2,r21
40011d4c:	8188b03a 	or	r4,r16,r6
40011d50:	2080042e 	bgeu	r4,r2,40011d64 <__umoddi3+0xe4>
40011d54:	24c9883a 	add	r4,r4,r19
40011d58:	24c00236 	bltu	r4,r19,40011d64 <__umoddi3+0xe4>
40011d5c:	2080012e 	bgeu	r4,r2,40011d64 <__umoddi3+0xe4>
40011d60:	24c9883a 	add	r4,r4,r19
40011d64:	20a3c83a 	sub	r17,r4,r2
40011d68:	8809883a 	mov	r4,r17
40011d6c:	b00b883a 	mov	r5,r22
40011d70:	00051a40 	call	400051a4 <__umodsi3>
40011d74:	8809883a 	mov	r4,r17
40011d78:	b00b883a 	mov	r5,r22
40011d7c:	1021883a 	mov	r16,r2
40011d80:	000519c0 	call	4000519c <__udivsi3>
40011d84:	8006943a 	slli	r3,r16,16
40011d88:	1545383a 	mul	r2,r2,r21
40011d8c:	a13fffcc 	andi	r4,r20,65535
40011d90:	1906b03a 	or	r3,r3,r4
40011d94:	1880532e 	bgeu	r3,r2,40011ee4 <__umoddi3+0x264>
40011d98:	00004e06 	br	40011ed4 <__umoddi3+0x254>
40011d9c:	29c05536 	bltu	r5,r7,40011ef4 <__umoddi3+0x274>
40011da0:	00bfffd4 	movui	r2,65535
40011da4:	11c0612e 	bgeu	r2,r7,40011f2c <__umoddi3+0x2ac>
40011da8:	00804034 	movhi	r2,256
40011dac:	10bfffc4 	addi	r2,r2,-1
40011db0:	11c0f82e 	bgeu	r2,r7,40012194 <__umoddi3+0x514>
40011db4:	01400604 	movi	r5,24
40011db8:	282b883a 	mov	r21,r5
40011dbc:	394ad83a 	srl	r5,r7,r5
40011dc0:	00d00074 	movhi	r3,16385
40011dc4:	18d38f04 	addi	r3,r3,20028
40011dc8:	194b883a 	add	r5,r3,r5
40011dcc:	28800003 	ldbu	r2,0(r5)
40011dd0:	00c00804 	movi	r3,32
40011dd4:	156b883a 	add	r21,r2,r21
40011dd8:	1d69c83a 	sub	r20,r3,r21
40011ddc:	a000631e 	bne	r20,zero,40011f6c <__umoddi3+0x2ec>
40011de0:	3c400136 	bltu	r7,r17,40011de8 <__umoddi3+0x168>
40011de4:	81810436 	bltu	r16,r6,400121f8 <__umoddi3+0x578>
40011de8:	8185c83a 	sub	r2,r16,r6
40011dec:	89e3c83a 	sub	r17,r17,r7
40011df0:	8087803a 	cmpltu	r3,r16,r2
40011df4:	88efc83a 	sub	r23,r17,r3
40011df8:	b807883a 	mov	r3,r23
40011dfc:	00003f06 	br	40011efc <__umoddi3+0x27c>
40011e00:	3000041e 	bne	r6,zero,40011e14 <__umoddi3+0x194>
40011e04:	01000044 	movi	r4,1
40011e08:	000b883a 	mov	r5,zero
40011e0c:	000519c0 	call	4000519c <__udivsi3>
40011e10:	1027883a 	mov	r19,r2
40011e14:	00bfffd4 	movui	r2,65535
40011e18:	14c04f2e 	bgeu	r2,r19,40011f58 <__umoddi3+0x2d8>
40011e1c:	00804034 	movhi	r2,256
40011e20:	10bfffc4 	addi	r2,r2,-1
40011e24:	14c0e42e 	bgeu	r2,r19,400121b8 <__umoddi3+0x538>
40011e28:	00800604 	movi	r2,24
40011e2c:	1007883a 	mov	r3,r2
40011e30:	9884d83a 	srl	r2,r19,r2
40011e34:	01100074 	movhi	r4,16385
40011e38:	21138f04 	addi	r4,r4,20028
40011e3c:	2085883a 	add	r2,r4,r2
40011e40:	11000003 	ldbu	r4,0(r2)
40011e44:	00800804 	movi	r2,32
40011e48:	20c7883a 	add	r3,r4,r3
40011e4c:	10c5c83a 	sub	r2,r2,r3
40011e50:	10009a1e 	bne	r2,zero,400120bc <__umoddi3+0x43c>
40011e54:	982cd43a 	srli	r22,r19,16
40011e58:	8ce3c83a 	sub	r17,r17,r19
40011e5c:	9c3fffcc 	andi	r16,r19,65535
40011e60:	0025883a 	mov	r18,zero
40011e64:	8809883a 	mov	r4,r17
40011e68:	b00b883a 	mov	r5,r22
40011e6c:	00051a40 	call	400051a4 <__umodsi3>
40011e70:	8809883a 	mov	r4,r17
40011e74:	b00b883a 	mov	r5,r22
40011e78:	102b883a 	mov	r21,r2
40011e7c:	000519c0 	call	4000519c <__udivsi3>
40011e80:	a806943a 	slli	r3,r21,16
40011e84:	a008d43a 	srli	r4,r20,16
40011e88:	1405383a 	mul	r2,r2,r16
40011e8c:	190cb03a 	or	r6,r3,r4
40011e90:	3080032e 	bgeu	r6,r2,40011ea0 <__umoddi3+0x220>
40011e94:	34cd883a 	add	r6,r6,r19
40011e98:	34c00136 	bltu	r6,r19,40011ea0 <__umoddi3+0x220>
40011e9c:	3080d436 	bltu	r6,r2,400121f0 <__umoddi3+0x570>
40011ea0:	30abc83a 	sub	r21,r6,r2
40011ea4:	a809883a 	mov	r4,r21
40011ea8:	b00b883a 	mov	r5,r22
40011eac:	00051a40 	call	400051a4 <__umodsi3>
40011eb0:	1023883a 	mov	r17,r2
40011eb4:	a809883a 	mov	r4,r21
40011eb8:	b00b883a 	mov	r5,r22
40011ebc:	000519c0 	call	4000519c <__udivsi3>
40011ec0:	8822943a 	slli	r17,r17,16
40011ec4:	1405383a 	mul	r2,r2,r16
40011ec8:	a13fffcc 	andi	r4,r20,65535
40011ecc:	8906b03a 	or	r3,r17,r4
40011ed0:	1880042e 	bgeu	r3,r2,40011ee4 <__umoddi3+0x264>
40011ed4:	1cc7883a 	add	r3,r3,r19
40011ed8:	1cc00236 	bltu	r3,r19,40011ee4 <__umoddi3+0x264>
40011edc:	1880012e 	bgeu	r3,r2,40011ee4 <__umoddi3+0x264>
40011ee0:	1cc7883a 	add	r3,r3,r19
40011ee4:	1887c83a 	sub	r3,r3,r2
40011ee8:	1c84d83a 	srl	r2,r3,r18
40011eec:	0007883a 	mov	r3,zero
40011ef0:	00000206 	br	40011efc <__umoddi3+0x27c>
40011ef4:	2005883a 	mov	r2,r4
40011ef8:	2807883a 	mov	r3,r5
40011efc:	dfc00b17 	ldw	ra,44(sp)
40011f00:	df000a17 	ldw	fp,40(sp)
40011f04:	ddc00917 	ldw	r23,36(sp)
40011f08:	dd800817 	ldw	r22,32(sp)
40011f0c:	dd400717 	ldw	r21,28(sp)
40011f10:	dd000617 	ldw	r20,24(sp)
40011f14:	dcc00517 	ldw	r19,20(sp)
40011f18:	dc800417 	ldw	r18,16(sp)
40011f1c:	dc400317 	ldw	r17,12(sp)
40011f20:	dc000217 	ldw	r16,8(sp)
40011f24:	dec00c04 	addi	sp,sp,48
40011f28:	f800283a 	ret
40011f2c:	00803fc4 	movi	r2,255
40011f30:	11c0952e 	bgeu	r2,r7,40012188 <__umoddi3+0x508>
40011f34:	01400204 	movi	r5,8
40011f38:	282b883a 	mov	r21,r5
40011f3c:	003f9f06 	br	40011dbc <__alt_data_end+0xc0011dbc>
40011f40:	00804034 	movhi	r2,256
40011f44:	10bfffc4 	addi	r2,r2,-1
40011f48:	1180952e 	bgeu	r2,r6,400121a0 <__umoddi3+0x520>
40011f4c:	01400604 	movi	r5,24
40011f50:	2805883a 	mov	r2,r5
40011f54:	003f6206 	br	40011ce0 <__alt_data_end+0xc0011ce0>
40011f58:	00803fc4 	movi	r2,255
40011f5c:	14c0932e 	bgeu	r2,r19,400121ac <__umoddi3+0x52c>
40011f60:	00800204 	movi	r2,8
40011f64:	1007883a 	mov	r3,r2
40011f68:	003fb106 	br	40011e30 <__alt_data_end+0xc0011e30>
40011f6c:	3548d83a 	srl	r4,r6,r21
40011f70:	3d0e983a 	sll	r7,r7,r20
40011f74:	8d10983a 	sll	r8,r17,r20
40011f78:	8d6cd83a 	srl	r22,r17,r21
40011f7c:	3922b03a 	or	r17,r7,r4
40011f80:	882ed43a 	srli	r23,r17,16
40011f84:	8564d83a 	srl	r18,r16,r21
40011f88:	b009883a 	mov	r4,r22
40011f8c:	b80b883a 	mov	r5,r23
40011f90:	44a4b03a 	or	r18,r8,r18
40011f94:	3526983a 	sll	r19,r6,r20
40011f98:	00051a40 	call	400051a4 <__umodsi3>
40011f9c:	b009883a 	mov	r4,r22
40011fa0:	b80b883a 	mov	r5,r23
40011fa4:	1039883a 	mov	fp,r2
40011fa8:	000519c0 	call	4000519c <__udivsi3>
40011fac:	102d883a 	mov	r22,r2
40011fb0:	8a3fffcc 	andi	r8,r17,65535
40011fb4:	e004943a 	slli	r2,fp,16
40011fb8:	900cd43a 	srli	r6,r18,16
40011fbc:	b239383a 	mul	fp,r22,r8
40011fc0:	8520983a 	sll	r16,r16,r20
40011fc4:	118ab03a 	or	r5,r2,r6
40011fc8:	2f00042e 	bgeu	r5,fp,40011fdc <__umoddi3+0x35c>
40011fcc:	2c4b883a 	add	r5,r5,r17
40011fd0:	b0bfffc4 	addi	r2,r22,-1
40011fd4:	2c40822e 	bgeu	r5,r17,400121e0 <__umoddi3+0x560>
40011fd8:	102d883a 	mov	r22,r2
40011fdc:	2f39c83a 	sub	fp,r5,fp
40011fe0:	e009883a 	mov	r4,fp
40011fe4:	b80b883a 	mov	r5,r23
40011fe8:	da000115 	stw	r8,4(sp)
40011fec:	00051a40 	call	400051a4 <__umodsi3>
40011ff0:	e009883a 	mov	r4,fp
40011ff4:	b80b883a 	mov	r5,r23
40011ff8:	d8800015 	stw	r2,0(sp)
40011ffc:	000519c0 	call	4000519c <__udivsi3>
40012000:	d9800017 	ldw	r6,0(sp)
40012004:	da000117 	ldw	r8,4(sp)
40012008:	94bfffcc 	andi	r18,r18,65535
4001200c:	300c943a 	slli	r6,r6,16
40012010:	1209383a 	mul	r4,r2,r8
40012014:	3490b03a 	or	r8,r6,r18
40012018:	4100042e 	bgeu	r8,r4,4001202c <__umoddi3+0x3ac>
4001201c:	4451883a 	add	r8,r8,r17
40012020:	10ffffc4 	addi	r3,r2,-1
40012024:	44406a2e 	bgeu	r8,r17,400121d0 <__umoddi3+0x550>
40012028:	1805883a 	mov	r2,r3
4001202c:	b012943a 	slli	r9,r22,16
40012030:	9abfffcc 	andi	r10,r19,65535
40012034:	980ed43a 	srli	r7,r19,16
40012038:	124ab03a 	or	r5,r2,r9
4001203c:	2a7fffcc 	andi	r9,r5,65535
40012040:	280ad43a 	srli	r5,r5,16
40012044:	4a8d383a 	mul	r6,r9,r10
40012048:	49d3383a 	mul	r9,r9,r7
4001204c:	2a95383a 	mul	r10,r5,r10
40012050:	3004d43a 	srli	r2,r6,16
40012054:	4111c83a 	sub	r8,r8,r4
40012058:	5253883a 	add	r9,r10,r9
4001205c:	4893883a 	add	r9,r9,r2
40012060:	29cb383a 	mul	r5,r5,r7
40012064:	4a80022e 	bgeu	r9,r10,40012070 <__umoddi3+0x3f0>
40012068:	00800074 	movhi	r2,1
4001206c:	288b883a 	add	r5,r5,r2
40012070:	4808d43a 	srli	r4,r9,16
40012074:	4812943a 	slli	r9,r9,16
40012078:	31bfffcc 	andi	r6,r6,65535
4001207c:	290b883a 	add	r5,r5,r4
40012080:	498d883a 	add	r6,r9,r6
40012084:	41403a36 	bltu	r8,r5,40012170 <__umoddi3+0x4f0>
40012088:	41405d26 	beq	r8,r5,40012200 <__umoddi3+0x580>
4001208c:	4149c83a 	sub	r4,r8,r5
40012090:	300f883a 	mov	r7,r6
40012094:	81cfc83a 	sub	r7,r16,r7
40012098:	81c7803a 	cmpltu	r3,r16,r7
4001209c:	20c7c83a 	sub	r3,r4,r3
400120a0:	1d44983a 	sll	r2,r3,r21
400120a4:	3d0ed83a 	srl	r7,r7,r20
400120a8:	1d06d83a 	srl	r3,r3,r20
400120ac:	11c4b03a 	or	r2,r2,r7
400120b0:	003f9206 	br	40011efc <__alt_data_end+0xc0011efc>
400120b4:	0025883a 	mov	r18,zero
400120b8:	003f1806 	br	40011d1c <__alt_data_end+0xc0011d1c>
400120bc:	98a6983a 	sll	r19,r19,r2
400120c0:	88e8d83a 	srl	r20,r17,r3
400120c4:	80c6d83a 	srl	r3,r16,r3
400120c8:	982cd43a 	srli	r22,r19,16
400120cc:	88a2983a 	sll	r17,r17,r2
400120d0:	a009883a 	mov	r4,r20
400120d4:	b00b883a 	mov	r5,r22
400120d8:	88eab03a 	or	r21,r17,r3
400120dc:	1025883a 	mov	r18,r2
400120e0:	00051a40 	call	400051a4 <__umodsi3>
400120e4:	a009883a 	mov	r4,r20
400120e8:	b00b883a 	mov	r5,r22
400120ec:	1023883a 	mov	r17,r2
400120f0:	000519c0 	call	4000519c <__udivsi3>
400120f4:	9f3fffcc 	andi	fp,r19,65535
400120f8:	8822943a 	slli	r17,r17,16
400120fc:	a80ad43a 	srli	r5,r21,16
40012100:	1705383a 	mul	r2,r2,fp
40012104:	84a8983a 	sll	r20,r16,r18
40012108:	8948b03a 	or	r4,r17,r5
4001210c:	2080042e 	bgeu	r4,r2,40012120 <__umoddi3+0x4a0>
40012110:	24c9883a 	add	r4,r4,r19
40012114:	24c00236 	bltu	r4,r19,40012120 <__umoddi3+0x4a0>
40012118:	2080012e 	bgeu	r4,r2,40012120 <__umoddi3+0x4a0>
4001211c:	24c9883a 	add	r4,r4,r19
40012120:	20afc83a 	sub	r23,r4,r2
40012124:	b809883a 	mov	r4,r23
40012128:	b00b883a 	mov	r5,r22
4001212c:	00051a40 	call	400051a4 <__umodsi3>
40012130:	1023883a 	mov	r17,r2
40012134:	b809883a 	mov	r4,r23
40012138:	b00b883a 	mov	r5,r22
4001213c:	000519c0 	call	4000519c <__udivsi3>
40012140:	8822943a 	slli	r17,r17,16
40012144:	1705383a 	mul	r2,r2,fp
40012148:	a93fffcc 	andi	r4,r21,65535
4001214c:	8908b03a 	or	r4,r17,r4
40012150:	2080042e 	bgeu	r4,r2,40012164 <__umoddi3+0x4e4>
40012154:	24c9883a 	add	r4,r4,r19
40012158:	24c00236 	bltu	r4,r19,40012164 <__umoddi3+0x4e4>
4001215c:	2080012e 	bgeu	r4,r2,40012164 <__umoddi3+0x4e4>
40012160:	24c9883a 	add	r4,r4,r19
40012164:	20a3c83a 	sub	r17,r4,r2
40012168:	e021883a 	mov	r16,fp
4001216c:	003f3d06 	br	40011e64 <__alt_data_end+0xc0011e64>
40012170:	34cfc83a 	sub	r7,r6,r19
40012174:	2c4bc83a 	sub	r5,r5,r17
40012178:	31cd803a 	cmpltu	r6,r6,r7
4001217c:	298dc83a 	sub	r6,r5,r6
40012180:	4189c83a 	sub	r4,r8,r6
40012184:	003fc306 	br	40012094 <__alt_data_end+0xc0012094>
40012188:	000b883a 	mov	r5,zero
4001218c:	002b883a 	mov	r21,zero
40012190:	003f0a06 	br	40011dbc <__alt_data_end+0xc0011dbc>
40012194:	01400404 	movi	r5,16
40012198:	282b883a 	mov	r21,r5
4001219c:	003f0706 	br	40011dbc <__alt_data_end+0xc0011dbc>
400121a0:	01400404 	movi	r5,16
400121a4:	2805883a 	mov	r2,r5
400121a8:	003ecd06 	br	40011ce0 <__alt_data_end+0xc0011ce0>
400121ac:	0005883a 	mov	r2,zero
400121b0:	0007883a 	mov	r3,zero
400121b4:	003f1e06 	br	40011e30 <__alt_data_end+0xc0011e30>
400121b8:	00800404 	movi	r2,16
400121bc:	1007883a 	mov	r3,r2
400121c0:	003f1b06 	br	40011e30 <__alt_data_end+0xc0011e30>
400121c4:	000b883a 	mov	r5,zero
400121c8:	0005883a 	mov	r2,zero
400121cc:	003ec406 	br	40011ce0 <__alt_data_end+0xc0011ce0>
400121d0:	413f952e 	bgeu	r8,r4,40012028 <__alt_data_end+0xc0012028>
400121d4:	10bfff84 	addi	r2,r2,-2
400121d8:	4451883a 	add	r8,r8,r17
400121dc:	003f9306 	br	4001202c <__alt_data_end+0xc001202c>
400121e0:	2f3f7d2e 	bgeu	r5,fp,40011fd8 <__alt_data_end+0xc0011fd8>
400121e4:	b5bfff84 	addi	r22,r22,-2
400121e8:	2c4b883a 	add	r5,r5,r17
400121ec:	003f7b06 	br	40011fdc <__alt_data_end+0xc0011fdc>
400121f0:	34cd883a 	add	r6,r6,r19
400121f4:	003f2a06 	br	40011ea0 <__alt_data_end+0xc0011ea0>
400121f8:	8005883a 	mov	r2,r16
400121fc:	003efe06 	br	40011df8 <__alt_data_end+0xc0011df8>
40012200:	81bfdb36 	bltu	r16,r6,40012170 <__alt_data_end+0xc0012170>
40012204:	300f883a 	mov	r7,r6
40012208:	0009883a 	mov	r4,zero
4001220c:	003fa106 	br	40012094 <__alt_data_end+0xc0012094>

40012210 <__floatunsidf>:
40012210:	defffe04 	addi	sp,sp,-8
40012214:	dc000015 	stw	r16,0(sp)
40012218:	dfc00115 	stw	ra,4(sp)
4001221c:	2021883a 	mov	r16,r4
40012220:	20001026 	beq	r4,zero,40012264 <__floatunsidf+0x54>
40012224:	0007e6c0 	call	40007e6c <__clzsi2>
40012228:	01410784 	movi	r5,1054
4001222c:	100d883a 	mov	r6,r2
40012230:	288bc83a 	sub	r5,r5,r2
40012234:	00800284 	movi	r2,10
40012238:	11801616 	blt	r2,r6,40012294 <__floatunsidf+0x84>
4001223c:	008002c4 	movi	r2,11
40012240:	1185c83a 	sub	r2,r2,r6
40012244:	8084d83a 	srl	r2,r16,r2
40012248:	00c00434 	movhi	r3,16
4001224c:	31c00544 	addi	r7,r6,21
40012250:	18ffffc4 	addi	r3,r3,-1
40012254:	81e0983a 	sll	r16,r16,r7
40012258:	10cc703a 	and	r6,r2,r3
4001225c:	2941ffcc 	andi	r5,r5,2047
40012260:	00000206 	br	4001226c <__floatunsidf+0x5c>
40012264:	000b883a 	mov	r5,zero
40012268:	000d883a 	mov	r6,zero
4001226c:	280a953a 	slli	r5,r5,20
40012270:	00c00434 	movhi	r3,16
40012274:	18ffffc4 	addi	r3,r3,-1
40012278:	30c6703a 	and	r3,r6,r3
4001227c:	8005883a 	mov	r2,r16
40012280:	1946b03a 	or	r3,r3,r5
40012284:	dfc00117 	ldw	ra,4(sp)
40012288:	dc000017 	ldw	r16,0(sp)
4001228c:	dec00204 	addi	sp,sp,8
40012290:	f800283a 	ret
40012294:	31bffd44 	addi	r6,r6,-11
40012298:	818c983a 	sll	r6,r16,r6
4001229c:	00800434 	movhi	r2,16
400122a0:	10bfffc4 	addi	r2,r2,-1
400122a4:	2941ffcc 	andi	r5,r5,2047
400122a8:	0021883a 	mov	r16,zero
400122ac:	308c703a 	and	r6,r6,r2
400122b0:	003fee06 	br	4001226c <__alt_data_end+0xc001226c>

400122b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
400122b4:	defffe04 	addi	sp,sp,-8
400122b8:	dfc00115 	stw	ra,4(sp)
400122bc:	df000015 	stw	fp,0(sp)
400122c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
400122c4:	00900074 	movhi	r2,16385
400122c8:	109b2d04 	addi	r2,r2,27828
400122cc:	10800017 	ldw	r2,0(r2)
400122d0:	10000526 	beq	r2,zero,400122e8 <alt_get_errno+0x34>
400122d4:	00900074 	movhi	r2,16385
400122d8:	109b2d04 	addi	r2,r2,27828
400122dc:	10800017 	ldw	r2,0(r2)
400122e0:	103ee83a 	callr	r2
400122e4:	00000206 	br	400122f0 <alt_get_errno+0x3c>
400122e8:	009000b4 	movhi	r2,16386
400122ec:	10a21f04 	addi	r2,r2,-30596
}
400122f0:	e037883a 	mov	sp,fp
400122f4:	dfc00117 	ldw	ra,4(sp)
400122f8:	df000017 	ldw	fp,0(sp)
400122fc:	dec00204 	addi	sp,sp,8
40012300:	f800283a 	ret

40012304 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
40012304:	defffb04 	addi	sp,sp,-20
40012308:	dfc00415 	stw	ra,16(sp)
4001230c:	df000315 	stw	fp,12(sp)
40012310:	df000304 	addi	fp,sp,12
40012314:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
40012318:	e0bfff17 	ldw	r2,-4(fp)
4001231c:	10000616 	blt	r2,zero,40012338 <close+0x34>
40012320:	e0bfff17 	ldw	r2,-4(fp)
40012324:	10c00324 	muli	r3,r2,12
40012328:	00900074 	movhi	r2,16385
4001232c:	10968204 	addi	r2,r2,23048
40012330:	1885883a 	add	r2,r3,r2
40012334:	00000106 	br	4001233c <close+0x38>
40012338:	0005883a 	mov	r2,zero
4001233c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
40012340:	e0bffd17 	ldw	r2,-12(fp)
40012344:	10001926 	beq	r2,zero,400123ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
40012348:	e0bffd17 	ldw	r2,-12(fp)
4001234c:	10800017 	ldw	r2,0(r2)
40012350:	10800417 	ldw	r2,16(r2)
40012354:	10000626 	beq	r2,zero,40012370 <close+0x6c>
40012358:	e0bffd17 	ldw	r2,-12(fp)
4001235c:	10800017 	ldw	r2,0(r2)
40012360:	10800417 	ldw	r2,16(r2)
40012364:	e13ffd17 	ldw	r4,-12(fp)
40012368:	103ee83a 	callr	r2
4001236c:	00000106 	br	40012374 <close+0x70>
40012370:	0005883a 	mov	r2,zero
40012374:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
40012378:	e13fff17 	ldw	r4,-4(fp)
4001237c:	0012bd40 	call	40012bd4 <alt_release_fd>
    if (rval < 0)
40012380:	e0bffe17 	ldw	r2,-8(fp)
40012384:	1000070e 	bge	r2,zero,400123a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
40012388:	00122b40 	call	400122b4 <alt_get_errno>
4001238c:	1007883a 	mov	r3,r2
40012390:	e0bffe17 	ldw	r2,-8(fp)
40012394:	0085c83a 	sub	r2,zero,r2
40012398:	18800015 	stw	r2,0(r3)
      return -1;
4001239c:	00bfffc4 	movi	r2,-1
400123a0:	00000706 	br	400123c0 <close+0xbc>
    }
    return 0;
400123a4:	0005883a 	mov	r2,zero
400123a8:	00000506 	br	400123c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
400123ac:	00122b40 	call	400122b4 <alt_get_errno>
400123b0:	1007883a 	mov	r3,r2
400123b4:	00801444 	movi	r2,81
400123b8:	18800015 	stw	r2,0(r3)
    return -1;
400123bc:	00bfffc4 	movi	r2,-1
  }
}
400123c0:	e037883a 	mov	sp,fp
400123c4:	dfc00117 	ldw	ra,4(sp)
400123c8:	df000017 	ldw	fp,0(sp)
400123cc:	dec00204 	addi	sp,sp,8
400123d0:	f800283a 	ret

400123d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
400123d4:	defffc04 	addi	sp,sp,-16
400123d8:	df000315 	stw	fp,12(sp)
400123dc:	df000304 	addi	fp,sp,12
400123e0:	e13ffd15 	stw	r4,-12(fp)
400123e4:	e17ffe15 	stw	r5,-8(fp)
400123e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
400123ec:	e0bfff17 	ldw	r2,-4(fp)
}
400123f0:	e037883a 	mov	sp,fp
400123f4:	df000017 	ldw	fp,0(sp)
400123f8:	dec00104 	addi	sp,sp,4
400123fc:	f800283a 	ret

40012400 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
40012400:	defffd04 	addi	sp,sp,-12
40012404:	df000215 	stw	fp,8(sp)
40012408:	df000204 	addi	fp,sp,8
4001240c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
40012410:	0001883a 	nop
40012414:	e0bfff17 	ldw	r2,-4(fp)
40012418:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
4001241c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
40012420:	10000226 	beq	r2,zero,4001242c <_exit+0x2c>
    ALT_SIM_FAIL();
40012424:	002af070 	cmpltui	zero,zero,43969
40012428:	00000106 	br	40012430 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
4001242c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
40012430:	003fff06 	br	40012430 <__alt_data_end+0xc0012430>

40012434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40012434:	defffe04 	addi	sp,sp,-8
40012438:	dfc00115 	stw	ra,4(sp)
4001243c:	df000015 	stw	fp,0(sp)
40012440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40012444:	00900074 	movhi	r2,16385
40012448:	109b2d04 	addi	r2,r2,27828
4001244c:	10800017 	ldw	r2,0(r2)
40012450:	10000526 	beq	r2,zero,40012468 <alt_get_errno+0x34>
40012454:	00900074 	movhi	r2,16385
40012458:	109b2d04 	addi	r2,r2,27828
4001245c:	10800017 	ldw	r2,0(r2)
40012460:	103ee83a 	callr	r2
40012464:	00000206 	br	40012470 <alt_get_errno+0x3c>
40012468:	009000b4 	movhi	r2,16386
4001246c:	10a21f04 	addi	r2,r2,-30596
}
40012470:	e037883a 	mov	sp,fp
40012474:	dfc00117 	ldw	ra,4(sp)
40012478:	df000017 	ldw	fp,0(sp)
4001247c:	dec00204 	addi	sp,sp,8
40012480:	f800283a 	ret

40012484 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
40012484:	defffb04 	addi	sp,sp,-20
40012488:	dfc00415 	stw	ra,16(sp)
4001248c:	df000315 	stw	fp,12(sp)
40012490:	df000304 	addi	fp,sp,12
40012494:	e13ffe15 	stw	r4,-8(fp)
40012498:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4001249c:	e0bffe17 	ldw	r2,-8(fp)
400124a0:	10000616 	blt	r2,zero,400124bc <fstat+0x38>
400124a4:	e0bffe17 	ldw	r2,-8(fp)
400124a8:	10c00324 	muli	r3,r2,12
400124ac:	00900074 	movhi	r2,16385
400124b0:	10968204 	addi	r2,r2,23048
400124b4:	1885883a 	add	r2,r3,r2
400124b8:	00000106 	br	400124c0 <fstat+0x3c>
400124bc:	0005883a 	mov	r2,zero
400124c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
400124c4:	e0bffd17 	ldw	r2,-12(fp)
400124c8:	10001026 	beq	r2,zero,4001250c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
400124cc:	e0bffd17 	ldw	r2,-12(fp)
400124d0:	10800017 	ldw	r2,0(r2)
400124d4:	10800817 	ldw	r2,32(r2)
400124d8:	10000726 	beq	r2,zero,400124f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
400124dc:	e0bffd17 	ldw	r2,-12(fp)
400124e0:	10800017 	ldw	r2,0(r2)
400124e4:	10800817 	ldw	r2,32(r2)
400124e8:	e13ffd17 	ldw	r4,-12(fp)
400124ec:	e17fff17 	ldw	r5,-4(fp)
400124f0:	103ee83a 	callr	r2
400124f4:	00000a06 	br	40012520 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
400124f8:	e0bfff17 	ldw	r2,-4(fp)
400124fc:	00c80004 	movi	r3,8192
40012500:	10c00115 	stw	r3,4(r2)
      return 0;
40012504:	0005883a 	mov	r2,zero
40012508:	00000506 	br	40012520 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4001250c:	00124340 	call	40012434 <alt_get_errno>
40012510:	1007883a 	mov	r3,r2
40012514:	00801444 	movi	r2,81
40012518:	18800015 	stw	r2,0(r3)
    return -1;
4001251c:	00bfffc4 	movi	r2,-1
  }
}
40012520:	e037883a 	mov	sp,fp
40012524:	dfc00117 	ldw	ra,4(sp)
40012528:	df000017 	ldw	fp,0(sp)
4001252c:	dec00204 	addi	sp,sp,8
40012530:	f800283a 	ret

40012534 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
40012534:	deffff04 	addi	sp,sp,-4
40012538:	df000015 	stw	fp,0(sp)
4001253c:	d839883a 	mov	fp,sp
  return 0;
40012540:	0005883a 	mov	r2,zero
}
40012544:	e037883a 	mov	sp,fp
40012548:	df000017 	ldw	fp,0(sp)
4001254c:	dec00104 	addi	sp,sp,4
40012550:	f800283a 	ret

40012554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40012554:	defffe04 	addi	sp,sp,-8
40012558:	dfc00115 	stw	ra,4(sp)
4001255c:	df000015 	stw	fp,0(sp)
40012560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40012564:	00900074 	movhi	r2,16385
40012568:	109b2d04 	addi	r2,r2,27828
4001256c:	10800017 	ldw	r2,0(r2)
40012570:	10000526 	beq	r2,zero,40012588 <alt_get_errno+0x34>
40012574:	00900074 	movhi	r2,16385
40012578:	109b2d04 	addi	r2,r2,27828
4001257c:	10800017 	ldw	r2,0(r2)
40012580:	103ee83a 	callr	r2
40012584:	00000206 	br	40012590 <alt_get_errno+0x3c>
40012588:	009000b4 	movhi	r2,16386
4001258c:	10a21f04 	addi	r2,r2,-30596
}
40012590:	e037883a 	mov	sp,fp
40012594:	dfc00117 	ldw	ra,4(sp)
40012598:	df000017 	ldw	fp,0(sp)
4001259c:	dec00204 	addi	sp,sp,8
400125a0:	f800283a 	ret

400125a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
400125a4:	deffed04 	addi	sp,sp,-76
400125a8:	dfc01215 	stw	ra,72(sp)
400125ac:	df001115 	stw	fp,68(sp)
400125b0:	df001104 	addi	fp,sp,68
400125b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
400125b8:	e0bfff17 	ldw	r2,-4(fp)
400125bc:	10000616 	blt	r2,zero,400125d8 <isatty+0x34>
400125c0:	e0bfff17 	ldw	r2,-4(fp)
400125c4:	10c00324 	muli	r3,r2,12
400125c8:	00900074 	movhi	r2,16385
400125cc:	10968204 	addi	r2,r2,23048
400125d0:	1885883a 	add	r2,r3,r2
400125d4:	00000106 	br	400125dc <isatty+0x38>
400125d8:	0005883a 	mov	r2,zero
400125dc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
400125e0:	e0bfef17 	ldw	r2,-68(fp)
400125e4:	10000e26 	beq	r2,zero,40012620 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
400125e8:	e0bfef17 	ldw	r2,-68(fp)
400125ec:	10800017 	ldw	r2,0(r2)
400125f0:	10800817 	ldw	r2,32(r2)
400125f4:	1000021e 	bne	r2,zero,40012600 <isatty+0x5c>
    {
      return 1;
400125f8:	00800044 	movi	r2,1
400125fc:	00000d06 	br	40012634 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
40012600:	e0bff004 	addi	r2,fp,-64
40012604:	e13fff17 	ldw	r4,-4(fp)
40012608:	100b883a 	mov	r5,r2
4001260c:	00124840 	call	40012484 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
40012610:	e0bff117 	ldw	r2,-60(fp)
40012614:	10880020 	cmpeqi	r2,r2,8192
40012618:	10803fcc 	andi	r2,r2,255
4001261c:	00000506 	br	40012634 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
40012620:	00125540 	call	40012554 <alt_get_errno>
40012624:	1007883a 	mov	r3,r2
40012628:	00801444 	movi	r2,81
4001262c:	18800015 	stw	r2,0(r3)
    return 0;
40012630:	0005883a 	mov	r2,zero
  }
}
40012634:	e037883a 	mov	sp,fp
40012638:	dfc00117 	ldw	ra,4(sp)
4001263c:	df000017 	ldw	fp,0(sp)
40012640:	dec00204 	addi	sp,sp,8
40012644:	f800283a 	ret

40012648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40012648:	defffe04 	addi	sp,sp,-8
4001264c:	dfc00115 	stw	ra,4(sp)
40012650:	df000015 	stw	fp,0(sp)
40012654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40012658:	00900074 	movhi	r2,16385
4001265c:	109b2d04 	addi	r2,r2,27828
40012660:	10800017 	ldw	r2,0(r2)
40012664:	10000526 	beq	r2,zero,4001267c <alt_get_errno+0x34>
40012668:	00900074 	movhi	r2,16385
4001266c:	109b2d04 	addi	r2,r2,27828
40012670:	10800017 	ldw	r2,0(r2)
40012674:	103ee83a 	callr	r2
40012678:	00000206 	br	40012684 <alt_get_errno+0x3c>
4001267c:	009000b4 	movhi	r2,16386
40012680:	10a21f04 	addi	r2,r2,-30596
}
40012684:	e037883a 	mov	sp,fp
40012688:	dfc00117 	ldw	ra,4(sp)
4001268c:	df000017 	ldw	fp,0(sp)
40012690:	dec00204 	addi	sp,sp,8
40012694:	f800283a 	ret

40012698 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
40012698:	defffb04 	addi	sp,sp,-20
4001269c:	dfc00415 	stw	ra,16(sp)
400126a0:	df000315 	stw	fp,12(sp)
400126a4:	df000304 	addi	fp,sp,12
400126a8:	e13ffe15 	stw	r4,-8(fp)
400126ac:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
400126b0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
400126b4:	e0bffe17 	ldw	r2,-8(fp)
400126b8:	00803116 	blt	zero,r2,40012780 <kill+0xe8>
  {
    switch (sig)
400126bc:	e0bfff17 	ldw	r2,-4(fp)
400126c0:	10800828 	cmpgeui	r2,r2,32
400126c4:	1000291e 	bne	r2,zero,4001276c <kill+0xd4>
400126c8:	e0bfff17 	ldw	r2,-4(fp)
400126cc:	100690ba 	slli	r3,r2,2
400126d0:	00900074 	movhi	r2,16385
400126d4:	1089b904 	addi	r2,r2,9956
400126d8:	1885883a 	add	r2,r3,r2
400126dc:	10800017 	ldw	r2,0(r2)
400126e0:	1000683a 	jmp	r2
400126e4:	40012778 	rdprs	zero,r8,1181
400126e8:	4001276c 	andhi	zero,r8,1181
400126ec:	4001276c 	andhi	zero,r8,1181
400126f0:	40012764 	muli	zero,r8,1181
400126f4:	40012764 	muli	zero,r8,1181
400126f8:	40012764 	muli	zero,r8,1181
400126fc:	40012764 	muli	zero,r8,1181
40012700:	4001276c 	andhi	zero,r8,1181
40012704:	40012764 	muli	zero,r8,1181
40012708:	40012764 	muli	zero,r8,1181
4001270c:	40012764 	muli	zero,r8,1181
40012710:	40012764 	muli	zero,r8,1181
40012714:	40012764 	muli	zero,r8,1181
40012718:	40012764 	muli	zero,r8,1181
4001271c:	40012764 	muli	zero,r8,1181
40012720:	40012764 	muli	zero,r8,1181
40012724:	40012778 	rdprs	zero,r8,1181
40012728:	4001276c 	andhi	zero,r8,1181
4001272c:	4001276c 	andhi	zero,r8,1181
40012730:	4001276c 	andhi	zero,r8,1181
40012734:	40012778 	rdprs	zero,r8,1181
40012738:	4001276c 	andhi	zero,r8,1181
4001273c:	4001276c 	andhi	zero,r8,1181
40012740:	40012764 	muli	zero,r8,1181
40012744:	40012764 	muli	zero,r8,1181
40012748:	40012764 	muli	zero,r8,1181
4001274c:	40012764 	muli	zero,r8,1181
40012750:	40012764 	muli	zero,r8,1181
40012754:	4001276c 	andhi	zero,r8,1181
40012758:	4001276c 	andhi	zero,r8,1181
4001275c:	40012764 	muli	zero,r8,1181
40012760:	40012764 	muli	zero,r8,1181
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
40012764:	0009883a 	mov	r4,zero
40012768:	00124000 	call	40012400 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
4001276c:	00800584 	movi	r2,22
40012770:	e0bffd15 	stw	r2,-12(fp)
40012774:	00000606 	br	40012790 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
40012778:	0001883a 	nop
4001277c:	00000406 	br	40012790 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
40012780:	e0bffe17 	ldw	r2,-8(fp)
40012784:	0080020e 	bge	zero,r2,40012790 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
40012788:	008000c4 	movi	r2,3
4001278c:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
40012790:	e0bffd17 	ldw	r2,-12(fp)
40012794:	10000626 	beq	r2,zero,400127b0 <kill+0x118>
  {
    ALT_ERRNO = status;
40012798:	00126480 	call	40012648 <alt_get_errno>
4001279c:	1007883a 	mov	r3,r2
400127a0:	e0bffd17 	ldw	r2,-12(fp)
400127a4:	18800015 	stw	r2,0(r3)
    return -1;
400127a8:	00bfffc4 	movi	r2,-1
400127ac:	00000106 	br	400127b4 <kill+0x11c>
  }

  return 0;
400127b0:	0005883a 	mov	r2,zero
}
400127b4:	e037883a 	mov	sp,fp
400127b8:	dfc00117 	ldw	ra,4(sp)
400127bc:	df000017 	ldw	fp,0(sp)
400127c0:	dec00204 	addi	sp,sp,8
400127c4:	f800283a 	ret

400127c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
400127c8:	defffc04 	addi	sp,sp,-16
400127cc:	df000315 	stw	fp,12(sp)
400127d0:	df000304 	addi	fp,sp,12
400127d4:	e13ffd15 	stw	r4,-12(fp)
400127d8:	e17ffe15 	stw	r5,-8(fp)
400127dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
400127e0:	e0fffe17 	ldw	r3,-8(fp)
400127e4:	e0bffd17 	ldw	r2,-12(fp)
400127e8:	18800c26 	beq	r3,r2,4001281c <alt_load_section+0x54>
  {
    while( to != end )
400127ec:	00000806 	br	40012810 <alt_load_section+0x48>
    {
      *to++ = *from++;
400127f0:	e0bffe17 	ldw	r2,-8(fp)
400127f4:	10c00104 	addi	r3,r2,4
400127f8:	e0fffe15 	stw	r3,-8(fp)
400127fc:	e0fffd17 	ldw	r3,-12(fp)
40012800:	19000104 	addi	r4,r3,4
40012804:	e13ffd15 	stw	r4,-12(fp)
40012808:	18c00017 	ldw	r3,0(r3)
4001280c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
40012810:	e0fffe17 	ldw	r3,-8(fp)
40012814:	e0bfff17 	ldw	r2,-4(fp)
40012818:	18bff51e 	bne	r3,r2,400127f0 <__alt_data_end+0xc00127f0>
    {
      *to++ = *from++;
    }
  }
}
4001281c:	e037883a 	mov	sp,fp
40012820:	df000017 	ldw	fp,0(sp)
40012824:	dec00104 	addi	sp,sp,4
40012828:	f800283a 	ret

4001282c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
4001282c:	defffe04 	addi	sp,sp,-8
40012830:	dfc00115 	stw	ra,4(sp)
40012834:	df000015 	stw	fp,0(sp)
40012838:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
4001283c:	01100074 	movhi	r4,16385
40012840:	211b3204 	addi	r4,r4,27848
40012844:	01500074 	movhi	r5,16385
40012848:	29544f04 	addi	r5,r5,20796
4001284c:	01900074 	movhi	r6,16385
40012850:	319b3204 	addi	r6,r6,27848
40012854:	00127c80 	call	400127c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
40012858:	01100034 	movhi	r4,16384
4001285c:	21000004 	addi	r4,r4,0
40012860:	01400034 	movhi	r5,0
40012864:	29400804 	addi	r5,r5,32
40012868:	01800034 	movhi	r6,0
4001286c:	31806f04 	addi	r6,r6,444
40012870:	00127c80 	call	400127c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
40012874:	01100074 	movhi	r4,16385
40012878:	2112af04 	addi	r4,r4,19132
4001287c:	01500074 	movhi	r5,16385
40012880:	2952af04 	addi	r5,r5,19132
40012884:	01900074 	movhi	r6,16385
40012888:	31944f04 	addi	r6,r6,20796
4001288c:	00127c80 	call	400127c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
40012890:	0013d180 	call	40013d18 <alt_dcache_flush_all>
  alt_icache_flush_all();
40012894:	0013f080 	call	40013f08 <alt_icache_flush_all>
}
40012898:	e037883a 	mov	sp,fp
4001289c:	dfc00117 	ldw	ra,4(sp)
400128a0:	df000017 	ldw	fp,0(sp)
400128a4:	dec00204 	addi	sp,sp,8
400128a8:	f800283a 	ret

400128ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
400128ac:	defffe04 	addi	sp,sp,-8
400128b0:	dfc00115 	stw	ra,4(sp)
400128b4:	df000015 	stw	fp,0(sp)
400128b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
400128bc:	00900074 	movhi	r2,16385
400128c0:	109b2d04 	addi	r2,r2,27828
400128c4:	10800017 	ldw	r2,0(r2)
400128c8:	10000526 	beq	r2,zero,400128e0 <alt_get_errno+0x34>
400128cc:	00900074 	movhi	r2,16385
400128d0:	109b2d04 	addi	r2,r2,27828
400128d4:	10800017 	ldw	r2,0(r2)
400128d8:	103ee83a 	callr	r2
400128dc:	00000206 	br	400128e8 <alt_get_errno+0x3c>
400128e0:	009000b4 	movhi	r2,16386
400128e4:	10a21f04 	addi	r2,r2,-30596
}
400128e8:	e037883a 	mov	sp,fp
400128ec:	dfc00117 	ldw	ra,4(sp)
400128f0:	df000017 	ldw	fp,0(sp)
400128f4:	dec00204 	addi	sp,sp,8
400128f8:	f800283a 	ret

400128fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
400128fc:	defff904 	addi	sp,sp,-28
40012900:	dfc00615 	stw	ra,24(sp)
40012904:	df000515 	stw	fp,20(sp)
40012908:	df000504 	addi	fp,sp,20
4001290c:	e13ffd15 	stw	r4,-12(fp)
40012910:	e17ffe15 	stw	r5,-8(fp)
40012914:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
40012918:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4001291c:	e0bffd17 	ldw	r2,-12(fp)
40012920:	10000616 	blt	r2,zero,4001293c <lseek+0x40>
40012924:	e0bffd17 	ldw	r2,-12(fp)
40012928:	10c00324 	muli	r3,r2,12
4001292c:	00900074 	movhi	r2,16385
40012930:	10968204 	addi	r2,r2,23048
40012934:	1885883a 	add	r2,r3,r2
40012938:	00000106 	br	40012940 <lseek+0x44>
4001293c:	0005883a 	mov	r2,zero
40012940:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
40012944:	e0bffc17 	ldw	r2,-16(fp)
40012948:	10001026 	beq	r2,zero,4001298c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
4001294c:	e0bffc17 	ldw	r2,-16(fp)
40012950:	10800017 	ldw	r2,0(r2)
40012954:	10800717 	ldw	r2,28(r2)
40012958:	10000926 	beq	r2,zero,40012980 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
4001295c:	e0bffc17 	ldw	r2,-16(fp)
40012960:	10800017 	ldw	r2,0(r2)
40012964:	10800717 	ldw	r2,28(r2)
40012968:	e13ffc17 	ldw	r4,-16(fp)
4001296c:	e17ffe17 	ldw	r5,-8(fp)
40012970:	e1bfff17 	ldw	r6,-4(fp)
40012974:	103ee83a 	callr	r2
40012978:	e0bffb15 	stw	r2,-20(fp)
4001297c:	00000506 	br	40012994 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
40012980:	00bfde84 	movi	r2,-134
40012984:	e0bffb15 	stw	r2,-20(fp)
40012988:	00000206 	br	40012994 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
4001298c:	00bfebc4 	movi	r2,-81
40012990:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
40012994:	e0bffb17 	ldw	r2,-20(fp)
40012998:	1000070e 	bge	r2,zero,400129b8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
4001299c:	00128ac0 	call	400128ac <alt_get_errno>
400129a0:	1007883a 	mov	r3,r2
400129a4:	e0bffb17 	ldw	r2,-20(fp)
400129a8:	0085c83a 	sub	r2,zero,r2
400129ac:	18800015 	stw	r2,0(r3)
    rc = -1;
400129b0:	00bfffc4 	movi	r2,-1
400129b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
400129b8:	e0bffb17 	ldw	r2,-20(fp)
}
400129bc:	e037883a 	mov	sp,fp
400129c0:	dfc00117 	ldw	ra,4(sp)
400129c4:	df000017 	ldw	fp,0(sp)
400129c8:	dec00204 	addi	sp,sp,8
400129cc:	f800283a 	ret

400129d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
400129d0:	defffd04 	addi	sp,sp,-12
400129d4:	dfc00215 	stw	ra,8(sp)
400129d8:	df000115 	stw	fp,4(sp)
400129dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
400129e0:	0009883a 	mov	r4,zero
400129e4:	00130000 	call	40013000 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
400129e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
400129ec:	00130340 	call	40013034 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
400129f0:	01100074 	movhi	r4,16385
400129f4:	21144504 	addi	r4,r4,20756
400129f8:	01500074 	movhi	r5,16385
400129fc:	29544504 	addi	r5,r5,20756
40012a00:	01900074 	movhi	r6,16385
40012a04:	31944504 	addi	r6,r6,20756
40012a08:	00142c80 	call	400142c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
40012a0c:	0013e500 	call	40013e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
40012a10:	01100074 	movhi	r4,16385
40012a14:	210fab04 	addi	r4,r4,16044
40012a18:	00148b80 	call	400148b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
40012a1c:	d1272917 	ldw	r4,-25436(gp)
40012a20:	d0e72a17 	ldw	r3,-25432(gp)
40012a24:	d0a72b17 	ldw	r2,-25428(gp)
40012a28:	180b883a 	mov	r5,r3
40012a2c:	100d883a 	mov	r6,r2
40012a30:	0001f2c0 	call	40001f2c <main>
40012a34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
40012a38:	01000044 	movi	r4,1
40012a3c:	00123040 	call	40012304 <close>
  exit (result);
40012a40:	e13fff17 	ldw	r4,-4(fp)
40012a44:	0007ef80 	call	40007ef8 <exit>

40012a48 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
40012a48:	defffe04 	addi	sp,sp,-8
40012a4c:	df000115 	stw	fp,4(sp)
40012a50:	df000104 	addi	fp,sp,4
40012a54:	e13fff15 	stw	r4,-4(fp)
}
40012a58:	e037883a 	mov	sp,fp
40012a5c:	df000017 	ldw	fp,0(sp)
40012a60:	dec00104 	addi	sp,sp,4
40012a64:	f800283a 	ret

40012a68 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
40012a68:	defffe04 	addi	sp,sp,-8
40012a6c:	df000115 	stw	fp,4(sp)
40012a70:	df000104 	addi	fp,sp,4
40012a74:	e13fff15 	stw	r4,-4(fp)
}
40012a78:	e037883a 	mov	sp,fp
40012a7c:	df000017 	ldw	fp,0(sp)
40012a80:	dec00104 	addi	sp,sp,4
40012a84:	f800283a 	ret

40012a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40012a88:	defffe04 	addi	sp,sp,-8
40012a8c:	dfc00115 	stw	ra,4(sp)
40012a90:	df000015 	stw	fp,0(sp)
40012a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40012a98:	00900074 	movhi	r2,16385
40012a9c:	109b2d04 	addi	r2,r2,27828
40012aa0:	10800017 	ldw	r2,0(r2)
40012aa4:	10000526 	beq	r2,zero,40012abc <alt_get_errno+0x34>
40012aa8:	00900074 	movhi	r2,16385
40012aac:	109b2d04 	addi	r2,r2,27828
40012ab0:	10800017 	ldw	r2,0(r2)
40012ab4:	103ee83a 	callr	r2
40012ab8:	00000206 	br	40012ac4 <alt_get_errno+0x3c>
40012abc:	009000b4 	movhi	r2,16386
40012ac0:	10a21f04 	addi	r2,r2,-30596
}
40012ac4:	e037883a 	mov	sp,fp
40012ac8:	dfc00117 	ldw	ra,4(sp)
40012acc:	df000017 	ldw	fp,0(sp)
40012ad0:	dec00204 	addi	sp,sp,8
40012ad4:	f800283a 	ret

40012ad8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
40012ad8:	defff904 	addi	sp,sp,-28
40012adc:	dfc00615 	stw	ra,24(sp)
40012ae0:	df000515 	stw	fp,20(sp)
40012ae4:	df000504 	addi	fp,sp,20
40012ae8:	e13ffd15 	stw	r4,-12(fp)
40012aec:	e17ffe15 	stw	r5,-8(fp)
40012af0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40012af4:	e0bffd17 	ldw	r2,-12(fp)
40012af8:	10000616 	blt	r2,zero,40012b14 <read+0x3c>
40012afc:	e0bffd17 	ldw	r2,-12(fp)
40012b00:	10c00324 	muli	r3,r2,12
40012b04:	00900074 	movhi	r2,16385
40012b08:	10968204 	addi	r2,r2,23048
40012b0c:	1885883a 	add	r2,r3,r2
40012b10:	00000106 	br	40012b18 <read+0x40>
40012b14:	0005883a 	mov	r2,zero
40012b18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
40012b1c:	e0bffb17 	ldw	r2,-20(fp)
40012b20:	10002226 	beq	r2,zero,40012bac <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40012b24:	e0bffb17 	ldw	r2,-20(fp)
40012b28:	10800217 	ldw	r2,8(r2)
40012b2c:	108000cc 	andi	r2,r2,3
40012b30:	10800060 	cmpeqi	r2,r2,1
40012b34:	1000181e 	bne	r2,zero,40012b98 <read+0xc0>
        (fd->dev->read))
40012b38:	e0bffb17 	ldw	r2,-20(fp)
40012b3c:	10800017 	ldw	r2,0(r2)
40012b40:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40012b44:	10001426 	beq	r2,zero,40012b98 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
40012b48:	e0bffb17 	ldw	r2,-20(fp)
40012b4c:	10800017 	ldw	r2,0(r2)
40012b50:	10800517 	ldw	r2,20(r2)
40012b54:	e0ffff17 	ldw	r3,-4(fp)
40012b58:	e13ffb17 	ldw	r4,-20(fp)
40012b5c:	e17ffe17 	ldw	r5,-8(fp)
40012b60:	180d883a 	mov	r6,r3
40012b64:	103ee83a 	callr	r2
40012b68:	e0bffc15 	stw	r2,-16(fp)
40012b6c:	e0bffc17 	ldw	r2,-16(fp)
40012b70:	1000070e 	bge	r2,zero,40012b90 <read+0xb8>
        {
          ALT_ERRNO = -rval;
40012b74:	0012a880 	call	40012a88 <alt_get_errno>
40012b78:	1007883a 	mov	r3,r2
40012b7c:	e0bffc17 	ldw	r2,-16(fp)
40012b80:	0085c83a 	sub	r2,zero,r2
40012b84:	18800015 	stw	r2,0(r3)
          return -1;
40012b88:	00bfffc4 	movi	r2,-1
40012b8c:	00000c06 	br	40012bc0 <read+0xe8>
        }
        return rval;
40012b90:	e0bffc17 	ldw	r2,-16(fp)
40012b94:	00000a06 	br	40012bc0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
40012b98:	0012a880 	call	40012a88 <alt_get_errno>
40012b9c:	1007883a 	mov	r3,r2
40012ba0:	00800344 	movi	r2,13
40012ba4:	18800015 	stw	r2,0(r3)
40012ba8:	00000406 	br	40012bbc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
40012bac:	0012a880 	call	40012a88 <alt_get_errno>
40012bb0:	1007883a 	mov	r3,r2
40012bb4:	00801444 	movi	r2,81
40012bb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
40012bbc:	00bfffc4 	movi	r2,-1
}
40012bc0:	e037883a 	mov	sp,fp
40012bc4:	dfc00117 	ldw	ra,4(sp)
40012bc8:	df000017 	ldw	fp,0(sp)
40012bcc:	dec00204 	addi	sp,sp,8
40012bd0:	f800283a 	ret

40012bd4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
40012bd4:	defffe04 	addi	sp,sp,-8
40012bd8:	df000115 	stw	fp,4(sp)
40012bdc:	df000104 	addi	fp,sp,4
40012be0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
40012be4:	e0bfff17 	ldw	r2,-4(fp)
40012be8:	108000d0 	cmplti	r2,r2,3
40012bec:	10000d1e 	bne	r2,zero,40012c24 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
40012bf0:	00900074 	movhi	r2,16385
40012bf4:	10968204 	addi	r2,r2,23048
40012bf8:	e0ffff17 	ldw	r3,-4(fp)
40012bfc:	18c00324 	muli	r3,r3,12
40012c00:	10c5883a 	add	r2,r2,r3
40012c04:	10800204 	addi	r2,r2,8
40012c08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
40012c0c:	00900074 	movhi	r2,16385
40012c10:	10968204 	addi	r2,r2,23048
40012c14:	e0ffff17 	ldw	r3,-4(fp)
40012c18:	18c00324 	muli	r3,r3,12
40012c1c:	10c5883a 	add	r2,r2,r3
40012c20:	10000015 	stw	zero,0(r2)
  }
}
40012c24:	e037883a 	mov	sp,fp
40012c28:	df000017 	ldw	fp,0(sp)
40012c2c:	dec00104 	addi	sp,sp,4
40012c30:	f800283a 	ret

40012c34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
40012c34:	defff904 	addi	sp,sp,-28
40012c38:	df000615 	stw	fp,24(sp)
40012c3c:	df000604 	addi	fp,sp,24
40012c40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40012c44:	0005303a 	rdctl	r2,status
40012c48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40012c4c:	e0fffc17 	ldw	r3,-16(fp)
40012c50:	00bfff84 	movi	r2,-2
40012c54:	1884703a 	and	r2,r3,r2
40012c58:	1001703a 	wrctl	status,r2
  
  return context;
40012c5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
40012c60:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
40012c64:	d0a03417 	ldw	r2,-32560(gp)
40012c68:	10c000c4 	addi	r3,r2,3
40012c6c:	00bfff04 	movi	r2,-4
40012c70:	1884703a 	and	r2,r3,r2
40012c74:	d0a03415 	stw	r2,-32560(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
40012c78:	d0e03417 	ldw	r3,-32560(gp)
40012c7c:	e0bfff17 	ldw	r2,-4(fp)
40012c80:	1887883a 	add	r3,r3,r2
40012c84:	00a00034 	movhi	r2,32768
40012c88:	10800004 	addi	r2,r2,0
40012c8c:	10c0062e 	bgeu	r2,r3,40012ca8 <sbrk+0x74>
40012c90:	e0bffa17 	ldw	r2,-24(fp)
40012c94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40012c98:	e0bffd17 	ldw	r2,-12(fp)
40012c9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
40012ca0:	00bfffc4 	movi	r2,-1
40012ca4:	00000b06 	br	40012cd4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
40012ca8:	d0a03417 	ldw	r2,-32560(gp)
40012cac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
40012cb0:	d0e03417 	ldw	r3,-32560(gp)
40012cb4:	e0bfff17 	ldw	r2,-4(fp)
40012cb8:	1885883a 	add	r2,r3,r2
40012cbc:	d0a03415 	stw	r2,-32560(gp)
40012cc0:	e0bffa17 	ldw	r2,-24(fp)
40012cc4:	e0bffe15 	stw	r2,-8(fp)
40012cc8:	e0bffe17 	ldw	r2,-8(fp)
40012ccc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
40012cd0:	e0bffb17 	ldw	r2,-20(fp)
} 
40012cd4:	e037883a 	mov	sp,fp
40012cd8:	df000017 	ldw	fp,0(sp)
40012cdc:	dec00104 	addi	sp,sp,4
40012ce0:	f800283a 	ret

40012ce4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
40012ce4:	defffa04 	addi	sp,sp,-24
40012ce8:	df000515 	stw	fp,20(sp)
40012cec:	df000504 	addi	fp,sp,20
40012cf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40012cf4:	0005303a 	rdctl	r2,status
40012cf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40012cfc:	e0fffc17 	ldw	r3,-16(fp)
40012d00:	00bfff84 	movi	r2,-2
40012d04:	1884703a 	and	r2,r3,r2
40012d08:	1001703a 	wrctl	status,r2
  
  return context;
40012d0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
40012d10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
40012d14:	e0bfff17 	ldw	r2,-4(fp)
40012d18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
40012d1c:	e0bffd17 	ldw	r2,-12(fp)
40012d20:	10800017 	ldw	r2,0(r2)
40012d24:	e0fffd17 	ldw	r3,-12(fp)
40012d28:	18c00117 	ldw	r3,4(r3)
40012d2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
40012d30:	e0bffd17 	ldw	r2,-12(fp)
40012d34:	10800117 	ldw	r2,4(r2)
40012d38:	e0fffd17 	ldw	r3,-12(fp)
40012d3c:	18c00017 	ldw	r3,0(r3)
40012d40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
40012d44:	e0bffd17 	ldw	r2,-12(fp)
40012d48:	e0fffd17 	ldw	r3,-12(fp)
40012d4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
40012d50:	e0bffd17 	ldw	r2,-12(fp)
40012d54:	e0fffd17 	ldw	r3,-12(fp)
40012d58:	10c00015 	stw	r3,0(r2)
40012d5c:	e0bffb17 	ldw	r2,-20(fp)
40012d60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40012d64:	e0bffe17 	ldw	r2,-8(fp)
40012d68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
40012d6c:	e037883a 	mov	sp,fp
40012d70:	df000017 	ldw	fp,0(sp)
40012d74:	dec00104 	addi	sp,sp,4
40012d78:	f800283a 	ret

40012d7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
40012d7c:	defffb04 	addi	sp,sp,-20
40012d80:	dfc00415 	stw	ra,16(sp)
40012d84:	df000315 	stw	fp,12(sp)
40012d88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
40012d8c:	d0a03517 	ldw	r2,-32556(gp)
40012d90:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
40012d94:	d0a72d17 	ldw	r2,-25420(gp)
40012d98:	10800044 	addi	r2,r2,1
40012d9c:	d0a72d15 	stw	r2,-25420(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
40012da0:	00002e06 	br	40012e5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
40012da4:	e0bffd17 	ldw	r2,-12(fp)
40012da8:	10800017 	ldw	r2,0(r2)
40012dac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
40012db0:	e0bffd17 	ldw	r2,-12(fp)
40012db4:	10800403 	ldbu	r2,16(r2)
40012db8:	10803fcc 	andi	r2,r2,255
40012dbc:	10000426 	beq	r2,zero,40012dd0 <alt_tick+0x54>
40012dc0:	d0a72d17 	ldw	r2,-25420(gp)
40012dc4:	1000021e 	bne	r2,zero,40012dd0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
40012dc8:	e0bffd17 	ldw	r2,-12(fp)
40012dcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
40012dd0:	e0bffd17 	ldw	r2,-12(fp)
40012dd4:	10800217 	ldw	r2,8(r2)
40012dd8:	d0e72d17 	ldw	r3,-25420(gp)
40012ddc:	18801d36 	bltu	r3,r2,40012e54 <alt_tick+0xd8>
40012de0:	e0bffd17 	ldw	r2,-12(fp)
40012de4:	10800403 	ldbu	r2,16(r2)
40012de8:	10803fcc 	andi	r2,r2,255
40012dec:	1000191e 	bne	r2,zero,40012e54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
40012df0:	e0bffd17 	ldw	r2,-12(fp)
40012df4:	10800317 	ldw	r2,12(r2)
40012df8:	e0fffd17 	ldw	r3,-12(fp)
40012dfc:	18c00517 	ldw	r3,20(r3)
40012e00:	1809883a 	mov	r4,r3
40012e04:	103ee83a 	callr	r2
40012e08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
40012e0c:	e0bfff17 	ldw	r2,-4(fp)
40012e10:	1000031e 	bne	r2,zero,40012e20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
40012e14:	e13ffd17 	ldw	r4,-12(fp)
40012e18:	0012ce40 	call	40012ce4 <alt_alarm_stop>
40012e1c:	00000d06 	br	40012e54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
40012e20:	e0bffd17 	ldw	r2,-12(fp)
40012e24:	10c00217 	ldw	r3,8(r2)
40012e28:	e0bfff17 	ldw	r2,-4(fp)
40012e2c:	1887883a 	add	r3,r3,r2
40012e30:	e0bffd17 	ldw	r2,-12(fp)
40012e34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
40012e38:	e0bffd17 	ldw	r2,-12(fp)
40012e3c:	10c00217 	ldw	r3,8(r2)
40012e40:	d0a72d17 	ldw	r2,-25420(gp)
40012e44:	1880032e 	bgeu	r3,r2,40012e54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
40012e48:	e0bffd17 	ldw	r2,-12(fp)
40012e4c:	00c00044 	movi	r3,1
40012e50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
40012e54:	e0bffe17 	ldw	r2,-8(fp)
40012e58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
40012e5c:	e0fffd17 	ldw	r3,-12(fp)
40012e60:	d0a03504 	addi	r2,gp,-32556
40012e64:	18bfcf1e 	bne	r3,r2,40012da4 <__alt_data_end+0xc0012da4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
40012e68:	0001883a 	nop
}
40012e6c:	e037883a 	mov	sp,fp
40012e70:	dfc00117 	ldw	ra,4(sp)
40012e74:	df000017 	ldw	fp,0(sp)
40012e78:	dec00204 	addi	sp,sp,8
40012e7c:	f800283a 	ret

40012e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40012e80:	defffe04 	addi	sp,sp,-8
40012e84:	dfc00115 	stw	ra,4(sp)
40012e88:	df000015 	stw	fp,0(sp)
40012e8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40012e90:	00900074 	movhi	r2,16385
40012e94:	109b2d04 	addi	r2,r2,27828
40012e98:	10800017 	ldw	r2,0(r2)
40012e9c:	10000526 	beq	r2,zero,40012eb4 <alt_get_errno+0x34>
40012ea0:	00900074 	movhi	r2,16385
40012ea4:	109b2d04 	addi	r2,r2,27828
40012ea8:	10800017 	ldw	r2,0(r2)
40012eac:	103ee83a 	callr	r2
40012eb0:	00000206 	br	40012ebc <alt_get_errno+0x3c>
40012eb4:	009000b4 	movhi	r2,16386
40012eb8:	10a21f04 	addi	r2,r2,-30596
}
40012ebc:	e037883a 	mov	sp,fp
40012ec0:	dfc00117 	ldw	ra,4(sp)
40012ec4:	df000017 	ldw	fp,0(sp)
40012ec8:	dec00204 	addi	sp,sp,8
40012ecc:	f800283a 	ret

40012ed0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
40012ed0:	defff904 	addi	sp,sp,-28
40012ed4:	dfc00615 	stw	ra,24(sp)
40012ed8:	df000515 	stw	fp,20(sp)
40012edc:	df000504 	addi	fp,sp,20
40012ee0:	e13ffd15 	stw	r4,-12(fp)
40012ee4:	e17ffe15 	stw	r5,-8(fp)
40012ee8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40012eec:	e0bffd17 	ldw	r2,-12(fp)
40012ef0:	10000616 	blt	r2,zero,40012f0c <write+0x3c>
40012ef4:	e0bffd17 	ldw	r2,-12(fp)
40012ef8:	10c00324 	muli	r3,r2,12
40012efc:	00900074 	movhi	r2,16385
40012f00:	10968204 	addi	r2,r2,23048
40012f04:	1885883a 	add	r2,r3,r2
40012f08:	00000106 	br	40012f10 <write+0x40>
40012f0c:	0005883a 	mov	r2,zero
40012f10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
40012f14:	e0bffb17 	ldw	r2,-20(fp)
40012f18:	10002126 	beq	r2,zero,40012fa0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
40012f1c:	e0bffb17 	ldw	r2,-20(fp)
40012f20:	10800217 	ldw	r2,8(r2)
40012f24:	108000cc 	andi	r2,r2,3
40012f28:	10001826 	beq	r2,zero,40012f8c <write+0xbc>
40012f2c:	e0bffb17 	ldw	r2,-20(fp)
40012f30:	10800017 	ldw	r2,0(r2)
40012f34:	10800617 	ldw	r2,24(r2)
40012f38:	10001426 	beq	r2,zero,40012f8c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
40012f3c:	e0bffb17 	ldw	r2,-20(fp)
40012f40:	10800017 	ldw	r2,0(r2)
40012f44:	10800617 	ldw	r2,24(r2)
40012f48:	e0ffff17 	ldw	r3,-4(fp)
40012f4c:	e13ffb17 	ldw	r4,-20(fp)
40012f50:	e17ffe17 	ldw	r5,-8(fp)
40012f54:	180d883a 	mov	r6,r3
40012f58:	103ee83a 	callr	r2
40012f5c:	e0bffc15 	stw	r2,-16(fp)
40012f60:	e0bffc17 	ldw	r2,-16(fp)
40012f64:	1000070e 	bge	r2,zero,40012f84 <write+0xb4>
      {
        ALT_ERRNO = -rval;
40012f68:	0012e800 	call	40012e80 <alt_get_errno>
40012f6c:	1007883a 	mov	r3,r2
40012f70:	e0bffc17 	ldw	r2,-16(fp)
40012f74:	0085c83a 	sub	r2,zero,r2
40012f78:	18800015 	stw	r2,0(r3)
        return -1;
40012f7c:	00bfffc4 	movi	r2,-1
40012f80:	00000c06 	br	40012fb4 <write+0xe4>
      }
      return rval;
40012f84:	e0bffc17 	ldw	r2,-16(fp)
40012f88:	00000a06 	br	40012fb4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
40012f8c:	0012e800 	call	40012e80 <alt_get_errno>
40012f90:	1007883a 	mov	r3,r2
40012f94:	00800344 	movi	r2,13
40012f98:	18800015 	stw	r2,0(r3)
40012f9c:	00000406 	br	40012fb0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
40012fa0:	0012e800 	call	40012e80 <alt_get_errno>
40012fa4:	1007883a 	mov	r3,r2
40012fa8:	00801444 	movi	r2,81
40012fac:	18800015 	stw	r2,0(r3)
  }
  return -1;
40012fb0:	00bfffc4 	movi	r2,-1
}
40012fb4:	e037883a 	mov	sp,fp
40012fb8:	dfc00117 	ldw	ra,4(sp)
40012fbc:	df000017 	ldw	fp,0(sp)
40012fc0:	dec00204 	addi	sp,sp,8
40012fc4:	f800283a 	ret

40012fc8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
40012fc8:	defffd04 	addi	sp,sp,-12
40012fcc:	dfc00215 	stw	ra,8(sp)
40012fd0:	df000115 	stw	fp,4(sp)
40012fd4:	df000104 	addi	fp,sp,4
40012fd8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
40012fdc:	e13fff17 	ldw	r4,-4(fp)
40012fe0:	01500074 	movhi	r5,16385
40012fe4:	295b2a04 	addi	r5,r5,27816
40012fe8:	0013dac0 	call	40013dac <alt_dev_llist_insert>
}
40012fec:	e037883a 	mov	sp,fp
40012ff0:	dfc00117 	ldw	ra,4(sp)
40012ff4:	df000017 	ldw	fp,0(sp)
40012ff8:	dec00204 	addi	sp,sp,8
40012ffc:	f800283a 	ret

40013000 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
40013000:	defffd04 	addi	sp,sp,-12
40013004:	dfc00215 	stw	ra,8(sp)
40013008:	df000115 	stw	fp,4(sp)
4001300c:	df000104 	addi	fp,sp,4
40013010:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
40013014:	00145b40 	call	400145b4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
40013018:	00800044 	movi	r2,1
4001301c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
40013020:	e037883a 	mov	sp,fp
40013024:	dfc00117 	ldw	ra,4(sp)
40013028:	df000017 	ldw	fp,0(sp)
4001302c:	dec00204 	addi	sp,sp,8
40013030:	f800283a 	ret

40013034 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
40013034:	defffe04 	addi	sp,sp,-8
40013038:	dfc00115 	stw	ra,4(sp)
4001303c:	df000015 	stw	fp,0(sp)
40013040:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_FPGA, timer_FPGA);
40013044:	01000134 	movhi	r4,4
40013048:	000b883a 	mov	r5,zero
4001304c:	01800044 	movi	r6,1
40013050:	01c0fa04 	movi	r7,1000
40013054:	0013b500 	call	40013b50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_FPGA, jtag_uart_FPGA);
40013058:	01100074 	movhi	r4,16385
4001305c:	2116ec04 	addi	r4,r4,23472
40013060:	000b883a 	mov	r5,zero
40013064:	000d883a 	mov	r6,zero
40013068:	00131f40 	call	400131f4 <altera_avalon_jtag_uart_init>
4001306c:	01100074 	movhi	r4,16385
40013070:	2116e204 	addi	r4,r4,23432
40013074:	0012fc80 	call	40012fc8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
40013078:	0001883a 	nop
}
4001307c:	e037883a 	mov	sp,fp
40013080:	dfc00117 	ldw	ra,4(sp)
40013084:	df000017 	ldw	fp,0(sp)
40013088:	dec00204 	addi	sp,sp,8
4001308c:	f800283a 	ret

40013090 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
40013090:	defffa04 	addi	sp,sp,-24
40013094:	dfc00515 	stw	ra,20(sp)
40013098:	df000415 	stw	fp,16(sp)
4001309c:	df000404 	addi	fp,sp,16
400130a0:	e13ffd15 	stw	r4,-12(fp)
400130a4:	e17ffe15 	stw	r5,-8(fp)
400130a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
400130ac:	e0bffd17 	ldw	r2,-12(fp)
400130b0:	10800017 	ldw	r2,0(r2)
400130b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
400130b8:	e0bffc17 	ldw	r2,-16(fp)
400130bc:	10c00a04 	addi	r3,r2,40
400130c0:	e0bffd17 	ldw	r2,-12(fp)
400130c4:	10800217 	ldw	r2,8(r2)
400130c8:	1809883a 	mov	r4,r3
400130cc:	e17ffe17 	ldw	r5,-8(fp)
400130d0:	e1bfff17 	ldw	r6,-4(fp)
400130d4:	100f883a 	mov	r7,r2
400130d8:	00136b80 	call	400136b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
400130dc:	e037883a 	mov	sp,fp
400130e0:	dfc00117 	ldw	ra,4(sp)
400130e4:	df000017 	ldw	fp,0(sp)
400130e8:	dec00204 	addi	sp,sp,8
400130ec:	f800283a 	ret

400130f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
400130f0:	defffa04 	addi	sp,sp,-24
400130f4:	dfc00515 	stw	ra,20(sp)
400130f8:	df000415 	stw	fp,16(sp)
400130fc:	df000404 	addi	fp,sp,16
40013100:	e13ffd15 	stw	r4,-12(fp)
40013104:	e17ffe15 	stw	r5,-8(fp)
40013108:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4001310c:	e0bffd17 	ldw	r2,-12(fp)
40013110:	10800017 	ldw	r2,0(r2)
40013114:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
40013118:	e0bffc17 	ldw	r2,-16(fp)
4001311c:	10c00a04 	addi	r3,r2,40
40013120:	e0bffd17 	ldw	r2,-12(fp)
40013124:	10800217 	ldw	r2,8(r2)
40013128:	1809883a 	mov	r4,r3
4001312c:	e17ffe17 	ldw	r5,-8(fp)
40013130:	e1bfff17 	ldw	r6,-4(fp)
40013134:	100f883a 	mov	r7,r2
40013138:	00138c40 	call	400138c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
4001313c:	e037883a 	mov	sp,fp
40013140:	dfc00117 	ldw	ra,4(sp)
40013144:	df000017 	ldw	fp,0(sp)
40013148:	dec00204 	addi	sp,sp,8
4001314c:	f800283a 	ret

40013150 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
40013150:	defffc04 	addi	sp,sp,-16
40013154:	dfc00315 	stw	ra,12(sp)
40013158:	df000215 	stw	fp,8(sp)
4001315c:	df000204 	addi	fp,sp,8
40013160:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
40013164:	e0bfff17 	ldw	r2,-4(fp)
40013168:	10800017 	ldw	r2,0(r2)
4001316c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
40013170:	e0bffe17 	ldw	r2,-8(fp)
40013174:	10c00a04 	addi	r3,r2,40
40013178:	e0bfff17 	ldw	r2,-4(fp)
4001317c:	10800217 	ldw	r2,8(r2)
40013180:	1809883a 	mov	r4,r3
40013184:	100b883a 	mov	r5,r2
40013188:	00135640 	call	40013564 <altera_avalon_jtag_uart_close>
}
4001318c:	e037883a 	mov	sp,fp
40013190:	dfc00117 	ldw	ra,4(sp)
40013194:	df000017 	ldw	fp,0(sp)
40013198:	dec00204 	addi	sp,sp,8
4001319c:	f800283a 	ret

400131a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
400131a0:	defffa04 	addi	sp,sp,-24
400131a4:	dfc00515 	stw	ra,20(sp)
400131a8:	df000415 	stw	fp,16(sp)
400131ac:	df000404 	addi	fp,sp,16
400131b0:	e13ffd15 	stw	r4,-12(fp)
400131b4:	e17ffe15 	stw	r5,-8(fp)
400131b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
400131bc:	e0bffd17 	ldw	r2,-12(fp)
400131c0:	10800017 	ldw	r2,0(r2)
400131c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
400131c8:	e0bffc17 	ldw	r2,-16(fp)
400131cc:	10800a04 	addi	r2,r2,40
400131d0:	1009883a 	mov	r4,r2
400131d4:	e17ffe17 	ldw	r5,-8(fp)
400131d8:	e1bfff17 	ldw	r6,-4(fp)
400131dc:	00135cc0 	call	400135cc <altera_avalon_jtag_uart_ioctl>
}
400131e0:	e037883a 	mov	sp,fp
400131e4:	dfc00117 	ldw	ra,4(sp)
400131e8:	df000017 	ldw	fp,0(sp)
400131ec:	dec00204 	addi	sp,sp,8
400131f0:	f800283a 	ret

400131f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
400131f4:	defffa04 	addi	sp,sp,-24
400131f8:	dfc00515 	stw	ra,20(sp)
400131fc:	df000415 	stw	fp,16(sp)
40013200:	df000404 	addi	fp,sp,16
40013204:	e13ffd15 	stw	r4,-12(fp)
40013208:	e17ffe15 	stw	r5,-8(fp)
4001320c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
40013210:	e0bffd17 	ldw	r2,-12(fp)
40013214:	00c00044 	movi	r3,1
40013218:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4001321c:	e0bffd17 	ldw	r2,-12(fp)
40013220:	10800017 	ldw	r2,0(r2)
40013224:	10800104 	addi	r2,r2,4
40013228:	1007883a 	mov	r3,r2
4001322c:	e0bffd17 	ldw	r2,-12(fp)
40013230:	10800817 	ldw	r2,32(r2)
40013234:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
40013238:	e0fffe17 	ldw	r3,-8(fp)
4001323c:	e0bfff17 	ldw	r2,-4(fp)
40013240:	d8000015 	stw	zero,0(sp)
40013244:	1809883a 	mov	r4,r3
40013248:	100b883a 	mov	r5,r2
4001324c:	01900074 	movhi	r6,16385
40013250:	318cae04 	addi	r6,r6,12984
40013254:	e1fffd17 	ldw	r7,-12(fp)
40013258:	0013f380 	call	40013f38 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
4001325c:	e0bffd17 	ldw	r2,-12(fp)
40013260:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
40013264:	e0bffd17 	ldw	r2,-12(fp)
40013268:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
4001326c:	009000b4 	movhi	r2,16386
40013270:	10a22604 	addi	r2,r2,-30568
40013274:	10800017 	ldw	r2,0(r2)
40013278:	1809883a 	mov	r4,r3
4001327c:	100b883a 	mov	r5,r2
40013280:	01900074 	movhi	r6,16385
40013284:	318d2f04 	addi	r6,r6,13500
40013288:	e1fffd17 	ldw	r7,-12(fp)
4001328c:	0013bd80 	call	40013bd8 <alt_alarm_start>
40013290:	1000040e 	bge	r2,zero,400132a4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
40013294:	e0fffd17 	ldw	r3,-12(fp)
40013298:	00a00034 	movhi	r2,32768
4001329c:	10bfffc4 	addi	r2,r2,-1
400132a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
400132a4:	e037883a 	mov	sp,fp
400132a8:	dfc00117 	ldw	ra,4(sp)
400132ac:	df000017 	ldw	fp,0(sp)
400132b0:	dec00204 	addi	sp,sp,8
400132b4:	f800283a 	ret

400132b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
400132b8:	defff804 	addi	sp,sp,-32
400132bc:	df000715 	stw	fp,28(sp)
400132c0:	df000704 	addi	fp,sp,28
400132c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
400132c8:	e0bfff17 	ldw	r2,-4(fp)
400132cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
400132d0:	e0bffb17 	ldw	r2,-20(fp)
400132d4:	10800017 	ldw	r2,0(r2)
400132d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
400132dc:	e0bffc17 	ldw	r2,-16(fp)
400132e0:	10800104 	addi	r2,r2,4
400132e4:	10800037 	ldwio	r2,0(r2)
400132e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
400132ec:	e0bffd17 	ldw	r2,-12(fp)
400132f0:	1080c00c 	andi	r2,r2,768
400132f4:	1000011e 	bne	r2,zero,400132fc <altera_avalon_jtag_uart_irq+0x44>
      break;
400132f8:	00006c06 	br	400134ac <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
400132fc:	e0bffd17 	ldw	r2,-12(fp)
40013300:	1080400c 	andi	r2,r2,256
40013304:	10003426 	beq	r2,zero,400133d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
40013308:	00800074 	movhi	r2,1
4001330c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
40013310:	e0bffb17 	ldw	r2,-20(fp)
40013314:	10800a17 	ldw	r2,40(r2)
40013318:	10800044 	addi	r2,r2,1
4001331c:	1081ffcc 	andi	r2,r2,2047
40013320:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
40013324:	e0bffb17 	ldw	r2,-20(fp)
40013328:	10c00b17 	ldw	r3,44(r2)
4001332c:	e0bffe17 	ldw	r2,-8(fp)
40013330:	1880011e 	bne	r3,r2,40013338 <altera_avalon_jtag_uart_irq+0x80>
          break;
40013334:	00001606 	br	40013390 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
40013338:	e0bffc17 	ldw	r2,-16(fp)
4001333c:	10800037 	ldwio	r2,0(r2)
40013340:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
40013344:	e0bff917 	ldw	r2,-28(fp)
40013348:	10a0000c 	andi	r2,r2,32768
4001334c:	1000011e 	bne	r2,zero,40013354 <altera_avalon_jtag_uart_irq+0x9c>
          break;
40013350:	00000f06 	br	40013390 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
40013354:	e0bffb17 	ldw	r2,-20(fp)
40013358:	10800a17 	ldw	r2,40(r2)
4001335c:	e0fff917 	ldw	r3,-28(fp)
40013360:	1809883a 	mov	r4,r3
40013364:	e0fffb17 	ldw	r3,-20(fp)
40013368:	1885883a 	add	r2,r3,r2
4001336c:	10800e04 	addi	r2,r2,56
40013370:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
40013374:	e0bffb17 	ldw	r2,-20(fp)
40013378:	10800a17 	ldw	r2,40(r2)
4001337c:	10800044 	addi	r2,r2,1
40013380:	10c1ffcc 	andi	r3,r2,2047
40013384:	e0bffb17 	ldw	r2,-20(fp)
40013388:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
4001338c:	003fe006 	br	40013310 <__alt_data_end+0xc0013310>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
40013390:	e0bff917 	ldw	r2,-28(fp)
40013394:	10bfffec 	andhi	r2,r2,65535
40013398:	10000f26 	beq	r2,zero,400133d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001339c:	e0bffb17 	ldw	r2,-20(fp)
400133a0:	10c00817 	ldw	r3,32(r2)
400133a4:	00bfff84 	movi	r2,-2
400133a8:	1886703a 	and	r3,r3,r2
400133ac:	e0bffb17 	ldw	r2,-20(fp)
400133b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
400133b4:	e0bffc17 	ldw	r2,-16(fp)
400133b8:	10800104 	addi	r2,r2,4
400133bc:	1007883a 	mov	r3,r2
400133c0:	e0bffb17 	ldw	r2,-20(fp)
400133c4:	10800817 	ldw	r2,32(r2)
400133c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
400133cc:	e0bffc17 	ldw	r2,-16(fp)
400133d0:	10800104 	addi	r2,r2,4
400133d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
400133d8:	e0bffd17 	ldw	r2,-12(fp)
400133dc:	1080800c 	andi	r2,r2,512
400133e0:	10003126 	beq	r2,zero,400134a8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
400133e4:	e0bffd17 	ldw	r2,-12(fp)
400133e8:	1004d43a 	srli	r2,r2,16
400133ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
400133f0:	00001406 	br	40013444 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
400133f4:	e0bffc17 	ldw	r2,-16(fp)
400133f8:	e0fffb17 	ldw	r3,-20(fp)
400133fc:	18c00d17 	ldw	r3,52(r3)
40013400:	e13ffb17 	ldw	r4,-20(fp)
40013404:	20c7883a 	add	r3,r4,r3
40013408:	18c20e04 	addi	r3,r3,2104
4001340c:	18c00003 	ldbu	r3,0(r3)
40013410:	18c03fcc 	andi	r3,r3,255
40013414:	18c0201c 	xori	r3,r3,128
40013418:	18ffe004 	addi	r3,r3,-128
4001341c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
40013420:	e0bffb17 	ldw	r2,-20(fp)
40013424:	10800d17 	ldw	r2,52(r2)
40013428:	10800044 	addi	r2,r2,1
4001342c:	10c1ffcc 	andi	r3,r2,2047
40013430:	e0bffb17 	ldw	r2,-20(fp)
40013434:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
40013438:	e0bffa17 	ldw	r2,-24(fp)
4001343c:	10bfffc4 	addi	r2,r2,-1
40013440:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
40013444:	e0bffa17 	ldw	r2,-24(fp)
40013448:	10000526 	beq	r2,zero,40013460 <altera_avalon_jtag_uart_irq+0x1a8>
4001344c:	e0bffb17 	ldw	r2,-20(fp)
40013450:	10c00d17 	ldw	r3,52(r2)
40013454:	e0bffb17 	ldw	r2,-20(fp)
40013458:	10800c17 	ldw	r2,48(r2)
4001345c:	18bfe51e 	bne	r3,r2,400133f4 <__alt_data_end+0xc00133f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
40013460:	e0bffa17 	ldw	r2,-24(fp)
40013464:	10001026 	beq	r2,zero,400134a8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
40013468:	e0bffb17 	ldw	r2,-20(fp)
4001346c:	10c00817 	ldw	r3,32(r2)
40013470:	00bfff44 	movi	r2,-3
40013474:	1886703a 	and	r3,r3,r2
40013478:	e0bffb17 	ldw	r2,-20(fp)
4001347c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
40013480:	e0bffb17 	ldw	r2,-20(fp)
40013484:	10800017 	ldw	r2,0(r2)
40013488:	10800104 	addi	r2,r2,4
4001348c:	1007883a 	mov	r3,r2
40013490:	e0bffb17 	ldw	r2,-20(fp)
40013494:	10800817 	ldw	r2,32(r2)
40013498:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4001349c:	e0bffc17 	ldw	r2,-16(fp)
400134a0:	10800104 	addi	r2,r2,4
400134a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
400134a8:	003f8c06 	br	400132dc <__alt_data_end+0xc00132dc>
}
400134ac:	e037883a 	mov	sp,fp
400134b0:	df000017 	ldw	fp,0(sp)
400134b4:	dec00104 	addi	sp,sp,4
400134b8:	f800283a 	ret

400134bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
400134bc:	defff804 	addi	sp,sp,-32
400134c0:	df000715 	stw	fp,28(sp)
400134c4:	df000704 	addi	fp,sp,28
400134c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
400134cc:	e0bffb17 	ldw	r2,-20(fp)
400134d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
400134d4:	e0bff917 	ldw	r2,-28(fp)
400134d8:	10800017 	ldw	r2,0(r2)
400134dc:	10800104 	addi	r2,r2,4
400134e0:	10800037 	ldwio	r2,0(r2)
400134e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
400134e8:	e0bffa17 	ldw	r2,-24(fp)
400134ec:	1081000c 	andi	r2,r2,1024
400134f0:	10000b26 	beq	r2,zero,40013520 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
400134f4:	e0bff917 	ldw	r2,-28(fp)
400134f8:	10800017 	ldw	r2,0(r2)
400134fc:	10800104 	addi	r2,r2,4
40013500:	1007883a 	mov	r3,r2
40013504:	e0bff917 	ldw	r2,-28(fp)
40013508:	10800817 	ldw	r2,32(r2)
4001350c:	10810014 	ori	r2,r2,1024
40013510:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
40013514:	e0bff917 	ldw	r2,-28(fp)
40013518:	10000915 	stw	zero,36(r2)
4001351c:	00000a06 	br	40013548 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
40013520:	e0bff917 	ldw	r2,-28(fp)
40013524:	10c00917 	ldw	r3,36(r2)
40013528:	00a00034 	movhi	r2,32768
4001352c:	10bfff04 	addi	r2,r2,-4
40013530:	10c00536 	bltu	r2,r3,40013548 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
40013534:	e0bff917 	ldw	r2,-28(fp)
40013538:	10800917 	ldw	r2,36(r2)
4001353c:	10c00044 	addi	r3,r2,1
40013540:	e0bff917 	ldw	r2,-28(fp)
40013544:	10c00915 	stw	r3,36(r2)
40013548:	009000b4 	movhi	r2,16386
4001354c:	10a22604 	addi	r2,r2,-30568
40013550:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
40013554:	e037883a 	mov	sp,fp
40013558:	df000017 	ldw	fp,0(sp)
4001355c:	dec00104 	addi	sp,sp,4
40013560:	f800283a 	ret

40013564 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
40013564:	defffd04 	addi	sp,sp,-12
40013568:	df000215 	stw	fp,8(sp)
4001356c:	df000204 	addi	fp,sp,8
40013570:	e13ffe15 	stw	r4,-8(fp)
40013574:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
40013578:	00000506 	br	40013590 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
4001357c:	e0bfff17 	ldw	r2,-4(fp)
40013580:	1090000c 	andi	r2,r2,16384
40013584:	10000226 	beq	r2,zero,40013590 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
40013588:	00bffd44 	movi	r2,-11
4001358c:	00000b06 	br	400135bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
40013590:	e0bffe17 	ldw	r2,-8(fp)
40013594:	10c00d17 	ldw	r3,52(r2)
40013598:	e0bffe17 	ldw	r2,-8(fp)
4001359c:	10800c17 	ldw	r2,48(r2)
400135a0:	18800526 	beq	r3,r2,400135b8 <altera_avalon_jtag_uart_close+0x54>
400135a4:	e0bffe17 	ldw	r2,-8(fp)
400135a8:	10c00917 	ldw	r3,36(r2)
400135ac:	e0bffe17 	ldw	r2,-8(fp)
400135b0:	10800117 	ldw	r2,4(r2)
400135b4:	18bff136 	bltu	r3,r2,4001357c <__alt_data_end+0xc001357c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
400135b8:	0005883a 	mov	r2,zero
}
400135bc:	e037883a 	mov	sp,fp
400135c0:	df000017 	ldw	fp,0(sp)
400135c4:	dec00104 	addi	sp,sp,4
400135c8:	f800283a 	ret

400135cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
400135cc:	defffa04 	addi	sp,sp,-24
400135d0:	df000515 	stw	fp,20(sp)
400135d4:	df000504 	addi	fp,sp,20
400135d8:	e13ffd15 	stw	r4,-12(fp)
400135dc:	e17ffe15 	stw	r5,-8(fp)
400135e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
400135e4:	00bff9c4 	movi	r2,-25
400135e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
400135ec:	e0bffe17 	ldw	r2,-8(fp)
400135f0:	10da8060 	cmpeqi	r3,r2,27137
400135f4:	1800031e 	bne	r3,zero,40013604 <altera_avalon_jtag_uart_ioctl+0x38>
400135f8:	109a80a0 	cmpeqi	r2,r2,27138
400135fc:	1000191e 	bne	r2,zero,40013664 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
40013600:	00002806 	br	400136a4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
40013604:	e0bffd17 	ldw	r2,-12(fp)
40013608:	10c00117 	ldw	r3,4(r2)
4001360c:	00a00034 	movhi	r2,32768
40013610:	10bfffc4 	addi	r2,r2,-1
40013614:	18801226 	beq	r3,r2,40013660 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
40013618:	e0bfff17 	ldw	r2,-4(fp)
4001361c:	10800017 	ldw	r2,0(r2)
40013620:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
40013624:	e0bffc17 	ldw	r2,-16(fp)
40013628:	10800090 	cmplti	r2,r2,2
4001362c:	1000061e 	bne	r2,zero,40013648 <altera_avalon_jtag_uart_ioctl+0x7c>
40013630:	e0fffc17 	ldw	r3,-16(fp)
40013634:	00a00034 	movhi	r2,32768
40013638:	10bfffc4 	addi	r2,r2,-1
4001363c:	18800226 	beq	r3,r2,40013648 <altera_avalon_jtag_uart_ioctl+0x7c>
40013640:	e0bffc17 	ldw	r2,-16(fp)
40013644:	00000206 	br	40013650 <altera_avalon_jtag_uart_ioctl+0x84>
40013648:	00a00034 	movhi	r2,32768
4001364c:	10bfff84 	addi	r2,r2,-2
40013650:	e0fffd17 	ldw	r3,-12(fp)
40013654:	18800115 	stw	r2,4(r3)
      rc = 0;
40013658:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
4001365c:	00001106 	br	400136a4 <altera_avalon_jtag_uart_ioctl+0xd8>
40013660:	00001006 	br	400136a4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
40013664:	e0bffd17 	ldw	r2,-12(fp)
40013668:	10c00117 	ldw	r3,4(r2)
4001366c:	00a00034 	movhi	r2,32768
40013670:	10bfffc4 	addi	r2,r2,-1
40013674:	18800a26 	beq	r3,r2,400136a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
40013678:	e0bffd17 	ldw	r2,-12(fp)
4001367c:	10c00917 	ldw	r3,36(r2)
40013680:	e0bffd17 	ldw	r2,-12(fp)
40013684:	10800117 	ldw	r2,4(r2)
40013688:	1885803a 	cmpltu	r2,r3,r2
4001368c:	10c03fcc 	andi	r3,r2,255
40013690:	e0bfff17 	ldw	r2,-4(fp)
40013694:	10c00015 	stw	r3,0(r2)
      rc = 0;
40013698:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
4001369c:	00000006 	br	400136a0 <altera_avalon_jtag_uart_ioctl+0xd4>
400136a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
400136a4:	e0bffb17 	ldw	r2,-20(fp)
}
400136a8:	e037883a 	mov	sp,fp
400136ac:	df000017 	ldw	fp,0(sp)
400136b0:	dec00104 	addi	sp,sp,4
400136b4:	f800283a 	ret

400136b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
400136b8:	defff304 	addi	sp,sp,-52
400136bc:	dfc00c15 	stw	ra,48(sp)
400136c0:	df000b15 	stw	fp,44(sp)
400136c4:	df000b04 	addi	fp,sp,44
400136c8:	e13ffc15 	stw	r4,-16(fp)
400136cc:	e17ffd15 	stw	r5,-12(fp)
400136d0:	e1bffe15 	stw	r6,-8(fp)
400136d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
400136d8:	e0bffd17 	ldw	r2,-12(fp)
400136dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
400136e0:	00004906 	br	40013808 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
400136e4:	e0bffc17 	ldw	r2,-16(fp)
400136e8:	10800a17 	ldw	r2,40(r2)
400136ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
400136f0:	e0bffc17 	ldw	r2,-16(fp)
400136f4:	10800b17 	ldw	r2,44(r2)
400136f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
400136fc:	e0fff717 	ldw	r3,-36(fp)
40013700:	e0bff817 	ldw	r2,-32(fp)
40013704:	18800536 	bltu	r3,r2,4001371c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
40013708:	e0fff717 	ldw	r3,-36(fp)
4001370c:	e0bff817 	ldw	r2,-32(fp)
40013710:	1885c83a 	sub	r2,r3,r2
40013714:	e0bff615 	stw	r2,-40(fp)
40013718:	00000406 	br	4001372c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
4001371c:	00c20004 	movi	r3,2048
40013720:	e0bff817 	ldw	r2,-32(fp)
40013724:	1885c83a 	sub	r2,r3,r2
40013728:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
4001372c:	e0bff617 	ldw	r2,-40(fp)
40013730:	1000011e 	bne	r2,zero,40013738 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
40013734:	00001d06 	br	400137ac <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
40013738:	e0fffe17 	ldw	r3,-8(fp)
4001373c:	e0bff617 	ldw	r2,-40(fp)
40013740:	1880022e 	bgeu	r3,r2,4001374c <altera_avalon_jtag_uart_read+0x94>
        n = space;
40013744:	e0bffe17 	ldw	r2,-8(fp)
40013748:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
4001374c:	e0bff817 	ldw	r2,-32(fp)
40013750:	10800e04 	addi	r2,r2,56
40013754:	e0fffc17 	ldw	r3,-16(fp)
40013758:	1885883a 	add	r2,r3,r2
4001375c:	e13ff517 	ldw	r4,-44(fp)
40013760:	100b883a 	mov	r5,r2
40013764:	e1bff617 	ldw	r6,-40(fp)
40013768:	000de300 	call	4000de30 <memcpy>
      ptr   += n;
4001376c:	e0fff517 	ldw	r3,-44(fp)
40013770:	e0bff617 	ldw	r2,-40(fp)
40013774:	1885883a 	add	r2,r3,r2
40013778:	e0bff515 	stw	r2,-44(fp)
      space -= n;
4001377c:	e0fffe17 	ldw	r3,-8(fp)
40013780:	e0bff617 	ldw	r2,-40(fp)
40013784:	1885c83a 	sub	r2,r3,r2
40013788:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001378c:	e0fff817 	ldw	r3,-32(fp)
40013790:	e0bff617 	ldw	r2,-40(fp)
40013794:	1885883a 	add	r2,r3,r2
40013798:	10c1ffcc 	andi	r3,r2,2047
4001379c:	e0bffc17 	ldw	r2,-16(fp)
400137a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
400137a4:	e0bffe17 	ldw	r2,-8(fp)
400137a8:	00bfce16 	blt	zero,r2,400136e4 <__alt_data_end+0xc00136e4>

    /* If we read any data then return it */
    if (ptr != buffer)
400137ac:	e0fff517 	ldw	r3,-44(fp)
400137b0:	e0bffd17 	ldw	r2,-12(fp)
400137b4:	18800126 	beq	r3,r2,400137bc <altera_avalon_jtag_uart_read+0x104>
      break;
400137b8:	00001506 	br	40013810 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
400137bc:	e0bfff17 	ldw	r2,-4(fp)
400137c0:	1090000c 	andi	r2,r2,16384
400137c4:	10000126 	beq	r2,zero,400137cc <altera_avalon_jtag_uart_read+0x114>
      break;
400137c8:	00001106 	br	40013810 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
400137cc:	0001883a 	nop
400137d0:	e0bffc17 	ldw	r2,-16(fp)
400137d4:	10c00a17 	ldw	r3,40(r2)
400137d8:	e0bff717 	ldw	r2,-36(fp)
400137dc:	1880051e 	bne	r3,r2,400137f4 <altera_avalon_jtag_uart_read+0x13c>
400137e0:	e0bffc17 	ldw	r2,-16(fp)
400137e4:	10c00917 	ldw	r3,36(r2)
400137e8:	e0bffc17 	ldw	r2,-16(fp)
400137ec:	10800117 	ldw	r2,4(r2)
400137f0:	18bff736 	bltu	r3,r2,400137d0 <__alt_data_end+0xc00137d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
400137f4:	e0bffc17 	ldw	r2,-16(fp)
400137f8:	10c00a17 	ldw	r3,40(r2)
400137fc:	e0bff717 	ldw	r2,-36(fp)
40013800:	1880011e 	bne	r3,r2,40013808 <altera_avalon_jtag_uart_read+0x150>
      break;
40013804:	00000206 	br	40013810 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
40013808:	e0bffe17 	ldw	r2,-8(fp)
4001380c:	00bfb516 	blt	zero,r2,400136e4 <__alt_data_end+0xc00136e4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
40013810:	e0fff517 	ldw	r3,-44(fp)
40013814:	e0bffd17 	ldw	r2,-12(fp)
40013818:	18801826 	beq	r3,r2,4001387c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001381c:	0005303a 	rdctl	r2,status
40013820:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40013824:	e0fffa17 	ldw	r3,-24(fp)
40013828:	00bfff84 	movi	r2,-2
4001382c:	1884703a 	and	r2,r3,r2
40013830:	1001703a 	wrctl	status,r2
  
  return context;
40013834:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
40013838:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001383c:	e0bffc17 	ldw	r2,-16(fp)
40013840:	10800817 	ldw	r2,32(r2)
40013844:	10c00054 	ori	r3,r2,1
40013848:	e0bffc17 	ldw	r2,-16(fp)
4001384c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
40013850:	e0bffc17 	ldw	r2,-16(fp)
40013854:	10800017 	ldw	r2,0(r2)
40013858:	10800104 	addi	r2,r2,4
4001385c:	1007883a 	mov	r3,r2
40013860:	e0bffc17 	ldw	r2,-16(fp)
40013864:	10800817 	ldw	r2,32(r2)
40013868:	18800035 	stwio	r2,0(r3)
4001386c:	e0bff917 	ldw	r2,-28(fp)
40013870:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40013874:	e0bffb17 	ldw	r2,-20(fp)
40013878:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
4001387c:	e0fff517 	ldw	r3,-44(fp)
40013880:	e0bffd17 	ldw	r2,-12(fp)
40013884:	18800426 	beq	r3,r2,40013898 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
40013888:	e0fff517 	ldw	r3,-44(fp)
4001388c:	e0bffd17 	ldw	r2,-12(fp)
40013890:	1885c83a 	sub	r2,r3,r2
40013894:	00000606 	br	400138b0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
40013898:	e0bfff17 	ldw	r2,-4(fp)
4001389c:	1090000c 	andi	r2,r2,16384
400138a0:	10000226 	beq	r2,zero,400138ac <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
400138a4:	00bffd44 	movi	r2,-11
400138a8:	00000106 	br	400138b0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
400138ac:	00bffec4 	movi	r2,-5
}
400138b0:	e037883a 	mov	sp,fp
400138b4:	dfc00117 	ldw	ra,4(sp)
400138b8:	df000017 	ldw	fp,0(sp)
400138bc:	dec00204 	addi	sp,sp,8
400138c0:	f800283a 	ret

400138c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
400138c4:	defff304 	addi	sp,sp,-52
400138c8:	dfc00c15 	stw	ra,48(sp)
400138cc:	df000b15 	stw	fp,44(sp)
400138d0:	df000b04 	addi	fp,sp,44
400138d4:	e13ffc15 	stw	r4,-16(fp)
400138d8:	e17ffd15 	stw	r5,-12(fp)
400138dc:	e1bffe15 	stw	r6,-8(fp)
400138e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
400138e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
400138e8:	e0bffd17 	ldw	r2,-12(fp)
400138ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
400138f0:	00003806 	br	400139d4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
400138f4:	e0bffc17 	ldw	r2,-16(fp)
400138f8:	10800c17 	ldw	r2,48(r2)
400138fc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
40013900:	e0bffc17 	ldw	r2,-16(fp)
40013904:	10800d17 	ldw	r2,52(r2)
40013908:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
4001390c:	e0fff817 	ldw	r3,-32(fp)
40013910:	e0bff517 	ldw	r2,-44(fp)
40013914:	1880062e 	bgeu	r3,r2,40013930 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
40013918:	e0fff517 	ldw	r3,-44(fp)
4001391c:	e0bff817 	ldw	r2,-32(fp)
40013920:	1885c83a 	sub	r2,r3,r2
40013924:	10bfffc4 	addi	r2,r2,-1
40013928:	e0bff615 	stw	r2,-40(fp)
4001392c:	00000b06 	br	4001395c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
40013930:	e0bff517 	ldw	r2,-44(fp)
40013934:	10000526 	beq	r2,zero,4001394c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
40013938:	00c20004 	movi	r3,2048
4001393c:	e0bff817 	ldw	r2,-32(fp)
40013940:	1885c83a 	sub	r2,r3,r2
40013944:	e0bff615 	stw	r2,-40(fp)
40013948:	00000406 	br	4001395c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
4001394c:	00c1ffc4 	movi	r3,2047
40013950:	e0bff817 	ldw	r2,-32(fp)
40013954:	1885c83a 	sub	r2,r3,r2
40013958:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
4001395c:	e0bff617 	ldw	r2,-40(fp)
40013960:	1000011e 	bne	r2,zero,40013968 <altera_avalon_jtag_uart_write+0xa4>
        break;
40013964:	00001d06 	br	400139dc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
40013968:	e0fffe17 	ldw	r3,-8(fp)
4001396c:	e0bff617 	ldw	r2,-40(fp)
40013970:	1880022e 	bgeu	r3,r2,4001397c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
40013974:	e0bffe17 	ldw	r2,-8(fp)
40013978:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
4001397c:	e0bff817 	ldw	r2,-32(fp)
40013980:	10820e04 	addi	r2,r2,2104
40013984:	e0fffc17 	ldw	r3,-16(fp)
40013988:	1885883a 	add	r2,r3,r2
4001398c:	1009883a 	mov	r4,r2
40013990:	e17ffd17 	ldw	r5,-12(fp)
40013994:	e1bff617 	ldw	r6,-40(fp)
40013998:	000de300 	call	4000de30 <memcpy>
      ptr   += n;
4001399c:	e0fffd17 	ldw	r3,-12(fp)
400139a0:	e0bff617 	ldw	r2,-40(fp)
400139a4:	1885883a 	add	r2,r3,r2
400139a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
400139ac:	e0fffe17 	ldw	r3,-8(fp)
400139b0:	e0bff617 	ldw	r2,-40(fp)
400139b4:	1885c83a 	sub	r2,r3,r2
400139b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
400139bc:	e0fff817 	ldw	r3,-32(fp)
400139c0:	e0bff617 	ldw	r2,-40(fp)
400139c4:	1885883a 	add	r2,r3,r2
400139c8:	10c1ffcc 	andi	r3,r2,2047
400139cc:	e0bffc17 	ldw	r2,-16(fp)
400139d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
400139d4:	e0bffe17 	ldw	r2,-8(fp)
400139d8:	00bfc616 	blt	zero,r2,400138f4 <__alt_data_end+0xc00138f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
400139dc:	0005303a 	rdctl	r2,status
400139e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
400139e4:	e0fffa17 	ldw	r3,-24(fp)
400139e8:	00bfff84 	movi	r2,-2
400139ec:	1884703a 	and	r2,r3,r2
400139f0:	1001703a 	wrctl	status,r2
  
  return context;
400139f4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
400139f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
400139fc:	e0bffc17 	ldw	r2,-16(fp)
40013a00:	10800817 	ldw	r2,32(r2)
40013a04:	10c00094 	ori	r3,r2,2
40013a08:	e0bffc17 	ldw	r2,-16(fp)
40013a0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
40013a10:	e0bffc17 	ldw	r2,-16(fp)
40013a14:	10800017 	ldw	r2,0(r2)
40013a18:	10800104 	addi	r2,r2,4
40013a1c:	1007883a 	mov	r3,r2
40013a20:	e0bffc17 	ldw	r2,-16(fp)
40013a24:	10800817 	ldw	r2,32(r2)
40013a28:	18800035 	stwio	r2,0(r3)
40013a2c:	e0bff917 	ldw	r2,-28(fp)
40013a30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40013a34:	e0bffb17 	ldw	r2,-20(fp)
40013a38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
40013a3c:	e0bffe17 	ldw	r2,-8(fp)
40013a40:	0080120e 	bge	zero,r2,40013a8c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
40013a44:	e0bfff17 	ldw	r2,-4(fp)
40013a48:	1090000c 	andi	r2,r2,16384
40013a4c:	10000126 	beq	r2,zero,40013a54 <altera_avalon_jtag_uart_write+0x190>
        break;
40013a50:	00001006 	br	40013a94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
40013a54:	0001883a 	nop
40013a58:	e0bffc17 	ldw	r2,-16(fp)
40013a5c:	10c00d17 	ldw	r3,52(r2)
40013a60:	e0bff517 	ldw	r2,-44(fp)
40013a64:	1880051e 	bne	r3,r2,40013a7c <altera_avalon_jtag_uart_write+0x1b8>
40013a68:	e0bffc17 	ldw	r2,-16(fp)
40013a6c:	10c00917 	ldw	r3,36(r2)
40013a70:	e0bffc17 	ldw	r2,-16(fp)
40013a74:	10800117 	ldw	r2,4(r2)
40013a78:	18bff736 	bltu	r3,r2,40013a58 <__alt_data_end+0xc0013a58>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
40013a7c:	e0bffc17 	ldw	r2,-16(fp)
40013a80:	10800917 	ldw	r2,36(r2)
40013a84:	10000126 	beq	r2,zero,40013a8c <altera_avalon_jtag_uart_write+0x1c8>
         break;
40013a88:	00000206 	br	40013a94 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
40013a8c:	e0bffe17 	ldw	r2,-8(fp)
40013a90:	00bf9716 	blt	zero,r2,400138f0 <__alt_data_end+0xc00138f0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
40013a94:	e0fffd17 	ldw	r3,-12(fp)
40013a98:	e0bff717 	ldw	r2,-36(fp)
40013a9c:	18800426 	beq	r3,r2,40013ab0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
40013aa0:	e0fffd17 	ldw	r3,-12(fp)
40013aa4:	e0bff717 	ldw	r2,-36(fp)
40013aa8:	1885c83a 	sub	r2,r3,r2
40013aac:	00000606 	br	40013ac8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
40013ab0:	e0bfff17 	ldw	r2,-4(fp)
40013ab4:	1090000c 	andi	r2,r2,16384
40013ab8:	10000226 	beq	r2,zero,40013ac4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
40013abc:	00bffd44 	movi	r2,-11
40013ac0:	00000106 	br	40013ac8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
40013ac4:	00bffec4 	movi	r2,-5
}
40013ac8:	e037883a 	mov	sp,fp
40013acc:	dfc00117 	ldw	ra,4(sp)
40013ad0:	df000017 	ldw	fp,0(sp)
40013ad4:	dec00204 	addi	sp,sp,8
40013ad8:	f800283a 	ret

40013adc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
40013adc:	defffa04 	addi	sp,sp,-24
40013ae0:	dfc00515 	stw	ra,20(sp)
40013ae4:	df000415 	stw	fp,16(sp)
40013ae8:	df000404 	addi	fp,sp,16
40013aec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
40013af0:	0007883a 	mov	r3,zero
40013af4:	e0bfff17 	ldw	r2,-4(fp)
40013af8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
40013afc:	e0bfff17 	ldw	r2,-4(fp)
40013b00:	10800104 	addi	r2,r2,4
40013b04:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40013b08:	0005303a 	rdctl	r2,status
40013b0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40013b10:	e0fffd17 	ldw	r3,-12(fp)
40013b14:	00bfff84 	movi	r2,-2
40013b18:	1884703a 	and	r2,r3,r2
40013b1c:	1001703a 	wrctl	status,r2
  
  return context;
40013b20:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
40013b24:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
40013b28:	0012d7c0 	call	40012d7c <alt_tick>
40013b2c:	e0bffc17 	ldw	r2,-16(fp)
40013b30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40013b34:	e0bffe17 	ldw	r2,-8(fp)
40013b38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
40013b3c:	e037883a 	mov	sp,fp
40013b40:	dfc00117 	ldw	ra,4(sp)
40013b44:	df000017 	ldw	fp,0(sp)
40013b48:	dec00204 	addi	sp,sp,8
40013b4c:	f800283a 	ret

40013b50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
40013b50:	defff804 	addi	sp,sp,-32
40013b54:	dfc00715 	stw	ra,28(sp)
40013b58:	df000615 	stw	fp,24(sp)
40013b5c:	df000604 	addi	fp,sp,24
40013b60:	e13ffc15 	stw	r4,-16(fp)
40013b64:	e17ffd15 	stw	r5,-12(fp)
40013b68:	e1bffe15 	stw	r6,-8(fp)
40013b6c:	e1ffff15 	stw	r7,-4(fp)
40013b70:	e0bfff17 	ldw	r2,-4(fp)
40013b74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
40013b78:	009000b4 	movhi	r2,16386
40013b7c:	10a22604 	addi	r2,r2,-30568
40013b80:	10800017 	ldw	r2,0(r2)
40013b84:	1000041e 	bne	r2,zero,40013b98 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
40013b88:	009000b4 	movhi	r2,16386
40013b8c:	10a22604 	addi	r2,r2,-30568
40013b90:	e0fffb17 	ldw	r3,-20(fp)
40013b94:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
40013b98:	e0bffc17 	ldw	r2,-16(fp)
40013b9c:	10800104 	addi	r2,r2,4
40013ba0:	00c001c4 	movi	r3,7
40013ba4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
40013ba8:	d8000015 	stw	zero,0(sp)
40013bac:	e13ffd17 	ldw	r4,-12(fp)
40013bb0:	e17ffe17 	ldw	r5,-8(fp)
40013bb4:	01900074 	movhi	r6,16385
40013bb8:	318eb704 	addi	r6,r6,15068
40013bbc:	e1fffc17 	ldw	r7,-16(fp)
40013bc0:	0013f380 	call	40013f38 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
40013bc4:	e037883a 	mov	sp,fp
40013bc8:	dfc00117 	ldw	ra,4(sp)
40013bcc:	df000017 	ldw	fp,0(sp)
40013bd0:	dec00204 	addi	sp,sp,8
40013bd4:	f800283a 	ret

40013bd8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
40013bd8:	defff504 	addi	sp,sp,-44
40013bdc:	df000a15 	stw	fp,40(sp)
40013be0:	df000a04 	addi	fp,sp,40
40013be4:	e13ffc15 	stw	r4,-16(fp)
40013be8:	e17ffd15 	stw	r5,-12(fp)
40013bec:	e1bffe15 	stw	r6,-8(fp)
40013bf0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
40013bf4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
40013bf8:	009000b4 	movhi	r2,16386
40013bfc:	10a22604 	addi	r2,r2,-30568
40013c00:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
40013c04:	10003f26 	beq	r2,zero,40013d04 <alt_alarm_start+0x12c>
  {
    if (alarm)
40013c08:	e0bffc17 	ldw	r2,-16(fp)
40013c0c:	10003b26 	beq	r2,zero,40013cfc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
40013c10:	e0bffc17 	ldw	r2,-16(fp)
40013c14:	e0fffe17 	ldw	r3,-8(fp)
40013c18:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
40013c1c:	e0bffc17 	ldw	r2,-16(fp)
40013c20:	e0ffff17 	ldw	r3,-4(fp)
40013c24:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40013c28:	0005303a 	rdctl	r2,status
40013c2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40013c30:	e0fff817 	ldw	r3,-32(fp)
40013c34:	00bfff84 	movi	r2,-2
40013c38:	1884703a 	and	r2,r3,r2
40013c3c:	1001703a 	wrctl	status,r2
  
  return context;
40013c40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
40013c44:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
40013c48:	009000b4 	movhi	r2,16386
40013c4c:	10a22704 	addi	r2,r2,-30564
40013c50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
40013c54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
40013c58:	e0fffd17 	ldw	r3,-12(fp)
40013c5c:	e0bff617 	ldw	r2,-40(fp)
40013c60:	1885883a 	add	r2,r3,r2
40013c64:	10c00044 	addi	r3,r2,1
40013c68:	e0bffc17 	ldw	r2,-16(fp)
40013c6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
40013c70:	e0bffc17 	ldw	r2,-16(fp)
40013c74:	10c00217 	ldw	r3,8(r2)
40013c78:	e0bff617 	ldw	r2,-40(fp)
40013c7c:	1880042e 	bgeu	r3,r2,40013c90 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
40013c80:	e0bffc17 	ldw	r2,-16(fp)
40013c84:	00c00044 	movi	r3,1
40013c88:	10c00405 	stb	r3,16(r2)
40013c8c:	00000206 	br	40013c98 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
40013c90:	e0bffc17 	ldw	r2,-16(fp)
40013c94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
40013c98:	e0fffc17 	ldw	r3,-16(fp)
40013c9c:	00900074 	movhi	r2,16385
40013ca0:	109b2f04 	addi	r2,r2,27836
40013ca4:	e0bff915 	stw	r2,-28(fp)
40013ca8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
40013cac:	e0bffa17 	ldw	r2,-24(fp)
40013cb0:	e0fff917 	ldw	r3,-28(fp)
40013cb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
40013cb8:	e0bff917 	ldw	r2,-28(fp)
40013cbc:	10c00017 	ldw	r3,0(r2)
40013cc0:	e0bffa17 	ldw	r2,-24(fp)
40013cc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
40013cc8:	e0bff917 	ldw	r2,-28(fp)
40013ccc:	10800017 	ldw	r2,0(r2)
40013cd0:	e0fffa17 	ldw	r3,-24(fp)
40013cd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
40013cd8:	e0bff917 	ldw	r2,-28(fp)
40013cdc:	e0fffa17 	ldw	r3,-24(fp)
40013ce0:	10c00015 	stw	r3,0(r2)
40013ce4:	e0bff717 	ldw	r2,-36(fp)
40013ce8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40013cec:	e0bffb17 	ldw	r2,-20(fp)
40013cf0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
40013cf4:	0005883a 	mov	r2,zero
40013cf8:	00000306 	br	40013d08 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
40013cfc:	00bffa84 	movi	r2,-22
40013d00:	00000106 	br	40013d08 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
40013d04:	00bfde84 	movi	r2,-134
  }
}
40013d08:	e037883a 	mov	sp,fp
40013d0c:	df000017 	ldw	fp,0(sp)
40013d10:	dec00104 	addi	sp,sp,4
40013d14:	f800283a 	ret

40013d18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
40013d18:	defffe04 	addi	sp,sp,-8
40013d1c:	df000115 	stw	fp,4(sp)
40013d20:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
40013d24:	e03fff15 	stw	zero,-4(fp)
40013d28:	00000506 	br	40013d40 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
40013d2c:	e0bfff17 	ldw	r2,-4(fp)
40013d30:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
40013d34:	e0bfff17 	ldw	r2,-4(fp)
40013d38:	10800804 	addi	r2,r2,32
40013d3c:	e0bfff15 	stw	r2,-4(fp)
40013d40:	e0bfff17 	ldw	r2,-4(fp)
40013d44:	10820030 	cmpltui	r2,r2,2048
40013d48:	103ff81e 	bne	r2,zero,40013d2c <__alt_data_end+0xc0013d2c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
40013d4c:	e037883a 	mov	sp,fp
40013d50:	df000017 	ldw	fp,0(sp)
40013d54:	dec00104 	addi	sp,sp,4
40013d58:	f800283a 	ret

40013d5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40013d5c:	defffe04 	addi	sp,sp,-8
40013d60:	dfc00115 	stw	ra,4(sp)
40013d64:	df000015 	stw	fp,0(sp)
40013d68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40013d6c:	00900074 	movhi	r2,16385
40013d70:	109b2d04 	addi	r2,r2,27828
40013d74:	10800017 	ldw	r2,0(r2)
40013d78:	10000526 	beq	r2,zero,40013d90 <alt_get_errno+0x34>
40013d7c:	00900074 	movhi	r2,16385
40013d80:	109b2d04 	addi	r2,r2,27828
40013d84:	10800017 	ldw	r2,0(r2)
40013d88:	103ee83a 	callr	r2
40013d8c:	00000206 	br	40013d98 <alt_get_errno+0x3c>
40013d90:	009000b4 	movhi	r2,16386
40013d94:	10a21f04 	addi	r2,r2,-30596
}
40013d98:	e037883a 	mov	sp,fp
40013d9c:	dfc00117 	ldw	ra,4(sp)
40013da0:	df000017 	ldw	fp,0(sp)
40013da4:	dec00204 	addi	sp,sp,8
40013da8:	f800283a 	ret

40013dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
40013dac:	defffa04 	addi	sp,sp,-24
40013db0:	dfc00515 	stw	ra,20(sp)
40013db4:	df000415 	stw	fp,16(sp)
40013db8:	df000404 	addi	fp,sp,16
40013dbc:	e13ffe15 	stw	r4,-8(fp)
40013dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
40013dc4:	e0bffe17 	ldw	r2,-8(fp)
40013dc8:	10000326 	beq	r2,zero,40013dd8 <alt_dev_llist_insert+0x2c>
40013dcc:	e0bffe17 	ldw	r2,-8(fp)
40013dd0:	10800217 	ldw	r2,8(r2)
40013dd4:	1000061e 	bne	r2,zero,40013df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
40013dd8:	0013d5c0 	call	40013d5c <alt_get_errno>
40013ddc:	1007883a 	mov	r3,r2
40013de0:	00800584 	movi	r2,22
40013de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
40013de8:	00bffa84 	movi	r2,-22
40013dec:	00001306 	br	40013e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
40013df0:	e0bffe17 	ldw	r2,-8(fp)
40013df4:	e0ffff17 	ldw	r3,-4(fp)
40013df8:	e0fffc15 	stw	r3,-16(fp)
40013dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
40013e00:	e0bffd17 	ldw	r2,-12(fp)
40013e04:	e0fffc17 	ldw	r3,-16(fp)
40013e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
40013e0c:	e0bffc17 	ldw	r2,-16(fp)
40013e10:	10c00017 	ldw	r3,0(r2)
40013e14:	e0bffd17 	ldw	r2,-12(fp)
40013e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
40013e1c:	e0bffc17 	ldw	r2,-16(fp)
40013e20:	10800017 	ldw	r2,0(r2)
40013e24:	e0fffd17 	ldw	r3,-12(fp)
40013e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
40013e2c:	e0bffc17 	ldw	r2,-16(fp)
40013e30:	e0fffd17 	ldw	r3,-12(fp)
40013e34:	10c00015 	stw	r3,0(r2)

  return 0;  
40013e38:	0005883a 	mov	r2,zero
}
40013e3c:	e037883a 	mov	sp,fp
40013e40:	dfc00117 	ldw	ra,4(sp)
40013e44:	df000017 	ldw	fp,0(sp)
40013e48:	dec00204 	addi	sp,sp,8
40013e4c:	f800283a 	ret

40013e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
40013e50:	defffd04 	addi	sp,sp,-12
40013e54:	dfc00215 	stw	ra,8(sp)
40013e58:	df000115 	stw	fp,4(sp)
40013e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40013e60:	00900074 	movhi	r2,16385
40013e64:	1092ae04 	addi	r2,r2,19128
40013e68:	e0bfff15 	stw	r2,-4(fp)
40013e6c:	00000606 	br	40013e88 <_do_ctors+0x38>
        (*ctor) (); 
40013e70:	e0bfff17 	ldw	r2,-4(fp)
40013e74:	10800017 	ldw	r2,0(r2)
40013e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40013e7c:	e0bfff17 	ldw	r2,-4(fp)
40013e80:	10bfff04 	addi	r2,r2,-4
40013e84:	e0bfff15 	stw	r2,-4(fp)
40013e88:	e0ffff17 	ldw	r3,-4(fp)
40013e8c:	00900074 	movhi	r2,16385
40013e90:	1092af04 	addi	r2,r2,19132
40013e94:	18bff62e 	bgeu	r3,r2,40013e70 <__alt_data_end+0xc0013e70>
        (*ctor) (); 
}
40013e98:	e037883a 	mov	sp,fp
40013e9c:	dfc00117 	ldw	ra,4(sp)
40013ea0:	df000017 	ldw	fp,0(sp)
40013ea4:	dec00204 	addi	sp,sp,8
40013ea8:	f800283a 	ret

40013eac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
40013eac:	defffd04 	addi	sp,sp,-12
40013eb0:	dfc00215 	stw	ra,8(sp)
40013eb4:	df000115 	stw	fp,4(sp)
40013eb8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40013ebc:	00900074 	movhi	r2,16385
40013ec0:	1092ae04 	addi	r2,r2,19128
40013ec4:	e0bfff15 	stw	r2,-4(fp)
40013ec8:	00000606 	br	40013ee4 <_do_dtors+0x38>
        (*dtor) (); 
40013ecc:	e0bfff17 	ldw	r2,-4(fp)
40013ed0:	10800017 	ldw	r2,0(r2)
40013ed4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40013ed8:	e0bfff17 	ldw	r2,-4(fp)
40013edc:	10bfff04 	addi	r2,r2,-4
40013ee0:	e0bfff15 	stw	r2,-4(fp)
40013ee4:	e0ffff17 	ldw	r3,-4(fp)
40013ee8:	00900074 	movhi	r2,16385
40013eec:	1092af04 	addi	r2,r2,19132
40013ef0:	18bff62e 	bgeu	r3,r2,40013ecc <__alt_data_end+0xc0013ecc>
        (*dtor) (); 
}
40013ef4:	e037883a 	mov	sp,fp
40013ef8:	dfc00117 	ldw	ra,4(sp)
40013efc:	df000017 	ldw	fp,0(sp)
40013f00:	dec00204 	addi	sp,sp,8
40013f04:	f800283a 	ret

40013f08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
40013f08:	defffe04 	addi	sp,sp,-8
40013f0c:	dfc00115 	stw	ra,4(sp)
40013f10:	df000015 	stw	fp,0(sp)
40013f14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
40013f18:	0009883a 	mov	r4,zero
40013f1c:	01440004 	movi	r5,4096
40013f20:	001482c0 	call	4001482c <alt_icache_flush>
#endif
}
40013f24:	e037883a 	mov	sp,fp
40013f28:	dfc00117 	ldw	ra,4(sp)
40013f2c:	df000017 	ldw	fp,0(sp)
40013f30:	dec00204 	addi	sp,sp,8
40013f34:	f800283a 	ret

40013f38 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
40013f38:	defff904 	addi	sp,sp,-28
40013f3c:	dfc00615 	stw	ra,24(sp)
40013f40:	df000515 	stw	fp,20(sp)
40013f44:	df000504 	addi	fp,sp,20
40013f48:	e13ffc15 	stw	r4,-16(fp)
40013f4c:	e17ffd15 	stw	r5,-12(fp)
40013f50:	e1bffe15 	stw	r6,-8(fp)
40013f54:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
40013f58:	e0800217 	ldw	r2,8(fp)
40013f5c:	d8800015 	stw	r2,0(sp)
40013f60:	e13ffc17 	ldw	r4,-16(fp)
40013f64:	e17ffd17 	ldw	r5,-12(fp)
40013f68:	e1bffe17 	ldw	r6,-8(fp)
40013f6c:	e1ffff17 	ldw	r7,-4(fp)
40013f70:	00141180 	call	40014118 <alt_iic_isr_register>
}  
40013f74:	e037883a 	mov	sp,fp
40013f78:	dfc00117 	ldw	ra,4(sp)
40013f7c:	df000017 	ldw	fp,0(sp)
40013f80:	dec00204 	addi	sp,sp,8
40013f84:	f800283a 	ret

40013f88 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
40013f88:	defff904 	addi	sp,sp,-28
40013f8c:	df000615 	stw	fp,24(sp)
40013f90:	df000604 	addi	fp,sp,24
40013f94:	e13ffe15 	stw	r4,-8(fp)
40013f98:	e17fff15 	stw	r5,-4(fp)
40013f9c:	e0bfff17 	ldw	r2,-4(fp)
40013fa0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40013fa4:	0005303a 	rdctl	r2,status
40013fa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40013fac:	e0fffb17 	ldw	r3,-20(fp)
40013fb0:	00bfff84 	movi	r2,-2
40013fb4:	1884703a 	and	r2,r3,r2
40013fb8:	1001703a 	wrctl	status,r2
  
  return context;
40013fbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40013fc0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
40013fc4:	e0bffa17 	ldw	r2,-24(fp)
40013fc8:	00c00044 	movi	r3,1
40013fcc:	1884983a 	sll	r2,r3,r2
40013fd0:	1007883a 	mov	r3,r2
40013fd4:	009000b4 	movhi	r2,16386
40013fd8:	10a22804 	addi	r2,r2,-30560
40013fdc:	10800017 	ldw	r2,0(r2)
40013fe0:	1886b03a 	or	r3,r3,r2
40013fe4:	009000b4 	movhi	r2,16386
40013fe8:	10a22804 	addi	r2,r2,-30560
40013fec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40013ff0:	009000b4 	movhi	r2,16386
40013ff4:	10a22804 	addi	r2,r2,-30560
40013ff8:	10800017 	ldw	r2,0(r2)
40013ffc:	100170fa 	wrctl	ienable,r2
40014000:	e0bffc17 	ldw	r2,-16(fp)
40014004:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40014008:	e0bffd17 	ldw	r2,-12(fp)
4001400c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40014010:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
40014014:	0001883a 	nop
}
40014018:	e037883a 	mov	sp,fp
4001401c:	df000017 	ldw	fp,0(sp)
40014020:	dec00104 	addi	sp,sp,4
40014024:	f800283a 	ret

40014028 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
40014028:	defff904 	addi	sp,sp,-28
4001402c:	df000615 	stw	fp,24(sp)
40014030:	df000604 	addi	fp,sp,24
40014034:	e13ffe15 	stw	r4,-8(fp)
40014038:	e17fff15 	stw	r5,-4(fp)
4001403c:	e0bfff17 	ldw	r2,-4(fp)
40014040:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40014044:	0005303a 	rdctl	r2,status
40014048:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001404c:	e0fffb17 	ldw	r3,-20(fp)
40014050:	00bfff84 	movi	r2,-2
40014054:	1884703a 	and	r2,r3,r2
40014058:	1001703a 	wrctl	status,r2
  
  return context;
4001405c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40014060:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
40014064:	e0bffa17 	ldw	r2,-24(fp)
40014068:	00c00044 	movi	r3,1
4001406c:	1884983a 	sll	r2,r3,r2
40014070:	0084303a 	nor	r2,zero,r2
40014074:	1007883a 	mov	r3,r2
40014078:	009000b4 	movhi	r2,16386
4001407c:	10a22804 	addi	r2,r2,-30560
40014080:	10800017 	ldw	r2,0(r2)
40014084:	1886703a 	and	r3,r3,r2
40014088:	009000b4 	movhi	r2,16386
4001408c:	10a22804 	addi	r2,r2,-30560
40014090:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40014094:	009000b4 	movhi	r2,16386
40014098:	10a22804 	addi	r2,r2,-30560
4001409c:	10800017 	ldw	r2,0(r2)
400140a0:	100170fa 	wrctl	ienable,r2
400140a4:	e0bffc17 	ldw	r2,-16(fp)
400140a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400140ac:	e0bffd17 	ldw	r2,-12(fp)
400140b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
400140b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
400140b8:	0001883a 	nop
}
400140bc:	e037883a 	mov	sp,fp
400140c0:	df000017 	ldw	fp,0(sp)
400140c4:	dec00104 	addi	sp,sp,4
400140c8:	f800283a 	ret

400140cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
400140cc:	defffc04 	addi	sp,sp,-16
400140d0:	df000315 	stw	fp,12(sp)
400140d4:	df000304 	addi	fp,sp,12
400140d8:	e13ffe15 	stw	r4,-8(fp)
400140dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
400140e0:	000530fa 	rdctl	r2,ienable
400140e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
400140e8:	e0bfff17 	ldw	r2,-4(fp)
400140ec:	00c00044 	movi	r3,1
400140f0:	1884983a 	sll	r2,r3,r2
400140f4:	1007883a 	mov	r3,r2
400140f8:	e0bffd17 	ldw	r2,-12(fp)
400140fc:	1884703a 	and	r2,r3,r2
40014100:	1004c03a 	cmpne	r2,r2,zero
40014104:	10803fcc 	andi	r2,r2,255
}
40014108:	e037883a 	mov	sp,fp
4001410c:	df000017 	ldw	fp,0(sp)
40014110:	dec00104 	addi	sp,sp,4
40014114:	f800283a 	ret

40014118 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
40014118:	defff504 	addi	sp,sp,-44
4001411c:	dfc00a15 	stw	ra,40(sp)
40014120:	df000915 	stw	fp,36(sp)
40014124:	df000904 	addi	fp,sp,36
40014128:	e13ffc15 	stw	r4,-16(fp)
4001412c:	e17ffd15 	stw	r5,-12(fp)
40014130:	e1bffe15 	stw	r6,-8(fp)
40014134:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
40014138:	00bffa84 	movi	r2,-22
4001413c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
40014140:	e0bffd17 	ldw	r2,-12(fp)
40014144:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
40014148:	e0bff817 	ldw	r2,-32(fp)
4001414c:	10800808 	cmpgei	r2,r2,32
40014150:	1000271e 	bne	r2,zero,400141f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40014154:	0005303a 	rdctl	r2,status
40014158:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001415c:	e0fffa17 	ldw	r3,-24(fp)
40014160:	00bfff84 	movi	r2,-2
40014164:	1884703a 	and	r2,r3,r2
40014168:	1001703a 	wrctl	status,r2
  
  return context;
4001416c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
40014170:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
40014174:	009001b4 	movhi	r2,16390
40014178:	10907304 	addi	r2,r2,16844
4001417c:	e0fff817 	ldw	r3,-32(fp)
40014180:	180690fa 	slli	r3,r3,3
40014184:	10c5883a 	add	r2,r2,r3
40014188:	e0fffe17 	ldw	r3,-8(fp)
4001418c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
40014190:	009001b4 	movhi	r2,16390
40014194:	10907304 	addi	r2,r2,16844
40014198:	e0fff817 	ldw	r3,-32(fp)
4001419c:	180690fa 	slli	r3,r3,3
400141a0:	10c5883a 	add	r2,r2,r3
400141a4:	10800104 	addi	r2,r2,4
400141a8:	e0ffff17 	ldw	r3,-4(fp)
400141ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
400141b0:	e0bffe17 	ldw	r2,-8(fp)
400141b4:	10000526 	beq	r2,zero,400141cc <alt_iic_isr_register+0xb4>
400141b8:	e0bff817 	ldw	r2,-32(fp)
400141bc:	e13ffc17 	ldw	r4,-16(fp)
400141c0:	100b883a 	mov	r5,r2
400141c4:	0013f880 	call	40013f88 <alt_ic_irq_enable>
400141c8:	00000406 	br	400141dc <alt_iic_isr_register+0xc4>
400141cc:	e0bff817 	ldw	r2,-32(fp)
400141d0:	e13ffc17 	ldw	r4,-16(fp)
400141d4:	100b883a 	mov	r5,r2
400141d8:	00140280 	call	40014028 <alt_ic_irq_disable>
400141dc:	e0bff715 	stw	r2,-36(fp)
400141e0:	e0bff917 	ldw	r2,-28(fp)
400141e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400141e8:	e0bffb17 	ldw	r2,-20(fp)
400141ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
400141f0:	e0bff717 	ldw	r2,-36(fp)
}
400141f4:	e037883a 	mov	sp,fp
400141f8:	dfc00117 	ldw	ra,4(sp)
400141fc:	df000017 	ldw	fp,0(sp)
40014200:	dec00204 	addi	sp,sp,8
40014204:	f800283a 	ret

40014208 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
40014208:	defff904 	addi	sp,sp,-28
4001420c:	dfc00615 	stw	ra,24(sp)
40014210:	df000515 	stw	fp,20(sp)
40014214:	df000504 	addi	fp,sp,20
40014218:	e13ffc15 	stw	r4,-16(fp)
4001421c:	e17ffd15 	stw	r5,-12(fp)
40014220:	e1bffe15 	stw	r6,-8(fp)
40014224:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
40014228:	e13ffd17 	ldw	r4,-12(fp)
4001422c:	e17ffe17 	ldw	r5,-8(fp)
40014230:	e1bfff17 	ldw	r6,-4(fp)
40014234:	001445c0 	call	4001445c <open>
40014238:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
4001423c:	e0bffb17 	ldw	r2,-20(fp)
40014240:	10001c16 	blt	r2,zero,400142b4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
40014244:	00900074 	movhi	r2,16385
40014248:	10968204 	addi	r2,r2,23048
4001424c:	e0fffb17 	ldw	r3,-20(fp)
40014250:	18c00324 	muli	r3,r3,12
40014254:	10c5883a 	add	r2,r2,r3
40014258:	10c00017 	ldw	r3,0(r2)
4001425c:	e0bffc17 	ldw	r2,-16(fp)
40014260:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
40014264:	00900074 	movhi	r2,16385
40014268:	10968204 	addi	r2,r2,23048
4001426c:	e0fffb17 	ldw	r3,-20(fp)
40014270:	18c00324 	muli	r3,r3,12
40014274:	10c5883a 	add	r2,r2,r3
40014278:	10800104 	addi	r2,r2,4
4001427c:	10c00017 	ldw	r3,0(r2)
40014280:	e0bffc17 	ldw	r2,-16(fp)
40014284:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
40014288:	00900074 	movhi	r2,16385
4001428c:	10968204 	addi	r2,r2,23048
40014290:	e0fffb17 	ldw	r3,-20(fp)
40014294:	18c00324 	muli	r3,r3,12
40014298:	10c5883a 	add	r2,r2,r3
4001429c:	10800204 	addi	r2,r2,8
400142a0:	10c00017 	ldw	r3,0(r2)
400142a4:	e0bffc17 	ldw	r2,-16(fp)
400142a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
400142ac:	e13ffb17 	ldw	r4,-20(fp)
400142b0:	0012bd40 	call	40012bd4 <alt_release_fd>
  }
} 
400142b4:	e037883a 	mov	sp,fp
400142b8:	dfc00117 	ldw	ra,4(sp)
400142bc:	df000017 	ldw	fp,0(sp)
400142c0:	dec00204 	addi	sp,sp,8
400142c4:	f800283a 	ret

400142c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
400142c8:	defffb04 	addi	sp,sp,-20
400142cc:	dfc00415 	stw	ra,16(sp)
400142d0:	df000315 	stw	fp,12(sp)
400142d4:	df000304 	addi	fp,sp,12
400142d8:	e13ffd15 	stw	r4,-12(fp)
400142dc:	e17ffe15 	stw	r5,-8(fp)
400142e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
400142e4:	01100074 	movhi	r4,16385
400142e8:	21168504 	addi	r4,r4,23060
400142ec:	e17ffd17 	ldw	r5,-12(fp)
400142f0:	01800044 	movi	r6,1
400142f4:	01c07fc4 	movi	r7,511
400142f8:	00142080 	call	40014208 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
400142fc:	01100074 	movhi	r4,16385
40014300:	21168204 	addi	r4,r4,23048
40014304:	e17ffe17 	ldw	r5,-8(fp)
40014308:	000d883a 	mov	r6,zero
4001430c:	01c07fc4 	movi	r7,511
40014310:	00142080 	call	40014208 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
40014314:	01100074 	movhi	r4,16385
40014318:	21168804 	addi	r4,r4,23072
4001431c:	e17fff17 	ldw	r5,-4(fp)
40014320:	01800044 	movi	r6,1
40014324:	01c07fc4 	movi	r7,511
40014328:	00142080 	call	40014208 <alt_open_fd>
}  
4001432c:	e037883a 	mov	sp,fp
40014330:	dfc00117 	ldw	ra,4(sp)
40014334:	df000017 	ldw	fp,0(sp)
40014338:	dec00204 	addi	sp,sp,8
4001433c:	f800283a 	ret

40014340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40014340:	defffe04 	addi	sp,sp,-8
40014344:	dfc00115 	stw	ra,4(sp)
40014348:	df000015 	stw	fp,0(sp)
4001434c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40014350:	00900074 	movhi	r2,16385
40014354:	109b2d04 	addi	r2,r2,27828
40014358:	10800017 	ldw	r2,0(r2)
4001435c:	10000526 	beq	r2,zero,40014374 <alt_get_errno+0x34>
40014360:	00900074 	movhi	r2,16385
40014364:	109b2d04 	addi	r2,r2,27828
40014368:	10800017 	ldw	r2,0(r2)
4001436c:	103ee83a 	callr	r2
40014370:	00000206 	br	4001437c <alt_get_errno+0x3c>
40014374:	009000b4 	movhi	r2,16386
40014378:	10a21f04 	addi	r2,r2,-30596
}
4001437c:	e037883a 	mov	sp,fp
40014380:	dfc00117 	ldw	ra,4(sp)
40014384:	df000017 	ldw	fp,0(sp)
40014388:	dec00204 	addi	sp,sp,8
4001438c:	f800283a 	ret

40014390 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
40014390:	defffd04 	addi	sp,sp,-12
40014394:	df000215 	stw	fp,8(sp)
40014398:	df000204 	addi	fp,sp,8
4001439c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
400143a0:	e0bfff17 	ldw	r2,-4(fp)
400143a4:	10800217 	ldw	r2,8(r2)
400143a8:	10d00034 	orhi	r3,r2,16384
400143ac:	e0bfff17 	ldw	r2,-4(fp)
400143b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
400143b4:	e03ffe15 	stw	zero,-8(fp)
400143b8:	00001d06 	br	40014430 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
400143bc:	00900074 	movhi	r2,16385
400143c0:	10968204 	addi	r2,r2,23048
400143c4:	e0fffe17 	ldw	r3,-8(fp)
400143c8:	18c00324 	muli	r3,r3,12
400143cc:	10c5883a 	add	r2,r2,r3
400143d0:	10c00017 	ldw	r3,0(r2)
400143d4:	e0bfff17 	ldw	r2,-4(fp)
400143d8:	10800017 	ldw	r2,0(r2)
400143dc:	1880111e 	bne	r3,r2,40014424 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
400143e0:	00900074 	movhi	r2,16385
400143e4:	10968204 	addi	r2,r2,23048
400143e8:	e0fffe17 	ldw	r3,-8(fp)
400143ec:	18c00324 	muli	r3,r3,12
400143f0:	10c5883a 	add	r2,r2,r3
400143f4:	10800204 	addi	r2,r2,8
400143f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
400143fc:	1000090e 	bge	r2,zero,40014424 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
40014400:	e0bffe17 	ldw	r2,-8(fp)
40014404:	10c00324 	muli	r3,r2,12
40014408:	00900074 	movhi	r2,16385
4001440c:	10968204 	addi	r2,r2,23048
40014410:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
40014414:	e0bfff17 	ldw	r2,-4(fp)
40014418:	18800226 	beq	r3,r2,40014424 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
4001441c:	00bffcc4 	movi	r2,-13
40014420:	00000a06 	br	4001444c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40014424:	e0bffe17 	ldw	r2,-8(fp)
40014428:	10800044 	addi	r2,r2,1
4001442c:	e0bffe15 	stw	r2,-8(fp)
40014430:	00900074 	movhi	r2,16385
40014434:	109b2c04 	addi	r2,r2,27824
40014438:	10800017 	ldw	r2,0(r2)
4001443c:	1007883a 	mov	r3,r2
40014440:	e0bffe17 	ldw	r2,-8(fp)
40014444:	18bfdd2e 	bgeu	r3,r2,400143bc <__alt_data_end+0xc00143bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
40014448:	0005883a 	mov	r2,zero
}
4001444c:	e037883a 	mov	sp,fp
40014450:	df000017 	ldw	fp,0(sp)
40014454:	dec00104 	addi	sp,sp,4
40014458:	f800283a 	ret

4001445c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
4001445c:	defff604 	addi	sp,sp,-40
40014460:	dfc00915 	stw	ra,36(sp)
40014464:	df000815 	stw	fp,32(sp)
40014468:	df000804 	addi	fp,sp,32
4001446c:	e13ffd15 	stw	r4,-12(fp)
40014470:	e17ffe15 	stw	r5,-8(fp)
40014474:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
40014478:	00bfffc4 	movi	r2,-1
4001447c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
40014480:	00bffb44 	movi	r2,-19
40014484:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
40014488:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
4001448c:	e13ffd17 	ldw	r4,-12(fp)
40014490:	01500074 	movhi	r5,16385
40014494:	295b2a04 	addi	r5,r5,27816
40014498:	00145d40 	call	400145d4 <alt_find_dev>
4001449c:	e0bff815 	stw	r2,-32(fp)
400144a0:	e0bff817 	ldw	r2,-32(fp)
400144a4:	1000051e 	bne	r2,zero,400144bc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
400144a8:	e13ffd17 	ldw	r4,-12(fp)
400144ac:	00146640 	call	40014664 <alt_find_file>
400144b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
400144b4:	00800044 	movi	r2,1
400144b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
400144bc:	e0bff817 	ldw	r2,-32(fp)
400144c0:	10002926 	beq	r2,zero,40014568 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
400144c4:	e13ff817 	ldw	r4,-32(fp)
400144c8:	00147780 	call	40014778 <alt_get_fd>
400144cc:	e0bff915 	stw	r2,-28(fp)
400144d0:	e0bff917 	ldw	r2,-28(fp)
400144d4:	1000030e 	bge	r2,zero,400144e4 <open+0x88>
    {
      status = index;
400144d8:	e0bff917 	ldw	r2,-28(fp)
400144dc:	e0bffa15 	stw	r2,-24(fp)
400144e0:	00002306 	br	40014570 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
400144e4:	e0bff917 	ldw	r2,-28(fp)
400144e8:	10c00324 	muli	r3,r2,12
400144ec:	00900074 	movhi	r2,16385
400144f0:	10968204 	addi	r2,r2,23048
400144f4:	1885883a 	add	r2,r3,r2
400144f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
400144fc:	e0fffe17 	ldw	r3,-8(fp)
40014500:	00900034 	movhi	r2,16384
40014504:	10bfffc4 	addi	r2,r2,-1
40014508:	1886703a 	and	r3,r3,r2
4001450c:	e0bffc17 	ldw	r2,-16(fp)
40014510:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
40014514:	e0bffb17 	ldw	r2,-20(fp)
40014518:	1000051e 	bne	r2,zero,40014530 <open+0xd4>
4001451c:	e13ffc17 	ldw	r4,-16(fp)
40014520:	00143900 	call	40014390 <alt_file_locked>
40014524:	e0bffa15 	stw	r2,-24(fp)
40014528:	e0bffa17 	ldw	r2,-24(fp)
4001452c:	10001016 	blt	r2,zero,40014570 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
40014530:	e0bff817 	ldw	r2,-32(fp)
40014534:	10800317 	ldw	r2,12(r2)
40014538:	10000826 	beq	r2,zero,4001455c <open+0x100>
4001453c:	e0bff817 	ldw	r2,-32(fp)
40014540:	10800317 	ldw	r2,12(r2)
40014544:	e13ffc17 	ldw	r4,-16(fp)
40014548:	e17ffd17 	ldw	r5,-12(fp)
4001454c:	e1bffe17 	ldw	r6,-8(fp)
40014550:	e1ffff17 	ldw	r7,-4(fp)
40014554:	103ee83a 	callr	r2
40014558:	00000106 	br	40014560 <open+0x104>
4001455c:	0005883a 	mov	r2,zero
40014560:	e0bffa15 	stw	r2,-24(fp)
40014564:	00000206 	br	40014570 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
40014568:	00bffb44 	movi	r2,-19
4001456c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
40014570:	e0bffa17 	ldw	r2,-24(fp)
40014574:	1000090e 	bge	r2,zero,4001459c <open+0x140>
  {
    alt_release_fd (index);  
40014578:	e13ff917 	ldw	r4,-28(fp)
4001457c:	0012bd40 	call	40012bd4 <alt_release_fd>
    ALT_ERRNO = -status;
40014580:	00143400 	call	40014340 <alt_get_errno>
40014584:	1007883a 	mov	r3,r2
40014588:	e0bffa17 	ldw	r2,-24(fp)
4001458c:	0085c83a 	sub	r2,zero,r2
40014590:	18800015 	stw	r2,0(r3)
    return -1;
40014594:	00bfffc4 	movi	r2,-1
40014598:	00000106 	br	400145a0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
4001459c:	e0bff917 	ldw	r2,-28(fp)
}
400145a0:	e037883a 	mov	sp,fp
400145a4:	dfc00117 	ldw	ra,4(sp)
400145a8:	df000017 	ldw	fp,0(sp)
400145ac:	dec00204 	addi	sp,sp,8
400145b0:	f800283a 	ret

400145b4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
400145b4:	deffff04 	addi	sp,sp,-4
400145b8:	df000015 	stw	fp,0(sp)
400145bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
400145c0:	000170fa 	wrctl	ienable,zero
}
400145c4:	e037883a 	mov	sp,fp
400145c8:	df000017 	ldw	fp,0(sp)
400145cc:	dec00104 	addi	sp,sp,4
400145d0:	f800283a 	ret

400145d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
400145d4:	defffa04 	addi	sp,sp,-24
400145d8:	dfc00515 	stw	ra,20(sp)
400145dc:	df000415 	stw	fp,16(sp)
400145e0:	df000404 	addi	fp,sp,16
400145e4:	e13ffe15 	stw	r4,-8(fp)
400145e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
400145ec:	e0bfff17 	ldw	r2,-4(fp)
400145f0:	10800017 	ldw	r2,0(r2)
400145f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
400145f8:	e13ffe17 	ldw	r4,-8(fp)
400145fc:	0008dec0 	call	40008dec <strlen>
40014600:	10800044 	addi	r2,r2,1
40014604:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
40014608:	00000d06 	br	40014640 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
4001460c:	e0bffc17 	ldw	r2,-16(fp)
40014610:	10c00217 	ldw	r3,8(r2)
40014614:	e0bffd17 	ldw	r2,-12(fp)
40014618:	1809883a 	mov	r4,r3
4001461c:	e17ffe17 	ldw	r5,-8(fp)
40014620:	100d883a 	mov	r6,r2
40014624:	00148cc0 	call	400148cc <memcmp>
40014628:	1000021e 	bne	r2,zero,40014634 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
4001462c:	e0bffc17 	ldw	r2,-16(fp)
40014630:	00000706 	br	40014650 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
40014634:	e0bffc17 	ldw	r2,-16(fp)
40014638:	10800017 	ldw	r2,0(r2)
4001463c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
40014640:	e0fffc17 	ldw	r3,-16(fp)
40014644:	e0bfff17 	ldw	r2,-4(fp)
40014648:	18bff01e 	bne	r3,r2,4001460c <__alt_data_end+0xc001460c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
4001464c:	0005883a 	mov	r2,zero
}
40014650:	e037883a 	mov	sp,fp
40014654:	dfc00117 	ldw	ra,4(sp)
40014658:	df000017 	ldw	fp,0(sp)
4001465c:	dec00204 	addi	sp,sp,8
40014660:	f800283a 	ret

40014664 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
40014664:	defffb04 	addi	sp,sp,-20
40014668:	dfc00415 	stw	ra,16(sp)
4001466c:	df000315 	stw	fp,12(sp)
40014670:	df000304 	addi	fp,sp,12
40014674:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
40014678:	00900074 	movhi	r2,16385
4001467c:	109b2804 	addi	r2,r2,27808
40014680:	10800017 	ldw	r2,0(r2)
40014684:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
40014688:	00003106 	br	40014750 <alt_find_file+0xec>
  {
    len = strlen(next->name);
4001468c:	e0bffd17 	ldw	r2,-12(fp)
40014690:	10800217 	ldw	r2,8(r2)
40014694:	1009883a 	mov	r4,r2
40014698:	0008dec0 	call	40008dec <strlen>
4001469c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
400146a0:	e0bffd17 	ldw	r2,-12(fp)
400146a4:	10c00217 	ldw	r3,8(r2)
400146a8:	e0bffe17 	ldw	r2,-8(fp)
400146ac:	10bfffc4 	addi	r2,r2,-1
400146b0:	1885883a 	add	r2,r3,r2
400146b4:	10800003 	ldbu	r2,0(r2)
400146b8:	10803fcc 	andi	r2,r2,255
400146bc:	1080201c 	xori	r2,r2,128
400146c0:	10bfe004 	addi	r2,r2,-128
400146c4:	10800bd8 	cmpnei	r2,r2,47
400146c8:	1000031e 	bne	r2,zero,400146d8 <alt_find_file+0x74>
    {
      len -= 1;
400146cc:	e0bffe17 	ldw	r2,-8(fp)
400146d0:	10bfffc4 	addi	r2,r2,-1
400146d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
400146d8:	e0bffe17 	ldw	r2,-8(fp)
400146dc:	e0ffff17 	ldw	r3,-4(fp)
400146e0:	1885883a 	add	r2,r3,r2
400146e4:	10800003 	ldbu	r2,0(r2)
400146e8:	10803fcc 	andi	r2,r2,255
400146ec:	1080201c 	xori	r2,r2,128
400146f0:	10bfe004 	addi	r2,r2,-128
400146f4:	10800be0 	cmpeqi	r2,r2,47
400146f8:	1000081e 	bne	r2,zero,4001471c <alt_find_file+0xb8>
400146fc:	e0bffe17 	ldw	r2,-8(fp)
40014700:	e0ffff17 	ldw	r3,-4(fp)
40014704:	1885883a 	add	r2,r3,r2
40014708:	10800003 	ldbu	r2,0(r2)
4001470c:	10803fcc 	andi	r2,r2,255
40014710:	1080201c 	xori	r2,r2,128
40014714:	10bfe004 	addi	r2,r2,-128
40014718:	10000a1e 	bne	r2,zero,40014744 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
4001471c:	e0bffd17 	ldw	r2,-12(fp)
40014720:	10c00217 	ldw	r3,8(r2)
40014724:	e0bffe17 	ldw	r2,-8(fp)
40014728:	1809883a 	mov	r4,r3
4001472c:	e17fff17 	ldw	r5,-4(fp)
40014730:	100d883a 	mov	r6,r2
40014734:	00148cc0 	call	400148cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
40014738:	1000021e 	bne	r2,zero,40014744 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
4001473c:	e0bffd17 	ldw	r2,-12(fp)
40014740:	00000806 	br	40014764 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
40014744:	e0bffd17 	ldw	r2,-12(fp)
40014748:	10800017 	ldw	r2,0(r2)
4001474c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
40014750:	e0fffd17 	ldw	r3,-12(fp)
40014754:	00900074 	movhi	r2,16385
40014758:	109b2804 	addi	r2,r2,27808
4001475c:	18bfcb1e 	bne	r3,r2,4001468c <__alt_data_end+0xc001468c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
40014760:	0005883a 	mov	r2,zero
}
40014764:	e037883a 	mov	sp,fp
40014768:	dfc00117 	ldw	ra,4(sp)
4001476c:	df000017 	ldw	fp,0(sp)
40014770:	dec00204 	addi	sp,sp,8
40014774:	f800283a 	ret

40014778 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
40014778:	defffc04 	addi	sp,sp,-16
4001477c:	df000315 	stw	fp,12(sp)
40014780:	df000304 	addi	fp,sp,12
40014784:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
40014788:	00bffa04 	movi	r2,-24
4001478c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
40014790:	e03ffd15 	stw	zero,-12(fp)
40014794:	00001d06 	br	4001480c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
40014798:	00900074 	movhi	r2,16385
4001479c:	10968204 	addi	r2,r2,23048
400147a0:	e0fffd17 	ldw	r3,-12(fp)
400147a4:	18c00324 	muli	r3,r3,12
400147a8:	10c5883a 	add	r2,r2,r3
400147ac:	10800017 	ldw	r2,0(r2)
400147b0:	1000131e 	bne	r2,zero,40014800 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
400147b4:	00900074 	movhi	r2,16385
400147b8:	10968204 	addi	r2,r2,23048
400147bc:	e0fffd17 	ldw	r3,-12(fp)
400147c0:	18c00324 	muli	r3,r3,12
400147c4:	10c5883a 	add	r2,r2,r3
400147c8:	e0ffff17 	ldw	r3,-4(fp)
400147cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
400147d0:	00900074 	movhi	r2,16385
400147d4:	109b2c04 	addi	r2,r2,27824
400147d8:	10c00017 	ldw	r3,0(r2)
400147dc:	e0bffd17 	ldw	r2,-12(fp)
400147e0:	1880040e 	bge	r3,r2,400147f4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
400147e4:	00900074 	movhi	r2,16385
400147e8:	109b2c04 	addi	r2,r2,27824
400147ec:	e0fffd17 	ldw	r3,-12(fp)
400147f0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
400147f4:	e0bffd17 	ldw	r2,-12(fp)
400147f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
400147fc:	00000606 	br	40014818 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
40014800:	e0bffd17 	ldw	r2,-12(fp)
40014804:	10800044 	addi	r2,r2,1
40014808:	e0bffd15 	stw	r2,-12(fp)
4001480c:	e0bffd17 	ldw	r2,-12(fp)
40014810:	10800810 	cmplti	r2,r2,32
40014814:	103fe01e 	bne	r2,zero,40014798 <__alt_data_end+0xc0014798>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
40014818:	e0bffe17 	ldw	r2,-8(fp)
}
4001481c:	e037883a 	mov	sp,fp
40014820:	df000017 	ldw	fp,0(sp)
40014824:	dec00104 	addi	sp,sp,4
40014828:	f800283a 	ret

4001482c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
4001482c:	defffb04 	addi	sp,sp,-20
40014830:	df000415 	stw	fp,16(sp)
40014834:	df000404 	addi	fp,sp,16
40014838:	e13ffe15 	stw	r4,-8(fp)
4001483c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
40014840:	e0bfff17 	ldw	r2,-4(fp)
40014844:	10840070 	cmpltui	r2,r2,4097
40014848:	1000021e 	bne	r2,zero,40014854 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
4001484c:	00840004 	movi	r2,4096
40014850:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
40014854:	e0fffe17 	ldw	r3,-8(fp)
40014858:	e0bfff17 	ldw	r2,-4(fp)
4001485c:	1885883a 	add	r2,r3,r2
40014860:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
40014864:	e0bffe17 	ldw	r2,-8(fp)
40014868:	e0bffc15 	stw	r2,-16(fp)
4001486c:	00000506 	br	40014884 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
40014870:	e0bffc17 	ldw	r2,-16(fp)
40014874:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
40014878:	e0bffc17 	ldw	r2,-16(fp)
4001487c:	10800804 	addi	r2,r2,32
40014880:	e0bffc15 	stw	r2,-16(fp)
40014884:	e0fffc17 	ldw	r3,-16(fp)
40014888:	e0bffd17 	ldw	r2,-12(fp)
4001488c:	18bff836 	bltu	r3,r2,40014870 <__alt_data_end+0xc0014870>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
40014890:	e0bffe17 	ldw	r2,-8(fp)
40014894:	108007cc 	andi	r2,r2,31
40014898:	10000226 	beq	r2,zero,400148a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
4001489c:	e0bffc17 	ldw	r2,-16(fp)
400148a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
400148a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
400148a8:	e037883a 	mov	sp,fp
400148ac:	df000017 	ldw	fp,0(sp)
400148b0:	dec00104 	addi	sp,sp,4
400148b4:	f800283a 	ret

400148b8 <atexit>:
400148b8:	200b883a 	mov	r5,r4
400148bc:	000d883a 	mov	r6,zero
400148c0:	0009883a 	mov	r4,zero
400148c4:	000f883a 	mov	r7,zero
400148c8:	00149481 	jmpi	40014948 <__register_exitproc>

400148cc <memcmp>:
400148cc:	01c000c4 	movi	r7,3
400148d0:	3980192e 	bgeu	r7,r6,40014938 <memcmp+0x6c>
400148d4:	2144b03a 	or	r2,r4,r5
400148d8:	11c4703a 	and	r2,r2,r7
400148dc:	10000f26 	beq	r2,zero,4001491c <memcmp+0x50>
400148e0:	20800003 	ldbu	r2,0(r4)
400148e4:	28c00003 	ldbu	r3,0(r5)
400148e8:	10c0151e 	bne	r2,r3,40014940 <memcmp+0x74>
400148ec:	31bfff84 	addi	r6,r6,-2
400148f0:	01ffffc4 	movi	r7,-1
400148f4:	00000406 	br	40014908 <memcmp+0x3c>
400148f8:	20800003 	ldbu	r2,0(r4)
400148fc:	28c00003 	ldbu	r3,0(r5)
40014900:	31bfffc4 	addi	r6,r6,-1
40014904:	10c00e1e 	bne	r2,r3,40014940 <memcmp+0x74>
40014908:	21000044 	addi	r4,r4,1
4001490c:	29400044 	addi	r5,r5,1
40014910:	31fff91e 	bne	r6,r7,400148f8 <__alt_data_end+0xc00148f8>
40014914:	0005883a 	mov	r2,zero
40014918:	f800283a 	ret
4001491c:	20c00017 	ldw	r3,0(r4)
40014920:	28800017 	ldw	r2,0(r5)
40014924:	1880041e 	bne	r3,r2,40014938 <memcmp+0x6c>
40014928:	31bfff04 	addi	r6,r6,-4
4001492c:	21000104 	addi	r4,r4,4
40014930:	29400104 	addi	r5,r5,4
40014934:	39bff936 	bltu	r7,r6,4001491c <__alt_data_end+0xc001491c>
40014938:	303fe91e 	bne	r6,zero,400148e0 <__alt_data_end+0xc00148e0>
4001493c:	003ff506 	br	40014914 <__alt_data_end+0xc0014914>
40014940:	10c5c83a 	sub	r2,r2,r3
40014944:	f800283a 	ret

40014948 <__register_exitproc>:
40014948:	00900074 	movhi	r2,16385
4001494c:	defffa04 	addi	sp,sp,-24
40014950:	109b2204 	addi	r2,r2,27784
40014954:	dc000315 	stw	r16,12(sp)
40014958:	14000017 	ldw	r16,0(r2)
4001495c:	dc400415 	stw	r17,16(sp)
40014960:	dfc00515 	stw	ra,20(sp)
40014964:	80805217 	ldw	r2,328(r16)
40014968:	2023883a 	mov	r17,r4
4001496c:	10003626 	beq	r2,zero,40014a48 <__register_exitproc+0x100>
40014970:	10c00117 	ldw	r3,4(r2)
40014974:	010007c4 	movi	r4,31
40014978:	20c00e16 	blt	r4,r3,400149b4 <__register_exitproc+0x6c>
4001497c:	1a400044 	addi	r9,r3,1
40014980:	8800211e 	bne	r17,zero,40014a08 <__register_exitproc+0xc0>
40014984:	18c00084 	addi	r3,r3,2
40014988:	18c7883a 	add	r3,r3,r3
4001498c:	18c7883a 	add	r3,r3,r3
40014990:	12400115 	stw	r9,4(r2)
40014994:	10c7883a 	add	r3,r2,r3
40014998:	19400015 	stw	r5,0(r3)
4001499c:	0005883a 	mov	r2,zero
400149a0:	dfc00517 	ldw	ra,20(sp)
400149a4:	dc400417 	ldw	r17,16(sp)
400149a8:	dc000317 	ldw	r16,12(sp)
400149ac:	dec00604 	addi	sp,sp,24
400149b0:	f800283a 	ret
400149b4:	00900034 	movhi	r2,16384
400149b8:	109fcc04 	addi	r2,r2,32560
400149bc:	10002526 	beq	r2,zero,40014a54 <__register_exitproc+0x10c>
400149c0:	01006404 	movi	r4,400
400149c4:	d9400015 	stw	r5,0(sp)
400149c8:	d9800115 	stw	r6,4(sp)
400149cc:	d9c00215 	stw	r7,8(sp)
400149d0:	0007f300 	call	40007f30 <malloc>
400149d4:	d9400017 	ldw	r5,0(sp)
400149d8:	d9800117 	ldw	r6,4(sp)
400149dc:	d9c00217 	ldw	r7,8(sp)
400149e0:	10001c26 	beq	r2,zero,40014a54 <__register_exitproc+0x10c>
400149e4:	80c05217 	ldw	r3,328(r16)
400149e8:	10000115 	stw	zero,4(r2)
400149ec:	02400044 	movi	r9,1
400149f0:	10c00015 	stw	r3,0(r2)
400149f4:	80805215 	stw	r2,328(r16)
400149f8:	10006215 	stw	zero,392(r2)
400149fc:	10006315 	stw	zero,396(r2)
40014a00:	0007883a 	mov	r3,zero
40014a04:	883fdf26 	beq	r17,zero,40014984 <__alt_data_end+0xc0014984>
40014a08:	18d1883a 	add	r8,r3,r3
40014a0c:	4211883a 	add	r8,r8,r8
40014a10:	1211883a 	add	r8,r2,r8
40014a14:	41802215 	stw	r6,136(r8)
40014a18:	01000044 	movi	r4,1
40014a1c:	11806217 	ldw	r6,392(r2)
40014a20:	20c8983a 	sll	r4,r4,r3
40014a24:	310cb03a 	or	r6,r6,r4
40014a28:	11806215 	stw	r6,392(r2)
40014a2c:	41c04215 	stw	r7,264(r8)
40014a30:	01800084 	movi	r6,2
40014a34:	89bfd31e 	bne	r17,r6,40014984 <__alt_data_end+0xc0014984>
40014a38:	11806317 	ldw	r6,396(r2)
40014a3c:	3108b03a 	or	r4,r6,r4
40014a40:	11006315 	stw	r4,396(r2)
40014a44:	003fcf06 	br	40014984 <__alt_data_end+0xc0014984>
40014a48:	80805304 	addi	r2,r16,332
40014a4c:	80805215 	stw	r2,328(r16)
40014a50:	003fc706 	br	40014970 <__alt_data_end+0xc0014970>
40014a54:	00bfffc4 	movi	r2,-1
40014a58:	003fd106 	br	400149a0 <__alt_data_end+0xc00149a0>
40014a5c:	0201ffff 	0x201ffff
40014a60:	ffff0000 	call	4ffff000 <__alt_heap_start+0xff9ad34>
40014a64:	00000201 	jmpi	40000020 <__alt_mem_mem_if_ddr3_emif_FPGA+0x20>
40014a68:	0401ffff 	0x401ffff
40014a6c:	00010000 	call	40001000 <_ZN2NND0Ev+0x18>
40014a70:	010d0bff 	0x10d0bff
40014a74:	01010002 	0x1010002
	...
40014a80:	010d0bff 	0x10d0bff
40014a84:	01010004 	movi	r4,1024
40014a88:	00000100 	call	40000010 <__alt_mem_mem_if_ddr3_emif_FPGA+0x10>
40014a8c:	00000000 	call	40000000 <__alt_mem_mem_if_ddr3_emif_FPGA>
40014a90:	01110bff 	0x1110bff
40014a94:	01010004 	movi	r4,1024
40014a98:	7f000105 	stb	fp,4(r15)
40014a9c:	007d0000 	call	4007d000 <__alt_heap_start+0x18d34>
	...
40014aa8:	010d0bff 	0x10d0bff
40014aac:	7f010002 	0x7f010002
40014ab0:	00000000 	call	40000000 <__alt_mem_mem_if_ddr3_emif_FPGA>
40014ab4:	40014cc0 	call	440014cc <__alt_heap_start+0x3f9d200>
40014ab8:	00000001 	jmpi	40000000 <__alt_mem_mem_if_ddr3_emif_FPGA>
