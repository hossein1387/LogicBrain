#!/usr/bin/env python

import numpy as np
import os
import sys
import argparse
import subprocess
import utility as util
#=======================================================================
# Globals
#=======================================================================
#=======================================================================
# Utility Funcs
#=======================================================================

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_img', help='input image in a text file', required=True)
    parser.add_argument('-o', '--output_window', help='Output winows generated by the windows slider', required=True)
    parser.add_argument('-k', '--kernel_size', help='Kernel(window) Size', required=True)
    parser.add_argument('-w', '--input_img_width', help='Input Image width', required=True)
    parser.add_argument('-e', '--input_img_height', help='Input Image height', required=True)
    parser.add_argument('-v', '--verbosity', help='Log print verbosity', required=False)
    args = parser.parse_args()
    return vars(args)

def gen_window(image, w_width, w_height, stride):
    # import ipdb as pdb; pdb.set_trace()
    output_img_size = (image.shape[0]-w_width + 1) * (image.shape[1]-w_height + 1)
    window = np.zeros((output_img_size, w_width, w_height))
    w_cnt = 0
    for x in range(0, image.shape[0] - w_height+1 , stride):
       for y in range(0, image.shape[1] - w_width+1, stride):
          window[w_cnt,:,:] = image[x:x + w_width, y:y + w_height]
          w_cnt += 1
    return window

if __name__ == '__main__':
    args = parse_args()
    verbosity  = args['verbosity']
    verbosity = verbosity if verbosity != None else "VERB_HIGH"
    input_img_width  = int(args['input_img_width'])
    input_img_height = int(args['input_img_height'])
    kernel_size = int(args['kernel_size'])
    input_img  = open(args['input_img'], "r").read()
    output_window = open(args['output_window'], "r").read()

    util.print_banner("Testing Window Slider Output ", verbosity='VERB_LOW')
    util.print_log("input image: {0} ".format(args['input_img']))
    util.print_log("simulation output: {0} ".format(args['output_window']))
    input_img = input_img.replace("\n", ",").split(",")
    input_img = input_img[:-1]
    input_img = [ int(x) for x in input_img ]
    input_img = np.asarray(input_img)
    input_img = input_img.reshape((input_img_height, input_img_width))
    sw_output = gen_window(image=input_img, w_height=kernel_size, w_width=kernel_size, stride=1)
    output_window = output_window.replace("1'b", "").replace("'{", "").replace("}", "").split("\n")

    total_num_windows = ((input_img_height-kernel_size)+1)*((input_img_width-kernel_size)+1)
    pass_cnt = 0
    fail_cnt = 0
    for idx, window in enumerate(output_window):
        if window != "":
            window = window.replace("\n", ",").split(",")
            window = [ int(x) for x in window ]
            window = np.asarray(window)
            window = window.reshape((kernel_size, kernel_size))
            if (window == sw_output[idx, :, :]).all():
                pass_cnt += 1
            else:
                fail_cnt += 1
            util.print_log("\nExpected Window: \n{0}\ngot:\n {1}\n\n".format(sw_output[idx, :, :], window), verbosity=verbosity)
    if pass_cnt+fail_cnt != total_num_windows:
        util.print_log("Expecting {0} number of windows to be generated but got only {1}".format(total_num_windows, pass_cnt+fail_cnt), id_str="warning",verbosity="VERB_LOW")
    precent = pass_cnt/total_num_windows
    color   = 'green' if precent==1 else "red"
    util.print_log("Final Test Result: {0}/{1} passed!".format(pass_cnt, total_num_windows), id_str="INFO",verbosity="VERB_LOW", color=color)

